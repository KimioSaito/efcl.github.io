{"version":3,"sources":["../src/kuromojin.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;wBACQ,UAAU;;;;oBACd,MAAM;;;;wBACF,YAAY;;;;AACjC,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAChD,IAAM,OAAO,GAAG,EAAC,OAAO,EAAE,kBAAK,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,GAAG,EAAC,CAAC;AACtE,IAAM,QAAQ,GAAG,2BAAc,CAAC;;AAEhC,IAAI,UAAU,GAAG,IAAI,CAAC;;AAEtB,IAAI,SAAS,GAAG,KAAK,CAAC;;AACf,SAAS,YAAY,GAAG;AAC3B,QAAI,UAAU,EAAE;AACZ,eAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;KACtC;AACD,QAAI,SAAS,EAAE;AACX,eAAO,QAAQ,CAAC,OAAO,CAAC;KAC3B;AACD,aAAS,GAAG,IAAI,CAAC;;AAEjB,0BAAS,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE,SAAS,EAAE;AACtD,YAAI,GAAG,EAAE;AACL,mBAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC/B;AACD,kBAAU,GAAG,SAAS,CAAC;AACvB,gBAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC/B,CAAC,CAAC;AACH,WAAO,QAAQ,CAAC,OAAO,CAAC;CAC3B;;AACM,SAAS,QAAQ,CAAC,IAAI,EAAE;AAC3B,WAAO,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,SAAS,EAAI;AACpC,eAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACnC,CAAC,CAAA;CACL;;qBACc,QAAQ","file":"kuromojin.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport kuromoji from \"kuromoji\";\nimport path from \"path\";\nimport Deferred from \"./Deferred\";\nconst kuromojiDir = require.resolve(\"kuromoji\");\nconst options = {dicPath: path.join(kuromojiDir, \"../../dict\") + \"/\"};\nconst deferred = new Deferred();\n// cache for tokenizer\nlet _tokenizer = null;\n// lock boolean\nlet isLoading = false;\nexport function getTokenizer() {\n    if (_tokenizer) {\n        return Promise.resolve(_tokenizer);\n    }\n    if (isLoading) {\n        return deferred.promise;\n    }\n    isLoading = true;\n    // load dict\n    kuromoji.builder(options).build(function (err, tokenizer) {\n        if (err) {\n            return deferred.reject(err);\n        }\n        _tokenizer = tokenizer;\n        deferred.resolve(tokenizer);\n    });\n    return deferred.promise;\n}\nexport function tokenize(text) {\n    return getTokenizer().then(tokenizer => {\n        return tokenizer.tokenize(text);\n    })\n}\nexport default tokenize;"]}