{"version":3,"sources":["../src/no-start-duplicated-conjunction.js"],"names":[],"mappings":";AACA;;AACA;;AACA;;;;;;;;AACA,IAAM,gBAAgB,QAAQ,mBAAR,EAA6B,KAAnD;AACA,IAAM,iBAAiB,QAAQ,mBAAR,EAA6B,MAApD;AACA,IAAM,iBAAiB;AACnB,cAAU;AADS,CAAvB;AAGA,IAAM,cAAc,OAApB;AACA,IAAM,WAAW,MAAjB;AACA,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,WAAO,KAAK,KAAL,CAAW,WAAX,CAAP;AACH;;AAED,SAAS,cAAT,CAAwB,QAAxB,EAAkC;AAC9B,QAAI,UAAU,SAAS,KAAT,CAAe,KAAf,CAAqB,QAArB,CAAd;AACA,QAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB;AACpB,eAAO,QAAQ,CAAR,EAAW,IAAX,EAAP;AACH;AACJ;AACD,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAiC;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAC9C,cAAU,4BAAa,EAAb,EAAiB,cAAjB,EAAiC,OAAjC,CAAV;AACA,QAAM,SAAS,mCAAe,OAAf,CAAf;AACA,QAAM,oBAAoB,2CAA1B;AAH8C,QAIvC,MAJuC,GAIC,OAJD,CAIvC,MAJuC;AAAA,QAI/B,SAJ+B,GAIC,OAJD,CAI/B,SAJ+B;AAAA,QAIpB,MAJoB,GAIC,OAJD,CAIpB,MAJoB;AAAA,QAIZ,SAJY,GAIC,OAJD,CAIZ,SAJY;;AAK9C,QAAI,iBAAiB,EAArB;AACA,QAAI,qBAAqB,KAAzB;AACA,+BACK,OAAO,SADZ,YACuB,IADvB,EAC4B;;AAEpB,YAAM,cAAc,CAChB,OAAO,IADS,EACH,OAAO,IADJ,EACU,eADV,EAC2B,OAAO,KADlC,EACyC,OAAO,UADhD,EAC4D,OAAO,QADnE,CAApB;AAGA,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,WAAzB,CAAJ,EAA2C;AACvC;AACH;AACD,0BAAkB,qBAAlB,CAAwC,IAAxC,EAA8C,WAA9C;AACA,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,YAAM,YAAY,cAAc,IAAd,EAAoB;AAClC,wBAAY;AADsB,SAApB,EAEf,MAFe,CAER,oBAAY;AAClB,mBAAO,SAAS,IAAT,KAAkB,eAAe,QAAxC;AACH,SAJiB,CAAlB;AAKA,kBAAU,OAAV,CAAkB,oBAAY;AAC1B,gBAAM,SAAS,eAAe,QAAf,CAAf;AACA,gBAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AACH;AACD,gBAAI,eAAe,OAAf,CAAuB,MAAvB,MAAmC,CAAC,CAAxC,EAA2C;AACvC,qCAAqB,IAArB;AACH;AACD,gBAAI,kBAAJ,EAAwB;AACpB,oBAAM,qBAAqB,KAAK,KAAL,CAAW,CAAX,IAAgB,SAAS,KAAT,CAAe,CAAf,CAA3C;AACA,oBAAI,CAAC,kBAAkB,cAAlB,CAAiC,kBAAjC,CAAL,EAA2D;AACvD,2BAAO,IAAP,EAAa,IAAI,SAAJ,qBAA+B,MAA/B,cAA6C,QAAQ,QAArD,eAAyE;AAClF,8BAAM,KAAK,GAAL,CAAS,SAAS,GAAT,CAAa,KAAb,CAAmB,IAAnB,GAA0B,CAAnC,EAAsC,CAAtC,CAD4E;AAElF,gCAAQ,SAAS,GAAT,CAAa,KAAb,CAAmB;AAFuD,qBAAzE,CAAb;AAIH;AACD,qCAAqB,KAArB;AACH;;AAED,2BAAe,OAAf,CAAuB,MAAvB;AACA,6BAAiB,eAAe,KAAf,CAAqB,CAArB,EAAwB,QAAQ,QAAhC,CAAjB;AACH,SArBD;AAsBH,KAtCL;AAwCH,CA/CD","file":"no-start-duplicated-conjunction.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper, IgnoreNodeManager} from \"textlint-rule-helper\";\nimport ObjectAssign from \"object-assign\";\nconst splitSentence = require(\"sentence-splitter\").split;\nconst SentenceSyntax = require(\"sentence-splitter\").Syntax;\nconst defaultOptions = {\n    interval: 2\n};\nconst punctuation = /[。\\n]/;\nconst pointing = /[、,]/;\nfunction splitBySentence(text) {\n    return text.split(punctuation);\n}\n// conjunction\nfunction getFirstPhrase(sentence) {\n    var phrases = sentence.value.split(pointing);\n    if (phrases.length > 0) {\n        return phrases[0].trim();\n    }\n}\nmodule.exports = function (context, options = {}) {\n    options = ObjectAssign({}, defaultOptions, options);\n    const helper = new RuleHelper(context);\n    const ignoreNodeManager = new IgnoreNodeManager();\n    const {Syntax, getSource, report, RuleError} = context;\n    let previousPhases = [];\n    let useDuplicatedPhase = false;\n    return {\n        [Syntax.Paragraph](node){\n            // FIXME: linkReference should be defined in TxtAST.\n            const ignoreTypes = [\n                Syntax.Code, Syntax.Link, \"linkReference\", Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis\n            ];\n            if (helper.isChildNode(node, ignoreTypes)) {\n                return;\n            }\n            ignoreNodeManager.ignoreChildrenByTypes(node, ignoreTypes);\n            const text = getSource(node);\n            const sentences = splitSentence(text, {\n                charRegExp: /[。]/\n            }).filter(sentence => {\n                return sentence.type === SentenceSyntax.Sentence;\n            });\n            sentences.forEach(sentence => {\n                const phrase = getFirstPhrase(sentence);\n                if (phrase.length === 0) {\n                    return;\n                }\n                if (previousPhases.indexOf(phrase) !== -1) {\n                    useDuplicatedPhase = true;\n                }\n                if (useDuplicatedPhase) {\n                    const sentenceStartIndex = node.range[0] + sentence.range[0];\n                    if (!ignoreNodeManager.isIgnoredIndex(sentenceStartIndex)) {\n                        report(node, new RuleError(`Don't repeat \"${phrase}\" in ${options.interval} phrases`, {\n                            line: Math.max(sentence.loc.start.line - 1, 0),\n                            column: sentence.loc.start.column\n                        }));\n                    }\n                    useDuplicatedPhase = false;\n                }\n                // add first item\n                previousPhases.unshift(phrase);\n                previousPhases = previousPhases.slice(0, options.interval);\n            });\n        }\n    }\n};"]}