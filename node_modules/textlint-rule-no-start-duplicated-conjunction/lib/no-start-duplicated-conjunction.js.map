{"version":3,"sources":["../src/no-start-duplicated-conjunction.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;kCACY,sBAAsB;;4BACtB,eAAe;;;;AACxC,IAAM,cAAc,GAAG;AACnB,YAAQ,EAAE,CAAC;CACd,CAAC;AACF,IAAM,WAAW,GAAG,OAAO,CAAC;AAC5B,IAAM,QAAQ,GAAG,MAAM,CAAC;AACxB,SAAS,eAAe,CAAC,IAAI,EAAE;AAC3B,WAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;CAClC;;AAED,SAAS,cAAc,CAAC,QAAQ,EAAE;AAC9B,QAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvC,QAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,eAAO,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;KAC5B;CACJ;;qBACc,UAAU,OAAO,EAAgB;QAAd,OAAO,yDAAG,EAAE;;AAC1C,WAAO,GAAG,+BAAa,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AACpD,QAAI,MAAM,GAAG,mCAAe,OAAO,CAAC,CAAC;QAChC,MAAM,GAAgC,OAAO,CAA7C,MAAM;QAAC,SAAS,GAAsB,OAAO,CAAtC,SAAS;QAAE,MAAM,GAAc,OAAO,CAA3B,MAAM;QAAC,SAAS,GAAI,OAAO,CAApB,SAAS;;AACvC,QAAI,cAAc,GAAG,EAAE,CAAC;AACxB,QAAI,kBAAkB,GAAG,KAAK,CAAC;AAC/B,+BACK,MAAM,CAAC,SAAS,EAAC,UAAC,IAAI,EAAC;AACpB,YAAI,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;AAC3F,mBAAO;SACV;;AAED,YAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAI,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;AACtC,iBAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;AAC1B,gBAAI,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;AACtC,gBAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,uBAAO;aACV;AACD,gBAAI,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AACvC,kCAAkB,GAAG,IAAI,CAAC;aAC7B;;AAED,gBAAI,kBAAkB,EAAE;AACpB,sBAAM,CAAC,IAAI,EAAE,IAAI,SAAS,qBAAkB,MAAM,cAAQ,OAAO,CAAC,QAAQ,cAAW,CAAC,CAAC;AACvF,kCAAkB,GAAG,KAAK,CAAC;aAC9B;;AAED,0BAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/B,0BAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC9D,CAAC,CAAC;KACN,EACJ;CACJ","file":"no-start-duplicated-conjunction.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport ObjectAssign from \"object-assign\";\nconst defaultOptions = {\n    interval: 2\n};\nconst punctuation = /[。\\n]/;\nconst pointing = /[、,]/;\nfunction splitBySentence(text) {\n    return text.split(punctuation);\n}\n// conjunction\nfunction getFirstPhrase(sentence) {\n    var phrases = sentence.split(pointing);\n    if (phrases.length > 0) {\n        return phrases[0].trim();\n    }\n}\nexport default function (context, options = {}) {\n    options = ObjectAssign({}, defaultOptions, options);\n    let helper = new RuleHelper(context);\n    let {Syntax,getSource, report,RuleError} = context;\n    var previousPhases = [];\n    var useDuplicatedPhase = false;\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n\n            var text = getSource(node);\n            var sentences = splitBySentence(text);\n            sentences.forEach(sentence => {\n                var phrase = getFirstPhrase(sentence);\n                if (phrase.length === 0) {\n                    return;\n                }\n                if (previousPhases.indexOf(phrase) !== -1) {\n                    useDuplicatedPhase = true;\n                }\n\n                if (useDuplicatedPhase) {\n                    report(node, new RuleError(`don't repeat \"${phrase}\" in ${options.interval} phrases`));\n                    useDuplicatedPhase = false;\n                }\n                // add first item\n                previousPhases.unshift(phrase);\n                previousPhases = previousPhases.slice(0, options.interval);\n            });\n        }\n    }\n}"]}