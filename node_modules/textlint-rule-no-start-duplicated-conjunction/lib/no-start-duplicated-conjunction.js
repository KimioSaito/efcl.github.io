// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _textlintRuleHelper = require("textlint-rule-helper");

var _objectAssign = require("object-assign");

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var defaultOptions = {
    interval: 2
};
var punctuation = /[。\n]/;
var pointing = /[、,]/;
function splitBySentence(text) {
    return text.split(punctuation);
}
// conjunction
function getFirstPhrase(sentence) {
    var phrases = sentence.split(pointing);
    if (phrases.length > 0) {
        return phrases[0].trim();
    }
}

exports["default"] = function (context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    options = (0, _objectAssign2["default"])({}, defaultOptions, options);
    var helper = new _textlintRuleHelper.RuleHelper(context);
    var Syntax = context.Syntax;
    var getSource = context.getSource;
    var report = context.report;
    var RuleError = context.RuleError;

    var previousPhases = [];
    var useDuplicatedPhase = false;
    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }

        var text = getSource(node);
        var sentences = splitBySentence(text);
        sentences.forEach(function (sentence) {
            var phrase = getFirstPhrase(sentence);
            if (phrase.length === 0) {
                return;
            }
            if (previousPhases.indexOf(phrase) !== -1) {
                useDuplicatedPhase = true;
            }

            if (useDuplicatedPhase) {
                report(node, new RuleError("don't repeat \"" + phrase + "\" in " + options.interval + " phrases"));
                useDuplicatedPhase = false;
            }
            // add first item
            previousPhases.unshift(phrase);
            previousPhases = previousPhases.slice(0, options.interval);
        });
    });
};

module.exports = exports["default"];
//# sourceMappingURL=no-start-duplicated-conjunction.js.map