{"version":3,"sources":["../src/textlint-rule-proofdict.js"],"names":["debug","require","RuleHelper","DefaultOptions","dictURL","undefined","dictPath","autoUpdateInterval","whitelistTags","blacklistTags","proofdict","disableProofdictTesterCache","reporter","context","options","helper","Syntax","RuleError","report","getSource","fixer","Document","node","mode","NETWORK","LOCAL","Array","isArray","disableTesterCache","targetNodes","addQueue","push","promiseQueue","lastUpdated","Number","getItem","isExpired","Date","now","jsonAPIURL","URL","then","setItem","JSON","stringify","dictionary","Promise","resolve","Str","tester","promises","map","isChildNode","Link","Image","BlockQuote","Emphasis","text","match","result","details","forEach","matchStartIndex","detail","matchEndIndex","actual","expected","description","rule","url","additionalDescription","additionalReference","messages","index","fix","replaceTextRange","all","module","exports","linter"],"mappings":"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","file":"textlint-rule-proofdict.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst debug = require(\"debug\")(\"textlint-rule-proofdict\");\nconst { RuleHelper } = require(\"textlint-rule-helper\");\nimport { createTester, getDictionary } from \"./create-tester\";\nimport { fetchProofdict } from \"./fetch-proofdict\";\nimport { getDictJSONURL, getRuleURL } from \"./proofdict-repo-util\";\nimport { MODE } from \"./mode\";\nimport { storage } from \"./dictionary-storage\";\n\nconst DefaultOptions = {\n    // If you want to use live-proofdict\n    // Proofdict-style dictionary URL\n    // Example: \"https://example.github.io/proof-dictionary/\"\n    // If you want to specific JSON end point, please pass\n    // `dictURL; { jsonAPI: string, ruleBase: string }`\n    dictURL: undefined,\n    // If you want to use local proofdict\n    // dictPath is glob style path\n    // TODO: Not implement yet\n    dictPath: undefined,\n    // Default: 60sec(60 * 1000ms)\n    autoUpdateInterval: 60 * 1000,\n    // = Tag settings\n    // Filter dictionary by whitelist or blacklist\n    // Default: Enable all terms of the dictionary.\n    // When set both options, this rule prefer whitelist to blacklist\n    whitelistTags: [],\n    blacklistTags: [],\n    // For testing\n    // set you proofdict json object\n    proofdict: undefined,\n    // Disable cache for tester\n    disableProofdictTesterCache: false\n};\n\nconst reporter = (context, options = DefaultOptions) => {\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report, getSource, fixer } = context;\n    if (!options.dictURL && !options.dictPath && !options.proofdict) {\n        return {\n            [Syntax.Document](node) {\n                report(\n                    node,\n                    new RuleError(`Not found dictionary setting.\nPlease set dictURL or dictPath to .textlintrc.`)\n                );\n            }\n        };\n    }\n    const mode = options.dictURL ? MODE.NETWORK : MODE.LOCAL;\n    const whitelistTags = Array.isArray(options.whitelistTags) ? options.whitelistTags : DefaultOptions.whitelistTags;\n    const blacklistTags = Array.isArray(options.blacklistTags) ? options.blacklistTags : DefaultOptions.blacklistTags;\n    const disableTesterCache =\n        options.disableProofdictTesterCache !== undefined\n            ? options.disableProofdictTesterCache\n            : DefaultOptions.disableProofdictTesterCache;\n    const autoUpdateInterval =\n        options.autoUpdateInterval !== undefined ? options.autoUpdateInterval : DefaultOptions.autoUpdateInterval;\n    const targetNodes = [];\n    const addQueue = node => targetNodes.push(node);\n    let promiseQueue = null;\n    return {\n        [Syntax.Document]() {\n            // default: 0\n            const lastUpdated = Number(storage.getItem(\"proofdict-lastUpdated\", \"-1\"));\n            const isExpired = lastUpdated <= 0 ? true : Date.now() - lastUpdated > autoUpdateInterval;\n            if (mode === MODE.NETWORK && isExpired) {\n                const jsonAPIURL = getDictJSONURL(options);\n                promiseQueue = fetchProofdict({ URL: jsonAPIURL }).then(dictionary => {\n                    storage.setItem(\"proofdict\", JSON.stringify(dictionary));\n                    storage.setItem(\"proofdict-lastUpdated\", Date.now());\n                });\n            } else {\n                promiseQueue = Promise.resolve();\n            }\n            return promiseQueue;\n        },\n        [Syntax.Str](node) {\n            addQueue(node);\n        },\n        [`${Syntax.Document}:exit`]() {\n            return promiseQueue.then(() => {\n                const dictionary = getDictionary(options, mode);\n                const lastUpdated = Number(storage.getItem(\"proofdict-lastUpdated\", \"0\"));\n                const tester = createTester({\n                    dictionary,\n                    lastUpdated,\n                    whitelistTags,\n                    blacklistTags,\n                    disableTesterCache\n                });\n                // check\n                const promises = targetNodes.map(node => {\n                    if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                        return;\n                    }\n                    const text = getSource(node);\n                    return tester.match(text).then(result => {\n                        result.details.forEach(detail => {\n                            const { matchStartIndex, matchEndIndex, actual, expected, description, rule } = detail;\n                            // If result is not changed, should not report\n                            if (actual === expected) {\n                                return;\n                            }\n                            const url = getRuleURL(options, rule);\n                            const additionalDescription = description ? `\\n${description}` : \"\";\n                            const additionalReference = url ? `\\nSee ${url}` : \"\";\n                            const messages = actual + \" => \" + expected + additionalDescription + additionalReference;\n                            report(\n                                node,\n                                new RuleError(messages, {\n                                    index: matchStartIndex,\n                                    fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                                })\n                            );\n                        });\n                    });\n                });\n                return Promise.all(promises);\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}