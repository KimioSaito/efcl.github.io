{"version":3,"sources":["../src/fetch-proofdict.js"],"names":["fetchProofdict","fetch","require","debug","delayPromise","ms","Promise","resolve","setTimeout","timeoutPromise","promise","timeout","then","error","Error","name","race","URL","res","ok","json","catch","reject"],"mappings":"AAAA;AACA;;;;;QAmBgBA,c,GAAAA,c;AAlBhB,IAAMC,QAAQC,QAAQ,gBAAR,IAA4BD,KAA1C;AACA,IAAME,QAAQD,QAAQ,OAAR,EAAiB,yBAAjB,CAAd;;AAEA,SAASE,YAAT,CAAsBC,EAAtB,EAA0B;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjCC,mBAAWD,OAAX,EAAoBF,EAApB;AACH,KAFM,CAAP;AAGH;;AAED,SAASI,cAAT,CAAwBC,OAAxB,EAAiCL,EAAjC,EAAqC;AACjC,QAAMM,UAAUP,aAAaC,EAAb,EAAiBO,IAAjB,CAAsB,YAAW;AAC7C,YAAMC,QAAQ,IAAIC,KAAJ,CAAU,+BAA+BT,EAA/B,GAAoC,KAA9C,CAAd;AACAQ,cAAME,IAAN,GAAa,cAAb;AACA,cAAMF,KAAN;AACH,KAJe,CAAhB;AAKA,WAAOP,QAAQU,IAAR,CAAa,CAACN,OAAD,EAAUC,OAAV,CAAb,CAAP;AACH;;AAEM,SAASX,cAAT,OAAiC;AAAA,QAAPiB,GAAO,QAAPA,GAAO;;AACpC,WAAOR,eAAeR,MAAMgB,GAAN,CAAf,EAA2B,IAA3B,EACFL,IADE,CACG,eAAO;AACT,YAAI,CAACM,IAAIC,EAAT,EAAa;AACT,kBAAML,mCAAiCG,GAAjC,CAAN;AACH;AACD,eAAOC,IAAIE,IAAJ,EAAP;AACH,KANE,EAOFC,KAPE,CAOI,iBAAS;AACZ,YAAIR,MAAME,IAAN,KAAe,cAAnB,EAAmC;AAC/BZ,kBAAM,cAAN,EAAsBU,KAAtB;AACA;AACH;AACD,eAAOP,QAAQgB,MAAR,CAAeT,KAAf,CAAP;AACH,KAbE,CAAP;AAcH","file":"fetch-proofdict.js","sourcesContent":["// MIT Â© 2018 azu\n\"use strict\";\nconst fetch = require(\"fetch-ponyfill\")().fetch;\nconst debug = require(\"debug\")(\"textlint-rule-proofdict\");\n\nfunction delayPromise(ms) {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, ms);\n    });\n}\n\nfunction timeoutPromise(promise, ms) {\n    const timeout = delayPromise(ms).then(function() {\n        const error = new Error(\"Operation timed out after \" + ms + \" ms\");\n        error.name = \"TimeoutError\";\n        throw error;\n    });\n    return Promise.race([promise, timeout]);\n}\n\nexport function fetchProofdict({ URL }) {\n    return timeoutPromise(fetch(URL), 5000)\n        .then(res => {\n            if (!res.ok) {\n                throw Error(`Proofdict is not found: ${URL}`);\n            }\n            return res.json();\n        })\n        .catch(error => {\n            if (error.name === \"TimeoutError\") {\n                debug(\"TimeoutError\", error);\n                return;\n            }\n            return Promise.reject(error);\n        });\n}\n"]}