{"version":3,"sources":["../../src/engine/textlint-module-loader.js"],"names":[],"mappings":"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","file":"textlint-module-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst EventEmitter = require(\"events\");\nconst interopRequire = require(\"interop-require\");\nconst debug = require(\"debug\")(\"textlint:module-loader\");\nimport {isPluginRuleKey} from \"../util/config-util\";\nimport {loadFromDir} from \"./rule-loader\";\nimport Logger from \"../util/logger\";\nimport TextLintModuleResolver from \"./textlint-module-resolver\";\n\n/**\n * create entities from plugin/preset\n * entities is a array which contain [key, value]\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n * @param {Object} pluginRules\n * @param {string} prefixKey\n * @returns {Array}\n */\nexport const createEntities = (pluginRules, prefixKey) => {\n    const entities = [];\n    Object.keys(pluginRules).forEach(ruleId => {\n        const qualifiedRuleId = prefixKey + \"/\" + ruleId;\n        const ruleCreator = pluginRules[ruleId];\n        entities.push([qualifiedRuleId, ruleCreator]);\n    });\n    return entities;\n};\nexport default class TextLintModuleLoader extends EventEmitter {\n    static get Event() {\n        return {\n            rule: \"rule\",\n            processor: \"preset\",\n            error: \"error\"\n        };\n    }\n\n    constructor(config) {\n        super();\n        /**\n         * @type {Config} config is need for static prefix value\n         */\n        this.config = config;\n        /**\n         * @type {TextLintModuleResolver}\n         */\n        this.moduleResolver = new TextLintModuleResolver(this.config.constructor, this.config.rulesBaseDirectory);\n    }\n\n    /**\n     * set up lint rules using {@lint Config} object.\n     * The {@lint Config} object was created with initialized {@link TextLintEngine} (as-known Constructor).\n     * @param {Config} config the config is parsed object\n     */\n    loadFromConfig(config) {\n        debug(\"config %O\", config);\n        // --ruledir\n        if (config.rulePaths) {\n            // load in additional rules\n            config.rulePaths.forEach(rulesDir => {\n                debug(\"Loading rules from %o\", rulesDir);\n                const rules = loadFromDir(rulesDir);\n                Object.keys(rules).forEach(ruleName => {\n                    const entry = [ruleName, rules[ruleName]];\n                    this.emit(TextLintModuleLoader.Event.rule, entry);\n                });\n            });\n        }\n        // --rule\n        if (config.rules) {\n            // load in additional rules\n            config.rules.forEach(ruleName => {\n                this.loadRule(ruleName);\n            });\n        }\n        // --preset\n        if (config.presets) {\n            config.presets.forEach(presetName => {\n                this.loadPreset(presetName);\n            });\n        }\n        // --plugin\n        if (config.plugins) {\n            // load in additional rules from plugin\n            config.plugins.forEach(pluginName => {\n                this.loadPlugin(pluginName);\n            });\n        }\n    }\n\n    /**\n     * load rule from plugin name.\n     * plugin module has `rules` object and define rule with plugin prefix.\n     * @param {string} pluginName\n     */\n    loadPlugin(pluginName) {\n        const pkgPath = this.moduleResolver.resolvePluginPackageName(pluginName);\n        debug(\"Loading rules from plugin: %s\", pkgPath);\n        const plugin = interopRequire(pkgPath);\n        const PLUGIN_NAME_PREFIX = this.config.constructor.PLUGIN_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + PLUGIN_NAME_PREFIX);\n        const pluginNameWithoutPrefix = pluginName.replace(prefixMatch, \"\");\n        // Processor plugin doesn't define rules\n        if (plugin.hasOwnProperty(\"rules\")) {\n            const entities = createEntities(plugin.rules, pluginNameWithoutPrefix);\n            entities.forEach(entry => {\n                this.emit(TextLintModuleLoader.Event.rule, entry);\n            });\n        }\n        // register plugin.Processor\n        if (plugin.hasOwnProperty(\"Processor\")) {\n            const processorEntry = [pluginNameWithoutPrefix, plugin.Processor];\n            this.emit(TextLintModuleLoader.Event.processor, processorEntry);\n        }\n    }\n\n    loadPreset(presetName) {\n        /*\n         Caution: Rules of preset are defined as following.\n             {\n                \"rules\": {\n                    \"preset-gizmo\": {\n                        \"ruleA\": false\n\n                }\n            }\n\n        It mean that \"ruleA\" is defined as \"preset-gizmo/ruleA\"\n\n         */\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        // Strip **rule** prefix\n        // textlint-rule-preset-gizmo -> preset-gizmo\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const presetRuleNameWithoutPrefix = presetName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(presetRuleNameWithoutPrefix)) {\n            Logger.warn(`${presetRuleNameWithoutPrefix} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n\n        const pkgPath = this.moduleResolver.resolvePresetPackageName(presetName);\n        debug(\"Loading rules from preset: %s\", pkgPath);\n        const preset = interopRequire(pkgPath);\n        const entities = createEntities(preset.rules, presetRuleNameWithoutPrefix);\n        entities.forEach(entry => {\n            this.emit(TextLintModuleLoader.Event.rule, entry);\n        });\n    }\n\n    /**\n     * load rule file with `ruleName` and define rule.\n     * if rule is not found, then throw ReferenceError.\n     * if already rule is loaded, do not anything.\n     * @param {string} ruleName\n     */\n    loadRule(ruleName) {\n        /*\n           Task\n             - check already define\n             - resolve package name\n             - load package\n             - emit rule\n      */\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const definedRuleName = ruleName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(definedRuleName)) {\n            Logger.warn(`${definedRuleName} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        const pkgPath = this.moduleResolver.resolveRulePackageName(ruleName);\n        debug(\"Loading rules from %s\", pkgPath);\n        const ruleCreator = interopRequire(pkgPath);\n        const ruleEntry = [definedRuleName, ruleCreator];\n        this.emit(TextLintModuleLoader.Event.rule, ruleEntry);\n    }\n}\n\n"]}