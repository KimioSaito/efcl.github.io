{"version":3,"sources":["../../src/engine/textlint-module-resolver.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;AACb,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,yBAAyB,GAAG,SAA5B,yBAAyB,CAAI,iBAAiB,EAAK;AACrD,QAAM,CAAC,iBAAiB,CAAC,qBAAqB,IAC1C,iBAAiB,CAAC,gBAAgB,IAClC,iBAAiB,CAAC,uBAAuB,IACzC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;CAC7C,CAAC;;;;;;;;;;;;;;;;IAemB,sBAAsB;;;;;;;;;AAQ5B,WARM,sBAAsB,CAQ3B,iBAAiB,EAAsB;QAApB,aAAa,yDAAG,EAAE;;0BARhC,sBAAsB;;AASnC,6BAAyB,CAAC,iBAAiB,CAAC,CAAC;;;;AAI7C,QAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC,qBAAqB,CAAC;;;;AAIrE,QAAI,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;;;;AAI3D,QAAI,CAAC,uBAAuB,GAAG,iBAAiB,CAAC,uBAAuB,CAAC;;;;AAIzE,QAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,kBAAkB,CAAC;;;;;AAK/D,QAAI,CAAC,aAAa,GAAG,aAAa,CAAC;GACtC;;;;;;;;eA/BgB,sBAAsB;;WAsCjB,gCAAC,WAAW,EAAE;AAChC,UAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;AACnC,UAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC;AACrC,UAAM,eAAe,QAAM,MAAM,GAAG,WAAW,AAAE,CAAC;;AAElD,UAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;AAC/G,UAAI,CAAC,OAAO,EAAE;AACV,cAAM,IAAI,cAAc,+CAA4C,WAAW,+HAEzF,CAAC;OACM;AACD,aAAO,OAAO,CAAC;KAClB;;;;;;;;;WAOuB,kCAAC,WAAW,EAAE;AAClC,UAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;AACnC,UAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC;AACvC,UAAM,eAAe,QAAM,MAAM,GAAG,WAAW,AAAE,CAAC;;AAElD,UAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;AAC/G,UAAI,CAAC,OAAO,EAAE;AACV,cAAM,IAAI,cAAc,iDAA8C,WAAW,+HAE3F,CAAC;OACM;AACD,aAAO,OAAO,CAAC;KAClB;;;;;;;;;WAOuB,kCAAC,WAAW,EAAE;AAClC,UAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;AACnC,UAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC;AAC5C,UAAM,eAAe,QAAM,MAAM,GAAG,WAAW,AAAE,CAAC;;;;;;;;;;;;;;;AAiBlD,UAAM,wBAAwB,GAAG,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AACtE,UAAM,mBAAmB,QAAM,MAAM,GAAG,wBAAwB,AAAE,CAAC;;AAEnE,UAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,IAC/D,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;;AAExD,gBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,IAC/C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;AAChD,UAAI,CAAC,OAAO,EAAE;AACV,cAAM,IAAI,cAAc,iDAA8C,WAAW,+HAE3F,CAAC;OACM;AACD,aAAO,OAAO,CAAC;KAClB;;;SA9GgB,sBAAsB;;;qBAAtB,sBAAsB","file":"textlint-module-resolver.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nconst path = require(\"path\");\nconst tryResolve = require(\"try-resolve\");\nconst validateConfigConstructor = (ConfigConstructor) => {\n    assert(ConfigConstructor.CONFIG_PACKAGE_PREFIX &&\n        ConfigConstructor.RULE_NAME_PREFIX &&\n        ConfigConstructor.RULE_PRESET_NAME_PREFIX &&\n        ConfigConstructor.PLUGIN_NAME_PREFIX);\n};\n/**\n * This class aim to resolve textlint's package name and get the module path.\n *\n * Define\n *\n * - `package` is npm package\n * - `module` is package's main module\n *\n * ## Support\n *\n * - textlint-rule-*\n * - textlint-preset-*\n * - textlint-plugin-*\n */\nexport default class TextLintModuleResolver {\n    /**\n     *\n     * @param {Config} ConfigConstructor config constructor like object\n     * It has static property like CONFIG_PACKAGE_PREFIX etc...\n     * @param {string} [baseDirectory]\n     * @constructor\n     */\n    constructor(ConfigConstructor, baseDirectory = \"\") {\n        validateConfigConstructor(ConfigConstructor);\n        /**\n         * @return {string} config package prefix\n         */\n        this.CONFIG_PACKAGE_PREFIX = ConfigConstructor.CONFIG_PACKAGE_PREFIX;\n        /**\n         * @return {string} rule package's name prefix\n         */\n        this.RULE_NAME_PREFIX = ConfigConstructor.RULE_NAME_PREFIX;\n        /**\n         * @return {string} rule preset package's name prefix\n         */\n        this.RULE_PRESET_NAME_PREFIX = ConfigConstructor.RULE_PRESET_NAME_PREFIX;\n        /**\n         * @return {string} plugins package's name prefix\n         */\n        this.PLUGIN_NAME_PREFIX = ConfigConstructor.PLUGIN_NAME_PREFIX;\n\n        /**\n         * @type {string} baseDirectory for resolving\n         */\n        this.baseDirectory = baseDirectory;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolveRulePackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.RULE_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <rule-name> or textlint-rule-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's rule module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolvePluginPackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.PLUGIN_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <plugin-name> or textlint-plugin-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's plugin module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolvePresetPackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.RULE_PRESET_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n\n        /* Implementation Node\n        \n        preset name is defined in config file:\n        In the case, `packageName` is \"preset-gizmo\"\n        TextLintModuleResolver resolve \"preset-gizmo\" to \"textlint-rule-preset-gizmo\"\n\n        {\n            \"rules\": {\n                \"preset-gizmo\": {\n                    \"ruleA\": false\n\n            }\n        }\n         */\n        // <preset-name> or textlint-rule-preset-<rule-name>\n        const packageNameWithoutPreset = packageName.replace(/^preset\\-/, \"\");\n        const fullFullPackageName = `${PREFIX}${packageNameWithoutPreset}`;\n        // preset-<preset-name> or textlint-rule-preset-<preset-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullFullPackageName)) ||\n            tryResolve(path.join(baseDir, packageNameWithoutPreset)) ||\n            // <preset-name> or textlint-rule-preset-<rule-name>\n            tryResolve(path.join(baseDir, fullPackageName)) ||\n            tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's preset module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n}\n\n"]}