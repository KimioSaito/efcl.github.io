{"version":3,"sources":["../../src/engine/textlint-engine-core.js"],"names":[],"mappings":"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","file":"textlint-engine-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst createFormatter = require(\"textlint-formatter\");\nconst path = require(\"path\");\nimport TextLintCore from \"./../textlint-core\";\nimport RuleMap from \"./rule-map\";\nimport ProcessorMap from \"./processor-map\";\nimport Config from \"../config/config\";\nimport {findFiles} from \"../util/find-util\";\nimport TextLintModuleLoader from \"./textlint-module-loader\";\nimport {SeverityLevel} from \"../shared/rule-severity\";\n/**\n * Core of TextLintEngine.\n * It is internal user.\n * \n * Hackable adaptor\n * \n * - executeOnFiles\n * - executeOnText\n * - formatResults\n * \n * There are hackable by `executor` option.\n */\nexport default class TextLintEngineCore {\n    /**\n     * Process files are wanted to lint.\n     * TextLintEngine is a wrapper of textlint.js.\n     * Aim to be called from cli with cli options.\n     * @param {TextLintConfig} options the options is command line options or Config object.\n     * @param {{ onFile: Function, onText: Function, onFormat:Function }} executor executor are injectable function.\n     * @constructor\n     */\n    constructor(options, executor = {}) {\n        /**\n         * @type {Config}\n         */\n        this.config = null;\n        if (options instanceof Config) {\n            // Almost internal use-case\n            this.config = options;\n        } else {\n            this.config = Config.initWithAutoLoading(options);\n        }\n\n        /**\n         * @type {TextLintCore}\n         */\n        this.textlint = new TextLintCore(this.config);\n\n        /**\n         * @type {{onFile: Function, onText: Function, onFormat:Function}}\n         */\n        this.executor = executor;\n        /**\n         * @type {RuleMap} ruleMap is used for linting/fixer\n         */\n        this.ruleMap = new RuleMap();\n        /**\n         * @type {ProcessorMap}\n         */\n        this.processorMap = new ProcessorMap();\n        this.moduleLoader = new TextLintModuleLoader(this.config);\n        this.moduleLoader.on(TextLintModuleLoader.Event.rule, ([ruleName, ruleCreator]) => {\n            this.ruleMap.defineRule(ruleName, ruleCreator);\n        });\n        this.moduleLoader.on(TextLintModuleLoader.Event.processor, ([pluginName, Processor]) => {\n            this.processorMap.set(pluginName, Processor);\n        });\n        // load rule/plugin/processor\n        this.moduleLoader.loadFromConfig(this.config);\n        // execute files that are filtered by availableExtensions.\n        // TODO: it very hackable way, should be fixed\n        this.availableExtensions = this.textlint.processors.reduce((availableExtensions, processor) => {\n            const Processor = processor.constructor;\n            return availableExtensions.concat(Processor.availableExtensions());\n        }, this.config.extensions);\n        // set settings to textlint core\n        this._setupRules();\n    }\n\n    /**\n     * @deprecated remove this method\n     */\n    setRulesBaseDirectory() {\n        throw new Error(`Should not use setRulesBaseDirectory(), insteadof use         \nnew TextLintEngine({\n rulesBaseDirectory: directory\n})\n        `);\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} pluginName\n     */\n    loadPlugin(pluginName) {\n        this.moduleLoader.loadPlugin(pluginName);\n        this._setupRules();\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} presetName\n     */\n    loadPreset(presetName) {\n        this.moduleLoader.loadPreset(presetName);\n        this._setupRules();\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} ruleName\n     */\n    loadRule(ruleName) {\n        this.moduleLoader.loadRule(ruleName);\n        this._setupRules();\n    }\n\n    _setupRules() {\n        // set Rules\n        const textlintConfig = this.config ? this.config.toJSON() : {};\n        this.textlint.setupRules(this.ruleMap.getAllRules(), textlintConfig.rulesConfig);\n        // set Processor\n        this.textlint.setupProcessors(this.processorMap.toJSON());\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.textlint.resetRules();\n        this.ruleMap.resetRules();\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {String[]}  files An array of file and directory names.\n     * @returns {TextLintResult[]} The results for all files that were linted.\n     */\n    executeOnFiles(files) {\n        const boundLintFile = (file) => {\n            return this.textlint.lintFile(file);\n        };\n        const execFile = typeof this.executor.onFile === \"function\"\n            ? this.executor.onFile(this.textlint)\n            : boundLintFile;\n        const targetFiles = findFiles(files, this.availableExtensions);\n        const results = targetFiles.map(file => {\n            return execFile(file);\n        });\n        return Promise.all(results);\n    }\n\n    /**\n     * If want to lint a text, use it.\n     * But, if you have a target file, use {@link executeOnFiles} instead of it.\n     * @param {string} text linting text content\n     * @param {string} ext ext is a type for linting. default: \".txt\"\n     * @returns {TextLintResult[]}\n     */\n    executeOnText(text, ext = \".txt\") {\n        const boundLintText = (file, ext) => {\n            return this.textlint.lintText(file, ext);\n        };\n        const execText = typeof this.executor.onText === \"function\"\n            ? this.executor.onText(this.textlint)\n            : boundLintText;\n        // filePath or ext\n        const actualExt = ext[0] === \".\" ? ext : path.extname(ext);\n        if (actualExt.length === 0) {\n            throw new Error(\"should specify the extension.\\nex) .md\");\n        }\n        return execText(text, actualExt).then(result => {\n            return [result];\n        });\n    }\n\n    /**\n     * format {@link results} and return output text.\n     * @param {TextLintResult[]} results the collection of result\n     * @returns {string} formatted output text\n     * @example\n     *  console.log(formatResults(results));\n     */\n    formatResults(results) {\n        const formatterConfig = {\n            formatterName: this.config.formatterName,\n            color: this.config.color\n        };\n        const formatter = typeof this.executor.onFormat === \"function\"\n            ? this.executor.onFormat(formatterConfig)\n            : createFormatter(formatterConfig);\n        return formatter(results);\n    }\n\n    /**\n     * Checks if the given message is an error message.\n     * @param {TextLintMessage} message The message to check.\n     * @returns {boolean} Whether or not the message is an error message.\n     */\n    isErrorMessage(message) {\n        return message.severity === SeverityLevel.error;\n    }\n\n    /**\n     * Checks if the given results contain error message.\n     * If there is even one error then return true.\n     * @param {TextLintResult[]} results Linting result collection\n     * @returns {Boolean} Whether or not the results contain error message.\n     */\n    isErrorResults(results) {\n        return results.some(result => {\n            return result.messages.some(this.isErrorMessage);\n        });\n    }\n\n    hasRuleAtLeastOne() {\n        return this.ruleMap.hasRuleAtLeastOne();\n    }\n}\n"]}