{"version":3,"sources":["../../src/config/plugin-loader.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;qBAqBW,0BAA0B;AApBlD,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9C,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC,CAAC;;AAClD,SAAS,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;AACpD,QAAM,MAAM,GAAG,EAAE,CAAC;AAClB,QAAI,WAAW,KAAK,SAAS,EAAE;AAC3B,eAAO,MAAM,CAAC;KACjB;AACD,UAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,cAAM,CAAI,UAAU,SAAI,GAAG,CAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;KACrD,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACjB;;;;;;;;;;AAQc,SAAS,0BAA0B,CAAC,WAAW,EAAO,cAAc,EAAE;QAAlC,WAAW,gBAAX,WAAW,GAAG,EAAE;;AAC/D,QAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,eAAW,CAAC,OAAO,CAAC,UAAA,UAAU,EAAI;AAC9B,YAAM,OAAO,GAAG,cAAc,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;AACpE,YAAM,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;AACvC,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AACvC,iBAAK,CAAI,UAAU,0BAAuB,CAAC;AAC3C,mBAAO;SACV;;AAED,oBAAY,CAAC,iBAAiB,EAAE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;KACnF,CAAC,CAAC;AACH,WAAO,iBAAiB,CAAC;CAC5B","file":"plugin-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst ObjectAssign = require(\"object-assign\");\nconst debug = require(\"debug\")(\"textlint:plugin-loader\");\nexport function mapRulesConfig(rulesConfig, pluginName) {\n    const mapped = {};\n    if (rulesConfig === undefined) {\n        return mapped;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        mapped[`${pluginName}/${key}`] = rulesConfig[key];\n    });\n    return mapped;\n}\n// load rulesConfig from plugins\n/**\n *\n * @param pluginNames\n * @param {TextLintModuleResolver} moduleResolver\n * @returns {{}}\n */\nexport default function loadRulesConfigFromPlugins(pluginNames = [], moduleResolver) {\n    var pluginRulesConfig = {};\n    pluginNames.forEach(pluginName => {\n        const pkgPath = moduleResolver.resolvePluginPackageName(pluginName);\n        const plugin = interopRequire(pkgPath);\n        if (!plugin.hasOwnProperty(\"rulesConfig\")) {\n            debug(`${pluginName} has not rulesConfig`);\n            return;\n        }\n        // set config of <rule> to \"<plugin>/<rule>\"\n        ObjectAssign(pluginRulesConfig, mapRulesConfig(plugin.rulesConfig, pluginName));\n    });\n    return pluginRulesConfig;\n}\n"]}