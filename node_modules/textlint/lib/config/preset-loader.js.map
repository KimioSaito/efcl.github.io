{"version":3,"sources":["../../src/config/preset-loader.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;qBAwBW,kBAAkB;AAvB1C,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AACvC,SAAS,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;AACpD,QAAM,MAAM,GAAG,EAAE,CAAC;AAClB,QAAI,WAAW,KAAK,SAAS,EAAE;AAC3B,eAAO,MAAM,CAAC;KACjB;;AAED,QAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACjC,eAAO,MAAM,CAAC;KACjB;AACD,UAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,cAAM,CAAI,UAAU,SAAI,GAAG,CAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;KACrD,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACjB;;;;;;;;;;AAQc,SAAS,kBAAkB,CAAC,SAAS,EAAO,QAAQ,EAAE;QAA1B,SAAS,gBAAT,SAAS,GAAG,EAAE;;AACrD,QAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,aAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;AAC1B,YAAM,OAAO,GAAG,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;AAC5D,YAAM,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;AACvC,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACjC,kBAAM,IAAI,KAAK,CAAI,QAAQ,oBAAiB,CAAC;SAChD;AACD,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AACvC,kBAAM,IAAI,KAAK,CAAI,QAAQ,0BAAuB,CAAC;SACtD;;AAED,oBAAY,CAAC,iBAAiB,EAAE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;KACjF,CAAC,CAAC;AACH,WAAO,iBAAiB,CAAC;CAC5B","file":"preset-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst ObjectAssign = require(\"object-assign\");\nexport function mapRulesConfig(rulesConfig, presetName) {\n    const mapped = {};\n    if (rulesConfig === undefined) {\n        return mapped;\n    }\n    // ignore \"preset-foo\": false\n    if (typeof rulesConfig !== \"object\") {\n        return mapped;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        mapped[`${presetName}/${key}`] = rulesConfig[key];\n    });\n    return mapped;\n}\n// load rulesConfig from plugins\n/**\n *\n * @param ruleNames\n * @param {TextLintModuleResolver} resolver\n * @returns {{}}\n */\nexport default function findRulesAndConfig(ruleNames = [], resolver) {\n    const presetRulesConfig = {};\n    ruleNames.forEach(ruleName => {\n        const pkgPath = resolver.resolvePresetPackageName(ruleName);\n        const preset = interopRequire(pkgPath);\n        if (!preset.hasOwnProperty(\"rules\")) {\n            throw new Error(`${ruleName} has not rules`);\n        }\n        if (!preset.hasOwnProperty(\"rulesConfig\")) {\n            throw new Error(`${ruleName} has not rulesConfig`);\n        }\n        // set config of <rule> to \"<preset>/<rule>\"\n        ObjectAssign(presetRulesConfig, mapRulesConfig(preset.rulesConfig, ruleName));\n    });\n    return presetRulesConfig;\n}\n"]}