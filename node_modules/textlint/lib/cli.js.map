{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:cli\");\nconst mkdirp = require(\"mkdirp\");\nimport options from \"./options\";\nimport TextLintEngine from \"./textlint-engine\";\nimport TextFixEngine from \"./textfix-engine\";\nimport Config from \"./config/config\";\nimport configInit from \"./config/config-initializer\";\nimport TextLintFixer from \"./fixer/textlint-fixer\";\nimport Logger from \"./util/logger\";\n/*\n cli.js is command line **interface**\n\n processing role is cli-engine.js.\n @see cli-engine.js\n */\n\n/** @typedef {Object} TextLintFormatterOption\n *  @property {string} formatterName\n *  @property {boolean} noColor\n */\n\n/**\n * Print results of lining text.\n * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}\n * @param {object} options cli option object {@lint ./options.js}\n * @returns {boolean} does print result success?\n */\nfunction printResults(output, options) {\n    if (!output) {\n        return true;\n    }\n    const outputFile = options.outputFile;\n    if (outputFile) {\n        const filePath = path.resolve(process.cwd(), outputFile);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n            Logger.error(\"Cannot write to output file path, it is a directory: %s\", outputFile);\n            return false;\n        }\n        try {\n            mkdirp.sync(path.dirname(filePath));\n            fs.writeFileSync(filePath, output);\n        } catch (ex) {\n            Logger.error(\"There was a problem writing the output file:\\n%s\", ex);\n            return false;\n        }\n    } else {\n        Logger.log(output);\n    }\n    return true;\n}\n\n/**\n * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as\n * for other Node.js programs to effectively run the CLI.\n */\nconst cli = {\n    /**\n     * Executes the CLI based on an array of arguments that is passed in.\n     * @param {string|Array|Object} args The arguments to process.\n     * @param {string} [text] The text to lint (used for TTY).\n     * @returns {Promise<number>} The exit code for the operation.\n     */\n    execute(args, text) {\n        var currentOptions;\n        try {\n            currentOptions = options.parse(args);\n        } catch (error) {\n            Logger.error(error.message);\n            return Promise.resolve(1);\n        }\n        const files = currentOptions._;\n        if (currentOptions.version) {\n            // version from package.json\n            Logger.log(`v${ require(\"../package.json\").version }`);\n        } else if (currentOptions.init) {\n            return configInit.initializeConfig(process.cwd());\n        } else if (currentOptions.help || !files.length && !text) {\n            Logger.log(options.generateHelp());\n        } else {\n            // specify file name of stdin content\n            const stdinFilename = currentOptions.stdinFilename;\n            debug(`Running on ${ text ? \"text\" : \"files\" }, stdin-filename: ${stdinFilename}`);\n            return this.executeWithOptions(currentOptions, files, text, stdinFilename);\n        }\n        return Promise.resolve(0);\n    },\n    /**\n     * execute with cli options\n     * @param {object} cliOptions\n     * @param {string[]} files files are file path list\n     * @param {string} text?\n     * @param {string} stdinFilename?\n     * @returns {Promise<number>} exit status\n     */\n    executeWithOptions(cliOptions, files, text, stdinFilename){\n        const config = Config.initWithCLIOptions(cliOptions);\n        const showEmptyRuleWarning = () => {\n            Logger.log(`\n== Not have rules, textlint do not anything ==\n=> How to set rule?\nSee https://github.com/textlint/textlint/blob/master/docs/configuring.md\n`);\n        };\n\n        if (cliOptions.fix) {\n            // --fix\n            const fixEngine = new TextFixEngine(config);\n            if (!fixEngine.hasRuleAtLeastOne()) {\n                showEmptyRuleWarning();\n                return Promise.resolve(0);\n            }\n            const resultsPromise = text ? fixEngine.executeOnText(text, stdinFilename)\n                : fixEngine.executeOnFiles(files);\n            return resultsPromise.then(results => {\n                const fixer = new TextLintFixer();\n                const output = fixEngine.formatResults(results);\n                printResults(output, cliOptions);\n                // --dry-run\n                if(cliOptions.dryRun){\n                    debug(\"Enable dry-run mode.\");\n                    return Promise.resolve(0);\n                }\n                // modify file and return exit status\n                return fixer.write(results).then(() => {\n                    return 0;\n                });\n            });\n        }\n        // lint as default\n        const lintEngine = new TextLintEngine(config);\n        if (!lintEngine.hasRuleAtLeastOne()) {\n            showEmptyRuleWarning();\n            return Promise.resolve(0);\n        }\n        const resultsPromise = text ? lintEngine.executeOnText(text, stdinFilename) : lintEngine.executeOnFiles(files);\n        return resultsPromise.then(results => {\n            const output = lintEngine.formatResults(results);\n            if (printResults(output, cliOptions)) {\n                return lintEngine.isErrorResults(results) ? 1 : 0;\n            } else {\n                return 1;\n            }\n        });\n    }\n};\nmodule.exports = cli;\n"]}