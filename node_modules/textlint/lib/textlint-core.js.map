{"version":3,"sources":["../src/textlint-core.js"],"names":[],"mappings":"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","file":"textlint-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n    textlint-core.js is a class\n    textlint.js is a singleton object that is instance of textlint-core.js.\n */\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst assert = require(\"assert\");\nimport SourceCode from \"./core/source-code\";\nimport {getProcessorMatchExtension} from \"./util/proccesor-helper\";\nimport {Processor as MarkdownProcessor} from \"textlint-plugin-markdown\";\nimport {Processor as TextProcessor} from \"textlint-plugin-text\";\nimport RuleCreatorSet from \"./core/rule-creator-set\";\n// = Processors\n// sequence\nimport FixerProcessor from \"./fixer/fixer-processor\";\n// parallel\nimport LinterProcessor from \"./linter/linter-processor\";\n/**\n * @class {TextlintCore}\n */\nexport default class TextlintCore {\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        this.ruleCreatorSet = new RuleCreatorSet();\n        // Markdown and Text are for backward compatibility.\n        // FIXME: in the future, this.processors is empty by default.\n        this._defaultProcessors = [\n            new MarkdownProcessor(config),\n            new TextProcessor(config)\n        ];\n        this.processors = this._defaultProcessors.slice();\n    }\n\n    /**\n     * unstable API\n     * @param Processor\n     * @private\n     */\n    addProcessor(Processor) {\n        // add first\n        this.processors.unshift(new Processor(this.config));\n    }\n\n    /**\n     * register Processors\n     * @param {Object} processors\n     */\n    setupProcessors(processors = {}) {\n        this.processors.length = 0;\n        Object.keys(processors).forEach(key => {\n            const Processor = processors[key];\n            this.addProcessor(Processor);\n        });\n        this.processors = this.processors.concat(this._defaultProcessors);\n    }\n\n\n    /**\n     * Register rules and rulesConfig.\n     * if want to release rules, please call {@link resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupRules(rules = {}, rulesConfig = {}) {\n        this.ruleCreatorSet = new RuleCreatorSet(rules, rulesConfig);\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.ruleCreatorSet = new RuleCreatorSet();\n    }\n\n    /**\n     * process text in parallel for Rules and return {Promise.<TextLintResult>}\n     * In other word, parallel flow process.\n     * @param processor\n     * @param text\n     * @param ext\n     * @param filePath\n     * @returns {Promise.<TextLintResult>}\n     * @private\n     */\n    _parallelProcess(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const linterProcessor = new LinterProcessor(processor);\n        return linterProcessor.process({\n            config: this.config,\n            ruleCreatorSet: this.ruleCreatorSet,\n            sourceCode: sourceCode\n        });\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {string} ext ext is extension. default: .txt\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._parallelProcess(processor, text, ext);\n    }\n\n    /**\n     * lint markdown text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text markdown format text\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintMarkdown(text) {\n        const ext = \".md\";\n        return this.lintText(text, ext);\n    }\n\n    /**\n     * lint file and return result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintResult>} result\n     */\n    lintFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const text = fs.readFileSync(absoluteFilePath, \"utf-8\");\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._parallelProcess(processor, text, ext, absoluteFilePath);\n    }\n\n    /**\n     * fix file and return fix result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const text = fs.readFileSync(absoluteFilePath, \"utf-8\");\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._sequenceProcess(processor, text, ext, filePath);\n    }\n\n    /**\n     * fix texts and return fix result object\n     * @param {string} text\n     * @param {string} ext\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._sequenceProcess(processor, text, ext);\n    }\n\n    /**\n     * process text in series for Rules and return {Promise.<TextLintFixResult>}\n     * In other word, sequence flow process.\n     * @param processor\n     * @param text\n     * @param ext\n     * @param filePath\n     * @returns {Promise.<TextLintFixResult>}\n     * @private\n     */\n    _sequenceProcess(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const fixerProcessor = new FixerProcessor(processor);\n        return fixerProcessor.process({\n            config: this.config,\n            ruleCreatorSet: this.ruleCreatorSet,\n            sourceCode: sourceCode\n        });\n    }\n}\n"]}