{"version":3,"sources":["../../src/core/rule-context.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;qBAgBW,WAAW;;;;sCAdb,8BAA8B;;;;yBAC9B,cAAc;;;;kCACK,yBAAyB;;;;;;;;;;;;AAHlE,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAelB,SAAS,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE;AACxF,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;AACnD,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAC,KAAK,EAAE,cAAc,EAAC,CAAC,CAAC;AAC/D,QAAM,QAAQ,GAAG,qCAAY,UAAU,CAAC,CAAC;;;;;;AAMzC,QAAI,CAAC,MAAM,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACjC,cAAM,CAAC,EAAE,IAAI,mCAAqB,AAAC,EAAE,sCAAsC,CAAC,CAAC;AAC7E,YAAI,KAAK,kCAAqB,EAAE;AAC5B,kBAAM,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAR,QAAQ,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC,CAAC;SAC3C,MAAM;AACH,gBAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,IAAI,kCAAc,KAAK,CAAC;AACpD,kBAAM,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC,CAAC;SAClD;KACJ,CAAC;;AAEF,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AAClC,WAAG,EAAA,eAAE;AACD,mBAAO,UAAU,CAAC,SAAS,EAAE,CAAC;SACjC;KACJ,CAAC,CAAC;AACH,QAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3D,QAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;AAEvD,QAAI,CAAC,SAAS,yBAAY,CAAC;;AAE3B,QAAI,CAAC,KAAK,GAAG,yCAAe,CAAC;CAChC","file":"rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nimport RuleFixer from \"../fixer/rule-fixer-commaner\";\nimport RuleError from \"./rule-error\";\nimport {SeverityLevel, getSeverity} from \"../shared/rule-severity\";\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param ruleId\n * @param sourceCode\n * @param report\n * @param textLintConfig\n * @param ruleConfig\n * @returns {*}\n * @constructor\n */\nexport default function RuleContext(ruleId, sourceCode, report, textLintConfig, ruleConfig) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    const severity = getSeverity(ruleConfig);\n    /**\n     *\n     * @param {TxtNode} node\n     * @param {RuleError|any} error error is a RuleError instance or any data\n     */\n    this.report = function (node, error) {\n        assert(!(node instanceof RuleError), \"should be `report(node, ruleError);`\");\n        if (error instanceof RuleError) {\n            report({ruleId, node, severity, error});\n        } else {\n            const level = error.severity || SeverityLevel.error;\n            report({ruleId, node, severity: level, error});\n        }\n    };\n    // Const Values\n    Object.defineProperty(this, \"Syntax\", {\n        get(){\n            return sourceCode.getSyntax();\n        }\n    });\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n    // CustomError object\n    this.RuleError = RuleError;\n    // fixer\n    this.fixer = new RuleFixer();\n}\n"]}