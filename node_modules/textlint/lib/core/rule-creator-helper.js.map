{"version":3,"sources":["../../src/core/rule-creator-helper.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;;;;;;;AAON,SAAS,SAAS,CAAC,WAAW,EAAE;AACnC,QAAI,OAAO,WAAW,CAAC,MAAM,KAAK,UAAU,EAAE;AAC1C,eAAO,IAAI,CAAC;KACf;AACD,QAAI,OAAO,WAAW,KAAK,UAAU,EAAE;AACnC,eAAO,IAAI,CAAC;KACf;CACJ;;;;;;;;;;AAQM,SAAS,SAAS,CAAC,WAAW,EAAE;AACnC,QAAI,OAAO,WAAW,CAAC,MAAM,KAAK,UAAU,EAAE;AAC1C,eAAO,WAAW,CAAC,MAAM,CAAC;KAC7B;AACD,QAAI,OAAO,WAAW,KAAK,UAAU,EAAE;AACnC,eAAO,WAAW,CAAC;KACtB;AACD,UAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;CACnE;;;;;;;;AAOM,SAAS,QAAQ,CAAC,WAAW,EAAE;AAClC,WAAO,OAAO,WAAW,CAAC,KAAK,KAAK,UAAU,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC;CAE5E;;;;;;;;;;AAQM,SAAS,QAAQ,CAAC,WAAW,EAAE;AAClC,QAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;AACzB,cAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACrE;;AAED,QAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;AACvB,eAAO,WAAW,CAAC,KAAK,CAAC;KAC5B;AACD,UAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;CAClE;;;;;;;;AAOM,SAAS,YAAY,CAAC,WAAW,EAAE;AACtC,WAAO,SAAS,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;CAC1D;;;;;;;;;;AASM,SAAS,eAAe,CAAC,UAAU,EAAY;QAAV,GAAG,yDAAG,EAAE;;AAChD,QAAI,UAAU,KAAK,SAAS,EAAE;AAC1B,cAAM,IAAI,KAAK,0BAAyB,GAAG,sBAAoB,CAAC;KACnE;;;;;;AAOD,QAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;AAC3B,cAAM,IAAI,KAAK,0BAAyB,GAAG,qHAI/C,CAAC;KACA;CACJ","file":"rule-creator-helper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n\n/**\n * detect that ruleCreator has linter function\n * @param {Function|Object} ruleCreator\n * @returns {boolean}\n */\nexport function hasLinter(ruleCreator) {\n    if (typeof ruleCreator.linter === \"function\") {\n        return true;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return true;\n    }\n}\n/**\n * get linter function from ruleCreator\n * if not found, throw error\n * @param {Function|Object} ruleCreator\n * @returns {Function} linter function\n * @throws\n */\nexport function getLinter(ruleCreator) {\n    if (typeof ruleCreator.linter === \"function\") {\n        return ruleCreator.linter;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return ruleCreator;\n    }\n    throw new Error(\"Not found linter function in the ruleCreator\");\n}\n\n/**\n * detect that ruleCreator has fixer function\n * @param {Function|Object} ruleCreator\n * @returns {boolean}\n */\nexport function hasFixer(ruleCreator) {\n    return typeof ruleCreator.fixer === \"function\" && hasLinter(ruleCreator);\n\n}\n/**\n * get fixer function from ruleCreator\n * if not found, throw error\n * @param {Function|Object} ruleCreator\n * @returns {Function} fixer function\n * @throws\n */\nexport function getFixer(ruleCreator) {\n    if (!hasLinter(ruleCreator)) {\n        throw new Error(\"fixer module should have also linter function.\");\n    }\n\n    if (hasFixer(ruleCreator)) {\n        return ruleCreator.fixer;\n    }\n    throw new Error(\"Not found fixer function in the ruleCreator\");\n}\n\n/**\n * RuleModule should has either linter or fixer.\n * @param ruleCreator\n * @returns {boolean}\n **/\nexport function isRuleModule(ruleCreator) {\n    return hasLinter(ruleCreator) || hasFixer(ruleCreator);\n}\n\n/**\n * Validate rule module.\n * if invalid throw error\n * @param {Function|Object} ruleModule\n * @param {string} key\n * @throws\n */\nexport function assertRuleShape(ruleModule, key = \"\") {\n    if (ruleModule === undefined) {\n        throw new Error(`Definition of rule '${ key }' was not found.`);\n    }\n    /*\n    Check old rule function\n    module.exports = function(context){\n\n    }\n    */\n    if (!isRuleModule(ruleModule)) {\n        throw new Error(`Definition of rule '${ key }' was not rule module.\nRule should export function:\nmodule.exports = function(context){\n    // Your rule\n};`);\n    }\n}\n"]}