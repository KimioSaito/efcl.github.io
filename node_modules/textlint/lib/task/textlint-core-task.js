// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _coreRuleError = require("../core/rule-error");

var _coreRuleError2 = _interopRequireDefault(_coreRuleError);

var _coreSourceLocation = require("../core/source-location");

var _coreSourceLocation2 = _interopRequireDefault(_coreSourceLocation);

var EventEmitter = require("events");
var TraverseController = require("txt-ast-traverse").Controller;
var PromiseEventEmitter = require("carrack");

var traverseController = new TraverseController();
var debug = require("debug")("textlint:core-task");
// Promised EventEmitter

var RuleTypeEmitter = (function (_PromiseEventEmitter) {
    _inherits(RuleTypeEmitter, _PromiseEventEmitter);

    function RuleTypeEmitter() {
        _classCallCheck(this, RuleTypeEmitter);

        _get(Object.getPrototypeOf(RuleTypeEmitter.prototype), "constructor", this).call(this);
        this.setMaxListeners(0);
    }

    return RuleTypeEmitter;
})(PromiseEventEmitter);

var TextLintCoreTask = (function (_EventEmitter) {
    _inherits(TextLintCoreTask, _EventEmitter);

    _createClass(TextLintCoreTask, null, [{
        key: "events",
        get: function get() {
            return {
                // receive start event
                start: "start",
                // receive message from each rules
                message: "message",
                // receive complete event
                complete: "complete",
                // receive error event
                error: "error"
            };
        }
    }]);

    function TextLintCoreTask(_ref) {
        var config = _ref.config;
        var ruleCreatorSet = _ref.ruleCreatorSet;
        var sourceCode = _ref.sourceCode;

        _classCallCheck(this, TextLintCoreTask);

        _get(Object.getPrototypeOf(TextLintCoreTask.prototype), "constructor", this).call(this);
        this.config = config;
        this.ruleCreatorSet = ruleCreatorSet;
        this.sourceCode = sourceCode;
        this.ruleTypeEmitter = new RuleTypeEmitter();
    }

    _createClass(TextLintCoreTask, [{
        key: "createReporter",
        value: function createReporter(sourceCode) {
            var _this = this;

            var sourceLocation = new _coreSourceLocation2["default"](sourceCode);
            /**
             * push new RuleError to results
             * @param {string} ruleId
             * @param {TxtNode} node
             * @param {number} severity
             * @param {RuleError|any} error error is a RuleError instance or any data
             */
            return function (_ref2) {
                var ruleId = _ref2.ruleId;
                var node = _ref2.node;
                var severity = _ref2.severity;
                var error = _ref2.error;

                debug("pushReport %s", error);

                var _sourceLocation$adjust = sourceLocation.adjust(node, error);

                var line = _sourceLocation$adjust.line;
                var column = _sourceLocation$adjust.column;
                var fix = _sourceLocation$adjust.fix;

                // add TextLintMessage
                var message = {
                    ruleId: ruleId,
                    message: error.message,
                    // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts
                    line: line, // start with 1(1-based line number)
                    column: column + 1, // start with 1(1-based column number)
                    severity: severity // it's for compatible ESLint formatter
                };
                if (fix) {
                    message.fix = fix;
                }
                if (!(error instanceof _coreRuleError2["default"])) {
                    // `error` is a any data.
                    var data = error;
                    message.data = data;
                }
                _this.emit(TextLintCoreTask.events.message, message);
            };
        }

        /**
         * start process and emitting events.
         * You can listen message by `task.on("message", message => {})`
         */
    }, {
        key: "start",
        value: function start() {
            var _this2 = this;

            var promiseQueue = [];
            var listenerCount = typeof this.ruleTypeEmitter.listenerCount !== "undefined" ? this.ruleTypeEmitter.listenerCount.bind(this.ruleTypeEmitter) // Node 4.x >=
            : EventEmitter.listenerCount.bind(EventEmitter, this.ruleTypeEmitter); // Node 0.12

            this.emit(TextLintCoreTask.events.start);

            var ruleTypeEmitter = this.ruleTypeEmitter;
            traverseController.traverse(this.sourceCode.ast, {
                enter: function enter(node, parent) {
                    var type = node.type;
                    Object.defineProperty(node, "parent", { value: parent });
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                },
                leave: function leave(node) {
                    var type = node.type + ":exit";
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                }
            });
            Promise.all(promiseQueue).then(function () {
                _this2.emit(TextLintCoreTask.events.complete);
            })["catch"](function (error) {
                _this2.emit(TextLintCoreTask.events.error, error);
            });
        }
    }]);

    return TextLintCoreTask;
})(EventEmitter);

exports["default"] = TextLintCoreTask;
module.exports = exports["default"];
//# sourceMappingURL=textlint-core-task.js.map