{"version":3,"sources":["../../src/linter/linter-processor.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;sBACM,QAAQ;;;;8BACJ,qBAAqB;;;;8BACrB,qBAAqB;;;;IACvB,eAAe;;;;;;AAKrB,aALM,eAAe,CAKpB,SAAS,EAAE;8BALN,eAAe;;AAM5B,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;;;;;;;;;iBAPgB,eAAe;;eAgBzB,iBAAC,IAAoC,EAAE;gBAArC,MAAM,GAAP,IAAoC,CAAnC,MAAM;gBAAE,cAAc,GAAvB,IAAoC,CAA3B,cAAc;gBAAE,UAAU,GAAnC,IAAoC,CAAX,UAAU;;AACvC,qCAAO,MAAM,IAAI,cAAc,IAAI,UAAU,CAAC,CAAC;;uCACb,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC;;gBAAnE,UAAU,wBAAV,UAAU;gBAAE,WAAW,wBAAX,WAAW;;AAC9B,qCAAO,OAAO,UAAU,KAAK,UAAU,IAAI,OAAO,WAAW,KAAK,UAAU,EACxE,sDAAsD,CAAC,CAAC;AAC5D,gBAAM,IAAI,GAAG,gCAAe;AACxB,sBAAM,EAAN,MAAM;AACN,8BAAc,EAAd,cAAc;AACd,0BAAU,EAAV,UAAU;aACb,CAAC,CAAC;AACH,mBAAO,4BAAW,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;AAC7C,oBAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1D,oBAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,EAAE;AACzB,0BAAM,CAAC,QAAQ,eAAa,UAAU,CAAC,GAAG,MAAG,CAAC;iBACjD;AACD,yCAAO,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,mDAAmD,CAAC,CAAC;AAC5G,uBAAO,MAAM,CAAC;aACjB,CAAC,CAAC;SACN;;;WAlCgB,eAAe;;;qBAAf,eAAe","file":"linter-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport LinterTask from \"../task/linter-task\";\nimport TaskRunner from \"../task/task-runner\";\nexport default class LinterProcessor {\n    /**\n     * \n     * @param {Processor} processor\n     */\n    constructor(processor) {\n        this.processor = processor;\n    }\n\n    /**\n     * Run linter process\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintResult>}\n     */\n    process({config, ruleCreatorSet, sourceCode}) {\n        assert(config && ruleCreatorSet && sourceCode);\n        const {preProcess, postProcess} = this.processor.processor(sourceCode.ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const task = new LinterTask({\n            config,\n            ruleCreatorSet,\n            sourceCode\n        });\n        return TaskRunner.process(task).then(messages => {\n            const result = postProcess(messages, sourceCode.filePath);\n            if (result.filePath == null) {\n                result.filePath = `<Unkown${sourceCode.ext}>`;\n            }\n            assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n            return result;\n        });\n    }\n}\n"]}