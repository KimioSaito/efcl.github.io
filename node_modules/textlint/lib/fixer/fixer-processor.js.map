{"version":3,"sources":["../../src/fixer/fixer-processor.js"],"names":[],"mappings":"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","file":"fixer-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst debug = require(\"debug\")(\"textlint:fixer-processor\");\nimport assert from \"assert\";\nimport FixerTask from \"../task/fixer-task\";\nimport SourceCode from \"../core/source-code\";\nimport SourceCodeFixer from \"../fixer/source-code-fixer\";\nimport TaskRunner from \"../task/task-runner\";\nexport default class FixerProcessor {\n    constructor(processor) {\n        this.processor = processor;\n    }\n\n    /**\n     * Run fixer process\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    process({config, ruleCreatorSet, sourceCode}) {\n        assert(config && ruleCreatorSet && sourceCode);\n        const {preProcess, postProcess} = this.processor.processor(sourceCode.ext);\n        // messages\n        let resultFilePath = sourceCode.filePath;\n        // applied fixing messages\n        // Revert = Sequentially apply applied message to applied output\n        // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);\n        const applyingMessages = [];\n        // not applied fixing messages\n        const remainingMessages = [];\n        // original means original for applyingMessages and remainingMessages\n        // pre-applyingMessages + remainingMessages\n        const originalMessages = [];\n        const fixerProcessList = ruleCreatorSet.mapFixer(fixerRuleCreatorSet => {\n            return (sourceText) => {\n                // create new SourceCode object\n                const newSourceCode = new SourceCode({\n                    text: sourceText,\n                    ast: preProcess(sourceText),\n                    filePath: resultFilePath,\n                    ext: sourceCode.ext\n                });\n                // create new Task\n                const task = new FixerTask({\n                    config,\n                    ruleCreatorSet: fixerRuleCreatorSet,\n                    sourceCode: newSourceCode\n                });\n\n                return TaskRunner.process(task).then(messages => {\n                    const result = postProcess(messages, sourceCode.filePath);\n                    if (result.filePath == null) {\n                        result.filePath = `<Unkown${sourceCode.ext}>`;\n                    }\n                    resultFilePath = result.filePath;\n                    const applied = SourceCodeFixer.applyFixes(newSourceCode, result.messages);\n                    // add messages\n                    Array.prototype.push.apply(applyingMessages, applied.applyingMessages);\n                    Array.prototype.push.apply(remainingMessages, applied.remainingMessages);\n                    Array.prototype.push.apply(originalMessages, applied.messages);\n                    // if not fixed, still use current sourceText\n                    if (!applied.fixed) {\n                        return sourceText;\n                    }\n                    // if fixed, use fixed text at next\n                    return applied.output;\n                });\n            };\n        });\n\n        const promiseTask = fixerProcessList.reduce((promise, fixerProcess) => {\n            return promise.then((sourceText) => {\n                return fixerProcess(sourceText);\n            });\n        }, Promise.resolve(sourceCode.text));\n\n        return promiseTask.then(output => {\n            debug(`Finish Processing: ${resultFilePath}`);\n            debug(`applyingMessages: ${applyingMessages.length}`);\n            debug(`remainingMessages: ${remainingMessages.length}`);\n            return {\n                filePath: resultFilePath,\n                output,\n                messages: originalMessages,\n                applyingMessages,\n                remainingMessages\n            };\n        });\n    }\n}\n"]}