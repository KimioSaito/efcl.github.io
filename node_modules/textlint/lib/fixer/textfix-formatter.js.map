{"version":3,"sources":["../../src/fixer/textfix-formatter.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;qBAOW,eAAe;AANvC,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,IAAM,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACzC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC,CAAC;;AAC9C,SAAS,eAAe,CAAC,eAAe,EAAE;AACrD,QAAM,aAAa,GAAG,eAAe,CAAC,aAAa,CAAC;AACpD,SAAK,CAAC,qBAAqB,GAAG,aAAa,CAAC,CAAC;AAC7C,QAAI,SAAS,YAAA,CAAC;AACd,QAAI,aAAa,YAAA,CAAC;AAClB,QAAI,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;AAC9B,qBAAa,GAAG,aAAa,CAAC;KACjC,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,CAAC,CAAC,EAAE;AAClE,qBAAa,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,CAAC,CAAC;KAC9D,MAAM;AACH,YAAI,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;AACtF,YAAI,SAAS,CAAC,oBAAoB,CAAC,EAAE;AACjC,yBAAa,GAAG,oBAAoB,CAAC;SACxC,MAAM;AACH,gBAAI,OAAO,GAAG,UAAU,CAAC,qBAAqB,GAAG,aAAa,CAAC,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC;AAC7F,gBAAI,OAAO,EAAE;AACT,6BAAa,GAAG,OAAO,CAAC;aAC3B;SACJ;KACJ;AACD,QAAI;AACA,iBAAS,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;KAC7C,CAAC,OAAO,EAAE,EAAE;AACT,cAAM,IAAI,KAAK,+BAA6B,aAAa,+DAE/D,EAAE,CAAG,CAAC;KACH;AACD,SAAK,CAAC,iBAAiB,GAAG,aAAa,CAAC,CAAC;AACzC,WAAO,UAAU,OAAO,EAAE;AACtB,eAAO,SAAS,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;KAC9C,CAAC;CACL","file":"textfix-formatter.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tryResolve = require(\"try-resolve\");\nconst interopRequire = require(\"interop-require\");\nconst existSync = require(\"exists-sync\");\nconst debug = require(\"debug\")(\"textlint:textfix-formatter\");\nexport default function createFormatter(formatterConfig) {\n    const formatterName = formatterConfig.formatterName;\n    debug(\"try formatterName: \" + formatterName);\n    let formatter;\n    let formatterPath;\n    if (fs.existsSync(formatterName)) {\n        formatterPath = formatterName;\n    } else if (fs.existsSync(path.resolve(process.cwd(), formatterName))) {\n        formatterPath = path.resolve(process.cwd(), formatterName);\n    } else {\n        var builtinFormatterPath = path.join(__dirname, \"formatters/\", formatterName) + \".js\";\n        if (existSync(builtinFormatterPath)) {\n            formatterPath = builtinFormatterPath;\n        } else {\n            var pkgPath = tryResolve(\"textlint-formatter-\" + formatterName) || tryResolve(formatterName);\n            if (pkgPath) {\n                formatterPath = pkgPath;\n            }\n        }\n    }\n    try {\n        formatter = interopRequire(formatterPath);\n    } catch (ex) {\n        throw new Error(`Could not find formatter ${formatterName}\nSee https://github.com/textlint/textlint/issues/148\n${ex}`);\n    }\n    debug(\"use formatter: \" + formatterPath);\n    return function (results) {\n        return formatter(results, formatterConfig);\n    };\n}\n"]}