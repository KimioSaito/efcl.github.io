{"version":3,"sources":["../src/analyze.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;AAEb,IAAM,aAAa,GAAG,sBAAsB,CAAC;AAC7C,IAAM,iBAAiB,GAAG,uDAAuD,CAAC;;AAElF,IAAM,gBAAgB,GAAG,sBAAsB,CAAC;AAChD,IAAM,oBAAoB,GAAG,oCAAoC,CAAC;;;;;;;AAOlE,SAAS,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE;AAClC,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,QAAI,QAAQ,YAAA,CAAC;AACb,WAAO,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,IAAK,IAAI,EAAE;AACxC,eAAO,CAAC,IAAI,CAAC;AACT,iBAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AAClB,sBAAU,EAAE,CAAC;AACb,uBAAW,EAAE,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM;SAClD,CAAC,CAAC;KACN;AACD,WAAO,OAAO,CAAC;CAClB;;;;;;;AAOD,SAAS,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE;AACrC,QAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;AACpD,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,SAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAK;AAC3B,YAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC5B,YAAI,CAAC,KAAK,EAAE;AACR,mBAAO;SACV;;AAED,eAAO,CAAC,IAAI,CAAC;AACT,iBAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AACf,sBAAU,EAAE,CAAC,GAAG,KAAK;AACrB,uBAAW,EAAE,KAAK,CAAC,KAAK;SAC3B,CAAC,CAAC;KACN,CAAC,CAAC;AACH,WAAO,OAAO,CAAC;CAClB;;;;;;;;;AASM,SAAS,eAAe,CAAC,IAAI,EAAwC;QAAtC,OAAO,yDAAG,EAAC,kBAAkB,EAAE,IAAI,EAAC;QACjE,kBAAkB,GAAI,OAAO,CAA7B,kBAAkB;;AACvB,QAAI,CAAC,kBAAkB,EAAE;AACrB,eAAO,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;KAC3D;AACD,QAAI,WAAW,GAAG,iBAAiB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AAC5D,QAAI,cAAc,GAAG,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;AACtE,WAAO,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;CAC5C;;;;;;;;;;AAQM,SAAS,YAAY,CAAC,IAAI,EAAwC;QAAtC,OAAO,yDAAG,EAAC,kBAAkB,EAAE,IAAI,EAAC;QAC9D,kBAAkB,GAAI,OAAO,CAA7B,kBAAkB;;AACvB,QAAI,CAAC,kBAAkB,EAAE;AACrB,eAAO,oBAAoB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;KACxD;AACD,QAAI,QAAQ,GAAG,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AACtD,QAAI,WAAW,GAAG,oBAAoB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AAChE,WAAO,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;CACtC","file":"analyze.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n// This RegExp are based of https://github.com/recruit-tech/redpen/blob/master/redpen-core/src/main/java/cc/redpen/validator/sentence/JapaneseStyleValidator.java\nconst DEARU_PATTERN = /のだが|ないかと|してきた|であるから/g;\nconst DEARU_END_PATTERN = /(だ|である|った|ではない｜ないか|しろ|しなさい|いただきたい|いただく|ならない|あろう|られる)。/;\n\nconst DESUMASU_PATTERN = /でしたが|でしたので|ですので|ですが/g;\nconst DESUMASU_END_PATTERN = /(です|ます|ました|ません|ですね|でしょうか|ください|ませ)。/;\n/**\n *\n * @param text\n * @param reg\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nfunction countMatchContent(text, reg) {\n    let matches = [];\n    let tmpMatch;\n    while ((tmpMatch = reg.exec(text)) != null) {\n        matches.push({\n            value: tmpMatch[0],\n            lineNumber: 1,\n            columnIndex: reg.lastIndex - tmpMatch[0].length\n        });\n    }\n    return matches;\n}\n/**\n *\n * @param text\n * @param reg\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nfunction countMatchContentEnd(text, reg) {\n    let lines = text.split(/\\r\\n|\\r|\\n|\\u2028|\\u2029/g);\n    let matches = [];\n    lines.forEach((line, index) => {\n        var match = line.match(reg);\n        if (!match) {\n            return;\n        }\n        // adjust line number\n        matches.push({\n            value: match[0],\n            lineNumber: 1 + index,\n            columnIndex: match.index\n        });\n    });\n    return matches;\n}\n/**\n * `text` の敬体(ですます調)について解析します\n * @param {string} text\n * @param {object} options\n * @param {boolean} options.analyzeConjunction 接続詞を解析するかどうか default: true\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\n\nexport function analyzeDesumasu(text, options = {analyzeConjunction: true}) {\n    let {analyzeConjunction} = options;\n    if (!analyzeConjunction) {\n        return countMatchContentEnd(text, DESUMASU_END_PATTERN);\n    }\n    let retDesumasu = countMatchContent(text, DESUMASU_PATTERN);\n    let retDesumasuEnd = countMatchContentEnd(text, DESUMASU_END_PATTERN);\n    return retDesumasu.concat(retDesumasuEnd)\n}\n/**\n * `text` の常体(である調)について解析します\n * @param {string} text\n * @param {object} options\n * @param {boolean} options.analyzeConjunction 接続詞を解析するかどうか default: true\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nexport function analyzeDearu(text, options = {analyzeConjunction: true}) {\n    let {analyzeConjunction} = options;\n    if (!analyzeConjunction) {\n        return countMatchContentEnd(text, DEARU_END_PATTERN);\n    }\n    let retDearu = countMatchContent(text, DEARU_PATTERN);\n    let retDearuEnd = countMatchContentEnd(text, DEARU_END_PATTERN);\n    return retDearu.concat(retDearuEnd)\n}"]}