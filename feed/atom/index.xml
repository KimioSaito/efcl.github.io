<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2017-10-19T10:19:35+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>kuromoji.jsで形態素解析した結果とテキストの関係をビジュアライズする</title>
   <link href="http://efcl.info/2017/10/19/text-map-kuromoji/"/>
   <updated>2017-10-19T09:45:00+09:00</updated>
   <id>http://efcl.info/2017/10/19/text-map-kuromoji</id>
   <content type="html"><![CDATA[ <p><a href="https://ipsj.ixsq.nii.ac.jp/ej/?action=pages_view_main&amp;active_action=repository_view_main_item_detail&amp;item_id=70540&amp;item_no=1&amp;page_id=13&amp;block_id=8" title="くだけた表現を高精度に解析するための正規化ルール自動生成手法">くだけた表現を高精度に解析するための正規化ルール自動生成手法</a>という論文誌では、「ヵゎぃぃ」，「ゎた Uゎ」みたいな普通の形態素解析では未知語として検出されるものをどうやって正規化していくかという話が書かれていました。</p>

<p>これを読んでいて面白かったのは形態素解析をした結果の未知語となった部分と穴埋め的にパターンを作って、そのパターンにマッチする同じようなテキストを探すというアプローチでした。</p>

<p>プログラミング言語と違って、大抵の自然言語パーサはパース失敗ではなく、単なる未知な言葉として検出されます。
また、その未知な言葉は常に増えていて、さきほどの<a href="https://ipsj.ixsq.nii.ac.jp/ej/?action=pages_view_main&amp;active_action=repository_view_main_item_detail&amp;item_id=70540&amp;item_no=1&amp;page_id=13&amp;block_id=8" title="くだけた表現を高精度に解析するための正規化ルール自動生成手法">くだけた表現を高精度に解析するための正規化ルール自動生成手法</a>によると手動では登録できない増加量らしいです。</p>

<blockquote>
<p>著者らの経験では，1 人月あたり約 3 万種類の未知語登録が可 能であるのに対し，ブログ 600 万文を著名な形態素解析器 MeCab 3) を用いて解析したと ころ，約 65 万種類の未知語が検出されたことから，ブログ文書のくだけた表現を正しく解 析することは困難といえる.</p>
</blockquote>

<p>この辺のスラング的な単語もクローリングしたデータから辞書を作ることで扱える量が多い辞書として<a href="https://github.com/neologd/mecab-ipadic-neologd" title="mecab-ipadic-NEologd">mecab-ipadic-NEologd</a>が有名です。</p>

<p>で、話を戻して形態素解析をした結果の未知語となるパターンってどれぐらいあるのかなーと思いました。
普通に形態素解析した結果を見ればいいのですが、それは品詞付きの情報が並ぶだけだったり、JSONだったりして、テキストのこの部分が未知語というのがあま見やすくはありませんでした。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">今日もしないとね。
今日    名詞,副詞可能,*,*,*,*,今日,キョウ,キョー
も      助詞,係助詞,*,*,*,*,も,モ,モ
し      動詞,自立,*,*,サ変・スル,未然形,する,シ,シ
ない    助動詞,*,*,*,特殊・ナイ,基本形,ない,ナイ,ナイ
と      助詞,接続助詞,*,*,*,*,と,ト,ト
ね      助詞,終助詞,*,*,*,*,ね,ネ,ネ
。      記号,句点,*,*,*,*,。,。,。
</code></pre></div>
<p>入力されたテキストと特定の位置に関する情報をビジュアライズするパターンについてはSourceMapを調べていたときに<a href="http://sokra.github.io/source-map-visualization/" title="source-map-visualization">source-map-visualization</a>というサイトがあるのを思い出しました。</p>

<p><a href="http://sokra.github.io/source-map-visualization/"><img src="http://efcl.info/wp-content/uploads/2017/10/19-1508374636.png" alt="sourcemap"></a></p>

<ul>
<li><a href="http://efcl.info/2014/0622/res3933/" title="Source Mapを扱う関連ライブラリのまとめ | Web Scratch">Source Mapを扱う関連ライブラリのまとめ | Web Scratch</a></li>
</ul>

<p>これの形態素解析版があると良さそうと思いました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これの形態素解析版ほしいな  &quot;source-map-visualization&quot;  <a href="https://t.co/PZuGwXdYIQ">https://t.co/PZuGwXdYIQ</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/920646507254050822?ref_src=twsrc%5Etfw">October 18, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ここで、既にJavaScriptとそのパース結果からECMAScriptのバージョンをToken毎に割り出すツールを作ってたのを思い出しました。</p>

<p><a href="https://azu.github.io/ecmascript-version-detector/"><img src="http://efcl.info/wp-content/uploads/2016/08/04-1470309082.png" alt="image"></a></p>

<ul>
<li><a href="http://efcl.info/2016/08/04/ecmascript-version-detector/" title="そのコードが標準化されてるJavaScriptなのかを判定する方法 | Web Scratch">そのコードが標準化されてるJavaScriptなのかを判定する方法 | Web Scratch</a></li>
</ul>

<p>これをforkして<a href="https://github.com/takuyaa/kuromoji.js#api" title="kuromoji.js">kuromoji.js</a>で形態素解析してその結果をビジュアライズするものを作りました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://t.co/zypZDjn20j">https://t.co/zypZDjn20j</a><a href="https://t.co/UOhjzSxMhI">https://t.co/UOhjzSxMhI</a><br><br>kuromojiで形態素解析した結果をビジュアライズするやつできた。<br>テキストをクリックすると対応した位置のトークン情報が表示される。 <a href="https://t.co/AqrbhMJFBm">pic.twitter.com/AqrbhMJFBm</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/920676180797173762?ref_src=twsrc%5Etfw">October 18, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>サイト: <a href="https://azu.github.io/text-map-kuromoji/">text-map-kuromoji</a></li>
<li>ソースコード:<a href="https://github.com/azu/text-map-kuromoji">azu/text-map-kuromoji: テキストを形態素解析した結果とテキストの関係をビジュアライズするエディタ</a></li>
</ul>

<p>それで目的だった壊れた日本語は未知語として検出されるのかを確かめてみましたが、てにをはを間違えただけとかその程度だとやっぱり未知語として検出されないということがわかりました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">日本語の文章ってやっぱり普通に書くと未知語が結構出にくいっぽい気がする。<br><br>変換ミスだとアルファベットが混ざってくるので未知語 = 壊れた文章の検出ができる可能性はありそう。<br>壊れた日本語は検出するの難しいかもなー。パースが失敗しない問題 <a href="https://t.co/EhpmHv34LD">pic.twitter.com/EhpmHv34LD</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/920678011141201920?ref_src=twsrc%5Etfw">October 18, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>一方、ローマ字入力のIME特有のtypoはアルファベットが不自然に混ざるからか未知な言葉として検出されやすくかったです(論文誌の形状が似てる言葉もこういうタイプ)</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-ja-unnatural-alphabet" title="textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール">textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール</a></li>
</ul>

<p>やっぱり形態素解析に失敗するパーサの必要性を感じました。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Clean ArchitectureとBuilding Evolutionary Architecturesを読んだ</title>
   <link href="http://efcl.info/2017/10/09/clean-architecture-and-building-evolutionary-architectures/"/>
   <updated>2017-10-09T23:27:00+09:00</updated>
   <id>http://efcl.info/2017/10/09/clean-architecture-and-building-evolutionary-architectures</id>
   <content type="html"><![CDATA[ <p><a href="http://www.informit.com/store/clean-architecture-a-craftsmans-guide-to-software-structure-9780134494319" title="Clean Architecture: A Craftsman&amp;#39;s Guide to Software Structure and Design | InformIT">Clean Architecture</a>という本と<a href="https://www.amazon.com/dp/1491986360/" title="Building Evolutionary Architectures: Support Constant Change: Neal Ford, Rebecca Parsons, Patrick Kua: 9781491986363: Amazon.com: Books">Building Evolutionary Architectures</a>という本を最近読んだのでざっくりとしたメモ。（両方共2-3時間ぐらいでざっくりとしか読んでないので、解釈間違いは普通にありそうです）</p>

<p>両方共アーキテクチャに対するメタ的な視点な部分があるので、合わせて読むと面白いかも。</p>

<h2 id="clean-architecture">Clean Architecture</h2>

<p>Clean Architecture(Clean Codeの人のシリーズ)という本を読んだ。</p>

<ul>
<li><a href="http://www.informit.com/store/clean-architecture-a-craftsmans-guide-to-software-structure-9780134494319" title="Clean Architecture: A Craftsman&amp;#39;s Guide to Software Structure and Design | InformIT">Clean Architecture: A Craftsman&#39;s Guide to Software Structure and Design | InformIT</a>

<ul>
<li>PDFとかEpubとかMobiが買える</li>
</ul></li>
</ul>

<p><a href="https://www.amazon.com/Robert-C.-Martin/e/B000APG87E/ref=dp_byline_cont_book_1" title="Robert C. Martin">Robert C. Martin</a>の<code>Clean *</code>シリーズでいわゆる<a href="http://blog.tai2.net/the_clean_architecture.html" title="クリーンアーキテクチャ">クリーンアーキテクチャ</a>そのものだけを扱ったという内容ではない。</p>

<p>でもクリーンアーキテクチャについて紹介してる章もある。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/CleanArchitecture?src=hash&amp;ref_src=twsrc%5Etfw">#CleanArchitecture</a> Clean ArchitectureがClean Architectureについて書いてる章があった… <a href="https://t.co/75EB3FW4U3">pic.twitter.com/75EB3FW4U3</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/912128410343768064?ref_src=twsrc%5Etfw">September 25, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>アーキテクチャのルール自体はシステム/アプリケーションのサイズにかかわらずいつも同じという話。
これはアーキテクチャのメタ的な感じっぽい。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/CleanArchitecture?src=hash&amp;ref_src=twsrc%5Etfw">#CleanArchitecture</a> シングルスレッドのアプリ、マルチスレッドのアプリ、重量プロセスのアプリ、軽量プロセスのアプリ色々作ってきたけどアーキテクチャのルールはいつも同じ<br><br>&gt; The architecture rules are the same!</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/912117809714307072?ref_src=twsrc%5Etfw">September 25, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そもそもの話としてアーキテクチャを決めるのはプログラマ（アーキテクト）で、その人のスキルとかチームによって異なる選択をしてる。なので、暗黙的に、異なるチームでは異なるアーキテクチャの決定をする。</p>

<p>アーキテクチャの目的は開発、デプロイ、運用、メンテをやりやすくするため。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/CleanArchitecture?src=hash&amp;ref_src=twsrc%5Etfw">#CleanArchitecture</a>  良いアーキテクチャがサポートすべきもの <a href="https://t.co/xp1upNzbO5">pic.twitter.com/xp1upNzbO5</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/912124439344562176?ref_src=twsrc%5Etfw">September 25, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>アーキテクトは境界を見つけることが仕事で、そのboundariesの線を引くこと。
境界はDBとかテストとかアプリケーションとかcontextとか色々なところにある。
それを気をつけて認識しないといけない。また同時に認識した境界を無視しなければならない。
なぜなら、すべてを実装するのはコストが高いため。</p>

<p>後は境界を引いた上でそれぞれのコンポーネントを結合するプラグインの仕組みなどについて。
フレームワークをコードに入れるのではなく、コードに対してフレームワークというコンポーネントをプラグインとして入れるようにするとか。</p>

<blockquote>
<p>Don’t marry the framework!</p>
</blockquote>

<p>境界をちゃんとして、依存関係をちゃんとしよう的な話が多かった。</p>

<h2 id="building-evolutionary-architectures">Building Evolutionary Architectures</h2>

<p>Building Evolutionary ArchitecturesというEvolutionary Architectures(進化的アーキテクチャ)についての本を読んだ。</p>

<ul>
<li><a href="https://www.thoughtworks.com/books/building-evolutionary-architectures" title="Building Evolutionary Architectures | ThoughtWorks">Building Evolutionary Architectures | ThoughtWorks</a></li>
<li><a href="https://www.amazon.com/dp/1491986360/" title="Building Evolutionary Architectures: Support Constant Change: Neal Ford, Rebecca Parsons, Patrick Kua: 9781491986363: Amazon.com: Books">Building Evolutionary Architectures: Support Constant Change: Neal Ford, Rebecca Parsons, Patrick Kua: 9781491986363: Amazon.com: Books</a></li>
</ul>

<p>ThoughtWorksの人達が書いた本なので、アーキテクチャに対するメタ的な目線が多かった。</p>

<p>そもそも、Evolutionary Architectures(進化的アーキテクチャ)とは何かという話や進化的アーキテクチャというのは何を目的にしているか。(adaptable Architectureと言わなかったのはなぜかなど?)</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Why Evolutionary? <a href="https://t.co/dhWQIhUg4k">pic.twitter.com/dhWQIhUg4k</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/917406155374157824?ref_src=twsrc%5Etfw">October 9, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>進化的アーキテクチャは次の3つのポイントが主になってる的な話。</p>

<ul>
<li>Incremental change</li>
<li>Guided change with fitness functions</li>
<li>Appropriate coupling</li>
</ul>

<p>継続的に変更すること(Incremental change)ができ、その変更/進化が目的の方向なのかをチェックできる指標をちゃんと持つこと(Guided change with fitness functions)。
つまりアーキテクチャを選ぶことが目的でなく、Fitness functionとなる指標がありそれに対するアーキテクチャを選べているかを確認できるようにすることが目的。</p>

<p>ある変化に対してその変化が目的に沿ったものだったかを計測できる指標のことをfitness functionと言っているという理解。</p>

<blockquote>
<p>A fitness function is a particular type of objective function that is used to summarise, as a single figure of merit, how close a given design solution is to achieving the set aims.</p>
</blockquote>

<p>元ネタは<a href="https://en.wikipedia.org/wiki/Fitness_function" title="Fitness function - Wikipedia">Fitness function - Wikipedia</a>とのこと。</p>

<p>でてくる用語が抽象的なので次の動画も見たほうが分かりやすいかも。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/SzSZpZI02Jg" frameborder="0" allowfullscreen></iframe>

<p>そのため、何がFitness functionなのかは、作るシステム/アプリケーションによって異なる。
あるシステムではパフォーマンスやセキュリティが大事だったり、作るものによって異なる = 進化の方向はアプリケーションで異なる。</p>

<p>テストとかパフォーマンスとかそれぞれコンポーネント毎にfitness functionがあり、システム全体でのバランスを検証する。
スケーラビリティとか、パフォーマンス、セキュリティとかデータスキーマとかプロジェクトにおける指標となるものをちゃんと決めてないと、都度の変化はただの反応的な変化(reactionary architecture)となるので、最初にシステム全体として進化の指標を決めることは大事という話。
つまり、正しい方向を向いてるかどうかという指標はちゃんと決めないと、正しさが分からずに問題となるよという話だと思う。</p>

<p>その指標が決まっているだけでは継続的な進化はできないので、Incremental changeをするためには継続的インテグレーション(CI)と継続的デリバリー(CD)といったリリースサイクルに関わるもの大事という話が結構でてきた。(また、このデプロイの頻度とかは物理的なものとデジタル的なもので異なるという話とか。)</p>

<p>リリースサイクルの例としてGitHubとかの例がでてきた。</p>

<ul>
<li><a href="https://githubengineering.com/move-fast/" title="Move Fast and Fix Things | GitHub Engineering">Move Fast and Fix Things | GitHub Engineering</a></li>
</ul>

<p>なんでリリースサイクルが大事かというとリリース速度と進化的アーキテクチャに相関が存在する。
つまりプロジェクトのサイクルタイムによってアーキテクチャの進化速度が決まり、より早いサイクルはより早い進化を促すことができるため。</p>

<p>継続的にデプロイするには、そのシステムがモジュール化されていることが大事。
そのモジュール化を行う方法?としていろんなアーキテクチャがあるよという、既存のいろんなアーキテクチャ紹介(モノリシック、レイヤードアーキテクチャ、<a href="https://en.wikipedia.org/wiki/Event-driven_architecture" title="Event-driven architecture">Event-driven architecture</a>、serverlessとか)</p>

<p>けど</p>

<blockquote>
<p>Don’t build an architecture just because it will be fun meta-work.</p>
</blockquote>

<p>だよという話。</p>

<hr>

<p>アーキテクチャの対義語(アンチパターン)として泥団子(<a href="https://ja.wikipedia.org/wiki/%E5%A4%A7%E3%81%8D%E3%81%AA%E6%B3%A5%E3%81%A0%E3%82%93%E3%81%94" title="Big ball of mud">Big ball of mud</a>)の話。
基本的に泥団子は進化することができないので、新しい変化を取り込むことができない。
いくかの柔軟性を取り込んでいくことでアーキテクチャ全体を変更せずに、取り入れることができる。</p>

<p>柔軟性についてでどういうものがあるかという話。</p>

<ul>
<li>必要ない変数を取り除く

<ul>
<li>Immutabilityを取り入れる</li>
<li>Immutable infrastructureは必要ない変数を取り除く</li>
</ul></li>
<li>決定を可逆にする

<ul>
<li>Make Decisions Reversible</li>
<li>Revertable、 blue/green deployment</li>
</ul></li>
<li>Prefer Evolvable over Predictable</li>
<li>Build Anticorruption Layers

<ul>
<li>腐敗防止を設ける</li>
</ul></li>
<li>Mitigate External Change

<ul>
<li>外部ライブラリの変更の影響を小さく保つ</li>
<li>left-padの教訓</li>
</ul></li>
<li>Updating Libraries Versus Frameworks

<ul>
<li>アーキテクトはライブラリとフレームワークを区別する</li>
<li>開発者のコードがライブラリを呼び出す</li>
<li>フレームワークは開発者のコードを呼び出す</li>
<li>多くの場合はライブラリを選ぶことで影響が軽減される</li>
<li>フレームワークは積極的に依存を更新する(セキュリティアップデート)</li>
<li>ライブラリは必要になったら更新する(update when neededモデル)</li>
</ul></li>
<li>Prefer Continuous Delivery to Snapshots

<ul>
<li>The conflict between Continuous Delivery and traditional Agile - kief.com</li>
<li>-LATESTみたいなスナップショットじゃなくてタグ切って管理</li>
</ul></li>
<li>これはMake Decisions Reversibleとも繋がる(revert可能にする)

<ul>
<li>Prefer Continuous Delivery over snapshots for (external) dependencies.</li>
<li>継続的デプロイができる環境では外部依存についての考えかたも変える</li>
<li>2つの指標を導入する</li>
<li>fluid

<ul>
<li>自動的に依存を更新する</li>
</ul></li>
<li>guarded

<ul>
<li>固定 -&gt; fluidに戻すように修正する</li>
</ul></li>
</ul></li>
<li>Version Services Internally

<ul>
<li>一度に管理するサービスのエンドポイントのバージョンは2つまで</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">left-padだ <a href="https://t.co/JctKbVAVfH">pic.twitter.com/JctKbVAVfH</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/917040368339755008?ref_src=twsrc%5Etfw">October 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>外部モジュールのバージョン管理の話が結構面白かった。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ライブラリとフレームワークの区別について<br>開発者のコードがライブラリを呼び出す。一方、フレームワークは開発者のコードを呼び出す。<br>多くの場合はライブラリを選ぶことで影響が軽減される。<br><br>フレームワークのアップデートは積極的に行い、ライブラリのアップデートは必要になったら行う。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/917041667881893889?ref_src=twsrc%5Etfw">October 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>つまり、フレームワークは自分が制御するわけではないので、アップデートは積極的に行わないと進化できなくなる可能性がある。一方ライブラリは必要になったタイミングで更新すればいいという話。</p>

<p>またフレームワークに関するアンチパターンとしてLast 10%という話があった。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Antipattern: Last 10% Trap<br>- あるフレームワークで要求の80%が実現できることが確認できていた<br>- ハックをつかって10%+できた<br>- しかし最後の10%が無理で要求を満たせなかったので、フレームワークを使うのをやめる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/917045990917468161?ref_src=twsrc%5Etfw">October 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<p>泥団子から進化することはできないのでどうやって分解するかという話。</p>

<p>泥団子を進化させることはできない。(本で ball of mud は結構出てくる)
泥団子を再加工するコストが莫大なものとなる。これを変質させる方法の第一歩はモジュール化。
最初に行うべき作業は現在のシステムからモジュールの発見すること。</p>

<p>ここでも境界を見つける話や泥団子からのマイグレーション方法についてなど。
モジュールへ分解していくのだけど、安易に分解するとパフォーマンスが問題になることがあるよとか、分解した結果複数のモジュールが共有してる共有モジュールはどうするの?とか。</p>

<p>どうにかして境界を見つけて分解することができたら、取捨選択のステップへ。ここでも指標となるFitness functionがでてくる。</p>

<blockquote>
<p>Next, developers choose and detach the chosen service from the monolith, fixingany calling points. Fitness functions play a critical role here — developersshould build fitness functions to make sure the newly introduced integrationpoints don’t change, and add consumer-driven contracts.</p>
</blockquote>

<hr>

<p>またIncremental changeの話に戻って</p>

<p>サイクルタイムはビジネスメトリクスであるという話。ならなぜ、短い時間で繰り返せるということはコストが小さくなるということ。最小のコストで試すことができる。
このサイクルタイムを短くするにはいろいろ自動化が必要になるという話。</p>

<p>変化のリスクを小さくするのが進化的アーキテクチャの考え方。
その変化において大きなBreaking Changeを減らす/なくしIncremental changeできるようにする。
それによって、新しいものを取り入れる余地を作る。</p>

<p>雑に進化的アーキテクチャとは何かというと</p>

<ul>
<li>予測可能性より進化性</li>
<li>進化のリスクを小さくする(痛みを伴うBreaking Changeなしに進化)</li>
<li>依存するライブラリとフレームワークの管理とリスクを考えて意思決定をする</li>
<li>可逆性を持つ決定を取り入れる</li>
<li>腐敗防止層を設ける</li>
<li>進化の速度とリリースサイクルには相関がある

<ul>
<li>短い時間で繰り返せるということは、試すコストが小さい</li>
<li>プロジェクトのサイクルタイムによってアーキテクチャの進化速度が決まる</li>
</ul></li>
<li>泥団子は進化することができないので、柔軟性のポイントを取り入れる</li>
<li>目的に対する成長なのかを計測する(そのため実装の詳細を無視してはいけない)</li>
</ul>

<p>アーキテクチャは方程式ではなく、進行中のプロセスのスナップショットにすぎないという話。</p>

<hr>

<p>読み終わってそういえば<a href="http://bliki-ja.github.io/SacrificialArchitecture/" title="犠牲的アーキテクチャ">犠牲的アーキテクチャ</a>というものが同じくThoughtWorksのMartin Fowlerさんが言っていたのを思い出した。
進化的アーキテクチャはより緩やか/より前進的な犠牲的アーキテクチャと言えるのかもしれないなーとか思った。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">最近聞かなくなった気もするけど犠牲的アーキテクチャの話も少しでてきてた気がする。<br>進化的アーキテクチャは緩やかな犠牲的アーキテクチャと言えるのかもしれない<a href="https://t.co/FckZSanZai">https://t.co/FckZSanZai</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/917070245768028161?ref_src=twsrc%5Etfw">October 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<p><a href="http://www.informit.com/store/clean-architecture-a-craftsmans-guide-to-software-structure-9780134494319" title="Clean Architecture: A Craftsman&amp;#39;s Guide to Software Structure and Design | InformIT">Clean Architecture</a>と<a href="https://www.amazon.com/dp/1491986360/" title="Building Evolutionary Architectures: Support Constant Change: Neal Ford, Rebecca Parsons, Patrick Kua: 9781491986363: Amazon.com: Books">Building Evolutionary Architectures</a>を読んでの雑なメモ書き。</p>

<p>両方共、アーキテクチャとは境界を見つけることという話や異なるチーム異なるシステムでは異なるアーキテクチャがあるよという話をしてたのが良かった。</p>

<p>あとはアーキテクチャ選び遊びは楽しいけど、目的にあってないアーキテクチャを選ぶアーキテクチャシンドロームにかかってはいけないという話も共通してた気がする。</p>

<blockquote>
<p>Don’t build an architecture just because it will be fun meta-work.</p>
</blockquote>

<p>どちらの本も読んで何か実践的な何かを学べるタイプのものではないので、その辺を見たい場合は別の本を見たほうが良さそう。</p>

<ul>
<li><a href="https://www.gitbook.com/book/delftswa/desosa-2017/details" title="Delft Students on Software Architecture: DESOSA 2017 · GitBook">Delft Students on Software Architecture: DESOSA 2017 · GitBook</a></li>
<li><a href="http://ec.nikkeibp.co.jp/item/books/P98480.html" title=".NETのエンタープライズアプリケーションアーキテクチャ">.NETのエンタープライズアプリケーションアーキテクチャ</a></li>
<li><a href="https://www.amazon.com/dp/1118714709/" title="Patterns, Principles, and Practices of Domain-Driven Design: Scott Millett, Nick Tune: 0787721845461: Amazon.com: Books">Patterns, Principles, and Practices of Domain-Driven Design: Scott Millett, Nick Tune: 0787721845461: Amazon.com: Books</a>

<ul>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/" title="アーキテクチャをめぐるたび | Web Scratch">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul></li>
</ul>

<p>どちらかというと次のものに近い方向だけど、もう少し技術よりなので短い時間で読みやすい。</p>

<ul>
<li><a href="https://www.amazon.co.jp/dp/B00ZF44J0I/" title="ソフトウェアシステムアーキテクチャ構築の原理">ソフトウェアシステムアーキテクチャ構築の原理</a></li>
<li><a href="https://leanpub.com/livingdocumentation" title="Living Documentation by design, with Domain-Driven Design">Living Documentation by design, with Domain-Driven Design</a>

<ul>
<li><a href="http://efcl.info/2017/05/12/Living-Documentation-DDD/" title="Living Documentation by design, with Domain-Driven Designを読んだ | Web Scratch">Living Documentation by design, with Domain-Driven Designを読んだ | Web Scratch</a></li>
</ul></li>
</ul>

<p>感想の量からもわかるように<a href="https://www.amazon.com/dp/1491986360/" title="Building Evolutionary Architectures: Support Constant Change: Neal Ford, Rebecca Parsons, Patrick Kua: 9781491986363: Amazon.com: Books">Building Evolutionary Architectures</a>は結構面白かった。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように</title>
   <link href="http://efcl.info/2017/09/20/almin-performance-profile-0.14.0/"/>
   <updated>2017-09-20T10:07:00+09:00</updated>
   <id>http://efcl.info/2017/09/20/almin-performance-profile-0.14.0</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin"><img src="https://almin.github.io/media/logo/logo.png" alt="Almin.js"></a></p>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>はClient-side DDD/CQRSをしやすい構造を作ることを目的にした – いわゆるステート管理ライブラリです。</p>

<p><a href="https://github.com/almin/almin/releases/tag/almin%400.14.0" title="almin@0.14.0">Almin 0.14.0</a>で<code>performance.mark</code>ベースのプロファイルを取れるようになりました。
これにより、AlminのUseCaseやStoreといったそれぞれの処理にどれぐらいかかっているかを開発者ツールのタイムラインで見ることができます。</p>

<p><a href="https://github.com/almin/almin/releases/tag/almin%400.14.0"><img src="http://efcl.info/wp-content/uploads/2017/09/20-1505888631.png" alt="DevTool timeline"></a></p>

<p><code>performance.mark</code>は<a href="https://w3c.github.io/user-timing/" title="User Timing Level 2">User Timing Level 2</a>で標準化されている方法なので、後述するようにReactやVueなどのライブラリと組み合わせた状態も見ることができます。
<code>performance.mark</code>については次の記事でも書いています。</p>

<ul>
<li><a href="http://efcl.info/2016/08/15/performance.mark/" title="performance.markでパフォーマンス計測する | Web Scratch">performance.markでパフォーマンス計測する | Web Scratch</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<p>Contextを作成する際に<code>performanceProfile</code>オプションを有効にするだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span>
    <span class="nx">store</span><span class="o">:</span> <span class="nx">yourStoreGroup</span><span class="p">,</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">strict</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">performanceProfile</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>このオプションを有効にした状態で実際のウェブサイトにアクセスして、次のステップでみることができます。</p>

<ol>
<li><code>performanceProfile</code>オプションを有効化</li>
<li>ウェブサイトを開く</li>
<li>開発者ツールの&quot;Performance&quot;タブを開き<strong>Record</strong>を押す

<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool">Chrome&#39;s Timeline Tool document</a>や<a href="https://docs.microsoft.com/en-us/microsoft-edge/f12-devtools-guide/performance" title="F12 devtools guide - Performance - Microsoft Edge Development | Microsoft Docs">MSEdge&#39;s F12 devtools guide</a>を参考に</li>
</ul></li>
<li><strong>Record</strong>を停止する</li>
<li><strong>User Timing</strong>というラベルにAlminのイベントが表示される</li>
</ol>

<p>実際にパフォーマンスプロファイルをタイムラインで見ている様子です。</p>

<blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/almin?src=hash">#almin</a> + <a href="https://twitter.com/hashtag/react?src=hash">#react</a> easy to profile web app with devTool&#39;s timeline.<a href="https://t.co/HLndVyS4hI">https://t.co/HLndVyS4hI</a> <a href="https://t.co/d7l2c2pP1K">pic.twitter.com/d7l2c2pP1K</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/909418278153478144">September 17, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>この動画ではReactの<a href="https://facebook.github.io/react/docs/optimizing-performance.html" title="?react_perf">?react_perf</a>と組み合わせたものをタイムライン表示しています。</p>

<p>動かしているサンプルはショッピングカートのコードです。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/examples/shopping-cart" title="almin/examples/shopping-cart at master · almin/almin">almin/examples/shopping-cart at master · almin/almin</a></li>
</ul>

<h2 id="vue-almin">Vue + Almin</h2>

<p>ReactだけではなくVueも<code>performance.mark</code>ベースの<a href="https://vuejs.org/v2/api/#performance">パフォーマンスオプション</a>をサポートしています。</p>

<p>Vue + Alminで書いたサンプルを作ったので、次のリポジトリで試すことができます。</p>

<ul>
<li><a href="https://github.com/azu/vue-almin-counter-example" title="azu/vue-almin-counter-example: Vue + Almin counter example">azu/vue-almin-counter-example: Vue + Almin counter example</a></li>
</ul>

<p><img src="https://cdn.rawgit.com/azu/vue-almin-counter-example/master/img/performance-timeline.gif" alt="Vue + Almin"></p>

<p>VueのパフォーマンスプロファイルはVueによるViewの更新(<code>render</code>や<code>patch</code>)に関する情報がタイムラインにでます。
Alminのパフォーマンスプロファイルは、UseCaseの実行、StoreGroup/Storeの更新、StoreからのState取得に関する情報がタイムラインにでます。</p>

<p>Alminが現在サポートしているメトリクスについては次のドキュメントで公開しています。</p>

<p><a href="https://almin.js.org/docs/tips/performance-profile.html"><img src="http://efcl.info/wp-content/uploads/2017/09/20-1505887064.png" alt="Metrics"></a></p>

<ul>
<li><a href="https://almin.js.org/docs/tips/performance-profile.html" title="Performance profile · Almin.js">Performance profile · Almin.js</a></li>
</ul>

<p>このVue + Alminのサンプルプロジェクトは、Vue + Vuexで書いたものをAlminに変換して作ったので、そのときはDiffは次のPull Requestで見ることができます。</p>

<ul>
<li><a href="https://github.com/azu/vue-almin-counter-example/pull/1" title="Almin + Vue performance profile by azu · Pull Request #1 · azu/vue-almin-counter-example">Almin + Vue performance profile by azu · Pull Request #1 · azu/vue-almin-counter-example</a></li>
</ul>

<h2 id="おわりに">おわりに</h2>

<p>Reactの<a href="https://facebook.github.io/react/docs/optimizing-performance.html" title="?react_perf">?react_perf</a>のように、<code>?almin_perf</code>をクエリに付けた時だけプロファイルを取りたい場合は次のように設定すればできます。</p>

<p>またパフォーマンスプロファイルのコードは、オプション値関係なくproductionビルドすると消えるようになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// ?almin_perf をつけるとプロファイルが取れる</span>
<span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span>
    <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">StoreGroup</span><span class="p">({</span>
        <span class="nx">counter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">CounterStore</span><span class="p">()</span>
    <span class="p">}),</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">strict</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">performanceProfile</span><span class="o">:</span> <span class="sr">/[?&amp;]almin_perf\b/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>Alminはロガーなどを外部実装するための<a href="https://almin.js.org/docs/tips/usecase-lifecycle.html" title="life-cycle events">ライフサイクルイベント</a>のAPIも公開しています。
<a href="https://www.npmjs.com/package/almin-logger" title="almin-logger">almin-logger</a>や<a href="https://github.com/almin/almin-devtools" title="almin-devtools">almin-devtools</a>はこちらを使っていますが、それとは別にオプションを追加したのはパフォーマンスプロファイルはAlmin内部的な状態を出す可能性があるからです。
そのため、Publicなものはライフサイクルイベントとして、内部的な状態のダンプデータは<code>performanceProfile</code>のみで出すようにしています。</p>

<p>Alminのパフォーマンスプロファイルについて詳しくは次のドキュメントに書いています。</p>

<ul>
<li><a href="https://almin.js.org/docs/tips/performance-profile.html" title="Performance profile · Almin.js">Performance profile · Almin.js</a></li>
<li><a href="https://almin.js.org/docs/tips/usecase-lifecycle.html" title="LifeCycle of UseCase · Almin.js">LifeCycle of UseCase · Almin.js</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>pwa_study アウトラインメモ</title>
   <link href="http://efcl.info/2017/09/14/pwa_study/"/>
   <updated>2017-09-14T21:27:00+09:00</updated>
   <id>http://efcl.info/2017/09/14/pwa_study</id>
   <content type="html"><![CDATA[ <p><a href="https://web-study.connpass.com/event/65267/" title="pwa_study - connpass">pwa_study - connpass</a>に参加してきたのでメモ。</p>

<h2 id="用語">用語</h2>

<ul>
<li>SW = Service Worker</li>
<li>XSS = cross site scripting</li>
<li>Fetch = Fetch API</li>
</ul>

<h2 id="ウェルカムlt">ウェルカムLT</h2>

<ul>
<li>クライアントサイドDDDが行われるようになってきた</li>
<li>クライアントサイドにロジックが寄ってきてる

<ul>
<li>難しい</li>
</ul></li>
<li>Service Workerもクライアントサイドにそういうロジックや仕組みがよってきたという現象の一つなのでは</li>
</ul>

<h2 id="service-worker-lifecycle-laco">Service Worker Lifecycle  - laco</h2>

<blockquote>
<p>スライド: <a href="http://slides.com/laco/2017-09-14_sw-lifecycle#/" title="Service Worker Lifecycle by Suguru Inatomi">Service Worker Lifecycle by Suguru Inatomi</a></p>
</blockquote>

<ul>
<li>SWのライフサイクル</li>
<li><a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle?hl=ja" title="Service Worker のライフサイクル  |  Web  |  Google Developers">Service Worker のライフサイクル  |  Web  |  Google Developers</a> これよめば大体分かる</li>
<li>スライド -&gt; 記事読むと良い</li>
<li>register -&gt; redundantで死ぬ

<ul>
<li>ライフサイクルであるけど一方向</li>
</ul></li>
<li>SWの目的

<ul>
<li>オフラインファースト</li>
<li>セーフマイグレーション</li>
<li>consitency(SWないとタブごとに異なる感じになってしまう。SWは1つのアプリケーションに対して1つ)</li>
</ul></li>
<li>Window-side API

<ul>
<li>Workerを使う側</li>
<li>SWを登録する <code>register</code></li>
<li>SWを更新する <code>update</code> </li>
<li>SWを停止する <code>unregister</code></li>
</ul></li>
<li>Install SW

<ul>
<li><code>register</code>が終わった段階ではSWはまだコントールできない

<ul>
<li><code>active</code> ではある</li>
</ul></li>
<li>リロードした後 コントロール できる状態になる</li>
<li><code>register</code>した段階ではfetchなどをhookすることができない</li>
</ul></li>
<li>なぜこのような仕様になっているか

<ul>
<li>SWのconsitency</li>
<li>タブ間での一貫性を保証する</li>
<li>あるタブだけSWがコントロールできてない状態を作らない</li>
</ul></li>
<li>抜け道がある

<ul>
<li><code>clients.claim()</code> </li>
<li>すぐにコントール状態にできる</li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/Clients/claim" title="Clients.claim() - Web API インターフェイス | MDN">Clients.claim() - Web API インターフェイス | MDN</a></li>
<li>claim*<em>s</em>*もある</li>
<li>一貫性を求めるので 

<ul>
<li>やらない or すべてやる(すべてのタブに対してやる)</li>
</ul></li>
</ul></li>
<li>Update SW

<ul>
<li>取ってきたsw.jsとdiffをとって、hash値が異なるなら新しいworkerとして作られる</li>
<li>ハッシュが異なるときは、waitingになる = コントールはできない状態</li>
<li>全部のタブのSWが新しくなったらコントール状態になる = waiting解除</li>
</ul></li>
<li>これも抜け道がある

<ul>
<li><code>skipWaiting()</code></li>
<li>waiting時に<code>skipWaiting()</code>するとすぐにactivateになる</li>
<li>Warning: 裏で動いているWorkerがリロードなしにすり替わる</li>
</ul></li>
<li>ユースケース

<ul>
<li><code>clients.claim()</code>

<ul>
<li>最初からSWを有効化できる</li>
</ul></li>
<li><code>clients.skipWaiting()</code>

<ul>
<li>壊れたsw.jsをデプロイしてしまって、そのバグを修正したバージョンを出す時</li>
<li><code>postMessage</code>とかを使ってwindowからHot Updateみたいなことをやるとき</li>
</ul></li>
</ul></li>
<li>active vs. controller

<ul>
<li>window-side

<ul>
<li>controllerがあるかどうか</li>
</ul></li>
<li>worker

<ul>
<li>worker stateだけを見てる</li>
</ul></li>
<li>controllerであるworker === activeであるworker</li>
</ul></li>
<li>まとめ

<ul>
<li><code>register</code>だけではSWはcontrollにならない</li>
<li>すべてのタブが閉じないとSWはcontrollにならない</li>
<li>claimですぐに取ることはできるけど</li>
<li>skipWaitingは気をつけて使いましょう</li>
</ul></li>
<li>FAQ

<ul>
<li>redundantしたときすぐregisterすると死んだと思ったworkerが復活する</li>
<li>active かつ un-controllerの場合でもmessageは受け取る

<ul>
<li>fetchなどはhandkingできない</li>
</ul></li>
<li><code>clients.skipWaiting()</code>

<ul>
<li>ページがコントールしてるSW、activeなSWが切り替わる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="攻撃者視点で見る-service-worker-kinugawamasato">攻撃者視点で見る Service Worker - kinugawamasato</h2>

<blockquote>
<p>スライド: <a href="https://speakerdeck.com/masatokinugawa/pwa-study-sw" title="攻撃者視点で見るService Worker / PWA Study SW // Speaker Deck">攻撃者視点で見るService Worker / PWA Study SW // Speaker Deck</a></p>
</blockquote>

<ul>
<li>SWを使うと攻撃者は何ができるのか

<ul>
<li>SWを登録して攻撃</li>
<li>アプリが使ってるSWを攻撃</li>
</ul></li>
<li>アプリ開発者の防御方法</li>
<li>SWのスクリプトを次の条件を満たす必要がある

<ul>
<li>same origin</li>
<li>secure context</li>
<li>context-typeがJavaScript</li>
</ul></li>
<li>Secure Context

<ul>
<li>HTTPSとかlocalhostなどのコンテキストが限定される</li>
<li>Geo</li>
<li>WebUSB</li>
<li>カメラとか</li>
</ul></li>
<li>Application Cacheは

<ul>
<li>SWの前身のキャッシュ</li>
<li>Secure Contextの実行制限がない</li>
<li><a href="https://html5experts.jp/kyo_ago/5153/" title="攻撃シナリオを使って解説するApplicationCacheのキャッシュポイズニング | HTML5Experts.jp">攻撃シナリオを使って解説するApplicationCacheのキャッシュポイズニング | HTML5Experts.jp</a></li>
<li>Dropboxで公開ページの問題

<ul>
<li>Same origin</li>
<li>クッキーを大量に埋め込むとApp CacheのFallbackが発動して全滅</li>
</ul></li>
</ul></li>
<li>攻撃SWをつかうには

<ul>
<li>HTTPSなページでXSSをみつける</li>
<li>SWのスクリプトになりうる場所をみつける

<ul>
<li>content-type: text/javascript</li>
</ul></li>
</ul></li>
<li>都合のいい場所1: JSONP

<ul>
<li>JSONのsw.jsの内容を書いて</li>
<li>それをregisterで登録する</li>
</ul></li>
<li>登録できるとどうなるか

<ul>
<li>XSSの永続化

<ul>
<li>XSSが修正されても継続する</li>
</ul></li>
<li>リクエスト/レスポンス内容の盗聴・変更</li>
</ul></li>
<li>XSSの永続化</li>
<li>SWのスコープ

<ul>
<li>SWは<code>scope</code>がディレクトリ以下のcontrollできるかを設定できる</li>
<li>Service-Worker-Allowedで設定もできる</li>
<li>サーバの設定によっては <code>%2F</code> のようにエンコードしたパスを登録できないようになってる(仕様で<code>%2f</code>などは禁止されている)</li>
<li><a href="https://www.w3.org/TR/service-workers-1/#navigator-service-worker-register" title="Service Workers 1">Service Workers 1</a></li>
</ul></li>
<li>登録後のスコープ

<ul>
<li><code>/..%2fout%2f</code>と<code>/out/</code>は同一されて、SWは禁止されてない</li>
<li>登録時はかなり厳しくなってる</li>
</ul></li>
<li>SWは前回取得してから24時以上経ってると、SW起動時にHTTPキャッシュを無視して再取得する仕様がある</li>
<li>検証

<ul>
<li>Firefox/Chromeは24時間以上で再取得が起きる</li>
<li>404などで取得できなければ元のSWを使い付ける</li>
<li>不正なSWを登録されることを防ぐ目的であって、永続化を防ぐものにはなってなかった</li>
</ul></li>
<li>XSS x SW x Flash

<ul>
<li>swfのページに直接アクセス + SWで不正なSWFを返す</li>
<li>Flashは crossdomain.xml でクロスドメイン管理されてる</li>
<li>SWで作ったFlashからもcrossdomain.xmlにリストされたサイトの読み取りができる</li>
<li>=&gt; embed仕様では制限すぐべきと書いてあってある

<ul>
<li>embedとかobjectは制限されてる</li>
<li>URLに <a href="http://example.com/attack.swf">http://example.com/attack.swf</a></li>
</ul></li>
</ul></li>
<li>Foreign Fetch

<ul>
<li>外部サイトでXSSができる</li>
<li>夢が広がる危ない仕様だった

<ul>
<li>SWの登録しやすさいに比べて危険</li>
</ul></li>
<li>しかし、Foreign Fetchは廃止予定</li>
<li><a href="https://github.com/w3c/ServiceWorker/issues/1188" title="Remove foreign fetch · Issue #1188 · w3c/ServiceWorker">Remove foreign fetch · Issue #1188 · w3c/ServiceWorker</a></li>
</ul></li>
<li>SWのキャッシュ

<ul>
<li>SWのキャッシュ != HTTPキャッシュ</li>
<li>正規に登録されていたSWを悪用する</li>
<li>fetchされたURLのキャッシュがあれば、キャッシュを常に返すSWがある時</li>
<li>XSSがあれば、キャッシュを汚染して攻撃コードのキャッシュを返すことができる</li>
<li>localStorageのXSSに似てる</li>
</ul></li>
<li>SWを削除する

<ul>
<li>unregister</li>
<li>Clear-Site-Dataで消せる

<ul>
<li><a href="https://github.com/w3c/webappsec-clear-site-data" title="w3c/webappsec-clear-site-data: WebAppSec Clear Site Data">w3c/webappsec-clear-site-data: WebAppSec Clear Site Data</a></li>
</ul></li>
<li>けど、これも一度登録されたそこまで届かない</li>
</ul></li>
<li>SWは登録された負け

<ul>
<li>SWは前回取得してから24時以上経ったときに、404であるならunregisterする仕様になっていれば永続化は避けられて良さそうな気がする</li>
</ul></li>
</ul>

<hr>

<h2 id="foreign-fetch-jxck">Foreign Fetch - jxck</h2>

<ul>
<li>Foreign Fetch

<ul>
<li>オフライン対応をサイト全体をやろうという話なったらサードパーティも全部オフライン対応しないといけない</li>
<li>それはつらい</li>
<li>なので、各サービスがそれぞれオフライン対応のSWを公開してくれて</li>
<li>ファーストパーティは自分のサイトだけ、サードパーティはサードパーティの対応するだけで良くなるという仕様</li>
<li>=&gt; 駄目だった</li>
<li><a href="https://github.com/w3c/ServiceWorker/issues/1188" title="Remove foreign fetch · Issue #1188 · w3c/ServiceWorker">Remove foreign fetch · Issue #1188 · w3c/ServiceWorker</a></li>
</ul></li>
<li>理由: Safariの<a href="https://webkit.org/blog/7675/intelligent-tracking-prevention/" title="Intelligent Tracking Prevention | WebKit">Intelligent Tracking Prevention | WebKit</a>

<ul>
<li>今までクッキー

<ul>
<li>ドメインに紐付いている</li>
</ul></li>
<li>この変更

<ul>
<li>今見てるページとサードパーティのドメインの2つをキーにする</li>
<li>host+3rdparty</li>
<li>つまり見てるページが異なれば、サードパーティが同じでも異なるキーとなる</li>
</ul></li>
</ul></li>
<li>SWの責務分離

<ul>
<li>パスでしか責務を分けれない</li>
</ul></li>
<li>Foreign Fetchは代案がないと死ぬ</li>
</ul>

<hr>

<h2 id="asking-for-sw-motivation-constellation"><a href="https://web-study.connpass.com/event/65267/" title="Asking for SW Motivation: @constellation">Asking for SW Motivation</a> - @constellation</h2>

<ul>
<li>Service Workerに懐疑的

<ul>
<li>ウェブページのライフサイクルを壊す可能性がある</li>
<li>バッテリーを食う可能性がある</li>
</ul></li>
<li>モチベーション

<ul>
<li>ネイティブアプリでは駄目なの?

<ul>
<li>App Storeのディストリビューションの問題?</li>
</ul></li>
<li>Electronみたいなアプリを作る方向ではないの?</li>
<li>アプリケーションでできないことブラウザでできるようになるの?</li>
</ul></li>
<li>議論 色々

<ul>
<li>「ウェブは二回目のエンゲージメントを得るのが難しい。」</li>
<li>「だからPush通知が欲しい」</li>
<li>続きは <a href="https://twitter.com/search?q=%23pwa_study&amp;src=typd" title="#pwa_study - Twitter Search">#pwa_study - Twitter Search</a> で</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Frontrend Vol.10 アウトラインメモ</title>
   <link href="http://efcl.info/2017/09/08/frontrend-v10/"/>
   <updated>2017-09-08T20:52:00+09:00</updated>
   <id>http://efcl.info/2017/09/08/frontrend-v10</id>
   <content type="html"><![CDATA[ <h1 id="frontrend-vol-10">Frontrend Vol.10</h1>

<p><a href="https://frontrend.connpass.com/event/63971/" title="Frontrend Vol.10 - 夏の終わりに納涼パフォーマンス話 - connpass">Frontrend Vol.10 - 夏の終わりに納涼パフォーマンス話 - connpass</a>に参加してきたのでメモ。</p>

<hr>

<h2 id="fresh-クライアントサイドパフォーマンス改善-by-sutiwo_">FRESH!: クライアントサイドパフォーマンス改善 by @sutiwo_</h2>

<ul>
<li><a href="https://developers.cyberagent.co.jp/blog/archives/6057/" title="FRESH! Web パフォーマンス改善 〜クライアントサイド編〜">FRESH! Web パフォーマンス改善 〜クライアントサイド編〜</a>の話</li>
<li>FRESHはPCとSPの視聴/配信のブラウザ対応</li>
<li>生放送のタイムラグを10秒 -&gt; 5秒

<ul>
<li><a href="https://www.cyberagent.co.jp/newsinfo/info/print/id=14062" title="映像配信プラットフォーム「FRESH!」が映像配信のタイムラグを大幅に短縮 業界最速水準で高画質映像の配信が可能に | 株式会社サイバーエージェント">映像配信プラットフォーム「FRESH!」が映像配信のタイムラグを大幅に短縮 業界最速水準で高画質映像の配信が可能に | 株式会社サイバーエージェント</a></li>
</ul></li>
<li>Freshのウェブプッシュ通知機能</li>
<li>Freshアクセシビリティガイドライン

<ul>
<li><a href="https://openfresh.github.io/a11y-guidelines/" title="FRESH! Accessibility Guidelines">FRESH! Accessibility Guidelines</a></li>
</ul></li>
<li>Service Worker

<ul>
<li>バックグラインドで実行するWorker</li>
<li>postMessageでのやり取り</li>
<li>ネットワークのハンドリング</li>
<li>PUsh通知</li>
<li>httpsが必須

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/Security/Secure_Contexts" title="Secure Contexts - Web セキュリティ | MDN">Secure Contexts - Web セキュリティ | MDN</a></li>
</ul></li>
<li>ブラウザ &lt;-&gt; SW &lt;-&gt; ネットワーク</li>
</ul></li>
<li>FRESHではFirefox + Chrome = 50%ぐらいの利用者にある

<ul>
<li>SWが50%のユーザーに適応できる</li>
</ul></li>
<li>設計と実装</li>
<li>キャッシュがあれば、キャッシュを使いない場合はFetchする

<ul>
<li>リリース単位でキャッシュさせる(CircleCIでビルド時にIDを含める)</li>
<li>意図的に更新させないとキャッシュされ続けるもの

<ul>
<li><code>version.json</code>で任意の日付をマニュアル更新</li>
</ul></li>
</ul></li>
<li>ディレクトリ構成

<ul>
<li>service-worker

<ul>
<li>asserts.js - キャッシュのホワイトリスト</li>
<li>index.js - イベントハンドラ登録</li>
<li>register.js SWのインストール判定</li>
</ul></li>
</ul></li>
<li>デバッグ方法

<ul>
<li>Chrome DevToolsを使ってる</li>
<li>assetsのパスに日付が入ってる</li>
</ul></li>
<li>ローカルで確認する時

<ul>
<li>環境変数でフラグを用意 = <code>DISABLED_SW_CACHE</code></li>
<li>ブラウザでスーパーリロードする</li>
</ul></li>
<li>Intersection Observerでの遅延ロード

<ul>
<li>ランキングの表示</li>
<li>50件でているが見えるのは最初の6-7件</li>
</ul></li>
<li>Intersection Observerを使って遅延ロード

<ul>
<li><a href="https://blog.jxck.io/entries/2016-06-25/intersection-observer.html">Intersection Observer を用いた要素出現検出の最適化 | blog.jxck.io</a></li>
<li><a href="https://1000ch.net/posts/2016/intersection-observer-lazyload.html">IntersectionObserverを使ってlazyload-imageを書き直した - EagleLand</a></li>
</ul></li>
<li><a href="https://github.com/openfresh/viewport-observer" title="openfresh/viewport-observer: A React Component that observe changes in the intersection of a target element with viewport using IntersectionObserver">openfresh/viewport-observer: A React Component that observe changes in the intersection of a target element with viewport using IntersectionObserver</a>

<ul>
<li>Reactラッパー</li>
</ul></li>
<li>SVGスプライトとHTTP/2

<ul>
<li>SVGファイル毎にリクエストするHTTP/1だと問題がある</li>
<li>SVGスプライトにまとめた

<ul>
<li>すべてのSVGが読み終わるまで、どのSVGもでない</li>
</ul></li>
<li>ただHTTP/2なら特に問題にならないので個別で読み込んだ

<ul>
<li>個別のSVGで読み込むようにした</li>
</ul></li>
</ul></li>
<li>SpeedCurveで計測してる</li>
</ul>

<hr>

<h2 id="パフォーマンスを改善して本を売る！「読書のお時間です」の取り組みについて">パフォーマンスを改善して本を売る！「読書のお時間です」の取り組みについて</h2>

<ul>
<li>5年続いたSPAのウェブサービスをSSRにした話</li>
<li>問題分析

<ul>
<li>ボトルネック調査</li>
</ul></li>
<li>設計

<ul>
<li>Before

<ul>
<li>jQuery</li>
<li>handlebars</li>
<li>Grunt</li>
</ul></li>
<li>After

<ul>
<li>React/webpack色々</li>
</ul></li>
</ul></li>
<li>開発

<ul>
<li>プロイピング</li>
<li>主要ページからリニューアルする</li>
<li>旧仕様のページと行き来できる作り(共存する)</li>
<li><code>#!</code> から <code>/</code> に変更</li>
</ul></li>
<li>リリース

<ul>
<li>ページロード 30% down</li>
<li>コンテンツサイズ 50% down</li>
</ul></li>
<li>展開

<ul>
<li>対象ページが100ページ以上あった</li>
<li>既存のものを運用しないといけない</li>
</ul></li>
<li>画像との戦い

<ul>
<li>本の表紙 = 書影</li>
<li>画像の提供元によってサイズなどがバラバラ</li>
</ul></li>
<li>パフォーマンス計測とKPIの紐付け

<ul>
<li>RUM-speedIndex

<ul>
<li><a href="https://github.com/WPO-Foundation/RUM-SpeedIndex" title="WPO-Foundation/RUM-SpeedIndex: Calculate SpeedIndex measurements from the field">WPO-Foundation/RUM-SpeedIndex: Calculate SpeedIndex measurements from the field</a></li>
</ul></li>
<li>SpeedIndexとKPIを紐付けてビジュアライズ

<ul>
<li><a href="https://developers.cyberagent.co.jp/blog/archives/9540/" title="WebパフォーマンスとプロダクトKPIの相関を可視化する話">WebパフォーマンスとプロダクトKPIの相関を可視化する話</a></li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="アメブロ-isomprhicアプリケーションのパフォーマンス・チューニング">アメブロ: Isomprhicアプリケーションのパフォーマンス・チューニング</h2>

<blockquote>
<p>スライド: <a href="https://speakerdeck.com/kouhin/ameburo-isomprhicapurikesiyonfalsepahuomansutiyuningu" title="アメブロ: Isomprhicアプリケーションのパフォーマンス・チューニング // Speaker Deck">アメブロ: Isomprhicアプリケーションのパフォーマンス・チューニング // Speaker Deck</a></p>
</blockquote>

<ul>
<li><a href="https://developers.cyberagent.co.jp/blog/archives/636/" title="アメブロ2016 ~ React/ReduxでつくるIsomorphic web app ~">アメブロ2016 ~ React/ReduxでつくるIsomorphic web app ~</a>の話</li>
<li>Javaベース -&gt; Node.jsベースに変更</li>
<li>SSR: Isomorphic App(SPA + SSR) + React+ Redux + React Router</li>
<li>バックエンドキャッシュは大分

<ul>
<li>React SSRはパフォーマンスが悪い</li>
</ul></li>
<li>クライントは特定のユーザー、サーバサイドはすべてのユーザにサービスを提供

<ul>
<li>なのでサーバサイドはキャッシュとかしないと</li>
</ul></li>
<li>バックエンドのキャッシュの設計</li>
<li>問題点を洗い出す

<ul>
<li>何をキャッシュするか

<ul>
<li>Router -&gt; Redux Store準備(API Object) -&gt; Render -&gt; HTML</li>
<li>RenderToStringはとても重たい

<ul>
<li>同期的な処理</li>
<li>Note: React 16では30%程度改善</li>
<li><a href="https://twitter.com/herablog/status/893421865670017024">https://twitter.com/herablog/status/893421865670017024</a></li>
</ul></li>
<li>RenderToStringはキャッシュしたい</li>
<li>ただしユーザーによって違うのでそのままキャッシュできない</li>
<li>RenderToStringはテンプレートを吐き出して、クライアントサイドでそれをレンダリングする</li>
<li>API Objectもキャッシュすることでより改善された</li>
</ul></li>
<li>キャッシュするタイミング

<ul>
<li>アクセスされたとき</li>
</ul></li>
<li>キャッシュを削除するタイミング

<ul>
<li>記事を更新したら、記事IDから記事のキャッシュを消すのはNG</li>
<li>実際は記事を更新したら、記事本体、記事一覧、記事の前後などいろんなところを影響する</li>
<li>実装はかなり複雑になるので、キャッシュの削除は難しい</li>
<li>AmebaブログはユーザIDに紐付いているので、更新したらユーザIDに紐づくページをすべて削除する</li>
<li>FallbackとしてキャッシュのTTLで失効させる</li>
</ul></li>
<li>キッシュのトランザクション

<ul>
<li>キャッシュの更新とアクセスでキャッシュ作られたときに衝突してしまう問題</li>
<li>キャッシュのkeyは namespace(user-id)+version をつかうようにした</li>
<li>なので削除ではなくバージョンの更新 = キャッシュの削除</li>
</ul></li>
<li>Local Cache VS Cache Server

<ul>
<li>Node.jsのインスタンス数が多い(オンメモリだけではばらけてしまう)</li>
<li>オンメモリのキャッシュ + キャッシュサーバを併用</li>
</ul></li>
</ul></li>
<li>遅延ロード

<ul>
<li>SSR -&gt; SPA

<ul>
<li><a href="https://github.com/kouhin/rrr-lazy" title="kouhin/rrr-lazy: A fork of react-lazy-load and add support for react-router, react-router-hook.">kouhin/rrr-lazy: A fork of react-lazy-load and add support for react-router, react-router-hook.</a></li>
<li>サーバサイドではレンダリングしないコンポーネントを指定できる</li>
</ul></li>
<li>ページの表示範囲

<ul>
<li>クライントサイドの処理</li>
<li>Intersection Observer的な遅延ロード</li>
</ul></li>
<li>コードの分割

<ul>
<li>JavaScriptのパース時間が短くなる</li>
<li>main.jsの肥大化を防ぐ</li>
<li>webpack</li>
<li>分割粒度: AtomicデザインのOrganisms毎

<ul>
<li>Dynamic Importで遅延ロード</li>
</ul></li>
<li>分割するとビルドが遅い

<ul>
<li>ローカルではコード分割しない</li>
<li><a href="https://github.com/knpwrs/babel-plugin-remove-webpack" title="knpwrs/babel-plugin-remove-webpack: Removes webpack-specific functions from JavaScript code.">knpwrs/babel-plugin-remove-webpack: Removes webpack-specific functions from JavaScript code.</a>などで無効化してる</li>
</ul></li>
<li>chunkのサイズは結構でかい</li>
</ul></li>
</ul></li>
<li>Service Worker

<ul>
<li>AMPなので専用のタグを使う</li>
<li><a href="https://github.com/GoogleChrome/workbox" title="GoogleChrome/workbox: 📦 Workbox: JavaScript libraries for Offline Caching">GoogleChrome/workbox: 📦 Workbox: JavaScript libraries for Offline Caching</a></li>
</ul></li>
<li>HTTP/2 &amp;&amp; コード分割

<ul>
<li>Chromeは一度にリクエストできるの6つまで</li>
<li>一括で読み込むと詰まることがある</li>
<li>この辺は改善していきたい</li>
</ul></li>
</ul>

<hr>

<h1 id="q-amp-a">Q&amp;A</h1>

<ul>
<li>Q. パフォーマンス計測ツールはアメーバ社内で共通化されてるの?</li>
<li>A. アメブロはSpeedCurveとか</li>
<li>1000chに聞いて</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>LDRがサービス終了のため、Inoreader/Feedlyをバックエンドに動くRSSリーダを書いている</title>
   <link href="http://efcl.info/2017/08/31/ldr-to-irodr/"/>
   <updated>2017-08-31T10:03:00+09:00</updated>
   <id>http://efcl.info/2017/08/31/ldr-to-irodr</id>
   <content type="html"><![CDATA[ <p>2017年8月31日をもってLDRはサービス終了です。乗り換え先となるRSSリーダを探したりしましたが、求めるものを見つけることができなかったので作ることにしました。</p>

<ul>
<li><a href="http://blog.livedoor.jp/staff_reader/archives/52278396.html" title="【重要】Live Dwango Reader/LDR Pocketサービス終了のお知らせ｜LDR / LDRポケット 開発日誌">【重要】Live Dwango Reader/LDR Pocketサービス終了のお知らせ｜LDR / LDRポケット 開発日誌</a></li>
</ul>

<p>次の記事でも書いていましたが、RSSリーダのバックエンドを自前で管理するのはコスト的に難しそうでした。そのため、バックエンドとして<a href="http://www.inoreader.com/developers/">Inoreader</a>や<a href="https://developer.feedly.com/v3/auth/">Feedly</a>のAPI使ったRSSリーダのウェブクライアントを書くことにしました。</p>

<ul>
<li><a href="http://efcl.info/2017/07/29/ldr-rate-export/" title="LDRのフィードをレート情報付きでエクスポートする | Web Scratch">LDRのフィードをレート情報付きでエクスポートする | Web Scratch</a></li>
</ul>

<h2 id="irodr">irodr</h2>

<p><a href="https://github.com/azu/irodr" title="Irodr">Irodr</a>は<a href="http://www.inoreader.com/developers/">Inoreader</a>や<a href="https://developer.feedly.com/v3/auth/">Feedly</a>(こっちはまだ対応してない)のAPIを使ったRSSリーダです。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://t.co/xKJF7YUu5D">https://t.co/xKJF7YUu5D</a> の様子 <a href="https://t.co/ERUTFtaP0b">pic.twitter.com/ERUTFtaP0b</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/903085352448962560">August 31, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>どちらのRSSリーダサービスもフロントを持っていますが、LDRのような感覚で見ることが難しそうだったので、APIを使ったフロントだけを作っている感じです。</p>

<p>LDRのような感覚というのは個人的な感覚に過ぎなので普遍的なものではないですが、次のようなイメージです。</p>

<ul>
<li>UI: レート読みができる

<ul>
<li>★の多い順にフィードを読んでいくスタイル</li>
<li>多くのRSSリーダではカテゴリで代用できる</li>
</ul></li>
<li>UI: 左にフィード一覧、右にコンテンツ</li>
<li>UI: コンテンツ送りの視線が固定できる

<ul>
<li>ショートカットで移動した時はタイトルが常に同じに位置に来る</li>
</ul></li>
<li>速度: <code>j</code>をおした時にアニメーションなしで次の記事を見れる

<ul>
<li>Inoreaderは設定はアニメーションをoffできる</li>
</ul></li>
<li>速度: <code>s</code>をおした時に300ms以内に次のフィードに切り替わる

<ul>
<li>LDRはこれを実現するためにprefetchをしている</li>
</ul></li>
<li>ショートカットを変更/カスタマイズできる

<ul>
<li>UserScriptでどうにかするやつ</li>
<li>Inoreaderは<a href="https://greasyfork.org/ja/scripts/898-inoreader-key-customize">https://greasyfork.org/ja/scripts/898-inoreader-key-customize</a>がよくできている</li>
</ul></li>
</ul>

<p>というのが自分的な感覚でのLDRらしい動きを実現するのに必要なものです。</p>

<p><a href="http://www.inoreader.com/" title="Inoreader">Inoreader</a>は大体満たしているのですが、速度だけが問題になっていました。</p>

<ul>
<li>未読数を表示すると、フィード数に応じて処理が重くなる

<ul>
<li>フィードを一度すべて表示してからフィルターしている</li>
<li>DOMの処理が重すぎてハングしてしまう(フィード数は3000弱)</li>
<li>問い合わせたら、未読数の処理が一番のボトルネックらしく未読数をOFFにすると改善すると解答を貰った</li>
<li>また、マスターDBはブルガリアのDCにあるらしいとのこと</li>
<li>via <a href="https://twitter.com/azu_re/status/902083679551348736">https://twitter.com/azu_re/status/902083679551348736</a></li>
</ul></li>
<li>フィードから次のフィードに移動するときにリクエストのブロックが起きている

<ul>
<li>Inoreaderでは&quot;Mark as Read&quot;のAPIを叩いて完了したら、次のフィードのコンテンツを取得している</li>
<li>つまり次のフィードに移動するときにはAPIを2つ叩いて完了するまで待っている

<ul>
<li>既読 -&gt; 次のコンテンツ取得</li>
</ul></li>
<li>大体300~800msぐらい一度のリクエストにかかっているので、移動に1秒以上かかる</li>
</ul></li>
</ul>

<p><a href="https://github.com/azu/irodr" title="Irodr">Irodr</a>ではこの問題を次のようにして回避しています。 </p>

<ul>
<li>未読数を表示すると、フィード数に応じて処理が重くなる

<ul>
<li>すべてのフィードは1画面に入ることはないので遅延表示のリストで表示する</li>
<li><a href="https://dev.office.com/fabric#/components/groupedlist">GroupList</a>を使ってる</li>
</ul></li>
<li>フィードから次のフィードに移動するときにリクエストのブロックが起きている

<ul>
<li>&quot;Mark as Read&quot;のAPIとコンテンツ取得のAPIを独立したタイミングで叩くようにする

<ul>
<li>次のフィードのコンテンツ取得 -&gt; さっきまでいたフィードを既読する イメージ</li>
<li>UI上はドメインモデルの未読カウントをすぐ0にするので、すぐ既読になっているように見えるので同じ</li>
</ul></li>
<li>prefetch処理を追加

<ul>
<li>今表示しているフィードから好きな数だけ先読みで取得できるようにしている</li>
<li>これにより次のフィードへの移動は300ms以内には完了する(リクエスト待たないので)</li>
</ul></li>
</ul></li>
</ul>

<h2 id="既知の問題">既知の問題</h2>

<p><a href="http://www.inoreader.com/" title="Inoreader">Inoreader</a>のAPIはCORSに対応していません！
つまりブラウザで直接APIを叩けないという問題があります。</p>

<p>これについても<a href="http://disq.us/p/1lpznh0">問い合わせている</a>のですが、今のところサポートされていないだけなのか、今後もサポートする気はないのかについてはまだ返事を貰ってないですが。（誰かつついてくれると助かります）</p>

<ul>
<li><a href="http://disq.us/p/1lpznh0">http://disq.us/p/1lpznh0</a><br></li>
</ul>

<p>今のところ、CORSを回避するProxyサーバを組み合わせるか、ブラウザ拡張で特定のAPIだけCORSを無視するワークアラウンドが必要です。</p>

<ul>
<li><a href="https://github.com/azu/irodr/issues/11" title="Docs: Add workaround for CORS · Issue #11 · azu/irodr">Docs: Add workaround for CORS · Issue #11 · azu/irodr</a></li>
</ul>

<p>まだ開発中なので、<code>npm start</code>すると自動でCORSを無視できるProxyサーバが立つ仕組みしか用意していません。ブラウザ拡張でCORSを無視させる方法には<a href="https://github.com/azu/irodr/issues/11">まだ問題があるので興味がある人はIssue</a>に日本語でもいいから書き込んでください。</p>

<p><strong>開発用のサーバ</strong>: <code>npm start</code>するとwebpack-dev-serverが立ち上がります。
<a href="http://localhost:3000">http://localhost:3000</a> は自動的にCORSを無視するProxyも兼ねているので、<a href="http://localhost:3000">http://localhost:3000</a> にアクセスすれば利用できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm start
</code></pre></div>
<p>Electronアプリにすれば簡単に無視できますが、RSSリーダはブラウザで開けるウェブアプリのほうが都合がいいのでそこまでやる気はないです（タブを開きまくるのでアプリよりブラウザの方がいい。PRは歓迎しています）</p>

<p>後gh-pagesに公開したいのですが、 %PUBLIC_URL%が置換されないというcreate-react-app-typescriptの謎っぽい挙動を踏んでいるので、わかる方は次のIssueをみてください。</p>

<ul>
<li><a href="https://github.com/azu/irodr/issues/16" title="Not working on gh-pages · Issue #16 · azu/irodr">Not working on gh-pages · Issue #16 · azu/irodr</a></li>
</ul>

<p>他の既知の問題は <a href="https://github.com/azu/irodr/issues">https://github.com/azu/irodr/issues</a> にIssueを立てているので、気になる人は見てみてください。</p>

<h3 id="feedly">Feedly</h3>

<p>DDD的な感じで作っていて、ドメインモデルはInoreaderというサービスには依存しないように書いています。そのため、ちょっとUseCaseの変更は必要ですが、<a href="https://developer.feedly.com/v3/auth/">Feedly</a>など他のRSSリーダサービスにも対応できると思っています。</p>

<p>しかし、<a href="https://developer.feedly.com/v3/auth/">Feedly</a>のAPIの使い方がさっぱり分からなくて手を付けられていません。</p>

<p>どなたか、FeedlyのOAuthクライアントIDを永続的に取得する方法が分かる人は教えてください。
（TwitterやInoreader、GitHubなどは普通のアプリ登録でClient IDを取得できるので、これのやり方Feedlyだとよくわからない。Sandbox以外の方法はどこにあるのかな?）</p>

<h2 id="使い方">使い方</h2>

<p>2017-08-31現在は開発サーバを建てないと使えないです。
次の手順で多分<a href="https://github.com/azu/irodr" title="Irodr">Irodr</a>を手元で動かせるようになると思います。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/azu/irodr
cd irodr
npm install
# yarn installの方がlockを使うので推奨
npm start
open http://localhost:3000
</code></pre></div>
<p>ページを開くと多分TokenがないからInoreaderにログインして認証しろというエラーがでて、認証して戻ってくるとAPIを叩けるようになります。
（おそらくめちゃくちゃわかりにくいし、CORSの問題とかもあるので、開発者ツールを開いて見れる人じゃないと難しい気はします）</p>

<p>使ってみておかしなところは<a href="https://github.com/azu/irodr/issues">Issue</a>を立ててください。3日前に作り始めたばかりなので、まだちゃんと実装してない部分もありますがとりあえずIssueを立てておけば修正される気がします。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://t.co/xKJF7YUu5D">https://t.co/xKJF7YUu5D</a><br>面倒なのでInoreaderをバックエンドにLDRみたいなRSSリーダ書き始めた。<br>Inoreader CORS対応してないのがネック… FeedlyはOAuthのクライアントIDのとり方がよくわからない… <a href="https://t.co/cdbT55cC6x">pic.twitter.com/cdbT55cC6x</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/901991926676692992">August 28, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわりに">おわりに</h2>

<p>LDRは2017-08-31でサービス終了なので、次の記事で紹介してるフィード一覧の詳細データが入った <code>ldr.json</code> と呼んでいるものをまだ取得してない人は一応バックアップしておくといいと思います。
(opmlと違ってレートなど細かいデータも含まれている）</p>

<ul>
<li><a href="http://efcl.info/2017/07/29/ldr-rate-export/" title="LDRのフィードをレート情報付きでエクスポートする | Web Scratch">LDRのフィードをレート情報付きでエクスポートする | Web Scratch</a></li>
</ul>

<p>LDRは長いこと使いましたが、livedoor Readerを作った<a href="http://youkoseki.tumblr.com/post/22588852397/mala">方</a>々、LDRを<a href="https://www.youtube.com/watch?v=596ymsCCxbw">AWS</a>に<a href="http://media.amazonwebservices.com/jp/summit2015/docs/ME-02-Tokyo-Summit-2015.pdf">移して</a>運用されたLive Dwango Readerの方々ありがとうございました。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>略語は括弧の中 or 前? Open Source Software(OSS) or OSS(Open Source Software)</title>
   <link href="http://efcl.info/2017/08/15/textlint-rule-abbr-within-parentheses/"/>
   <updated>2017-08-15T19:25:00+09:00</updated>
   <id>http://efcl.info/2017/08/15/textlint-rule-abbr-within-parentheses</id>
   <content type="html"><![CDATA[ <p>タイトルにあるような正式名称に対する略語(主に頭文字を取るタイプ)を括弧の中に書いているかをチェックする<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>ルールを書きました。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-abbr-within-parentheses" title="textlint-rule-abbr-within-parentheses">textlint-rule-abbr-within-parentheses</a></li>
</ul>

<h2 id="例">例</h2>

<p>例えば、Open Source Softwareの略語はOSSですということを表現したい場合に次のように書くというルールです。</p>

<p><strong>OK</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">This is Open Source Software(OSS)
これはOpen Source Software（OSS）なルールです
JavaScript(JS)
</code></pre></div>
<p><strong>NG</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">LTS（Long-Term Support）
JS(JavaScript)
This rule is OSS(Open Source Software)
これはOSS（Open Source Software）なルールです
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p>npmでインストールして</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-abbr-within-parentheses
</code></pre></div>
<p><code>.textlintrc</code>(Recommended)を設定すれば動きます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;abbr-within-parentheses&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="略語は括弧の中-or-前">略語は括弧の中 or 前?</h2>

<p>統一という観点から見ると次のような文章は略語の書き方が混ざっていてよくありません。</p>

<blockquote>
<p>混ざっていて良くない例<br>
Ths Object Management Group(OMG) maintains specifications for the UML(Unified Modeling Language).</p>
</blockquote>

<p>そのため統一する書き方を探していたのですが、括弧の中に略語を書くというルールを採用してるケースが色々ありました。APA StyleやIBM Style Guideなどはそのような書き方を推奨しているようです。</p>

<p>逆(略語を先に書く)を推奨してるルールは見つけることができませんでしたが、括弧ではなく言葉で略語を解説するスタイルも見られました。しかしながら略語は括弧の中に書くという根拠については見つけられませんでした。</p>

<p>一つまだ疑問があって、括弧の中に書くとどうも補足的な印象が出てきてしまいます。
たとえば、URLのような略語自体が言葉として一般的に成立してるパターンは、Uniform Resource Locatorという正式名称はもはやURLの補足情報になっているように思えます。
他にもAP Styleの正式名称はAssociated Press Styleですが、AP(Associated Press) Styleのように紹介してる文章も見受けられます。(ここでの正式名称はわかりにくいしあまり重要ではないから括弧の中に書かれているのかも?)</p>

<h3 id="english">English</h3>

<ul>
<li><a href="https://english.stackexchange.com/questions/84958/which-would-you-place-in-parentheses-the-expansion-or-the-abbreviation" title="Which would you place in parentheses: the expansion or the abbreviation? - English Language &amp;amp; Usage Stack Exchange">Which would you place in parentheses: the expansion or the abbreviation? - English Language &amp; Usage Stack Exchange</a></li>
<li><a href="http://blog.apastyle.org/apastyle/2015/10/an-abbreviations-faq.html">APA Style Blog: An Abbreviations FAQ</a></li>
<li><a href="http://www.kuediting.com/style/qa-why-you-shouldnt-put-acronyms-in-parentheses/" title="Q&amp;amp;A: Why you shouldn&amp;#39;t put acronyms in parentheses">Q&amp;A: Why you shouldn&#39;t put acronyms in parentheses</a></li>
<li><a href="https://books.google.co.jp/books?id=77WoO_P8yA4C&amp;pg=PA57&amp;lpg=PA57" title="The IBM Style Guide: Conventions for Writers and Editors - Francis DeRespinis, Peter Hayward, Jana Jenkins, Amy Laird, Leslie McDonald, Eric Radzinski">The IBM Style Guide: Conventions for Writers and Editors - Francis DeRespinis, Peter Hayward, Jana Jenkins, Amy Laird, Leslie McDonald, Eric Radzinski - Google ブックス</a></li>
</ul>

<h3 id="japanese">Japanese</h3>

<ul>
<li><a href="http://www.jsphcs.jp/gakkaishi/denshi-m2.pdf" title="Microsoft Word - 執筆ガイドライン20151109訂正.docx - denshi-m2.pdf">Microsoft Word - 執筆ガイドライン20151109訂正.docx - denshi-m2.pdf</a></li>
<li><a href="http://logicalskill.blog.fc2.com/blog-entry-79.html">Logical Skill の深い話 略語の表記</a></li>
<li><a href="http://tmotooka.hatenablog.jp/entry/2013/05/18/212538">略語 : abbreviation と acronym - 職業プログラマの休日出勤</a></li>
</ul>

<p>ウェブに文書を書くと基本的にはHTMLなので、HTMLではどうなっているかが気になりました。
HTMLの世界では<a href="https://developer.mozilla.org/ja/docs/Web/HTML/Element/dfn" title="dfn">dfn</a>と<a href="https://developer.mozilla.org/ja/docs/Web/HTML/Element/abbr" title="abbr">abbr</a>がそれぞれ関係します。</p>

<blockquote>
<p>We use <dfn><abbr title="Hypertext Markup Language">HTML</abbr></dfn> to structure our web documents.</p>
</blockquote>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span>We use <span class="nt">&lt;dfn&gt;&lt;abbr</span> <span class="na">title=</span><span class="s">&quot;Hypertext Markup Language&quot;</span><span class="nt">&gt;</span>HTML<span class="nt">&lt;/abbr&gt;&lt;/dfn&gt;</span> to structure our web documents.<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<p>この場合も正式名称が属性値にあるので、正式名称の方が補足情報にも見えます。</p>

<p>これは感覚的なものですが、略語をそもそも使うのは正式名称が毎回書くには長いためです。
なので、最初にこの正式名称の略語はこう定義しますという意味で <code>正式名称(略語)</code>と書くスタイルがあるのだと思います。またこの時に2回目以降は正式名称は補足的な情報に逆転する感じがします。(<code>abbr</code>要素の例)
一方、そもそも一度しか出てこない単語はどちらでもいいという理由で表記が安定しないような気がします。(このルールで縛りたい部分)</p>

<p>この辺の書き方や読んだときにどのような印象を受けるかについて調査レポートや論文とか知ってる人いたら教えてください。</p>

<hr>

<p>作ったtextlintルール</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-abbr-within-parentheses" title="textlint-rule-abbr-within-parentheses">textlint-rule-abbr-within-parentheses</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>LDRのフィードをレート情報付きでエクスポートする</title>
   <link href="http://efcl.info/2017/07/29/ldr-rate-export/"/>
   <updated>2017-07-29T23:58:00+09:00</updated>
   <id>http://efcl.info/2017/07/29/ldr-rate-export</id>
   <content type="html"><![CDATA[ <p>LDRのフィードデータから<strong>レート</strong>（★★★☆☆）をカテゴリとしたOPML(XML)ファイルを作成するコマンドラインツールを作りました。</p>

<ul>
<li><a href="https://github.com/azu/ldr-export-opml" title="azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.">azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.</a></li>
</ul>

<p><a href="http://reader.livedoor.com/reader/" title="Live Dwango Reader">Live Dwango Reader</a>から他のRSSリーダへ移行する際に、レートデータを維持して移行する用途です。</p>

<p>fastladderへの移行の場合は別の方法もあります。</p>

<ul>
<li><a href="http://blog.bulkneets.net/mt/archives/45" title="LDRのレートの保存と復元">LDRのレートの保存と復元</a></li>
</ul>

<h2 id="必要なもの">必要なもの</h2>

<ul>
<li>Node.js 6&gt;=</li>
<li>後述する<code>ldr.json</code></li>
</ul>

<h2 id="ldr-json">ldr.json</h2>

<p>LDRのopmlエクスポートにはカテゴリ（ディレクトリ）の情報しか含まれていません。
なので、編集画面に使われてるAPIのレスポンスデータ(<code>ldr.json</code>とここでは呼ぶ)を使います。</p>

<p>ldr.jsonは <code>http://reader.livedoor.com/api/subs?unread=0</code>のレスポンスです。</p>

<p>簡単な方法だと以下の手順で取得できます。
(ApiKeyがいるので、curlなどだと余計に面倒なので、ログインしてるブラウザでコピーするのが楽)</p>

<p><img src="https://monosnap.com/file/abUjuGNgDfX317alNW0j42p1gxM8SO.png" alt="image"></p>

<ol>
<li>ブラウザの開発者ツールでネットワークを開く</li>
<li>&quot;編集&quot;をクリック</li>
<li><code>http://reader.livedoor.com/api/subs?unread=0</code>へのリクエストを探す</li>
<li>レスポンスをコピーして <code>ldr.json</code> として保存する</li>
</ol>

<p><code>ldr.json</code>にはカテゴリ、レートなどの情報が含まれています。
普通にexportできる<code>export.opml</code>の上位互換なデータなので、閉鎖する前に取得しておくと便利だと思います。</p>

<h2 id="install">Install</h2>

<p>ldr-export-opmlは<code>npm</code>などでインストール出来ます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install ldr-export-opml -g
</code></pre></div>
<p>使い方は書いてないですが普通にモジュールとしても使えるので、適当に使ってください。</p>

<h2 id="使い方">使い方</h2>

<p>取得した <code>ldr.json</code> を引数に渡して実行するopml形式のXMLを出力してくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Usage
  $ ldr-export-opml ldr.json

Options:

  --output path to output

Examples
  $ ldr-export-opml path/to/ldr.json
  $ cat path/to/ldr.json | ldr-export-opml 
</code></pre></div>
<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">LDRのフィードデータからレート（★★★☆☆）をカテゴリとしたOPML(XML)ファイルを作成するツールです。<a href="https://t.co/Be9zyssQyN">https://t.co/Be9zyssQyN</a> <a href="https://t.co/0doJLj9Xb9">pic.twitter.com/0doJLj9Xb9</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/891216584865439744">July 29, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<p>LDRも<a href="http://blog.livedoor.jp/staff_reader/archives/52278396.html" title="サービスを終了">サービス終了</a>です。</p>

<p>乗り換え先をどうするのかがまだ決まってないけど多分必要になるので作りました。(バグってたらPull Requestください)</p>

<ul>
<li><a href="https://github.com/azu/ldr-export-opml" title="azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.">azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.</a></li>
</ul>

<p>一日数千エントリ見てるので、<a href="https://gist.github.com/azu/491fa1c5050fc378c746">j, k, n</a>、s, aあたりがどれだけつまらずに動くかが大事になってくるので、乗り換え先の相性が大変。</p>

<p>なので、Feedlyとかのビジュアルよりなマガジン系はあんまり向いてない。
<a href="https://github.com/fastladder/fastladder" title="Fastladder">Fastladder</a>を使えるといいけど、維持コスト(手間/値段)が高くなるので手を出しにくい。<a href="https://tt-rss.org/" title="Tiny Tiny RSS">Tiny Tiny RSS</a>も同じような理由。</p>

<p><a href="https://www.inoreader.com/" title="inoreader.com">inoreader.com</a>は悪くは無さそうだけど、スムーズスクロールが遅かったり、プリロードがなかったりしてちょっとチューニングが必要そう。(コードを見てたけど結構レガシーな感じだったのでどこまでhookできるんだろ)</p>

<p>クライアント側はどうにでもなる気がするので、サーバ側をServerlessな感じにしたものがあればコスト少なくて済むのかなと思ったけど、LDRのようなサービスはクローラーとその結果の保存データで容量食うのであんまり向いて無さそう。<a href="https://firebase.google.com/pricing/?hl=ja">Firebase</a>みたいなところでやったほうがコスト的には良さそう。</p>

<p>あとは<a href="http://cappuccinoapp.com/" title="Cappuccino">Cappuccino</a>とかみたいなクライアント側だけでどうにかするパターンかな。(未読管理的な問題はありそうだけど)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Almin 0.13リリース - アプリケーションレイヤーのトランザクション</title>
   <link href="http://efcl.info/2017/07/24/almin-0.13/"/>
   <updated>2017-07-24T10:35:00+09:00</updated>
   <id>http://efcl.info/2017/07/24/almin-0.13</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a> 0.13.xのStable版をリリースしました。
今後に向けて下地となる基盤部分をかなり書き換えたのと、Strict modeや試験的にTransactionを追加しました。</p>

<p><a href="https://github.com/almin/almin/compare/almin%400.12.0...almin%400.13.10"><img src="http://efcl.info/wp-content/uploads/2017/07/24-1500860504.png" alt="Diff 12.x...13"></a></p>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/almin%400.13.10" title="Release Almin 0.13.10 · almin/almin">Release Almin 0.13.10 · almin/almin</a></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>0.12xからの<a href="https://github.com/almin/almin/releases/tag/almin%400.13.10" title="Release Almin 0.13.10 · almin/almin">0.13.10</a>の変更をまとめると次の通りです。</p>

<ul>
<li>🔥 Breaking Changes

<ul>
<li>IE9/IE10のサポート終了

<ul>
<li>CIから落としただけなのでまだ動くかもしれないですが</li>
</ul></li>
<li>一部Deprecatedはありますが基本的にコードは変更しなくても動くはずです</li>
</ul></li>
<li>⚠️ Deprecated

<ul>
<li>リネーム <code>context.onWillExecuteEachUseCase</code> -&gt; <code>context.events.onWillExecuteEachUseCase</code></li>
<li><a href="https://github.com/almin/migration-tools" title="almin/migration-tools">almin/migration-tools</a>を使うことで自動的にマイグレーションできます。</li>
</ul></li>
<li>🆕 Features

<ul>
<li>Strict mode</li>
<li>Transaction(strict modeでのみ有効)</li>
<li><code>executor</code> - <code>execute</code>のType Safe版です

<ul>
<li>意見募集中: <a href="https://github.com/almin/almin/issues/107" title="TypeScript: improve UseCase#execute typing · Issue #107 · almin/almin">TypeScript: improve UseCase#execute typing · Issue #107 · almin/almin</a></li>
</ul></li>
</ul></li>
<li>:house: Internal

<ul>
<li>Unit of Work(作業単位)が内部的な実装として追加され、データフローなどがコードとしてきちんと管理されるように(Transactionなどもこれを利用)</li>
</ul></li>
</ul>

<p>詳しくは<a href="https://github.com/almin/almin/releases/tag/almin%400.13.10" title="Release Almin 0.13.10 · almin/almin">Release Almin 0.13.10 · almin/almin</a>をみてください。</p>

<hr>

<h2 id="breaking-change-🔥">Breaking Change 🔥</h2>

<p>Almin 0.13は幾つか破壊的な変更がありますが、殆どの場合コードは変更しなくても動くと思います。</p>

<h3 id="drop-ie9-and-ie10">Drop IE9 and IE10</h3>

<p>IE 9/10のサポートは終了しました。</p>

<ul>
<li><a href="https://www.microsoft.com/en-us/windowsforbusiness/end-of-ie-support" title="Internet Explorer End of Support">Internet Explorer End of Support</a></li>
</ul>

<h3 id="store-ondispatch-receive-only-dispatched-the-payload-by-usecase-dispatch-224-254-255">Store#onDispatch receive only dispatched the Payload by UseCase#dispatch #224 #254 #255</h3>

<p><code>Store#onDispatch</code>は今まで<code>UseCase#dispatch</code>以外の内部的なpayloadを受け取っていました。
今回からは<code>Store#onDispatch</code>は<code>UseCase#dispatch</code>のみ、つまりユーザー自身が<code>dispatch</code>したpayloadのみを受け取ります。</p>

<p>他のAlminのライフサイクルイベントを受け取り対場合は<code>context.events</code>(<code>LifeCycleEventHub</code>)を参照してください。</p>

<ul>
<li><a href="https://almin.js.org/docs/tips/usecase-lifecycle.html" title="LifeCycle of UseCase · Almin.js">LifeCycle of UseCase · Almin.js</a></li>
</ul>

<p><strong>Recommened</strong>: 基本的にはStoreの更新は<code>Store#receivePayload</code>で行うことを推奨しています。(Strict modeはこれをチェックできます)</p>

<p><code>Store#receivePayload</code>でのStore更新のパターン</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">YourStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
   <span class="nx">constructor</span><span class="p">(){</span>
      <span class="kr">super</span><span class="p">();</span>
      <span class="c1">// Initialize state</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
         <span class="nx">foo</span> <span class="o">:</span> <span class="s2">&quot;bar&quot;</span>
      <span class="p">};</span>
   <span class="p">}</span>

   <span class="c1">// Update code here</span>
   <span class="nx">receivePayload</span><span class="p">(</span><span class="nx">payload</span><span class="p">){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">));</span>
   <span class="p">}</span>

   <span class="nx">getState</span><span class="p">(){</span>
     <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="automatically-catch-throwing-error-from-usecase-execute-193-194">Automatically catch  throwing Error from <code>UseCase#execute()</code> #193 #194</h3>

<p>0.12までは<code>UseCase#execute</code>で同期的なエラーが発生すると突き抜けて、<code>window.onerror</code>まで到達していました。</p>

<p>0.13からは、同期的なエラーであっても<code>catch</code>できるようになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">ThrowUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
  <span class="nx">execute</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ThrowUseCase</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;It can catch&quot;</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div>
<h3 id="new-store-throw-error"><code>new Store()</code> throw Error</h3>

<p><code>Store</code>はabstract classなので継承してください。
<code>new Store()</code>は単純に<code>getState</code>時に例外を投げます。</p>

<h2 id="notable-changes">Notable Changes</h2>

<h3 id="renaming-context-on-to-context-events-on-239">Renaming: <code>context.on*</code> to <code>context.events.on*</code> #239</h3>

<p><code>context.on*</code>などのライフサイクルイベントを検知するイベントを<code>context.events.on*</code>に移動しました。</p>

<p>ただし、<code>Context#onChange</code>はライフサイクルイベントという扱いではなく、UI更新のためのハンドラを登録するAPIなのでそのまま<code>Context</code>に残っています。
他のAPIは非推奨となっています。</p>

<p>今はまだ<code>@deprecated</code>タグがついただけですが、もうちょっとしたらコンソールにも警告が出るようになります。そして次のメジャーアップデートで削除します。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/258" title="almin: Deprecated warning should be print · Issue #258 · almin/almin">almin: Deprecated warning should be print · Issue #258 · almin/almin</a></li>
</ul>

<p>これを移行するマイグレーションツールも用意してあるのでご利用ください。</p>

<ul>
<li><a href="https://github.com/almin/migration-tools#migrate-012-to-013" title="almin/migration-tools: Migration scripts for Almin.">almin/migration-tools: Migration scripts for Almin.</a></li>
</ul>

<h3 id="migration">Migration</h3>

<p><a href="https://github.com/almin/migration-tools" title="almin/migration-tools">almin/migration-tools</a>はつぎのようにnpmでインストールできます。
後は移行したファイルを指定して対話に従って選択すれば完了です。</p>

<p><strong>Notes</strong> 先にバージョン管理システムにコミットしてバックアップしてから実行してください。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm install -g @almin/migration-tools
almin-migration-tools <span class="o">[</span>&lt;file<span class="p">|</span>glob&gt; ...<span class="o">]</span>
</code></pre></div>
<p><strong>Before</strong>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">context</span><span class="p">.</span><span class="nx">onWillExecuteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">onDidExecuteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">onCompleteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">onErrorDispatch</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div>
<p><strong>After</strong>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">context</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onWillExecuteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onDidExecuteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onCompleteEachUseCase</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onErrorDispatch</span><span class="p">((</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div>
<h3 id="undocumentなapiであるusecaseexecutor-on-が削除-243">UndocumentなAPIである<code>UseCaseExecutor#on*</code>が削除 #243</h3>

<p>Remove</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">UseCaseExecutor#onWillExecuteEachUseCase
UseCaseExecutor#onDidExecuteEachUseCase
UseCaseExecutor#onCompleteExecuteEachUseCase
</code></pre></div>
<h2 id="feature-🆕">Feature 🆕</h2>

<h2 id="strict-mode">Strict mode</h2>

<p>詳しくはドキュメントを見てください。</p>

<p><strong>ドキュメント</strong>: <a href="https://almin.js.org/docs/tips/strict-mode.html">https://almin.js.org/docs/tips/strict-mode.html</a></p>

<p>Strict modeは<code>Store#receivePayload</code>以外のタイミングで、<code>Store</code>を更新シていると警告を出すようにするモードです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// enable strict mode</span>
<span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span> 
   <span class="nx">dispatcher</span><span class="p">,</span> 
   <span class="nx">store</span><span class="p">,</span> 
   <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
     <span class="nx">strict</span><span class="o">:</span> <span class="kc">true</span>
   <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>関連:</p>

<ul>
<li><a href="https://vuex.vuejs.org/en/strict.html">Strict Mode · Vuex</a></li>
<li><a href="https://github.com/mobxjs/mobx/blob/gh-pages/docs/refguide/api.md#usestrict">mobx/api.md at gh-pages · mobxjs/mobx</a></li>
</ul>

<h3 id="context-transaction-226"><code>Context#transaction</code> #226</h3>

<ul>
<li><strong>Stability</strong>: Experimental</li>
<li><strong>この機能はstrict modeではないと警告がでます</strong></li>
</ul>

<p><code>Context#transaction</code>はUseCaseをトランザクション的に実行するAPIです。
<code>Context#useCase</code>は一つのUseCaseを一個ずつ実行して、そのUseCaseの実行終了毎にViewの更新が行われます。(具体的にはStoreが一つでも変更されているなら<code>Context#onChange</code>が呼び出されます)</p>

<p>一方、<code>Context#transaction</code>は<code>TransactionContext</code>というトランザクション用のコンテキストを作り、<code>transactionContext.useCase</code>でUseCaseを実行してもすぐにはViewの更新は行われません。</p>

<p>幾つかのUseCaseを<code>transactionContext.useCase</code>で実行した後に、確定したいタイミングで、<code>transactionContext.commit()</code>を実行するとそれまでに実行していたUseCaseからの<code>dispatch</code>やライフサイクルなどはまとめてStoreに伝わります。</p>

<p><code>Context#transaction</code>の中でUseCaseを何度実行しても結果として起きるViewの更新は<code>commit()</code>したタイミングの一回だけになります。</p>

<p><a href="http://www.nomnoml.com/#view/%23padding%3A%2010%0A%0A%5BContext%23useCase%7C%0A%20%20%20%5B%3Cusecase%3E%20UseCase%20A%5D%0A%5D%0A%5BContext%23transaction%7C%0A%20%20%5BUnit%20of%20Work%7C%0A%20%20%20%5B%3Cusecase%3E%20UseCase%20A%5D%0A%20%20%20%5B%3Cusecase%3E%20UseCase%20B%5D%0A%20%20%20%5B%3Cusecase%3E%20UseCase%20C%5D%0A%20%20%5D%0A%5D" title="nomnoml"><img src="https://user-images.githubusercontent.com/19714/28418288-245d9786-6d96-11e7-87af-611682a18dec.png" alt="UseCase vs. Transaction">
</a></p>

<p><strong>サンプルコード</strong>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span>
    <span class="nx">store</span><span class="o">:</span> <span class="nx">storeGroup</span><span class="p">,</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">strict</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="c1">// then - called change handler a one-time</span>
<span class="kd">let</span> <span class="nx">onChangeCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">stores</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">onChangeCount</span><span class="o">++</span><span class="p">;</span>
<span class="p">});</span>
<span class="c1">// when</span>
<span class="nx">context</span>
    <span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="s2">&quot;transaction name&quot;</span><span class="p">,</span> <span class="nx">transactionContext</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">transactionContext</span>
            <span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ChangeAUseCase</span><span class="p">())</span>
            <span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">transactionContext</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ChangeAUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">transactionContext</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ChangeAUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">transactionContext</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ChangeAUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">transactionContext</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">ChangeAUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// commit the result to StoreGroup</span>
                <span class="nx">transactionContext</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span>
            <span class="p">});</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// finish the transation</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">onChangeCount</span><span class="p">);</span> <span class="c1">// =&gt; 1</span>
    <span class="p">});</span>
</code></pre></div>
<p>名前の通り大量のUseCaseを連続して実行する必要がある際に利用できます。
初期画面に必要なUseCaseが複数があるが、その途中で何度もViewを更新する必要がないといった際に、一つのトランザクションとしてまとめることができます。</p>

<p>例えばReactにも<a href="https://github.com/facebook/react/issues/10231#issuecomment-316644950" title="ReactDOM.unstable_batchedUpdates">ReactDOM.unstable_batchedUpdates</a>という隠しAPIみたいなものがありますが、そういうのをState管理側でやるための仕組みです。</p>

<p>Reduxにも似たようなBatch updatingの仕組みを持ったmiddlewareがあります。</p>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/542">Idea: Batching actions · Issue #542 · reactjs/redux</a></li>
<li><a href="https://github.com/acdlite/redux-batched-updates">acdlite/redux-batched-updates: Batch React updates that occur as a result of Redux dispatches, to prevent cascading renders. See https://github.com/gaearon/redux/issues/125 for more details.</a></li>
</ul>

<p>Alminの<code>Context#transaction</code>はstrict modeじゃないと正しく動きません。
簡単にいうと、Alminの範囲外でStoreが更新されているとそのトランザクションが正しくても結果が正しくないことがおこるのでそういうケースを防止するためです。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/219" title="almin: Transaction of UseCase · Issue #219 · almin/almin">almin: Transaction of UseCase · Issue #219 · almin/almin</a></li>
</ul>

<p>現在の実装は1つのトランザクションで1回の<code>commit()</code>または<code>exit()</code>のみができます。<code>exit()</code>した場合はそのトランザクションで実行したUseCaseのイベントを破棄します。</p>

<p>また、今はあるUseCaseの中から<code>commit()</code>したい！やサブトランザクションのような概念はありません。<strong>Stability</strong>: Experimentalなのでその辺に意見ある人は意見ください。</p>

<h3 id="add-fluent-style-executor-193">Add Fluent style <code>executor</code> #193</h3>

<ul>
<li><strong>Stability</strong>: Experimental</li>
<li>This feature is subject to change. It may change or be removed in future versions.</li>
<li>See #193 </li>
</ul>

<p>TypeScriptで<code>UseCase#execute</code>をする際に型チェックがちゃんとできるバージョンです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyUseCase</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">executor</span><span class="p">(</span><span class="nx">useCase</span> <span class="o">=&gt;</span> <span class="nx">useCase</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div>
<p><code>context.useCase(useCase).execute()</code>は<code>context.useCase(useCase).executor(useCase =&gt; useCase.execute())</code>の糖衣構文です。</p>

<p>もっとこうした方がよさそうという意見がある場合は次のIssueに意見をください。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/193" title="UseCase: Fluent style UseCase · Issue #193 · almin/almin">UseCase: Fluent style UseCase · Issue #193 · almin/almin</a></li>
</ul>

<h2 id="documentation">Documentation</h2>

<p>APIドキュメントが更新されているので <a href="https://almin.js.org/">https://almin.js.org/</a> をみてください。</p>

<h2 id="almin-logger">Almin-logger</h2>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/almin-logger%405.0.0" title="almin-logger@5.0.0">almin-logger@5.0.0</a>は Almin 0.13.x をサポートしています。</li>
</ul>

<h2 id="internals">Internals</h2>

<p><a href="http://efcl.info/2017/07/17/JavaScript-to-TypeScript/" title="JavaScriptのライブラリを徐々にTypeScriptに移行する | Web Scratch">JavaScriptのライブラリを徐々にTypeScriptに移行する | Web Scratch</a>で書いたようにAlminのテストをTypeScriptに少しづつ移行しています。</p>

<p>まだ全部は移行できてないので、Pull Request待ってます！</p>

<h2 id="notes-📝">Notes 📝</h2>

<h3 id="unit-of-work">Unit of Work</h3>

<p>Almin 0.13から<a href="https://github.com/almin/almin/blob/master/packages/almin/src/UnitOfWork/UnitOfWork.ts" title="UnitOfWork">UnitOfWork</a>という内部的なクラスが追加されました。
簡単にいうと通常はUseCaseの実行をそのままStoreに流してくれますが、トランザクション時はUseCaseの実行を止めたり進めたりできるものです。</p>

<p><code>Context#transaction</code>はこれの上に作られています。</p>

<p><a href="http://www.nomnoml.com/#view/%23padding%3A%2010%0A%0A%5BUseCase%7C%0A%20%20%20%20%5BUseCase%20Executor%20A%7C%0A%20%20%20%20%20%20%20%20%5B%3Cusecase%3EChild%20UseCase%5D%0A%20%20%20%20%5D%20--%3E%20%5BUseCase%20Executor%20B%5D%0A%20%20%20%20%5BUseCase%20Executor%20B%7C%0A%20%20%20%20%20%20%20%20%5B%3Cusecase%3EUseCase%5D%0A%20%20%20%20%5D%0A%5D%0A%5BUnit%20of%20Work%7C%0A%20%20%20%20%5BCommitments%7C%0A%20%20%20%20%20%20%20%20%5BDispatched%20Payload%5D%0A%20%20%20%20%20%20%20%20%5BSystem%20Payload%5D%0A%20%20%20%20%5D%0A%5D%0A%5BStoreGroup%7C%0A%20%20%20%20%5BStore%5D%0A%20%20%20%20%5B%3Cnote%3Eif%20any%20store%20is%20change%2C%20it%20emit%20changed%5D%0A%5D%0A%5BUseCase%5D%20payload%20--%3E%20%5BLifeCycleEventHub%7C%0A%09%5BDispatcher%5D%0A%5D%0A%5BUseCase%5D%20payload%20--%3E%20%5B%3Creadonly%3EUnit%20of%20Work%5D%0A%5BUnit%20of%20Work%5D%20%3Ctransaction%20event%3E%20--%3E%20%5BLifeCycleEventHub%5D%0A%5BUnit%20of%20Work%5D%20Commitment%20--%3E%20%5BStoreGroup%5D%20%0A%5BStoreGroup%5D%20changes%20--%3E%20%5BLifeCycleEventHub%5D%0A%5BLifeCycleEventHub%5D%20%3C-%20%5BContext%5D%0A" title="nomnoml"><img src="https://user-images.githubusercontent.com/19714/28418164-c121b12a-6d95-11e7-90e8-057ad12b6620.png" alt="Unit of Work">
</a></p>

<h2 id="サンプルコード">サンプルコード</h2>

<p>サンプルコードにTypeScript + AlminでのTodoMVCの実装を追加しました。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/examples/todomvc-typescript" title="almin/examples/todomvc-typescript at master · almin/almin">almin/examples/todomvc-typescript at master · almin/almin</a></li>
</ul>

<p><a href="https://github.com/almin/almin/tree/master/examples/todomvc">JavaScript版</a>や<a href="https://github.com/almin/almin/tree/master/examples/todomvc-flow">FlowType版</a>などもあります。</p>

<p>個人的には<a href="https://github.com/almin/almin/tree/master/examples/shopping-cart" title="shopping-cart">shopping-cart</a>の方がらしく書けているかなと思います。</p>

<p>触ってみて何かおかしなサンプルがある可能性はあるので、そのときはIssueを立ててください。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/256" title="example: update svg-feeling&amp;#39;s postcss config · Issue #256 · almin/almin">example: update svg-feeling&#39;s postcss config · Issue #256 · almin/almin</a></li>
</ul>

<p>もっと実際のアプリケーション的なコードを見たい場合は<a href="https://github.com/azu/faao" title="Faao">Faao</a>などを見てみてください。
これはプロダクションのレベル感で書いているので、そこそこ複雑です。</p>

<ul>
<li><a href="https://github.com/azu/faao">azu/faao: Faao is a GitHub issue/pull-request client on Electron.</a></li>
<li><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a></li>
</ul>

<h2 id="おわり">おわり</h2>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>は大抵の人が読んで分かるコードを書けるようにデザインしています。
ありふれたクラスベースにしているのもそうですが、
<a href="https://github.com/reactjs/react-redux" title="react-redux">react-redux</a>の<code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code>みたいにいきなり厳しい感じになったしないように気をつけています。</p>

<p><a href="https://github.com/reactjs/redux" title="Redux">Redux</a>はドキュメントも充実してるし、やっぱり基盤的な部分はよくできるてるのでReduxもちゃんと理解した方がいいと思います。ミドルウェアや拡張部分が複雑になったりしてるだけでコアはしっかりしてます。</p>

<ul>
<li><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/Redux/" title="Redux · JavaScript Plugin Architecture">Redux · JavaScript Plugin Architecture</a></li>
</ul>

<p>Alminは<a href="https://almin.js.org/docs/tutorial/counter/">ReduxやFluxのようなこと</a>もできますが、ドメイン層をクライアントサイドどう扱うかという部分に焦点を置いています。
逆をいえば、Alminが扱わない領域(ドメイン/インフラ)と扱う領域(アプリケーションレイヤー/Viewの連携)をはっきり区別するということにつながります。</p>

<p>たとえば、Fluxだとドメイン(ロジック)をどこに置くかを考えると、Storeの中を構造化していくことになることが多いです。</p>

<ul>
<li><a href="http://blog.j5ik2o.me/entry/2016/09/09/200643">FluxとDDDの統合方法 - かとじゅんの技術日誌</a></li>
<li><a href="http://qiita.com/Takepepe/items/1ce54a9564d5a6d4939d">Reduxにドメイン層を導入する - Qiita</a></li>
<li><a href="http://embryo.hatenadiary.com/entry/2016/12/16/011446">FluxとDDD(レイヤードアーキテクチャ)について考えてみた - embryo</a></li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2017/07/24-1500900273.png" alt="Flux"></p>

<p>Storeの中だとドメイン側がライブラリの都合に引っ張られてしまいがちです。(強い意志が必要)
なので、Alminは扱う領域をアプリケーションレイヤーのみにして、その他のドメインレイヤーなどはユーザー側で扱う領域としています。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/07/24-1500900453.png" alt="Almin"></p>

<p>この構造によってドメインのロジックはPureなJavaScriptとして書けることを期待しています。
この辺については次のスライドで書いています。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html" title="Faao - ドメイン駆動設計で作るGitHub Issue Client -">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a></li>
</ul>

<p>実際に<a href="http://niconare.nicovideo.jp/watch/kn2499">ある程度の規模感</a>のものもちゃんと書けるようです。</p>

<p>今後の予定としては、トランザクション周りをもう少し考えたいのと、結局ライブラリの中として上手くできていてもプロジェクトの中で上手く動くかは別なのでその辺を上手くナビゲーションできる仕組みを考えたい気がします。</p>

<p>例えば、AlminのUseCase実装から<a href="https://azu.github.io/faao/meta/use-case.html" title="Faao - UseCase architecture">ユースケース図を自動生成</a>とかは現実的にできます。このようなプロジェクトが目指すべき構造からずれていないかを可視化できたりチェックできるような仕組みを提供できると、ユーザーは書くことに集中できてモチベーションが維持しやすいのではないかなと思ったりします。</p>

<p>そういう視点のContributeも待ってますし、それとは別にPRが送りやすそうなIssueは<code>Good for beginners</code>ラベルが付けてあります。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+for+beginners%22" title="Issues · almin/almin"><code>Good for beginners</code>: Issues · almin/almin</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScriptのライブラリを徐々にTypeScriptに移行する</title>
   <link href="http://efcl.info/2017/07/17/JavaScript-to-TypeScript/"/>
   <updated>2017-07-17T22:27:00+09:00</updated>
   <id>http://efcl.info/2017/07/17/JavaScript-to-TypeScript</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>というライブラリは元々JavaScript(+Babel)で書かれていましたが、今年の2月に<code>src/</code>下のソースコードはTypeScriptに移行しました。</p>

<p>その時のコミットログは次のPRに残っているため、コミットログを1コづつ見ていけばどのように行われていったが分かると思います。</p>

<p><a href="https://github.com/almin/almin/pull/68/commits"><img src="http://efcl.info/wp-content/uploads/2017/07/17-1500298209.png" alt="コミットログ"></a></p>

<ul>
<li><a href="https://github.com/almin/almin/pull/68" title="Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin">Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin</a></li>
</ul>

<p>この時取った方法は大まかに次のような手順でした</p>

<h2 id="src-の-typescript化"><code>src/</code> の TypeScript化</h2>

<ol>
<li>Babel -&gt; JS(js -&gt; js)だったものをTypeScript -&gt; Babel -&gt; JSに<a href="https://github.com/almin/almin/pull/68/commits/7afc5a9d5ed2aa2f45da497f07c881a8c13767f6">ビルドスクリプトを変更</a>

<ul>
<li>TypeScriptは<code>target</code>を<code>esnext</code>にすることで単純に型を取り除くだけの変換にする</li>
<li>ES2015 -&gt; ES5を実際にやるのは既存のBabelのまま</li>
<li>空のtsファイルを一つおいて実際にコンパイルが通るかを検証</li>
</ul></li>
<li><a href="https://github.com/almin/almin/pull/68/commits/721d9fec6066fdc4b091b851f962c1d3ef60ace9">既存のテストを1で変換したソースで動くようにパスを変える</a></li>
<li><a href="https://github.com/almin/almin/pull/68/commits/d83ccc11cf69f807e99b54add0de7ba469953cfb">1つ</a>づつ<code>.js</code>を<code>.ts</code>へ<a href="https://github.com/almin/almin/pull/68/commits/27520ff7eecb834870d2095d6050e33983cefd06">変換</a>していく

<ul>
<li>一時的に型が解決できないものは<code>any</code>にして後から型を直す</li>
<li>コンパイルが通ってテストが通るなら動作的に問題ない</li>
<li>実際に変換後のリリースではこれに起因するバグはなかったと思います</li>
<li><a href="http://efcl.info/2017/03/08/almim0.10/" title="Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch">Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch</a></li>
</ul></li>
</ol>

<p>という手順でJavaScript to TypeScriptを行いました。
この時の変更では、<code>test/</code>下のテストファイルはJavaScriptのままでした。</p>

<p>テストの方も複雑なケースが色々増えてきたので、TypeScriptに移行したいなーと思って最近移行できる環境を作りました。</p>

<h2 id="test-のtypescript化"><code>test/</code> のTypeScript化</h2>

<p><code>src/</code>下はまとめて移行するスタイルでしたが、<code>test/</code>下は徐々に必要なタイミングで移行できるような形にしています。</p>

<p>テストコードは<code>src/</code>下とは違い、テストコード同士が互いに依存することはないため、1つのテストファイルごとに移行していけるはずです。</p>

<p>そのため、<code>src/</code>のやり方とは異なりTypeScriptの<code>allowJs</code>機能を使って移行しています。
次のPRで移行した手順が見られます(試行錯誤したのでキレイなコミットではない)</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/232" title="test(almin): setup TypeScript testing env by azu · Pull Request #232 · almin/almin">test(almin): setup TypeScript testing env by azu · Pull Request #232 · almin/almin</a></li>
</ul>

<p>実際にまとめると次のような方法で移行しています。</p>

<ol>
<li><code>test/</code>以下にテスト用の<a href="https://github.com/almin/almin/blob/8a52b440b68693151b589415825fd6a26ebb6ada/packages/almin/test/tsconfig.json"><code>tsconfig.json</code></a>を追加する

<ul>
<li><code>src/</code>用のコンパイル設定を<code>&quot;extends&quot;: &quot;../tsconfig.json&quot;</code>で継承し、<code>&quot;allowJs&quot;: true</code>の設定を追加したものを利用</li>
<li><code>&quot;allowJs&quot;: true</code>にすることで<code>.js</code>もTypeScriptがコンパイルできるようになる</li>
<li><code>src/**/*</code>と<code>test/**/*</code>をincludesし、テスト向けにテストコードとソースコードを一緒にコンパイルする</li>
<li>コンパイル結果、 <code>src</code>は<code>lib/src</code>へ、 <code>test/</code>は<code>lib/test</code>へ出力する</li>
</ul></li>
<li>テストファイルが<code>import {Store} from &quot;../lib/&quot;</code>のソースコードをみているのを、<code>import {Store} from &quot;../src/&quot;</code>のソースコードを見るようにする

<ul>
<li>コンパイル前は<code>src/*.ts</code>を見るが、コンパイル後は<code>lib/src/*.js</code>を見ることになる</li>
<li>出力先は<code>lib/{src,test}/</code>となっていて、<code>lib/test</code>から<code>../src</code>を見ると<code>lib/src</code>をみる状態を作れる</li>
<li>これでコンパイル結果は全てただのJSなので、後は普通にmochaなどでJavaScriptのテストとして<code>lib/test</code>を実行する</li>
</ul></li>
<li>テストの実行前に<code>test/tsconfig.json</code>を使ってコンパイルする

<ul>
<li><code>&quot;test&quot;: &quot;npm run build:test &amp;&amp; npm run test:js&quot;</code>という感じ</li>
</ul></li>
</ol>

<p><code>test/tsconfig.json</code>:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;extends&quot;</span><span class="p">:</span> <span class="s2">&quot;../tsconfig.json&quot;</span><span class="p">,</span>
  <span class="nt">&quot;compilerOptions&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;allowJs&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;declaration&quot;</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">},</span>
  <span class="nt">&quot;include&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;../src/**/*&quot;</span><span class="p">,</span>
    <span class="s2">&quot;./**/*&quot;</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p><code>./tsconfig.json</code>に<code>&quot;rootDir&quot;: &quot;./&quot;,</code>を設定しておけば、テスト用と普段の設定で出力先が同じになる。</p>

<p>これで<code>.ts</code>と<code>.js</code>のテストファイルが混在している状態でもテストが実行できるので、必要なタイミングで<code>.js</code>を<code>.ts</code>に変更していけます。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/248" title="test(almin): cleanup by azu · Pull Request #248 · almin/almin">test(almin): cleanup by azu · Pull Request #248 · almin/almin</a></li>
</ul>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="ja" dir="ltr">alminのテスト TypeScriptに移行できる環境作ってあったけど、TypeScriptって(というかWebStormって)こんな混在してる状態でもちゃんと動くんだ<br>(TypeScript的にはAllowJSしてる、WebStorm普通に補完効いてて面白い) <a href="https://t.co/OUBcmOYjZv">pic.twitter.com/OUBcmOYjZv</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/886935717393215489">July 17, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>またすべてのテストがTypeScriptにはなってないのでコントリビュート待ってます。
基本的には<code>.ts</code>にして型エラーを潰していくだけの作業だと思います。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/144" title="Convert test/ to TypeScript · Issue #144 · almin/almin">Convert test/ to TypeScript · Issue #144 · almin/almin</a></li>
</ul>

<p>すべてのテストが<code>.ts</code>になった後は、<a href="https://github.com/TypeStrong/ts-node" title="ts-node/register">ts-node/register</a>などを使ってruntime hookで変換できるので<code>npm run build:test</code>が必要なくなります。</p>

<h2 id="おわり">おわり</h2>

<p><code>src/</code>のように依存関係があるものは<a href="https://github.com/almin/almin/pull/68">一気に</a>TypeScriptへ変換した方が良いです。</p>

<p>一方、<code>test/</code>のようにそれぞれのファイルが独立しているものは、<code>--allowJs</code>を使うことで既存のJavaScriptを混ぜた状態でTypeScriptへ移行できるようになりました。</p>

<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" title="Compiler Options · TypeScript">Compiler Options · TypeScript</a></li>
</ul>

<p>最近だと<code>--checkJs</code>と<code>--allowJs</code>を使うことでJavaScriptファイルに対してJSDocを使ったType Checkができるようになっています。
これを上手く使えば、もっと緩やかに移行することができるかもしれません(JSDoc全部のパターン対応してないので今の所限定的)</p>

<ul>
<li><a href="https://blog.mariusschulz.com/2017/06/16/typescript-2-3-type-checking-javascript-files-with-checkjs" title="TypeScript 2.3: Type-Checking JavaScript Files with --checkJs | Marius Schulz">TypeScript 2.3: Type-Checking JavaScript Files with --checkJs | Marius Schulz</a></li>
<li><a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files" title="Type Checking JavaScript Files · Microsoft/TypeScript Wiki">Type Checking JavaScript Files · Microsoft/TypeScript Wiki</a></li>
</ul>

<p>今回はライブラリだったので、テストカバレッジがかなり高い状態でした。
なのでテストがある程度保証してくれるので、一気にやっても壊れにくい状態でした。</p>

<p>UIなどテストがしにくい部分を含む実際のアプリケーションに後から型付けしていく場合は、次の記事などが参考になるかもしれません。</p>

<ul>
<li><a href="https://www.reaktor.com/blog/refactoring-30000-lines-js-types/" title="Refactoring 30000 lines of JS with types - Reaktor.com">Refactoring 30000 lines of JS with types - Reaktor.com</a></li>
<li><a href="https://slack.engineering/typescript-at-slack-a81307fa288d" title="TypeScript at Slack – Several People Are Coding">TypeScript at Slack – Several People Are Coding</a></li>
</ul>
 ]]></content>
 </entry>
 

</feed>
