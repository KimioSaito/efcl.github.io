<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-03-18T13:06:52+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>textlint 6.0リリース。--fixでの自動修正に対応</title>
   <link href="http://efcl.info/2016/03/15/textlint--fix/"/>
   <updated>2016-03-15T20:33:00+09:00</updated>
   <id>http://efcl.info/2016/03/15/textlint--fix</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a> 6.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/6.0.1" title="Release 6.0: --fix to be stable · textlint/textlint">Release 6.0: --fix to be stable · textlint/textlint</a></li>
</ul>

<p>モジュールとして使っている場合に、細かな破壊的な変更があります。
ツールとして使っている人は単純に<code>npm install textlint@6 -D</code>などでアップデートすれば動くと思います。</p>

<p>textlint自体については以下を見てください。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h2 id="--fixによる自動修正の対応"><code>--fix</code>による自動修正の対応</h2>

<p><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3: --fix &amp;amp; --experimental support">5.5.3: --fix &amp; --experimental support</a>で<code>--fix</code>による自動修正機能を実験的にサポートしていました。</p>

<p>6.0では<code>--fix</code>を<code>--experimental</code>フラグなしで利用できるようになりました。</p>

<p>自動修正はルール側で対応が必要 かつ 原理的に自動修正が難しいルールもあると思うので、あくまでサポート的な機能です。</p>

<p><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule">Wiki</a>にまとめてあるルールのうち、✔ fixableマークが付いてるものは対応しています。</p>

<p>対応しているルールをfixableルールと呼んでいて、以下のバッジをつけています。</p>

<p><a href="https://textlint.github.io/"><img src="https://img.shields.io/badge/textlint-fixable-green.svg?style=social" alt="textlint rule"></a></p>

<p>現状では以下のようなルールが<code>--fix</code>に対応しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-prh" title="azu/textlint-rule-prh: textlint rule for prh.">azu/textlint-rule-prh: textlint rule for prh.</a></li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">azu/textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-general-novel-style-ja">io-monad/textlint-rule-general-novel-style-ja: textlint rule to follow general style of Japanese novels</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-spellchecker">nodaguti/textlint-rule-spellchecker: textlint rule to check spellings with native spellchecker</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-ginger">nodaguti/textlint-rule-ginger: textlint rule to check your English grammar with Ginger Proofreading</a></li>
</ul>

<p>fixableルールは<a href="http://efcl.info/2015/09/14/textlint-rule-prh/">prhと辞書を使った表記揺れの統一</a>や<a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/">JTF日本語標準スタイルガイドを使った表記の統一</a>など、辞書ベースやスタイルの統一を簡単になるのが利点です。</p>

<p>逆に表現的なものをチェックするルールは自動修正が難しく、頑張ってもサジェストのような推敲支援になると思います。</p>

<ul>
<li><a href="http://efcl.info/2015/11/07/nodefest-2015/" title="東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch">東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch</a></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/90.html" title="校正と推敲 | 技術文書をソフトウェア開発する話">校正と推敲 | 技術文書をソフトウェア開発する話</a></li>
<li><a href="http://editor.hatenastaff.com/entry/2016/03/17/113000" title="編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」">編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>は校正支援として始めたツールなので、まだ推敲支援のような要素は入っていません。
以下のIssueでそのようなサジェストをどう扱うかについて話し合ってるので興味がある人は見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/158" title="Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint">Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint</a></li>
</ul>

<p>また<code>--fix</code>はread onlyなlintと違ってwrite処理であるため、バグを作りやすいです。
自分もリリースしてからあるルールでバグがあることに気づいたので、そういうのテストする方法については以下で話し合っています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/136" title="Document: add &amp;#34;How to test your rule?&amp;#34; · Issue #136 · textlint/textlint">Document: add &quot;How to test your rule?&quot; · Issue #136 · textlint/textlint</a></li>
</ul>

<p>使用してバグを見つけたら、それは特定のルールのバグであるならそちらへ、そうでなくて<code>textlint</code>のバグであるならtextlintに報告してください。</p>

<p>バグ報告の仕方については以下を参考にしてください。</p>

<ul>
<li><a href="https://gist.github.com/azu/913454a54ea8ef59ba30" title="textlint Bug Reporting">textlint Bug Reporting</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/CONTRIBUTING.md#bug-reporting" title="textlint/CONTRIBUTING.md at master · textlint/textlint">textlint/CONTRIBUTING.md at master · textlint/textlint</a></li>
</ul>

<h2 id="fixableルール">Fixableルール</h2>

<p>実際に<code>--fix</code>による自動修正の例を見てみます。</p>

<p>このブログのリポジトリ対象にしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/efcl/efcl.github.io
cd efcl.github.io
</code></pre></div>
<p>次に<code>textlint</code>とfixableに対応してる3つのルール/プリセットをインストールします。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D textlint textlint-rule-preset-jtf-style textlint-rule-spellcheck-tech-word textlint-rule-common-misspellings
</code></pre></div>
<p>インストールし終わったら、<code>.textlintrc</code>にインストールしたルールを使うように設定します。
(<code>--rule</code>や<code>--preset</code>オプションでも指定できますが毎回やるのは面倒なので)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="k">$(</span>npm bin<span class="k">)</span>/textlnt --init
</code></pre></div>
<p>というコマンドを叩くと、空の<code>.textlintrc</code>設定ファイルが作成されるので、編集して次のような設定をします。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;preset-jtf-style&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;spellcheck-tech-word&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;common-misspellings&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>この状態でチェックしたいファイルを指定すれば<code>textlint</code>でLintすることができます。</p>

<p>自分の今まで書いてきた全記事のうちMarkdownをこのルールでLintしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts/

...
✖ 6091 problems (6091 errors, 0 warnings)
✓ 5639 fixable problems.
Try to run: $ textlint --fix [file]
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133066.png" alt="result of linting"></p>

<p>絶望的な数のエラーが表示されました…</p>

<p>デフォルトのformatterである<code>-f stylish</code> または <code>-f pretty-error</code>では、
Lintの結果にそのうち自動修正できるエラーの数を表示してくれます。</p>

<p>この数値は実際に修正できる数とは必ずしも一致しません。ルール間は独立しているので、重複や衝突が存在しているためです。基本的には衝突しないように修正を逐次的に処理していく形になります。</p>

<p>このエラーを実際に<code>--fix</code>で修正してみたいと思います。</p>

<p>修正する前に、対象のファイルは必ず復元できるように、バックアップを取るかGitにコミットしておくなどしてください。
また、<code>--dry-run</code>オプションを使うことで、実際にファイルの上書きはしないでどのような変更が行われるかを見ることができます。</p>

<p>変更を比較する場合は <code>-f diff</code> でdiff表示をするformatterを利用すると分かりやすいです。
(<code>--fix</code>は本当に逐次的に処理するので、ルールやファイルが多いと掛け算的に処理時間が増えます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix --dry-run -f diff
# 実際に変更は反映しないでdiffだけをみる

....
✔ Fixed 5713 problems
✖ Remaining 73 problems
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133752.png" alt="result of fixing"></p>

<p>✖ 6091 problemsのうち✔ Fixed 5713 problemsが自動で修正することができます。
<code>--dry-run</code>で問題ないのが確認できたら、<code>--fix</code>のみにして上書き保存できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458134174.png" alt="fix error"></p>

<h2 id="textlint-v5からv6の変更点">textlint v5からv6の変更点</h2>

<p><a href="http://efcl.info/2015/11/20/textlint5.0.0/" title="textlint 5.0.0">textlint 5.0.0までの変更点</a>については以前書いたので、5.0から6.0までにあった変更点を列挙してみます。</p>

<h3 id="5.1.0"><a href="https://github.com/textlint/textlint/releases/tag/5.1.0" title="5.1.0">5.1.0</a></h3>

<p><code>textlint-rule-preset</code>をサポートしました。
ルールプリセットは個別のルールをまとめたモジュールという位置づけです。</p>

<p>もちろん内蔵しているルール個別に設定を<code>.textlintrc</code>に書くことができるので、
一つのルールに沢山のチェック機能を設けるよりも、個別のルールに分けてルールプリセットとして公開することを推奨しています。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h3 id="5.2.0"><a href="https://github.com/textlint/textlint/releases/tag/5.2.0" title="5.2.0">5.2.0</a></h3>

<p><code>textlint-formatter-&lt;name&gt;</code>のようなモジュールを<code>--formatter &lt;name&gt;</code>という形で指定できるようになりました。</p>

<p>これを利用したカバレッジを出力するformatterを公開しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov: textlint formatter for lcov format</a></li>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov: textlint formatter for codecov json.</a></li>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a></li>
</ul>

<p>formatterの作り方はドキュメントを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/formatter.md" title="textlint/formatter.md at master · textlint/textlint">textlint/formatter.md at master · textlint/textlint</a></li>
</ul>

<h3 id="5.3.0"><a href="https://github.com/textlint/textlint/releases/tag/5.3.0" title="5.3.0">5.3.0</a></h3>

<p><code>--stdin-filename</code> をサポートしました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cat readme.md | textlint --format compact --stdin --stdin-filename readme.md
</code></pre></div>
<p>という感じで標準入力のテキストに対して擬似的な名前を付けることができます。
(拡張子に対応した種類のファイルとしてtextlintが処理するため)</p>

<p>この仕組はSublimeプラグインを作るのに使われています</p>

<ul>
<li><a href="https://github.com/joeybaker/sublimelinter-textlint" title="SublimeLinter-textlint">SublimeLinter-textlint</a></li>
</ul>

<h3 id="5.4.0"><a href="https://github.com/textlint/textlint/releases/tag/5.4.0" title="5.4.0">5.4.0</a></h3>

<p><code>.textlintrc</code>ファイルを作成する<code>--init</code>オプションが追加されました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint --init
</code></pre></div>
<p>で空の<code>.textlintrc</code>ファイルを作成してくれます。</p>

<p>まだ色々改良の余地があるので興味がある人は以下のIssueを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/129" title="--init options: Create .textlintrc file · Issue #129 · textlint/textlint">--init options: Create .textlintrc file · Issue #129 · textlint/textlint</a></li>
</ul>

<h3 id="5.5.3"><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3">5.5.3</a></h3>

<p><code>--fix</code>と<code>--experimental</code>を実験的にサポートしました。
ここで実験的に追加した<code>--fix</code>は6.0.0で正式サポートとなります。</p>

<h3 id="5.6.0"><a href="https://github.com/textlint/textlint/releases/tag/5.6.0" title="5.6.0">5.6.0</a></h3>

<p>ルール開発者向けに<code>RuleError</code>が<code>index</code>プロパティをサポートしました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ruleError</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">context</span><span class="p">.</span><span class="nx">RuleError</span><span class="p">(</span><span class="s2">&quot;Found rule error&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">paddingIndex</span> <span class="p">});</span>
</code></pre></div>
<p>正確なエラーの位置を簡単に指定できます。
今まで通り、<code>column</code>と<code>line</code>の組み合わせでも問題ないですが、<code>column</code>単独の指定は<code>index</code>に書き換える事を推奨しています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md#ruleerror" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md" title="textlint/failed-to-load-textlints-module.md at master · textlint/textlint">textlint/failed-to-load-textlints-module.md at master · textlint/textlint</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>でテストしている場合は、<code>column</code>単独の場合には警告を出してくれます。</p>

<h2 id="5.7.0"><a href="https://github.com/textlint/textlint/releases/tag/5.7.0" title="5.7.0">5.7.0</a></h2>

<p>5.7.0では一部formatterがエラーとそのエラーが自動修正できるかを出すようになりました。</p>

<h2 id="6.0.0">6.0.0</h2>

<p>6.0.0では</p>

<ul>
<li><code>--dry-run</code>のサポート(<code>--fix</code>と組み合わせて使います)</li>
<li><code>--fix</code>からexperimentalフラグが外れました</li>
<li><code>--fix</code>向けのformatterとして<code>-f diff</code>を追加しました</li>
</ul>

<p>モジュールとして使う場合に関連するものとして</p>

<ul>
<li><code>TextLintEngine#setRulesBaseDirectory</code> が削除されました</li>
<li><code>TextFixEngine</code>が追加されました

<ul>
<li><code>--fix</code>における処理を扱うEngineです</li>
</ul></li>
<li><code>TextLintCore#setupProcessors</code>が追加されました

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/plugin.md" title="Processor">Processor</a>を設定するAPIです</li>
</ul></li>
</ul>

<p>また内部をかなりリファクタリングして、</p>

<ul>
<li>CLI</li>
<li>Engine</li>
<li>Core</li>
</ul>

<p>の役割と関心を分離してディレクトリなどを切るようになりました。
詳しくは以下のドキュメントに書かれています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/src/README.md" title="textlint/README.md at master · textlint/textlint">textlint/README.md at master · textlint/textlint</a></li>
</ul>

<p>結構長くなりましたが、5.0.0〜6.0.0の変更点は以上です。
Breaking Changeはほとんどのユーザには関係ないものだと思います(実際使ってるコードはGitHub上にはなかった)</p>

<h2 id="その他">その他</h2>

<ul>
<li><a href="http://io-monad.hatenablog.com/entry/2016/03/14/225800" title="文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく">文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく</a></li>
<li><a href="https://chrome.google.com/webstore/detail/textlint-proofreader/hdongmdneapmhfblomidbafplpanpdmm?hl=ja&amp;gl=JP" title="textlint: 文章チェッカー - Chrome ウェブストア">textlint: 文章チェッカー - Chrome ウェブストア</a></li>
</ul>

<p><img src="https://monosnap.com/file/LTo4HPrWD0k8fzfC8J9PRf0dNSJerG.png" alt="textlint on chrome"></p>

<p>Chrome拡張として<code>textlint</code>を動かすものが出てきたので、Node.jsを入れなくても
ブラウザでインストールしてGUIで設定できるので簡単に使うことができます。</p>

<ul>
<li><a href="https://github.com/Nkzn/textlint-prh-template" title="Nkzn/textlint-prh-template: A writing environment watched by textlint &amp;amp; prh">Nkzn/textlint-prh-template: A writing environment watched by textlint &amp; prh</a></li>
</ul>

<p>Atomプラグインとして<a href="https://github.com/1000ch/linter-textlint" title="linter-textlint">linter-textlint</a>を使う場合は上記のリポジトリが参考になるかもしれません。</p>

<h2 id="開発メモ">開発メモ</h2>

<p><code>--fix</code>は5.5から使えたのですが、色々APIデザインを変更する可能性があったのでexperimentalフラグを付けてリリースしました。</p>

<p>浅いイテレーションをするには</p>

<ul>
<li>本体機能をテストしてもらいたいならbetaをとにかく出す</li>
<li>プラグインに関係するエコシステム的な機能を試したいならexperimentalフラグ付きで出す</li>
<li>プラグイン側は最新の本体でしか動かない変更を入れるならメジャーアップデート

<ul>
<li>本体バージョンとプラグインの参照するバージョンがズレているとユーザーはハマります</li>
<li>なのでメジャーアップデートとするのが無難です</li>
</ul></li>
<li>プラグイン側が特定バージョン以降に依存するならpeerDependenciesを付ける</li>
<li>npmのbetaとGitHubのprereleaseを使う

<ul>
<li><code>npm publish --tag beta</code>するalisを使っています</li>
<li><a href="https://gist.github.com/azu/fb3ec88231235511858a">npm version publish alias - http://efcl.info/2015/04/08/npm-publish-pattern/</a></li>
<li><a href="http://efcl.info/2015/04/08/npm-publish-pattern/">npm publishのパターン | Web Scratch</a></li>
</ul></li>
<li>フラグつき機能は、次のメジャーアップデートで外す</li>
<li>testライブラリを作りdeprecatedはプラグイン作者に通知

<ul>
<li>テスト中はガンガン例外を投げて伝える</li>
<li>textlintは<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>経由の実行時のみ例外を投げるUtilを持っています。</li>
<li><a href="https://github.com/textlint/textlint/blob/master/src/util/throw-log.js" title="throw-log.js">throw-log.js</a></li>
</ul></li>
<li>本体とプラグインが同時にnpmのbetaになると辛い

<ul>
<li>βはsemverで<code>&gt;=</code>のような指定ができなくて、直書きする事になって辛いです</li>
</ul></li>
<li>experimentalフラグ付きで本体はstableリリースして、プラグインはstableな本体に依存させたbetaを出す</li>
<li>プラグインがstableリリースする際はメジャーアップデート+peerDependenciesにする

<ul>
<li>この辺が<code>--experimental</code>フラグを作った理由です</li>
</ul></li>
</ul>

<p>課題としては</p>

<ul>
<li>本体のBreaking Changeに依存したプラグインの変更をうまく扱う方法がない</li>
<li>なので本体のBreaking Changeはなるべく小さく、単独でリリースする

<ul>
<li>プラグインがすぐに追従できるような変更の粒度を考える</li>
</ul></li>
</ul>

<p>という感じになっています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScript ASTを始める最初の一歩</title>
   <link href="http://efcl.info/2016/03/06/ast-first-step/"/>
   <updated>2016-03-06T12:39:00+09:00</updated>
   <id>http://efcl.info/2016/03/06/ast-first-step</id>
   <content type="html"><![CDATA[ <p>何かJavaScriptのソースコードを機械的にチェックするためのツールを作りたいという場合に、JavaScriptのASTというものを触る必要が出てくると思います。</p>

<p>この記事では、その取っ掛かりとなる案内を簡単にまとめたものです。</p>

<h2 id="astとは">ASTとは</h2>

<p><a href="http://azu.github.io/slide/JSojisan/#8"><img src="http://efcl.info/wp-content/uploads/2016/03/06-1457240557.png" alt="AST"></a></p>

<p>AST(Abstract Syntax Tree)はコードをパースした抽象構文木のこと。
JavaScriptの場合はJavaScriptオブジェクト(JSON)として表現されます。</p>

<p>コード:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>
<p>AST:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="mi">0</span><span class="p">,</span>
    <span class="mi">10</span>
  <span class="p">],</span>
  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Program&quot;</span><span class="p">,</span>
  <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="mi">10</span>
      <span class="p">],</span>
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclaration&quot;</span><span class="p">,</span>
      <span class="nt">&quot;declarations&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
            <span class="mi">4</span><span class="p">,</span>
            <span class="mi">9</span>
          <span class="p">],</span>
          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclarator&quot;</span><span class="p">,</span>
          <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">4</span><span class="p">,</span>
              <span class="mi">5</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Identifier&quot;</span><span class="p">,</span>
            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span>
          <span class="p">},</span>
          <span class="nt">&quot;init&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">8</span><span class="p">,</span>
              <span class="mi">9</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Literal&quot;</span><span class="p">,</span>
            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="nt">&quot;raw&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="nt">&quot;kind&quot;</span><span class="p">:</span> <span class="s2">&quot;var&quot;</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&quot;sourceType&quot;</span><span class="p">:</span> <span class="s2">&quot;module&quot;</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="http://azu.github.io/slide/JSojisan/">カジュアルJavaScript AST</a></li>
<li><a href="http://azu.github.io/slide/tkbjs/js-ast-walker.html">JavaScript AST Walker</a></li>
</ul>

<h2 id="astのコミュニティ標準">ASTのコミュニティ標準</h2>

<p>ESTreeというデファクトスタンダードがあります(ES6までは定義されている)</p>

<ul>
<li><a href="https://github.com/estree/estree" title="estree/estree: The ESTree Spec">estree/estree: The ESTree Spec</a></li>
</ul>

<p>経緯: <a href="http://efcl.info/2015/02/26/recent-js-ast/" title="[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch">[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch</a></p>

<ul>
<li><code>token</code>、<code>range</code>、コメントのいち情報周りの扱いがパーサによって異なる</li>
<li>ESTreeで定義されているASTの範囲内ならどのパーサでも殆ど同じ

<ul>
<li>注意: <code>Literal</code>やGeneratorに関してパーサ間で解釈が異なるため議論中です</li>
<li><a href="https://github.com/estree/estree/issues/120" title="Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree">Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree</a></li>
<li>ポータブルな実装をしようとした時にハマるかもしれないので注意</li>
</ul></li>
</ul>

<h2 id="パーサ">パーサ</h2>

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">Babylon</a>

<ul>
<li>Babelで使われてるAcorn派生のパーサ</li>
<li>まだ<a href="http://azu.github.io/slide-what-is-ecmascript/slide/12.html" title="TC39 Process: Stage | ECMAScriptとは何か？">仕様として入るか分からないStage</a>の構文も対応している</li>
<li>注意: 逆にESTree仕様外の拡張もしているため、ESTree互換ではないです。</li>
</ul></li>
<li><a href="http://esprima.org/" title="Esprima">Esprima</a>

<ul>
<li><a href="https://github.com/benjamn/ast-types" title="ast-types">ast-types</a></li>
</ul></li>
<li><a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a></li>
<li><a href="https://github.com/eslint/espree" title="espree">espree</a>

<ul>
<li><a href="http://eslint.org/" title="ESLint">ESLint</a>で使われてるパーサ</li>
<li>AcornベースでEsprimaのtokenとの互換性を持っているパーサ</li>
</ul></li>
</ul>

<p>どのパーサもいろんなツールで使われてる実績があります。
Esprimaで試して、何か足りないならAcorn -&gt; Babylonという感じでやるのが良いと思います。</p>

<p>大きく分けると以下の2系統になっています。</p>

<ul>
<li>Esprima</li>
<li>Acorn</li>
</ul>

<p>BabylonはEStreeの仕様外について積極的にサポートしているため、
それらが必要な場合はBabylonを使うが、そうでないなら他のパーサの方が安定しています。</p>

<h2 id="関連ツール">関連ツール</h2>

<ul>
<li><a href="http://astexplorer.net/" title="AST explorer">AST explorer</a>

<ul>
<li>AST見るのに便利</li>
</ul></li>
</ul>

<h2 id="よくある流れ">よくある流れ</h2>

<ul>
<li>パーサでコードをパースしてASTにする

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">babylon</a>、<a href="http://esprima.org/" title="Esprima">Esprima</a>、<a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a>、<a href="https://github.com/eslint/espree" title="espree">espree</a></li>
</ul></li>
<li>ASTをtraverseして処理(変換、チェック)する

<ul>
<li><a href="https://github.com/estools/estraverse" title="estraverse">estraverse</a>、<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>、<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" title="babel-traverse">babel-traverse</a></li>
<li><a href="https://github.com/Rich-Harris/estree-walker" title="estree-walker">estree-walker</a>、<a href="https://github.com/estools/esrecurse" title="esrecurse">esrecurse</a></li>
<li>どのライブラリもほぼおなじものを持っている</li>
</ul></li>
<li>ASTからJSのコードを生成する(チェックのみの場合は不要)

<ul>
<li><a href="https://github.com/estools/escodegen" title="escodegen">escodegen</a>、<a href="https://www.npmjs.com/package/babel-generator" title="babel-generator">babel-generator</a>を使う</li>
<li>ジェネレータはパーサと合わせたツールが必要</li>
<li>Esprimaならescodegen、babelならbabel-generator</li>
</ul></li>
</ul>

<p>Parser、Traverser、Generatorは基本的にセットで同じ系統のツールを使う形になります。</p>

<p>そういうのを考えるのが面倒なので、そこを抽象化するライブラリを作ったりしていました。
コンセプトの証明的なものなので、実用的に使う場合は未対応の部分があると思います。(維持コストが高い)
コントリビュートは歓迎です。</p>

<ul>
<li><a href="https://github.com/azu/ast-source" title="azu/ast-source: AST helper to transform source code.">azu/ast-source: AST helper to transform source code.</a></li>
</ul>

<h2 id="例)-evalの中身を解析したい">例) evalの中身を解析したい</h2>

<p>evalの中を取り出して安全に評価したいというケース</p>

<h3 id="evalの中身">evalの中身</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">eval(&quot;var a = 20&quot;)
</code></pre></div>
<ul>
<li><a href="http://kitak.hatenablog.jp/entry/2014/11/15/233649" title="JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog">JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog</a></li>
</ul>

<p>のようにパースして、evalの中身を取り出すことが可能。</p>

<ul>
<li>何かを防ぐという仕組みから連想できるものはホワイトリスト</li>
<li>ホワイトリストでevalの中で使えるプロパティの名前などを制限する</li>
<li>未知のプロパティを見つけらたらその弾く?</li>
<li>ブラックリストだと何を防止すればいいのかが難しい</li>
</ul>

<h3 id="解析のフェーズ">解析のフェーズ</h3>

<p>適当な考え方(正しいのかは自信ないけど)</p>

<ol>
<li>evalのなかを取り出す</li>
<li>evalのなかのコードをパースする</li>
<li><strong>安全な部分</strong>だけを取り出す</li>
<li>安全な部分で評価する</li>
</ol>

<p><strong>安全な部分</strong> が何かを決める必要がありそう。
安全でないことが分かったら実行は諦める。</p>

<p>というような考え方でやるのがよくあるケースだと思います。</p>

<h2 id="おわりに">おわりに</h2>

<p>上記のようなチェックツールを書くには、まず<a href="http://eslint.org/" title="ESLint">ESLint</a>のルールを見てみるのが参考になるはずです。</p>

<p>書き換えをしたい場合はそのまま書き換えるとASTのTree内で不整合が起きて大変になります。
<a href="https://github.com/facebook/jscodeshift" title="jscodeshift">jscodeshift</a>や<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>などのライブラリが使えないか検討してみてください。</p>

<p>また、同様の機能を持つツールがどういうライブラリを使っているかを調べてみるのが近道になるはずです。
例えば、モジュールbundleツールの<a href="https://github.com/rollup/rollup" title="rollup">rollup</a>は<a href="https://github.com/Rich-Harris/magic-string" title="magic-string">magic-string</a>というライブラリで文字列の操作をしていることが分かります。</p>

<p>現在のASTの状況はESTreeより先のデファクトがないため新しい構文を扱おうとすると色々考えることが出てきます。
そういった時には<a href="https://github.com/azu/ast-source" title="ast-source">ast-source</a>のような抽象層が必要になってくるかもしれません。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>#uruu_sushi アウトラインメモ</title>
   <link href="http://efcl.info/2016/02/29/uruu_sushi/"/>
   <updated>2016-02-29T23:10:00+09:00</updated>
   <id>http://efcl.info/2016/02/29/uruu_sushi</id>
   <content type="html"><![CDATA[ <p>うるう年なので<a href="https://twitter.com/hashtag/uruu_sushi?src=hash" title="#uruu_sushi">#uruu_sushi</a>を食べてきた。</p>

<ul>
<li><a href="http://togetter.com/li/944473" title="#uruu_sushi - Togetterまとめ">#uruu_sushi - Togetterまとめ</a></li>
</ul>

<p>脆弱性報告</p>

<ul>
<li>バグハンター</li>
<li><a href="https://hackerone.com/" title="HackerOne: Vulnerability Coordination and Bug Bounty Platform">HackerOne: Vulnerability Coordination and Bug Bounty Platform</a></li>
<li>Bug Bountyのプラットフォームなども最近できてきた

<ul>
<li>報告者/企業のレーティングなどができる</li>
<li>特定のレーティング向けの案件なども存在する</li>
</ul></li>
<li>脆弱性報告はやり取りのコストがある</li>
<li>そのため単純にBug bounty programが増えるだけだと嬉しくない</li>
<li>報告したことに対して即時レスポンスがあると報告者として安心できる</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「報告者としては新規報告先とのやりとりは結構負担になるので、報告先が増えてもそんなに嬉しくない」<br> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/704269476515041280">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>報奨金制度</p>

<ul>
<li>バグハンター同士、企業間同士の脆弱性に関する情報共有する場所がない</li>
<li>報告を受け付ける側も脆弱性報告により新しい攻撃方法を知ることがある

<ul>
<li>関連サービスに同様の問題があり、そちらを直すことができる</li>
</ul></li>
<li><a href="https://www.ipa.go.jp/security/vuln/CVSS.html" title="共通脆弱性評価システムCVSS">共通脆弱性評価システムCVSS</a>

<ul>
<li>ドメインに依存しないので、指標として扱いやすい</li>
<li>逆にオープンリダイレクターの扱いが高いなど、現実の扱いと異なるケースもある</li>
</ul></li>
</ul>

<p>Case</p>

<ul>
<li>安全にファイルダウンロードを実装するのは難しい</li>
<li>ServiceWorkerは本当に安全?</li>
<li>HTMLをHTTPSでホスティングするサービスで何か悪さができてしまわないか</li>
<li>普通にウェブサイトで普通のXSSというような問題は少なくなってきてる</li>
<li>Railsのようなフレームワークに普通に乗っていればそういう問題はおこりにくい</li>
<li>ブラウザというサンドボックスはある程度安全

<ul>
<li>そこから外れたものを作った場合に問題が起こりやすい</li>
<li>Electron, Firefox OS</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a> これの話  &quot;Firefox OS is not helping the web — Anne’s Blog&quot;  <a href="https://t.co/XhdnAdaDTX">https://t.co/XhdnAdaDTX</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704275123025477632">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSとかSQLiとかはどんどん減ってきてる。今はアクセス権問題が割合として増えてきている <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704290564158525440">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="仕様とセキュリティ---azu">仕様とセキュリティ - azu</h2>

<p>セキュリティな問題のある仕様の変更や、
現実の実装に合わせた仕様の定義とうような変更があったよ的な話をしました。</p>

<ul>
<li><code>Object.prototype.</code> hijack</li>
<li><a href="http://ecmascript-daily.github.io/2015/12/26/how-should-browsers-mitigate-proxy-related-security-issues-issue-272-tc39-ecma262" title="How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily">How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily</a></li>
</ul>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;data=&quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://victim/test.csv&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<ul>
<li>POC on Chrome(<code>chrome://flags/#enable-javascript-harmony</code>)</li>
<li>Changed in ES2016 Draft 2016-02-15</li>
</ul>

<blockquote>
<p><code>Object.prototype</code> is an immutable prototype exotic object.<br>
-- <a href="https://github.com/tc39/ecma262/releases/tag/es2016-draft-20160215" title="Release ES2016 Draft 2016-02-15 · tc39/ecma262">Release ES2016 Draft 2016-02-15 · tc39/ecma262</a></p>
</blockquote>

<ul>
<li>WHATWG HTML define Window</li>
<li><a href="https://github.com/whatwg/html/commit/acae3df652b382e9f4f1d1b4dc7e08e2b00df821" title="Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df">Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df</a></li>
</ul>

<h2 id="node.js-と-es6-modules">Node.js と ES6 modules</h2>

<ul>
<li><a href="https://github.com/nodejs/node-eps/pull/3" title="002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps">002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps</a></li>
<li>interoperabilityに関するIssue</li>
<li>interoperability優先 vs 原則</li>
<li>interoperabilityは大事だが、何のためにES6モジュールを使うのかを見失っている可能性

<ul>
<li>静的に解析出来る</li>
<li>ブラウザ/Nodeどちらでも動く</li>
<li>本来はこの2つが目的だったはず。interoperabilityのためにこれが犠牲になってしまうのでは。</li>
</ul></li>
<li>npmというエコシステムの互換性</li>
<li>互換性という魔法のコトバがある限り意見の一致が難しい</li>
<li>Python 3になってはいけない</li>
<li>意見が割れてる、議論になってない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Python3ifyじゃなくて、Python3ishだった <a href="https://t.co/fwE7PBbIkQ">https://t.co/fwE7PBbIkQ</a> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; teppeis (@teppeis) <a href="https://twitter.com/teppeis/status/704327441595019265">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="どうやって脆弱性の探し方を学ぶのか">どうやって脆弱性の探し方を学ぶのか</h2>

<ul>
<li>脆弱性の探し方はどうやって学ぶのか</li>
<li>コード書くときにコード書くパターンがあるように、脆弱性を探す人も脆弱性を探すパターンがあるはず</li>
<li>検査的な文字列パターンを持ってる</li>
<li>特殊なツールは使ってない</li>
<li>逆に普通の開発者がどうやってセキュリティ的な問題を見つけたり、どういうツールを使ってるのかを知らない</li>
</ul>

<p>セキュリティ診断</p>

<ul>
<li>バグハンターのような特殊な人達に調査を頼むのと、脆弱性診断サービスの違い</li>
<li>セキュリティ業界とウェブ開発者の意識の違い

<ul>
<li>セキュリティ業界が最新のウェブに疎く見える問題</li>
<li>ウェブ側もセキュリティをよくわからない問題</li>
</ul></li>
<li>間に繋ぐような人が重要という話</li>
</ul>

<h2 id="おわり">おわり</h2>

<p>セキュリティ寿司は久々な気がする。</p>

<ul>
<li><a href="http://efcl.info/2014/0415/res3844/" title="テストとセキュリティの葉桜JSに参加してきた | Web Scratch">テストとセキュリティの葉桜JSに参加してきた | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintの公式サイト(オンラインデモ)を作りました</title>
   <link href="http://efcl.info/2016/02/24/textlint-online-demo/"/>
   <updated>2016-02-24T19:49:00+09:00</updated>
   <id>http://efcl.info/2016/02/24/textlint-online-demo</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/"><img src="http://azu.github.io/slide/2016/reject-sushi/img/textlint.png" alt="textlint"></a></p>

<p><a href="http://textlint.github.io/" title="textlint - pluggable linting tool for text and markdown">textlint - pluggable linting tool for text and markdown</a></p>

<p>textlintの公式サイトというがオンラインデモページを作成しました。</p>

<ul>
<li><a href="http://textlint.github.io/#demo">textlint.github.io/#demo</a></li>
</ul>

<p>上記にページにアクセスするとブラウザ上でtextlintを動かして試すことができます。</p>

<p>デフォルトだと<a href="https://github.com/azu/textlint-rule-rousseau" title="textlint-rule-rousseau">textlint-rule-rousseau</a>や<a href="https://github.com/azu/textlint-rule-alex" title="textlint-rule-alex">textlint-rule-alex</a>といった英語向けのルールが設定されていますが、npmモジュール名を指定すれば任意のルールも読み込めます。</p>

<p>例えば、<a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a>と入れて&quot;Add rule&quot;するとこのルールが動的に追加できて試せます
<a href="https://www.brcdn.org/" title="Browserify CDN">Browserify CDN</a>で動的にビルドして読み込んでいるので、Browserifyでビルドできないルールは流石にブラウザ上では動かないです。
(後、形態素解析とかやってるルールはそもそものファイルサイズが大きいです)</p>

<p>このサイトは<a href="https://github.com/dekujs/deku" title="Deku">Deku</a> v2互換の<a href="https://github.com/rstacruz/decca" title="decca">decca</a>と<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>で作りました。</p>

<p>Deku v2は最小限のAPIでReduxと合わせて使いやすい作りなので、初めてReduxを触るときはReact(<a href="https://github.com/reactjs/react-redux" title="react-redux">react-redux</a>)と合わせて使うよりもシンプルで理解しやすいかもしれません。</p>

<p>最近のtextlintを3分で把握できるスライドも書いたので、どんな感じのものをかをぱっと知りたい方は見ると面白いかもしれません。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/reject-sushi/textlint.html" title="3分でわかるtextlint">3分でわかるtextlint</a></li>
</ul>

<h2 id="デザイン">デザイン</h2>

<p><img src="https://textlint.github.io/media/logo/textlint-logo.png" alt="logo"></p>

<p>textlintのロゴやアイコンを<a href="https://github.com/uetchy" title="uetchy">@uetchy</a>さんに作っていただきました。</p>

<p>ロゴやアイコンやバナーはCC0ライセンスで利用できるので自由にご利用ください。</p>

<ul>
<li><a href="https://github.com/textlint/media" title="textlint/media: Official logo and icon.">textlint/media: Official logo and icon.</a></li>
</ul>

<p>このロゴやアイコンは<a href="https://github.com/textlint/media/pull/1#issuecomment-174872043">Issueで話し合いながら作って頂いた</a>のですが、その中の<a href="https://github.com/textlint/textlint.github.io/issues/1#issuecomment-176210780">デザイン見本にウェブサイト</a>があったのでそれを元に実装した感じになっています。</p>

<p>サイトは説明文とオンラインデモしかないので、ドキュメントはあいかわらずリポジトリの中に入ったままです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/tree/master/docs" title="textlint/docs at master · textlint/textlint">textlint/docs at master · textlint/textlint</a></li>
</ul>

<p>最近、<a href="https://github.com/textlint/textlint/blob/master/docs/getting-started.md" title="Getting Started with textlint">Getting Started with textlint</a>という最初にとりあえず動かすまでのチュートリアルを書いたので、textlintを使ってみたい人はこの辺から読むといいかもしれません。</p>

<p>またサクッとプロジェクトに導入したい場合はルールがある程度まとまったルールプリセットを使うと、手軽に日本語のLintを始めることができます。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<p>他のtextlint関連記事は以下から探すことができます。</p>

<ul>
<li><a href="http://efcl.info/tags/?q=textlint" title="タグ一覧 | Web Scratch">textlint - タグ一覧 | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#reject_sushi でReactとチーム開発について話してきた</title>
   <link href="http://efcl.info/2016/02/23/reject-sushi/"/>
   <updated>2016-02-23T23:05:00+09:00</updated>
   <id>http://efcl.info/2016/02/23/reject-sushi</id>
   <content type="html"><![CDATA[ <p><a href="http://reactjs-meetup.connpass.com/event/26229/" title="React.js meetup #3">React.js meetup #3</a>に参加できなかったので<a href="https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=reject_sushi&amp;src=typd" title="reject_sushi">#reject_sushi</a>に参加してきました。</p>

<ul>
<li><a href="http://togetter.com/li/942101" title="#reject_sushi - Togetterまとめ">#reject_sushi - Togetterまとめ</a></li>
</ul>

<hr>

<ul>
<li><a href="https://facebook.github.io/draft-js/" title="Draft.js | Rich Text Editor Framework for React">Draft.js | Rich Text Editor Framework for React</a>

<ul>
<li>©年号を見る感じ結構前から実装してそう</li>
</ul></li>
</ul>

<h2 id="how-to-work-as-a-team-@-azu"><a href="http://azu.github.io/slide/2016/reject-sushi/how-to-work-team.html" title="How to work as a Team">How to work as a Team</a> @ azu</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a> で発表したReact+Flux的な何かの意思決定と情報設計の話。  &quot;How to work as a Team&quot;  <a href="https://t.co/qM4iyipRFS">https://t.co/qM4iyipRFS</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702138441681637376">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>自分はチーム開発でReact + 何かを採用するときにどういうフローで話を進めていってるかについてを話しました。
まだ結論はないですが、Flux的な何かを採用したからといって設計がすごく簡単になるという話ではないです。</p>

<p>またStoreはただの入れ物的な使い方をした場合に、ドメイン層はActionCreator的な部分が持つのか、それはどうやって扱うのかという部分がふわふわしているという話になりました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">StoreはただのViewのためのStateという感じ。<br>その場合にドメイン層をどこに書くかが皆迷うところ。 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702105875771555840">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>なんとなくのレイヤー分けは見えてきていますが、それを説明するのにはまだ何か(サンプル?実例?体系化?)が足りてないのかなーという印象です。</p>

<p>以下のスライドも見てみると面白いかもしれません。</p>

<ul>
<li><a href="http://www.slideshare.net/saneyuki/my-thoughy-about-beyond-flux" title="My thought about beyond flux">My thought about beyond flux</a></li>
</ul>

<p>また最近<a href="http://www.amazon.co.jp/dp/4802510012/" title="今日からはじめる情報設計">今日からはじめる情報設計</a>や<a href="http://www.amazon.co.jp/dp/B00EESW7OG/" title="エンジニアのための図解思考">エンジニアのための図解思考</a>的な本を読んでいたので、そういった情報の扱い方や表現という話も兼ねています。</p>

<h2 id="rails-と-node.js-@-mizchi">Rails と Node.js @ mizchi</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">browserify-railsとtsify問題 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/702089989887172609">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>Node.jsのエコシステムにビルドを寄せる話</li>
<li>browserify-railsに寄せると楽</li>
<li>だけどtsifyが標準出力ではStreamを使うため browserify-railsと相性が悪い。</li>
<li>browserify-railsを使いたい理由は、Nodeを普段使わない人が多い環境でNodeの流儀をやってもらうとよくわからないことが多くてコストがある</li>
</ul>

<h2 id="http2-を前提とした-html+css-コンポーネントのレンダリングパス最適化-@-jxck">HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化 @ jxck</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a>   &quot;HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | <a href="https://t.co/Bb4j0utYux">https://t.co/Bb4j0utYux</a>&quot;  <a href="https://t.co/wQlZpQZBMj">https://t.co/wQlZpQZBMj</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702092500157145089">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://blog.jxck.io/entries/2016-02-15/loading-css-over-http2.html" title="HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | blog.jxck.io">HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | blog.jxck.io</a></li>
<li>コンポーネント+CSSで送れると、サーバ側が全部のリソースが揃う前にレスポンスを返すことが出来る様になる</li>
<li>lengthは決まってないと行けないけど、例外としてTransfer-Encoding: chunkedを使う</li>
<li>= プログレッシブレスポンス?</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">プログレッシブレスポンスができるようになるそれようの仕組みがサーバで流行るのでは。<br>それってJSPで見た話だ！！！ <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702093276040433664">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>この時の問題点</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">HTTPはステータスコードを最初に返す必要があり、それを途中で変更できない。<br>ステータスコードは1行目問題はPushでも起きる<br>なのでプログレッシブレスポンスの場合は、CSSはpushしておいてchunkedで送ると <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702094414600994816">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>ステータスコードコードが最初に決まってないと行けない</li>
<li>プログレッシブレスポンスだとこれがやっかいなりそう</li>
<li>動画を全部読まないとシークできなかった話と似ている</li>
<li>このステータスコードの位置/変更/指定の問題は今後の課題になりそう(プログレッシブレスポンスするなら)</li>
</ul>

<h2 id="typescript-1.8のjavascriptをbundleしてくれる機能---kyo_ago">TypeScript 1.8のJavaScriptをbundleしてくれる機能 - kyo_ago</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">kyo_ago 「TypeScript 1.8のJavaScriptをbundleしてくれる機能」 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702099720164872192">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://github.com/Microsoft/TypeScript/wiki/What&#x27;s-new-in-TypeScript#concatenate-amd-and-system-modules-with---outfile" title="Concatenate AMD and System modules with --outFile">Concatenate AMD and System modules with --outFile</a></li>
<li><a href="https://blogs.msdn.microsoft.com/typescript/2016/02/22/announcing-typescript-1-8-2/" title="Announcing TypeScript 1.8 | TypeScript">Announcing TypeScript 1.8 | TypeScript</a></li>
<li>循環参照を避けるためbundleするのはimport/exportのみ?</li>
<li><code>require</code>は動的ロードとして扱われてる</li>
<li>ちょこっとsystemjs用のものを加えると動かせる</li>
</ul>

<h2 id="javascriptの非同期処理/例外処理">JavaScriptの非同期処理/例外処理</h2>

<ul>
<li>async/await

<ul>
<li>try/catchでハンドリングしないと行けないのは複雑になる可能性</li>
<li>GoLangのように多値を返すアプローチで解決できなかったのか</li>
<li><a href="http://saneyukis.hatenablog.com/entry/2015/03/22/184823" title="Option/Maybeとかで解決していることを、さながらgolangのようにES6のdestructuring assignmentで解決する - snyk_s log">Option/Maybeとかで解決していることを、さながらgolangのようにES6のdestructuring assignmentで解決する - snyk_s log</a></li>
</ul></li>
<li>WebComponents

<ul>
<li>名前がでかすぎて何から手を出せばいいのかよくわからなくなる問題</li>
<li>Polymerは何か別のものになってしまった</li>
<li>明らかに大事だけど流行るには何かが足りない</li>
<li>コンポーネント間の関係をどう管理するのか問題</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「Web Componentをどこから始めればいいのか分からない」<br>「Web Componentという名前が良くなかった。それぞれの仕様にフォーカスするべきだったのでは」 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702118804793356288">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script> 

<ul>
<li>ECMAScriptにEventEmitter的なのが欲しい

<ul>
<li>DOM Eventを通るのはなんか</li>
</ul></li>
</ul>

<h2 id="その他">その他</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a> で発表しなかった「3分でわかるtextlint」のスライドです。自然言語Lintツールの現状  &quot;3分でわかるtextlint&quot;  <a href="https://t.co/wtHBxxIOok">https://t.co/wtHBxxIOok</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702133285934145536">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>発表しなかった<a href="http://azu.github.io/slide/2016/reject-sushi/textlint.html" title="3分でわかるtextlint">3分でわかるtextlint</a>のスライド。</p>

<p><a href="http://textlint.github.io/" title="textlint - pluggable linting tool for text and markdown">textlint - pluggable linting tool for text and markdown</a>のサイトがDeku v2 + Reduxで動いていて、Reduxを最初に試す場合はDekuと組み合わせたほうがわかりやすよという話をした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMAScript, TC39 Meeting Notesの読み方と修正方法</title>
   <link href="http://efcl.info/2016/02/12/tc39-meeting-notes/"/>
   <updated>2016-02-12T11:12:00+09:00</updated>
   <id>http://efcl.info/2016/02/12/tc39-meeting-notes</id>
   <content type="html"><![CDATA[ <p>ECMAScriptは毎年リリースの方針となったため、最新の仕様を管理している<a href="https://github.com/tc39/ecma262" title="tc39/ecma262">tc39/ecma262</a>には毎日のようにコミットされています。</p>

<p>ECMAScriptのリリース方針についてなどは以下を参照してください。</p>

<ul>
<li><a href="http://efcl.info/2015/10/18/ecmascript-paper/" title="ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch">ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch</a></li>
</ul>

<p>これらの最新の変更が反映されたLiving Standardなものは以下のURLで公開されています。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/">tc39.github.io/ecma262/</a></li>
</ul>

<p>また、Proposalを元にECMAScript 2016に<a href="http://jser.info/2016/02/01/es2016/">入る機能は既に決まっています</a>。
何か新しく入るのかは以下の記事を見てみてください。</p>

<ul>
<li><a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></li>
</ul>

<p>&quot;どこで&quot;決まっているのかというと2ヶ月に1回行われているTC39のミーティングです。(物理的に集合してF2Fでやる)</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>

<ul>
<li>具体的に「ES2016に入る機能は今回のミーティングでStage 4となったものがそうだ」と決まった</li>
</ul></li>
</ul>

<p>小さな修正などは直接GitHubで議論して終わることがありますが、TC39としての意志が求められる新しい機能の追加や互換性のない修正などはTC39のミーティングを通して判断されます。</p>

<ul>
<li>ProposalのStageをあげるあげない</li>
<li>ProposalをStage 0として追加するかどうか</li>
<li>後方互換性のない変更を加えるか</li>
<li>現実との互換性のためにAnnex Bへ仕様を追加するか</li>
</ul>

<p>などはここで議論された結果が仕様へ反映されます。
(大体はGitHub Issueで議論後、Pull Requestを出した状態で実際のミーティングに持ち込まれてる)</p>

<p>そのため、仕様/Proposalへどういう変更をどういう理由で加えるかというのはこのミーティングノートを見れば大体分かります。</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes" title="tc39/tc39-notes: These are the notes I take at TC39 Meetings, with Markdown formatting">tc39/tc39-notes</a>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>が元リポジトリ</li>
</ul></li>
<li><a href="https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aclosed" title="Pull Requests · tc39/ecma262">Pull Requests · tc39/ecma262</a>

<ul>
<li>あわせてPull Requestを見るのが早い</li>
</ul></li>
</ul>

<p>ミーティングノートは3日分がワンセットなのでちょっと多いですが、数時間あれば読める感じです。
ちゃんとテーマごとに議論の区切りと結論が書いてあるので、気になるものだけみるならすぐ読めると思います。</p>

<p>例えば、先ほどの<a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>なら、結論が&quot;Conclusion/Resolution&quot;にわかりやすく書いてあります。</p>

<p>口語表現が多くてよく分からなかったら(自分は大抵そうなります)、結論からさかのぼって読むといい気がします。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ECMA-262/402 2016 End-Game  

AWB: slide (Key dates)  
BT: the way I want to do this, at the march meeting I want us to approve what is in master, or a snapshot. I don&#39;t want to make minor tech or editorial changes. I will make fixes if major issues exist, but otherwise I wish we can leave it as is. Leaving it as a tag  
...  
Conclusion/Resolution
   30 days before the next meeting, the final draft will be provided
   next meeting we will vote to make it ES2016
   start the out-patent review process, you may need to alert your organizations
</code></pre></div>
<p>自分は<a href="https://twitter.com/search?f=realtime&amp;q=%20%23TC39MTG" title="#TC39MTG">#TC39MTG</a>というハッシュタグをつけて読んでいます。</p>

<ul>
<li><a href="https://tc39-mtg.doorkeeper.jp/" title="TC39 MTG Notes MTG | Doorkeeper">TC39 MTG Notes MTG | Doorkeeper</a></li>
</ul>

<h2 id="tc39ミーティングノートの修正方法">TC39ミーティングノートの修正方法</h2>

<p>ここでやっと本題ですが、ミーティングノートを読んでいると結構な頻度でtypoなどの間違いやリンク切れ、Markdownの構文ミスなどが見つかると思います。</p>

<p>間違いを見つけた時は<a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>に普通にPull Requestで修正を送りましょうという話です。</p>

<p>特に<a href="https://github.com/rwaldron/tc39-notes/pull/41">今回はtypoの数が多かった</a>ので、積極的に修正を送ると他の読む人が幸せになれます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/12-1455276798.png" alt="contributing"></p>

<p>typoを直すためにかなりの数コミットしたので跳ねてる…(まだtypoは残ってるのがあると思います…)</p>

<h3 id="具体的な修正の送り方">具体的な修正の送り方</h3>

<p>やり方も何もないですが、Markdownファイルを修正して以下のリポジトリにPull Requestを送るだけです。</p>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a></li>
</ul>

<p>注意点としてはこのミーティングノートを管理している<a href="https://github.com/rwaldron" title="rwaldron">@rwaldron</a>さんは、結構Pull Requestを見逃すことがあるのでmentionを本文に入れておいたほうが確実です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/cc @rwaldron
</code></pre></div>
<p>また、数日反応がなかったら<code>ping @rwaldron</code>などとコメントするといいかもしれません。</p>

<p>修正はまとめて一つのPull Requestで送ることが多いです。</p>

<h3 id="修正箇所の見つけ方">修正箇所の見つけ方</h3>

<p>結構、普通に見ていれば崩れている場所が見つかると思います。</p>

<ul>
<li>MarkdownのCodeBlockが壊れてる</li>
<li>インデントが揃ってない</li>
<li><code>----</code> が余計にある</li>
<li><code>-</code> だけが残ってる</li>
<li>リンク切れ</li>
<li>typo</li>
</ul>

<p>リアルタイムに文字起こしてるようなきがするので、スペルチェッカーを通すだけでも結構なtypoが見つかります。
(自分は英語に自信がないので、確実に間違ってるものだけ修正しています。もっと英語表現に詳しい方も修正送って欲しい…)</p>

<h2 id="おわりに">おわりに</h2>

<p>ECMAScriptの新しいProposalを知りたいという場合は、適当なブログを見るよりもProposalを書いてる人たちの意見が見られるミーティングノートを見るのが確実です。</p>

<p>ちょっと長いですが、一次情報を見ればモチベーションなどもわかるし、なんとなく見てても面白いのでおすすめです。(Conclusionだけ見ても色々分かります)</p>

<p>少なくてもBabelで<code>Stage X preset</code>を使ってる人は一度見るといいかと思います。(ミーティングノートにも度々Babelの話はでてきます)</p>

<p>Angular 2を使ってる人も<a href="https://github.com/wycats/javascript-decorators">Stage 1のDecorators</a>の上に<a href="http://ecmascript-daily.github.io/2016/01/28/stage0-descorator-related">Stage 0のDecorators関連Proposal</a>があることなどを知るために見ておくべきです。</p>

<blockquote>
<p>情報の伝達が早い順で並べるとTwitter &gt; GitHub &gt; その他という感じです。<br>
-- <a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></p>
</blockquote>

<p>こうしてミーティングノートや<a href="https://github.com/tc39/ecma262" title="tc39/ecma262: Status, process, and documents for ECMA262">tc39/ecma262</a>を見て集めた&quot;その他&quot;の情報を、適当なブログである<a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>に更新しています。</p>

<p><a href="https://twitter.com/ecmascriptdaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @ecmascriptdaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p><a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>はPull Requestで誰でも記事を追加できるので興味がある人は<a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="Contributing Guideline">Contributing Guideline</a>を見てください！</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>メモアプリをDayOneからQuiverに移行した</title>
   <link href="http://efcl.info/2016/02/03/quiver/"/>
   <updated>2016-02-03T20:28:00+09:00</updated>
   <id>http://efcl.info/2016/02/03/quiver</id>
   <content type="html"><![CDATA[ <p>メモアプリとしてEvernote、OneNote、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>、DayOneなどを使っていました。</p>

<p>EvernoteとOneNoteはメモ機能は強いですが、あんまり気軽に書けるような感じじゃないのでピンときませんでした。
(画像やテーブルは便利ですが、Markdownみたいなプレーンなテキストじゃないのも微妙な点)</p>

<p>そのため、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>などを作ったりしましたが、UIを作りこまないとあんまり使いやすくないということが分かったので、途中で飽きてました。</p>

<p>DayOneは気軽にMarkdownで書けて、iOSアプリもできがいいのは素晴らしいですが、検索機能が微妙でした。
(書くのはいいが、見るのが難しい)</p>

<p>最近Quiverというアプリを見つけて、これを使うようになりました。</p>

<h2 id="quiver">Quiver</h2>

<ul>
<li>AppStore: <a href="https://itunes.apple.com/jp/app/quiver-programmers-notebook/id866773894?mt=12" title="Quiver: The Programmer&amp;#39;s Notebook">Quiver: The Programmer&#39;s Notebook</a></li>
<li>Homepage: <a href="http://happenapps.com/#quiver">http://happenapps.com/#quiver</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki" title="Home · HappenApps/Quiver Wiki">Home · HappenApps/Quiver Wiki</a></li>
</ul>

<p>Quiverは<a href="http://jupyter.org/" title="Jupyter Notebook">Jupyter Notebook</a>のようにセルの概念を持っていて、Text(リッチテキスト)、Markdown、Code、Latex、Diagramsのセルがあります。</p>

<p>セルが分かれているので、Markdownで書きながらエディタ部分に画像をTextセルで埋め込んだりできます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/03-1454497208.png" alt="quiver"></p>

<p>また、<a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started#diagram-cell" title="Diagram Cell">Diagram Cell</a>ではシーケンスを書いたりできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Title: Here is a title
A-&gt;B: Normal line
B--&gt;C: Dashed line
C-&gt;&gt;D: Open arrow
D--&gt;&gt;A: Dashed open arrow
</code></pre></div>
<p>検索も全文検索が数千ファイルでちゃんと機能してるので問題ない感じです。</p>

<p>どういう機能があるかは以下を見るのがいいと思います。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started" title="Getting Started · HappenApps/Quiver Wiki">Getting Started · HappenApps/Quiver Wiki</a></li>
</ul>

<p>同期はDropboxなどを使ってファイル同期する仕組みがあり(競合した時にどっちを使うかを選択出来る)、上手く動いてていい感じです。</p>

<h3 id="体験版">体験版</h3>

<p>AppStoreで販売されていますが、<a href="http://happenapps.com/#quiver">公式サイト</a>の<a href="http://happenapps.com/downloads/QuiverFreeTrial.zip">Free Trial</a>から体験版をダウンロードできます。</p>

<p>また、GitHub Issueでやり取りしてるβ版でも試すことができます。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/issues/361" title="Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver">Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver</a></li>
</ul>

<h2 id="dayone-to-quiver">DayOne to Quiver</h2>

<p>Quiverはデータフォーマットがきちんと定義されていて、公開されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Quiver-Data-Format" title="Quiver Data Format · HappenApps/Quiver Wiki">Quiver Data Format · HappenApps/Quiver Wiki</a></li>
</ul>

<p>そのため、他のノートアプリからのimport/exportツールが色々と用意されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Import-Scripts">Import Scripts · HappenApps/Quiver Wiki</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Export-Scripts">Export Scripts · HappenApps/Quiver Wiki</a></li>
</ul>

<p>先ほど書いたように元々はDayOneを使っていたので、DayOneからQuiver形式に変換するツールを書きました。</p>

<ul>
<li><a href="https://github.com/azu/dayone-to-quiver" title="azu/dayone-to-quiver - JavaScript">azu/dayone-to-quiver - JavaScript</a></li>
</ul>

<p>DayOne の<code>Journal.dayone</code>ファイルをQuiverのNotebook形式に変換できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g dayone-to-quiver
<span class="nv">$ </span>dayone-to-quiver --entry Journal.dayone --output output.qvnotebook

    --entry path to Journal.dayone
    --output output path
</code></pre></div>
<p>そろそろ<a href="http://dayoneapp.com/2016/01/introducing-day-one-2/" title="Day One 2">Day One 2</a>が出るようですが、変換元はDayOne 1のみ対応しています。
(DayOne 2は3カラムになっていて大分ビューアとしてよくなってそう…)</p>

<h2 id="おわり">おわり</h2>

<p>作者さんが以下のブログで書いてますが、ノートブック/メモアプリに求めるものってそういうものだよなーって感じがしたので使い始めました。</p>

<ul>
<li><a href="http://yaoganglian.com/2015/12/06/What-is-Quiver/" title="What is Quiver? | Yaogang Lian">What is Quiver? | Yaogang Lian</a></li>
</ul>

<p>フォーマットがわかりやすいので、他のいいものがでてきたら変換ツールを書けばいいかなーという感じです。</p>

<p><a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>や<a href="http://b00st.io/" title="Boostnote">Boostnote</a>がUI的に近い系統だと思いますが、その辺のフォーマットとかに不安が出てきてしまいイマイチ使うことができなかった。</p>

<p>エディタ部分が<a href="https://ace.c9.io/" title="Ace - The High Performance Code Editor for the Web">Ace</a>なのはやっぱり好きではないけど、ぎりぎり許容範囲という感じの動作です。動作的な作りこみなら<a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>がやっぱりできがいいと思います。</p>

<p>タイトルで移行したと書いてますが、DayOneも併用はしていてDayOneには書捨て的なメモを書いたりしてます(今日何したとか)。
日にちをまたいで書く必要があるメモがQuiver、その場その場でいいのはDayOneみたいな感じの使い分けをしています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>未知の頭字語を見つけるtextlintルール</title>
   <link href="http://efcl.info/2016/01/22/textlint-unexpanded-acronym/"/>
   <updated>2016-01-22T20:10:00+09:00</updated>
   <id>http://efcl.info/2016/01/22/textlint-unexpanded-acronym</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/textlint-rule-unexpanded-acronym" title="textlint-rule-unexpanded-acronym">textlint-rule-unexpanded-acronym</a>という<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>ルールを書きました。</p>

<p>textlint自体については以下を参照してください。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h2 id="textlint-rule-unexpanded-acronym"><a href="https://github.com/azu/textlint-rule-unexpanded-acronym" title="textlint-rule-unexpanded-acronym">textlint-rule-unexpanded-acronym</a></h2>

<p>textlint-rule-unexpanded-acronymが見つけるのは未知の<a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E5%AD%97%E8%AA%9E" title="頭字語">頭字語</a>です。</p>

<blockquote>
<p>頭字語（とうじご）とは、主にヨーロッパ言語のアルファベットにおける略語の一種で、複数の単語から構成された合成語の頭文字を繋げて作られた語のこと。</p>
</blockquote>

<ul>
<li>OSS: Open Source Software</li>
<li>IEEE: Institute of Electrical and Electronics Engineers</li>
</ul>

<p>みたいな短縮された単語です。</p>

<p>頭字語がいきなり説明なしに出てきた場合に、最後までそれがなんの略語なのかわからないと意味が分からない文章になってしまいます。</p>

<p>そのため、頭字語がでてきたらその元となった単語が文章中にでてきているかをチェックするルールです。</p>

<p>例えば、以下のような文章ではOSSがOpen Source Softwareの略であることを説明してないのでエラーとなります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">OSS開発を行う人には色々なタイプがいるはずだ。
</code></pre></div>
<p>まだアルファベットしか対応してないです(日本語対応できるのか謎)。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-unexpanded-acronym
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>で設定する場合は以下のように設定できます。
(内容はデフォルト値になっています)</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;unexpanded-acronym&quot;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;min_acronym_len&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
            <span class="nt">&quot;max_acronym_len&quot;</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
            <span class="nt">&quot;ignore_acronyms&quot;</span> <span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="設定">設定</h3>

<p>上記の設定で書いたように幾つかのオプションがあります。</p>

<ul>
<li><code>min_acronym_len</code>(default:<code>3</code>): 指定した文字数以上の頭字語をチェック対象とします。</li>
<li><code>max_acronym_len</code>(default:<code>5</code>): 指定した文字数以下の頭字語をチェック対象とします。</li>
<li><code>ignore_acronyms</code>(default:<code>[]</code>): 無視する頭字語を指定できます。</li>
</ul>

<p><code>min_acronym_len</code> 以上 <code>max_acronym_len</code> 以下の文字数をチェックするので、デフォルトでは3-5文字の頭字語だけがチェックされます。</p>

<p>また、OSSというような説明しなくても分かるであろう頭字語を無視するオプションもあります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;rules&quot;: {
        &quot;unexpanded-acronym&quot; : {
            // AB is ignore, ABC is recognized.
            &quot;min_acronym_len&quot; : 3,
            // GREEEEEEN is ignore
            &quot;max_acronym_len&quot; : 5,
            // OSS is ignore
            &quot;ignore_acronyms&quot; : [&quot;OSS&quot;]
        }
    }
}
</code></pre></div>
<h3 id="todo">TODO</h3>

<p>日本語も対応できると良さそうだけど、普通に難しそうな気がする。</p>

<p><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/96.html" title="実験: 文章に対して文章でテスト | 技術文書をソフトウェア開発する話">実験: 文章に対して文章でテスト | 技術文書をソフトウェア開発する話</a>で似たような話をしていました</p>

<h2 id="参考">参考</h2>

<p>RedPenの同様の機能を参考に実装しました。</p>

<ul>
<li><a href="http://redpen.cc/docs/latest/index.html#unexpandedacronym" title="UnexpandedAcronym">RedPen UnexpandedAcronym</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScriptのコードを分解してよく使われてる機能を分析する</title>
   <link href="http://efcl.info/2016/01/22/es-usage-rate/"/>
   <updated>2016-01-22T13:09:00+09:00</updated>
   <id>http://efcl.info/2016/01/22/es-usage-rate</id>
   <content type="html"><![CDATA[ <p><a href="http://efcl.info/2015/12/31/oss-in-2015/" title="今年のOSS活動振り返り @ 2015 | Web Scratch">今年のOSS活動振り返り @ 2015 | Web Scratch</a>で</p>

<blockquote>
<ul>
<li>JavaScript/ECMAScriptを改めてどう学べばいいのか考える

<ul>
<li><a href="https://github.com/azu/how-to-learn-es6" title="azu/how-to-learn-es6">azu/how-to-learn-es6</a>とか<a href="https://twitter.com/hashtag/thinking_in_es6?src=hash" title="#thinking_in_es6">#thinking_in_es6</a>で考えてるやつ</li>
</ul></li>
</ul>
</blockquote>

<p>というのを今年考える事としてあげていました。
それを考えるために、既存のコードがどうなってるかを見てみるという話です。</p>

<p>具体的には既存のコードを見て、そこでどういう機能/構文が多く使われているのかが分かれば、どこを中心的に学ぶと結果が出やすくなるのではという感じです。</p>

<p>それを分析するために<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">azu/es-usage-rate</a>というツールを書いた。</p>

<h3 id="installation">Installation</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g es-usage-rate
</code></pre></div>
<h3 id="使い方">使い方</h3>

<p>例えば、<code>es-usage-rate</code>自体がどういう構文を使って書かれてるかを見てみてます。</p>

<p><code>es-usage-rate</code>は他のCLIと組み合わせて使う事を前提としてるので、
デフォルトでは指定したコードをパースして、それらのAST Node typeを出力するだけです。</p>

<p>AST Node typeは以下を参照すると分かりますが、ECMAScriptの構文の名前が入ってる感じです。
(Generatorとかはtypeとしてはないので独自に出してます。</p>

<ul>
<li><a href="https://github.com/estree/estree" title="estree/estree: The ESTree Spec">estree/estree: The ESTree Spec</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>es-usage-rate <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span>
ImportDeclaration
AssignmentExpression
Identifier
CallExpression
Identifier
Identifier
CatchClause
....
</code></pre></div>
<p>注意点としては、AST Node typeというのは基本的には構文にしか<code>type</code>がついてません。
例えば、<code>Promise</code>とか構文としては新しいものではなくただのオブジェクトなので、<code>type</code>だけでは区別できないと思います。
(名前などを見れば判定はできますが面倒なのでやってないです)</p>

<p><code>es-usage-rate</code>を使えば標準出力には<code>type</code>が出現した回数だけ出力されるので、これを<a href="https://github.com/philovivero/distribution" title="philovivero/distribution">distribution</a>で集計して見たりするのが簡単な使い方です。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>git clone https://github.com/azu/es-usage-rate.git
<span class="nv">$ </span>es-usage-rate <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba --height<span class="o">=</span>50
                      Key<span class="p">|</span>Ct  <span class="o">(</span>Pct<span class="o">)</span>    Histogram
               Identifier<span class="p">|</span><span class="m">334</span> <span class="o">(</span>37.70%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            StringLiteral<span class="p">|</span> <span class="m">84</span>  <span class="o">(</span>9.48%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
           CallExpression<span class="p">|</span> <span class="m">61</span>  <span class="o">(</span>6.88%<span class="o">)</span> ▬▬▬▬▬▬▬▬
         MemberExpression<span class="p">|</span> <span class="m">55</span>  <span class="o">(</span>6.21%<span class="o">)</span> ▬▬▬▬▬▬▬
           BlockStatement<span class="p">|</span> <span class="m">38</span>  <span class="o">(</span>4.29%<span class="o">)</span> ▬▬▬▬▬
       VariableDeclarator<span class="p">|</span> <span class="m">34</span>  <span class="o">(</span>3.84%<span class="o">)</span> ▬▬▬▬▬
          ReturnStatement<span class="p">|</span> <span class="m">26</span>  <span class="o">(</span>2.93%<span class="o">)</span> ▬▬▬▬
VariableDeclaration:const<span class="p">|</span> <span class="m">25</span>  <span class="o">(</span>2.82%<span class="o">)</span> ▬▬▬
      FunctionDeclaration<span class="p">|</span> <span class="m">18</span>  <span class="o">(</span>2.03%<span class="o">)</span> ▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">17</span>  <span class="o">(</span>1.92%<span class="o">)</span> ▬▬▬
      ExpressionStatement<span class="p">|</span> <span class="m">15</span>  <span class="o">(</span>1.69%<span class="o">)</span> ▬▬
           ObjectProperty<span class="p">|</span> <span class="m">15</span>  <span class="o">(</span>1.69%<span class="o">)</span> ▬▬
                Directive<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
                  Program<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
         DirectiveLiteral<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
  ArrowFunctionExpression<span class="p">|</span> <span class="m">12</span>  <span class="o">(</span>1.35%<span class="o">)</span> ▬▬
         ObjectExpression<span class="p">|</span> <span class="m">12</span>  <span class="o">(</span>1.35%<span class="o">)</span> ▬▬
     AssignmentExpression<span class="p">|</span> <span class="m">10</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
   ExportNamedDeclaration<span class="p">|</span>  <span class="m">9</span>  <span class="o">(</span>1.02%<span class="o">)</span> ▬▬
          ImportSpecifier<span class="p">|</span>  <span class="m">9</span>  <span class="o">(</span>1.02%<span class="o">)</span> ▬▬
   ImportDefaultSpecifier<span class="p">|</span>  <span class="m">8</span>  <span class="o">(</span>0.90%<span class="o">)</span> ▬
 ExportDefaultDeclaration<span class="p">|</span>  <span class="m">7</span>  <span class="o">(</span>0.79%<span class="o">)</span> ▬
         BinaryExpression<span class="p">|</span>  <span class="m">7</span>  <span class="o">(</span>0.79%<span class="o">)</span> ▬
              IfStatement<span class="p">|</span>  <span class="m">6</span>  <span class="o">(</span>0.68%<span class="o">)</span> ▬
  VariableDeclaration:let<span class="p">|</span>  <span class="m">5</span>  <span class="o">(</span>0.56%<span class="o">)</span> ▬
           NumericLiteral<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
          ArrayExpression<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
  VariableDeclaration:var<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
          TemplateElement<span class="p">|</span>  <span class="m">3</span>  <span class="o">(</span>0.34%<span class="o">)</span> ▬
            ObjectPattern<span class="p">|</span>  <span class="m">3</span>  <span class="o">(</span>0.34%<span class="o">)</span> ▬
           BreakStatement<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
        AssignmentPattern<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
               SwitchCase<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
         UpdateExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          UnaryExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             ObjectMethod<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
            RegExpLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          SwitchStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
              CatchClause<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             ForStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
           BooleanLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             TryStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
           ThrowStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
            NewExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
 ImportNamespaceSpecifier<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          TemplateLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
</code></pre></div>
<p>ターミナルでのグラフ表示に<a href="https://github.com/philovivero/distribution" title="philovivero/distribution">philovivero/distribution</a>を使うと便利です。</p>

<p>全部を出すとちょっと多いので、ES6の構文だけに絞ってみます。
<code>es-usage-rate</code>は<code>--reducer</code>で任意のフィルターファイル処理を指定できるので、ビルトインしてある<code>es6</code>を指定します。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>es-usage-rate --reducer es6  <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">25</span> <span class="o">(</span>24.51%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">17</span> <span class="o">(</span>16.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">12</span> <span class="o">(</span>11.76%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>7.84%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>6.86%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>4.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.94%<span class="o">)</span> ▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.94%<span class="o">)</span> ▬▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.96%<span class="o">)</span> ▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.98%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.98%<span class="o">)</span> ▬▬
</code></pre></div>
<p>ES6のうち、<code>import</code>と<code>export</code>のみを比較してみたいなら、<code>distribution</code>に渡す前にgrepすることでできます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">es-usage-rate --reducer es6  <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> grep -e <span class="s2">&quot;Import&quot;</span> -e <span class="s2">&quot;Export&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
       ImportDeclaration<span class="p">|</span><span class="m">17</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
         ImportSpecifier<span class="p">|</span> <span class="m">9</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ExportNamedDeclaration<span class="p">|</span> <span class="m">9</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>15.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ExportDefaultDeclaration<span class="p">|</span> <span class="m">7</span> <span class="o">(</span>13.73%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.96%<span class="o">)</span> ▬▬▬
</code></pre></div>
<p>当たり前な感じはしますが、<code>import</code>の方が<code>export</code>より使われているという結果が見えました。</p>

<p><code>es-usage-rate</code>は大した処理をしてなくて、<code>--formatter</code>、<code>--reducer</code>、<code>--mapper</code>の引数で指定したスクリプトを組み合わせて欲しい形で、コードをパースした結果を吐くためのツールです。
(<code>reduce</code>のシグネチャがイマイチなので変えるかも)</p>

<ol>
<li>parse(Code) =&gt; AST</li>
<li>map(AST) =&gt; Nodes</li>
<li>reduce(Nodes) =&gt; Nodes</li>
<li>format(Nodes) =&gt; result!</li>
</ol>

<h2 id="使われているes6の構文を見ていく">使われているES6の構文を見ていく</h2>

<p>あるコードで、どれくらいES6の構文が使われているのか、またどういう構文の使用率が高いのか、
ということを調べたくて<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">es-usage-rate</a>を書きました。</p>

<p>なので、実際に調べて行ってみます。</p>

<p>ES6で書かれていて、いろんな人が同じものを書いてるサンプルとして以下のFlux実装比較を使ってみます。</p>

<ul>
<li><a href="https://github.com/staltz/flux-challenge" title="flux-challenge">flux-challenge</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/staltz/flux-challenge.git
<span class="nb">cd </span>flux-challeng/submissions
<span class="c"># 人別に見ていく</span>
find . ! -path . -type d -maxdepth <span class="m">1</span> <span class="p">|</span> xargs -I <span class="o">{}</span>  ksh -c <span class="s1">&#39;echo {}; es-usage-rate &quot;{}/**/*.js&quot; --reducer es6 2&gt; /dev/null  | distribution --char=ba&#39;</span>
./abaran
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
         ImportSpecifier<span class="p">|</span><span class="m">15</span> <span class="o">(</span>18.99%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ExportNamedDeclaration<span class="p">|</span><span class="m">12</span> <span class="o">(</span>15.19%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
       ImportDeclaration<span class="p">|</span><span class="m">11</span> <span class="o">(</span>13.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ArrowFunctionExpression<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ClassDeclaration<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
               ClassBody<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
           ObjectPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
       AssignmentPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.27%<span class="o">)</span> ▬▬▬
./arqex
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
       ImportDeclaration<span class="p">|</span><span class="m">15</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ImportDefaultSpecifier<span class="p">|</span><span class="m">14</span> <span class="o">(</span>31.11%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ExportDefaultDeclaration<span class="p">|</span> <span class="m">5</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>8.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
               ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>8.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
 ArrowFunctionExpression<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>4.44%<span class="o">)</span> ▬▬▬▬▬▬
         ImportSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>2.22%<span class="o">)</span> ▬▬▬
./ds300
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">8</span> <span class="o">(</span>57.14%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">5</span> <span class="o">(</span>35.71%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>7.14%<span class="o">)</span> ▬▬▬▬▬▬
./fab1an
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">12</span> <span class="o">(</span>66.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span> <span class="m">2</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>5.56%<span class="o">)</span> ▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>5.56%<span class="o">)</span> ▬▬▬▬
./garbles
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">34</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">28</span> <span class="o">(</span>27.45%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.92%<span class="o">)</span> ▬▬▬▬▬
./hyperturtle
./jas-chen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">75</span> <span class="o">(</span>35.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">27</span> <span class="o">(</span>12.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">27</span> <span class="o">(</span>12.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">26</span> <span class="o">(</span>12.44%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">13</span>  <span class="o">(</span>6.22%<span class="o">)</span> ▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>5.26%<span class="o">)</span> ▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>5.26%<span class="o">)</span> ▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.87%<span class="o">)</span> ▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.87%<span class="o">)</span> ▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
                ClassBody<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.48%<span class="o">)</span> ▬
./jelz
./jollytoad
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">66</span> <span class="o">(</span>37.29%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">53</span> <span class="o">(</span>29.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span><span class="m">33</span> <span class="o">(</span>18.64%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>3.95%<span class="o">)</span> ▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>3.39%<span class="o">)</span> ▬▬▬▬
              RestElement<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>2.82%<span class="o">)</span> ▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
          TemplateElement<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.56%<span class="o">)</span> ▬
./josepot
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">54</span> <span class="o">(</span>21.09%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">40</span> <span class="o">(</span>15.62%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">39</span> <span class="o">(</span>15.23%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">27</span> <span class="o">(</span>10.55%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">23</span>  <span class="o">(</span>8.98%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">18</span>  <span class="o">(</span>7.03%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span><span class="m">14</span>  <span class="o">(</span>5.47%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>3.52%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>3.12%<span class="o">)</span> ▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>2.73%<span class="o">)</span> ▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.34%<span class="o">)</span> ▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.56%<span class="o">)</span> ▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.56%<span class="o">)</span> ▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>1.17%<span class="o">)</span> ▬▬▬
./kyldvs
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
        ImportDeclaration<span class="p">|</span><span class="m">31</span> <span class="o">(</span>23.31%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">28</span> <span class="o">(</span>21.05%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">24</span> <span class="o">(</span>18.05%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">18</span> <span class="o">(</span>13.53%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>6.02%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>6.02%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>3.76%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.01%<span class="o">)</span> ▬▬▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.01%<span class="o">)</span> ▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.50%<span class="o">)</span> ▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.75%<span class="o">)</span> ▬▬
./leoasis
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">20</span> <span class="o">(</span>19.80%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">17</span> <span class="o">(</span>16.83%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">12</span> <span class="o">(</span>11.88%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.91%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>5.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.96%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
./masiulis
./mattjbray
./milankinen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">23</span> <span class="o">(</span>34.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">17</span> <span class="o">(</span>25.37%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">10</span> <span class="o">(</span>14.93%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>11.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>8.96%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬
./mweststrate
./mynomoto
./pasieronen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">20</span> <span class="o">(</span>26.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">16</span> <span class="o">(</span>21.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">13</span> <span class="o">(</span>17.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>10.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>8.00%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>2.67%<span class="o">)</span> ▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>2.67%<span class="o">)</span> ▬▬▬▬▬
              RestElement<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
             ArrayPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
          ExportSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
./pindia
./retozi
./salsita
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">99</span> <span class="o">(</span>30.09%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">83</span> <span class="o">(</span>25.23%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">54</span> <span class="o">(</span>16.41%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">38</span> <span class="o">(</span>11.55%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span><span class="m">22</span>  <span class="o">(</span>6.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>3.34%<span class="o">)</span> ▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>2.13%<span class="o">)</span> ▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>1.82%<span class="o">)</span> ▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.22%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>0.91%<span class="o">)</span> ▬▬
            ObjectPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.30%<span class="o">)</span> ▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.30%<span class="o">)</span> ▬
./staltz
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">40</span> <span class="o">(</span>29.85%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">35</span> <span class="o">(</span>26.12%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">19</span> <span class="o">(</span>14.18%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">15</span> <span class="o">(</span>11.19%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>5.97%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.24%<span class="o">)</span> ▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.49%<span class="o">)</span> ▬▬▬
./stinson7
./winstonewert
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">7</span> <span class="o">(</span>24.14%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">6</span> <span class="o">(</span>20.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">4</span> <span class="o">(</span>13.79%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
        AssignmentPattern<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
           ForOfStatement<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
                ClassBody<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
</code></pre></div>
<p>注意点としては、<code>if</code>とか<code>var</code>などの方が<code>class</code>などより出現率が高いのは当たり前なので、
単純にランキングとして見ると少し観点としてズレがある気がします。</p>

<p>人別の結果を重ねて見たいので、ちょっと縦長だと見えにくい気がします。</p>

<p>とりあえず<a href="https://github.com/azu/es-usage-rate/blob/master/src/formatters/json-by-all.js" title="json-by-all">json-by-all</a>というformatterを書いたので、これを元にCSV化してみてNumbersでグラフにしてみます。
(Rとかそういうので処理したかったけど、簡単な方法が欲しい…)</p>

<p>標準入力の文字列を既存のJSON配列に追記していく<a href="https://github.com/azu/json-append" title="json-append">json-append</a>というも書いたので、以下のようにすれば、それぞれの人(ディレクトリ)ごとの集計結果を得られます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">find . ! -path . -type d -maxdepth <span class="m">1</span> <span class="p">|</span> xargs -I <span class="o">{}</span>  ksh -c <span class="s1">&#39;echo {}; es-usage-rate &quot;{}/**/*.js&quot; --reducer es6 --formatter json-by-all  | json-append results.json&#39;</span>
</code></pre></div>
<p>これでJSONとして集計結果が手に入ったので、これをCSVにしてExcelとかで読み込ませてみます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./abaran/src/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./arqex/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./ds300/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">5</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./fab1an/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./garbles/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">34</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">4</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jas-chen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">75</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">26</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jelz/resources/public/js/app.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jollytoad/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">53</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">66</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">33</span><span class="p">,</span>
    <span class="nt">&quot;RestElement&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./josepot/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">3</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./kyldvs/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./leoasis/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mattjbray/dist/app.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./milankinen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">8</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mweststrate/dist/bundle.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mynomoto/index.html.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./pasieronen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nt">&quot;RestElement&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ArrayPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ExportSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./pindia/reflux.min.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./retozi/&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./salsita/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">83</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./staltz/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./winstonewert/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ForOfStatement&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>
<p>JSON to CSVをするには</p>

<ul>
<li><a href="https://github.com/zemirco/json2csv#command-line-interface" title="json2csv">json2csv</a></li>
<li><a href="http://konklone.io/json/" title="JSON to CSV">JSON to CSV</a></li>
</ul>

<p>などが使えます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">json2csv -i results.json -o results.csv
<span class="c"># 何か要素が消える気がする… </span>
</code></pre></div>
<p>Numbersで読み込んで積み重ね棒グラフにしてみました。</p>

<p><a href="http://efcl.info/wp-content/uploads/2016/01/22-1453435236.png"><img src="http://efcl.info/wp-content/uploads/2016/01/22-1453435236.png" alt="graph"></a></p>

<p>先ほども書いたように 数が多い ≠ 使われる頻度が高い なので、
大して意味のないグラフです。(どういうグラフ使うのがいいんだろ?)</p>

<p>カラフル具合から<code>ArrowFunctionExpression</code> (Arrow Function)や<code>const</code>はやっぱり使われてるなーとか、
<code>require</code>でもいいはずだけど<code>import</code>を使ってる人も多いなどがわかった気がします。</p>

<p>この辺は題材によるので、色々なものを見てみると面白い発見があるかもしれません。</p>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>コードを分解して解析する<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">azu/es-usage-rate</a>を作った</li>
<li>ES6のサンプルコードとして<a href="https://github.com/staltz/flux-challenge" title="staltz/flux-challenge: A frontend challenge to test UI architectures and solutions">staltz/flux-challenge: A frontend challenge to test UI architectures and solutions</a>を見た</li>
<li>人/ライブラリによって使う機能が結構違うことがわかった</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JSer.info 5周年記念イベント アウトラインメモ</title>
   <link href="http://efcl.info/2016/01/17/jserinfo-5years/"/>
   <updated>2016-01-17T16:42:00+09:00</updated>
   <id>http://efcl.info/2016/01/17/jserinfo-5years</id>
   <content type="html"><![CDATA[ <p><a href="http://jser.connpass.com/event/24202/" title="JSer.info 5周年記念イベント">JSer.info 5周年記念イベント</a>を開催&amp;参加してきたのでメモ。</p>

<p>スライドとかの概要は以下にも書いてあります。</p>

<ul>
<li><a href="http://jser.info/2016/01/16/jser-5years/">JSer.info 5周年記念イベントを開催しました - JSer.info</a></li>
<li><a href="http://togetter.com/li/926573">JSer.info 5周年記念イベント - Togetterまとめ</a></li>
</ul>

<p>以下メモ書きです。</p>

<h2 id="jser.info-5周年---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/jser.info.html" title="JSer.info 5周年">JSer.info 5周年</a> - @azu_re</h2>

<p>5年間での総計は以下のような感じになりました。</p>

<ul>
<li>投稿記事数: 261</li>
<li>毎週1回投稿: (261*7) / 365 ≒ 5(年)</li>
<li>合計紹介URL数: 6312</li>
</ul>

<h2 id="javascript情報って何だっけ?---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/javascript-information.html">JavaScript情報って何だっけ?</a> - @azu_re</h2>

<p>そもそもなんでJavaScriptについて知りたいのという話。
後で別記事書くかも</p>

<h2 id="angularの5年とこれから---@armorik83"><a href="https://speakerdeck.com/armorik83/angularfalse5nian-tokorekara" title="Angularの5年とこれから">Angularの5年とこれから</a> - @armorik83</h2>

<ul>
<li>Angularも変化が大きい</li>
<li>フロントエンドの歴史とバインディングの歴史</li>
<li>Ajax + jQueryを始めとすると技術</li>
<li>Backbone.js MV*architectureの提案</li>
<li>AngularJS双方向データバインディング

<ul>
<li>DI</li>
<li>双方向データバインディング</li>
</ul></li>
<li>AngularJSの弱点の顕在化

<ul>
<li>冗長なDirty Checkingが問題視される</li>
<li>React 仮想DOM</li>
</ul></li>
<li>Angular beta 0リリース

<ul>
<li><code>@input</code>、<code>@output</code>というAPI</li>
<li>Component間のデータ、イベントバンディングを整合化</li>
<li>下から来た情報をバブリングじゃなくて<code>output</code>という属性にいれて</li>
</ul></li>
<li>TypeScript前提、

<ul>
<li>型情報、型アノテーション</li>
</ul></li>
<li>Change Detection

<ul>
<li><a href="http://qiita.com/laco0416/items/78edd53f5da8ead02e75" title="Angular2のChange Detectionについて - Qiita">Angular2のChange Detectionについて - Qiita</a></li>
</ul></li>
<li><code>ngAnimate</code>

<ul>
<li>引き続きサポート</li>
<li>スコープをコンポーネント内に限定出来る<code>Style</code></li>
</ul></li>
<li>AngularJSの互換性

<ul>
<li>ngUpdate

<ul>
<li>プロセスの名前</li>
<li>Misko Hveryによるもの</li>
</ul></li>
<li>1.xのなかで2を使う方法</li>
</ul></li>
<li>Offline Compiled Template

<ul>
<li>独特なHTMLで表記できるAngular</li>
</ul></li>
<li>Angular Universal

<ul>
<li>ブラウザとNode.jsの両方で動くJS</li>
<li>サーバサイドレンダリングをDOMRendererとServerDOMRendererの切り替えで出来る</li>
<li>SEO対応とかも</li>
</ul></li>
<li>Web Workers

<ul>
<li>Angular 2のほぼ全てのコードをWeb Workers上で実行する仕組み</li>
</ul></li>
<li>AngularDart

<ul>
<li>Dartの資産</li>
<li>Angular 2のマイクロタスクキュー Zone.js</li>
<li>TypeScriptで利用可能になった Decorators構文</li>
</ul></li>
<li>情報源

<ul>
<li><a href="http://ng2-info.github.io/" title="Angular2 Info">Angular2 Info</a></li>
</ul></li>
<li>Angular 1のメンテンス期間

<ul>
<li>みんなが使わなくなるまでメンテする</li>
</ul></li>
</ul>

<h2 id="webidlを見てみる---@takenspc"><a href="http://www.slideshare.net/takenspc/webidl" title="WebIDLを見てみる">WebIDLを見てみる</a>  - @Takenspc</h2>

<ul>
<li>ブラウザに実装されてるWeb IDLを見てみる</li>
<li>ブラウザで使えるAPI: 沢山ある

<ul>
<li>新たなAPIが生まれる</li>
<li>途中でAPIが変わる</li>
</ul></li>
<li>実際に使えるAPIは何なのか、知りたい</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="s2">&quot;...&quot;</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">param</span> <span class="nx">of</span> <span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">param</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">param</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>ブラウザの実装とドキュメントが分離されてる

<ul>
<li>別々にメンテナンスされてる</li>
</ul></li>
<li>自分が欲しいと思っている粒度なのか頻度は別になってる</li>
<li>ブラウザの実装ってだけが書いているのか?

<ul>
<li>誰かが何かを元に書いている</li>
</ul></li>
<li>各種ブラウザはWebIDLからインタフェースを機械生成している</li>
<li>WebIDLがブラウザと仕様を結ぶもの。</li>
<li>ブラウザと仕様での共通言語の1つ

<ul>
<li>共通言語なので比較が出来る</li>
</ul></li>
<li>WebIDLを比較して見てみるという話</li>
<li>FirefoxでChromeでIDLの使い方が違う</li>
<li>WebIDLを比較するには

<ul>
<li>継承や<code>[</code>　Extended attributes <code>]</code> をなどがある</li>
<li>これらを正規化する必要がある</li>
</ul></li>
<li>まとめ

<ul>
<li>WebIDLはしようとブラウザーの共通言語の1つ</li>
</ul></li>
</ul>

<h2 id="[ie8枠]-ぼくたちの愛したie8---@hasegawayosuke">[IE8枠] ぼくたちの愛したIE8 - @hasegawayosuke</h2>

<ul>
<li>XSSでalert出すためにJavaScriptを覚えた</li>
<li>IE8のすごい機能</li>
<li>XSSフィルター

<ul>
<li>リクエストとレスポンスを比較 スクリプトがあったら実行を阻止</li>
<li>保守的なのに大胆な機能</li>
<li>XSSフィルターを使ってXSS</li>
</ul></li>
<li>XDomainRequest

<ul>
<li>クロスオリジンで使えるXHRモドキ</li>
</ul></li>
<li>toStaticHTML

<ul>
<li>いい感じに安全なHTMLにしてくれる</li>
<li>HTMLメールとかMarkdownなどで使える</li>
<li>細かい指定ができない</li>
<li>他のブラウザでは簡単な代替方法がない

<ul>
<li>DOMPurifyなど</li>
<li>HTML5 iframe sandbox</li>
</ul></li>
<li>標準化もされていないのであんまり使われない</li>
</ul></li>
<li>X-Content-Type-Options

<ul>
<li>Content-Typeに従うようになる</li>
<li>普通の挙動</li>
</ul></li>
<li>X-Frame-Options

<ul>
<li>クリックジャッキングへの対応</li>
</ul></li>
</ul>

<h2 id="[ie8枠]-active-scripting---@makoto_kato">[IE8枠] <a href="http://www.slideshare.net/djraven/active-scripting" title="Active scripting">Active scripting</a> - @makoto_kato</h2>

<ul>
<li>IE4-8のアーキテクチャ

<ul>
<li>COM API</li>
<li>Browser Helper Object(BHO) API for ブラウザ拡張</li>
<li>プラガブルなプロトコル</li>
</ul></li>
<li>Active Scription

<ul>
<li>COM I/Fバインディングエンジン</li>
<li>For Engine API</li>
<li>For Host API - サードパーティでも使える</li>
<li>IE3-8</li>
<li>WSH</li>
<li>IIS</li>
<li>Office</li>
</ul></li>
<li>バックエンドも色々

<ul>
<li>MS

<ul>
<li>JScript</li>
<li>VBScript</li>
</ul></li>
<li>3Party

<ul>
<li>Ruby</li>
<li>Python</li>
<li>Perl</li>
<li>PHP</li>
<li>etc..</li>
</ul></li>
<li>サードパーティアプリでIEのセキュリティホールを作れる</li>
</ul></li>
<li>COM Interfaces

<ul>
<li>IE IDispatchEx</li>
</ul></li>
</ul>

<h2 id="非同期イベントがんばるぞい---@saneyuki_s">非同期イベントがんばるぞい - @saneyuki_s</h2>

<ul>
<li>イベント

<ul>
<li>Data</li>
<li>Domain</li>
<li>File I/O</li>
<li>Net work I/O</li>
<li>等色々イベントがある</li>
</ul></li>
<li>イベントの依存関係の管理が面倒問題</li>
<li>FRP</li>
<li>何でイベントを待ち受けられないの?</li>
<li>Duality

<ul>
<li>PullとPush型</li>
</ul></li>
<li>イベントは何で<code>Observable&lt;T&gt;</code>にするのか

<ul>
<li>一回しか来ないイベント</li>
<li>複数回来るイベント</li>
</ul></li>
<li>Promiseは基本的に1回のイベント(使い捨て)</li>
<li>複数回のイベントに対応するためにObservableという考え方の話</li>
<li>FRPとは?

<ul>
<li>FRPとRxは別の動物であるという話</li>
<li>似たような仕組みだけど違うもの</li>
</ul></li>
<li>Jafar Husain

<ul>
<li>.NetのものをJSにもってきた</li>
</ul></li>
<li>イベント文字列を機械的に考えられるようになった

<ul>
<li>パースしてASTで処理出来るようなイベントの流れ</li>
<li>イベントのgotoみたいなものじゃなくてもっと宣言的な流れ</li>
</ul></li>
</ul>

<hr>

<ul>
<li>How abstract RPC call

<ul>
<li>イベントをRPCのようなものだと考える</li>
</ul></li>
<li>RPCのコンセプト

<ul>
<li>Address どこへ</li>
<li>Protocol どうやって</li>
<li>Data type どういう値を渡して、どういう値を返すか</li>
</ul></li>
<li>根本的な哲学は再利用が可能である

<ul>
<li>ABC(Address &amp; Protocol &amp; Data typeと同じ)</li>
</ul></li>
<li>これはFlux

<ul>
<li>ActionとDispatcherと似た感じ</li>
<li>Actionはイベントをオブジェクトとして名前を付けた感じ</li>
</ul></li>
</ul>

<hr>

<h2 id="react-on-現場---@mizchi">React on 現場 - @mizchi</h2>

<ul>
<li>あるいはModern JavaScript on Rails</li>
</ul>

<p>モダンJSとは</p>

<ol>
<li>npm/Browserify</li>
<li>Babel/ES2015</li>
<li>React/Fux</li>
<li>Testable</li>
<li>No more jQuery plugins</li>
</ol>

<p>という構成</p>

<ul>
<li>使われてないものを捨てるのは簡単</li>
<li>でも使われてると書き換えないと行けないので辛い</li>
</ul>

<p>何か良くしてくれ - 方針</p>

<ul>
<li>再利用できるものと再利用出来るものを分ける</li>
<li>エディタの書き換えへの挑戦

<ul>
<li>コード量が多い</li>
<li>Kobitoとかやってたのでノウハウ活かせるかも</li>
</ul></li>
<li>破綻

<ul>
<li>分量</li>
<li>ドメイン知識が色々必要</li>
</ul></li>
<li>教訓

<ul>
<li>仕様を理解してないものはコード書けない</li>
<li>モジュールの境界面が明示されてないものは分解できない</li>
</ul></li>
<li>ゴールの設定

<ul>
<li>新規モジュールを負債を引き継ぐことなく受け入れられる環境</li>
<li>Turbolinksが導入可能な初期化フロー

<ul>
<li>Turbolinkは初期化フローの制御ができてないと行けない</li>
</ul></li>
</ul></li>
<li>やったこと

<ul>
<li>npmに依存ライブラリを集約

<ul>
<li>ライブラリごとに異なるCDNを参照</li>
<li>オーバーヘッドが大きい</li>
<li>どのライブラリを使ってるか分からない</li>
</ul></li>
<li>npmとbowerでライブラリの依存を解決

<ul>
<li>npmを優先的に使う</li>
</ul></li>
<li>Browserify導入

<ul>
<li>Sprocketsを捨てる</li>
<li>Rails上のデファクトモジュールシステム</li>
</ul></li>
<li>Sprocketsの問題

<ul>
<li>ファイルスコープで返り値を持てない</li>
<li>Nodeで動かない</li>
<li>RubyとJSの問題切り分けられない</li>
<li>JavaScriptのエコシステムに乗れない</li>
<li>Sprocketsで動くJS系のgemメンテされない</li>
</ul></li>
<li>書き換える

<ul>
<li>分量が多い</li>
<li>平行して開発している機能が沢山あってコンフリクトする</li>
<li>スクリプトを書いて一発</li>
<li>全てのモジュールをCommonJS形式に書き換えた</li>
</ul></li>
<li>Browserifyによって変わったこと

<ul>
<li>依存がそれぞれのファイルで完結した状態になる</li>
<li>単体テスト可能な閉じた参照の提供</li>
<li>名前空間の初期化順に左右されない</li>
</ul></li>
<li>gulp

<ul>
<li>browserify-rails

<ul>
<li>中ではbrowserify-incrementalを使ってる</li>
</ul></li>
</ul></li>
<li>Babel

<ul>
<li>Babelのロード時間が長い</li>
<li>プロセスを毎回立てると、毎回読み込みが起きてしまう</li>
</ul></li>
<li>テスト

<ul>
<li><code>require.cache</code></li>
</ul></li>
<li>React化

<ul>
<li>Qiitaのヘッダー</li>
<li>Fluxの選定が面倒だったのでベタ書き</li>
<li><a href="http://qiita.com/mizchi/items/79673c4d406cc85b44aa" title="redux への 不満を解消する為に, flumptというFlux実装を作った - Qiita">redux への 不満を解消する為に, flumptというFlux実装を作った - Qiita</a></li>
<li>FluxはアプリケーションRootを管理するものが多いので、小さくPub/Subしたい</li>
</ul></li>
<li>react-unit

<ul>
<li>ReactのshaddlowRenderのラッパー</li>
</ul></li>
</ul></li>
<li>まとめ

<ul>
<li>必要なのは「仕様理解」と「勇気」</li>
</ul></li>
</ul>

<hr>

<h2 id="javascript-discussion">JavaScript Discussion</h2>

<p><a href="https://app.sli.do/event/0egbwyxz/ask"><img src="https://monosnap.com/file/z2VC0MmCQKox5DjQXlvOpNaYQjVhum.png" alt="discussion"></a></p>

<ul>
<li><a href="https://app.sli.do/event/0egbwyxz/ask" title="[JSer.info] JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)">[JSer.info] JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)</a></li>
</ul>

<p>を元に議論</p>

<blockquote>
<p>JSはいつ無くなるのか。</p>
</blockquote>

<p>ウェブが死ぬまで?</p>

<blockquote>
<p>モダンなJSの構成で開発したらこんなに良いことがありました！儲かりました！みたいな話が、もっと世の中に出回ると良いと思っています。</p>
</blockquote>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">modern JavaScript に変えてサーバーの転送量が減った <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; kiyoshi nomo (@kysnm) <a href="https://twitter.com/kysnm/status/688287820717281280">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
<p>WebGLって流行るの？</p>
</blockquote>

<p>WebGLは使われるようになる。(WebGL自体というよりはそれを利用したものが使われてる)</p>

<p>WebGL流行る = SVG流行る</p>

<blockquote>
<p>IE6,7,8 のサポートはもう切ってもいいですか……?</p>
</blockquote>

<ul>
<li>プロダクトはプロダクト次第</li>
<li>ライブラリは切る+shim入れれば動くという形にする例

<ul>
<li>サポート切るのはmajorアップデートなのか(コードは変化してないが)</li>
</ul></li>
</ul>

<blockquote>
<p>O.o とは何だったのか</p>
</blockquote>

<p>顔文字</p>

<blockquote>
<p>jQueryって皆使ってるの？バージョンは？</p>
</blockquote>

<p>jQuery自体を使ってる人が全体の半分以下ぐらい。</p>

<p>バージョン</p>

<ul>
<li>9割が1.x系。</li>
<li>1割が2.x/3.x系</li>
</ul>

<blockquote>
<p>JavaScriptがコンパイル言語っぽくなってるのはどうやったら解決するのかな?</p>
</blockquote>

<p>ECMAScriptの新しい機能を試すのにビルドツールとかが必要みたいな話。
いろんなところでビルドツールが必要になる。</p>

<p>言語にマクロのような機能がないので、こういったTranspilerは仕様と実装の緩衝材となるため重要という話。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">使用したフィードバックを渡せるので開発者と使用者の溝を埋めれる。だから現在のbabelによるトランスパイルが重要という考えすごい <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; rChaser53 (@rChaser53) <a href="https://twitter.com/rChaser53/status/688299229157011457">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
<p>hasegawayusuke さんへ electron XSS の怖いところを伝えて下さい</p>
</blockquote>

<p>ElectronでXSSが起きると、任意のコード実行ができてしまう問題について</p>

<blockquote>
<p>いつになったらFlashを超えられるのか。足りないものは何か？</p>
</blockquote>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">JSがFlashを超えるのに足りないものはなにか？&#10;→GUIエディタがない&#10;それっぽいのはたまにぽつぽつでてくるけど大きくならない <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; よしこ (@yoshiko_pg) <a href="https://twitter.com/yoshiko_pg/status/688299239495999488">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="chrome-api-#jserinfo---kyo_ago"><a href="http://0-9.sakura.ne.jp/pub/lt/JSerInfo20160116/start.html" title="Chrome API #jserinfo">Chrome API #jserinfo</a> - kyo_ago</h2>

<ul>
<li>Chrome Extension/OSのAPIについて</li>
</ul>

<h2 id="railsのrailから解放される始めの一歩---joe-re"><a href="http://www.slideshare.net/masatonoguchi169/railsrails-57123076" title="RailsのRailから解放される始めの一歩">RailsのRailから解放される始めの一歩</a> - joe-re</h2>

<ul>
<li><a href="http://qiita.com/joe-re/items/1d5e1d0527cc439e03ef" title="Rails - フロントエンド開発における革命とビルドプロセスについて - Qiita">Rails - フロントエンド開発における革命とビルドプロセスについて - Qiita</a></li>
<li>Sprockets捨てたい理由</li>
<li>Railsのfingerprintの解決が難しい</li>
<li>まだ app/asset に成果物を吐いてる</li>
<li>Reduxはロックイン感があるので、<a href="https://facebook.github.io/flux/docs/flux-utils.html" title="Flux Utils">Flux Utils</a>を使うという話</li>
</ul>

<p><a href="http://joe-re.hatenablog.com/entry/2016/01/17/151923" title="JSer.info 5周年記念イベントに行ってきた(LTもした) #jserinfo - Please Drive Faster">JSer.info 5周年記念イベントに行ってきた(LTもした) #jserinfo - Please Drive Faster</a></p>

<hr>

<h2 id="node-eps---@yosuke_furukawa"><a href="https://speakerdeck.com/yosuke_furukawa/nodeeps" title="nodeeps // Speaker Deck">node-eps</a> - @yosuke_furukawa</h2>

<ul>
<li><a href="https://github.com/nodejs/node-eps" title="Node.js Enhancement Proposals">Node.js Enhancement Proposals</a>について</li>
<li>C++ Streams</li>
<li>ES6 Modules interop

<ul>
<li><a href="https://docs.google.com/presentation/d/1tXziuBheum53jk-FgtFkEUGKNVTdHzbpzhJLk7FatGc/present#slide=id.p" title="ES6/WhatWG Loader &amp;amp; Node - Google スライド">ES6/WhatWG Loader &amp; Node - Google スライド</a></li>
<li>Node/ES6 どっちからも読めるようにするという</li>
<li>JSのレイヤーじゃなくて、C++のレイヤーでfallbackさせてtryする</li>
</ul></li>
</ul>

<h2 id="sc22-ecmascript-ad-hoc委員会---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a> - @azu_re</h2>

<p>ISO/IEC 16262であるECMASCript仕様の策定プロセスやどういう活動をしてるかという話。</p>

<p><a href="http://azu.github.io/slide-what-is-ecmascript/" title="Introduction | ECMAScriptとは何か？">Introduction | ECMAScriptとは何か？</a>とはまた違う話です。</p>

<h2 id="ava---@t_wada">AVA - @t_wada</h2>

<ul>
<li><a href="https://github.com/sindresorhus/ava" title="sindresorhus/ava: Futuristic test runner">sindresorhus/ava: Futuristic test runner</a>について</li>
<li>sindresorhusのオピニオンが強い話</li>
<li>後発のTest Runnerは独自性を求められる</li>
<li>テストケースのネストはnon support</li>
<li>代わりに並列性</li>
<li>ネストではなくファイルを分けろという方針</li>
<li>power-assertがビルトイン</li>
</ul>

<h2 id="ortcの話---jxck">ORTCの話 - jxck</h2>

<ul>
<li><a href="https://github.com/openpeer/ortc" title="openpeer/ortc">openpeer/ortc</a>のHTMLを修正してる話</li>
<li>Bookflashの人がメイン

<ul>
<li>IETF系のプロトコルギークの人</li>
<li>JavaScriptよくわからない</li>
</ul></li>
<li>PRしまくる日々

<ul>
<li>PRしまくってたら「お前の方が上手く(Example)書けると思うけど?」</li>
</ul></li>
<li>Exampleをどう書いていくのか

<ul>
<li>標準仕様なのでどう書けばいいのか</li>
</ul></li>
<li>将来的にWebRTCにマージ WebRTC NVになるかも</li>
<li>Promiseも部分的に入ってる</li>
<li>そもそもExampleの目的

<ul>
<li>APIの呼び出し方を例示する</li>
<li>呼び出し順序を例示する</li>
</ul></li>
<li>参照される可能性が高い

<ul>
<li>本質はわかりやすく</li>
<li>新しい機能を使うと記述が少なくて見やすい</li>
<li>逆に「俺の知っているJSと違う」問題</li>
</ul></li>
<li>どれくらいのレベルで書くのか?

<ul>
<li>仕様をどれくらいのJavaScriptで書くのか</li>
<li>仕様書を読む人のレベル想定</li>
<li>ExampleはMSEdgeで動くレベルのAPIで書くか</li>
<li>let、Arrow Function、module、async await</li>
</ul></li>
</ul>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 

</feed>
