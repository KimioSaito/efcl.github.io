<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-03-29T16:25:46+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>Shibuya.XSS techtalk #7 アウトラインメモ</title>
   <link href="http://efcl.info/2016/03/28/shibuyaxss/"/>
   <updated>2016-03-28T21:41:00+09:00</updated>
   <id>http://efcl.info/2016/03/28/shibuyaxss</id>
   <content type="html"><![CDATA[ <p><a href="http://shibuyaxss.connpass.com/event/28232/" title="Shibuya.XSS techtalk #7">Shibuya.XSS techtalk #7</a>に参加してきたのでメモ</p>

<hr>

<h2 id="超絶技巧-csrf-mala">超絶技巧 CSRF - mala</h2>

<p>スライド: <a href="https://speakerdeck.com/mala/shibuya-dot-xss-techtalk-number-7" title="超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck">超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck</a></p>

<ul>
<li>CSRFについて</li>
<li>クロスサイトでリクエストを強制する脆弱性

<ul>
<li>書き込み</li>
<li>パスワードの削除</li>
</ul></li>
<li>未だによくある

<ul>
<li>XSSは正しく書いていれば防げる</li>
<li>CSRFは未だによくある</li>
</ul></li>
<li>CSRFは事後対処になりやすい

<ul>
<li>投票とか掲示板とか事後対処になりやすい</li>
<li>リスクの高いCSRFの紹介</li>
</ul></li>
<li>アカウント乗っ取り

<ul>
<li>危険なCSRF</li>
<li>パスワードの変更</li>
<li>メールアドレスの変更</li>
</ul></li>
<li>連携アカウント追加

<ul>
<li>OAuth2.0 + stateパラメータで防げる</li>
</ul></li>
<li>いろんなものにCSRFする

<ul>
<li>JSONやXMLを送る</li>
<li>form enctype=text/plainを使う</li>
<li>CSRFでmemcached protocolとして解釈可能なものをCSRFで送れる</li>
</ul></li>
<li>HTML Form protocol attach

<ul>
<li>Cross-Protocl スクリプトアタック</li>
<li>よくあるportはブロックされる</li>
<li>NoSQLサーバとかはブロックされてないので、攻撃出来ることがある</li>
</ul></li>
<li>昔との違い

<ul>
<li>バイナリをアップロード出来るようになってる</li>
<li>multipart/form-dataをCSRF =&gt; 可能</li>
<li>CORSのプリフライト対象外</li>
</ul></li>
<li>デモ

<ul>
<li>Memcachedにform経由で書き込むデモ</li>
<li>アプロケーションに任意のデータを書き込んだ任意のコード実行みたいなことができてしまう</li>
</ul></li>
<li>認証を突破するCSRF

<ul>
<li>Redisだとパスワードをかけられる</li>
<li>Redisのパスワード認証

<ul>
<li>パスワードが既知だと同じ</li>
</ul></li>
</ul></li>
<li>CSRFで突破できる認証

<ul>
<li>CSRFはレスポンスが取れない</li>
<li>チャレンジ&amp;レスポンス系は突破できない</li>
</ul></li>
<li>ミドルウェアへのCSRF対策

<ul>
<li>隔離するものはちゃんと隔離する</li>
<li>退職者向けバックドアは残さない</li>
</ul></li>
<li>Well-known port

<ul>
<li><a href="https://fetch.spec.whatwg.org/#port-blocking" title="3.5 Port blocking">3.5 Port blocking</a></li>
<li>Fetch APIで定義されてる</li>
<li>コレ以外はブロックされないので、CSRF経由での攻撃ができる</li>
</ul></li>
<li>プロセス間でやり取りする場合は相互認証をちゃんとやる</li>
<li>Cross protocolなCSRF + xhr.send(blob)でバイナリを送れる :new:

<ul>
<li>新しい脆弱性は生まれるかも</li>
</ul></li>
</ul>

<hr>

<h2 id="pathでxssする技術-masato-kinugawa">PATHでXSSする技術 - Masato Kinugawa</h2>

<ul>
<li><code>https://host/path?key=a#b</code></li>
<li>クエリとかハッシュ以外もXSSに使える</li>
<li><code>$_SERVER</code> 

<ul>
<li>PHP</li>
<li><code>REQUEST_URI</code>

<ul>
<li>Firefox, Chrome</li>
<li>IEはリダイレクトするとなぜがPATHの部分がエスケープされない</li>
</ul></li>
</ul></li>
<li>その他のパスでのXSS

<ul>
<li>RPO(Relative Path Overwrite)

<ul>
<li>相対パスを上書きを引き起こすXSS</li>
</ul></li>
</ul></li>
<li><code>location.pathname</code>

<ul>
<li>パスを取得するためのプロパティ

<ul>
<li><code>&#39;=()</code>などはエスケープされない</li>
</ul></li>
</ul></li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a>

<ul>
<li>解説</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;img class=&quot;log&quot; src=&quot;/payloadLogger?url=&#39;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s2">&quot;//&quot;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">)</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<ul>
<li><code>aaa/..%2F</code></li>
<li>IE

<ul>
<li>iframe経由でドキュメントモードを古い動作をあえて呼び出す</li>
<li>親のドキュメントモードがiframeにも継承される

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/gg622935(v=vs.85).aspx" title="Understanding the Compatibility view list (Windows)">Understanding the Compatibility view list (Windows)</a></li>
<li>互換性</li>
</ul></li>
<li>AllowEncodeedSlashedの動作を利用してパス先頭に<code>javascript:</code>を書く</li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a></li>
</ul></li>
<li>IE

<ul>
<li><code>http</code>から<code>mshtml</code>へreplaceStateができる</li>
<li>SafariもBlob+replaceStateができる</li>
</ul></li>
</ul>

<p>事前課題</p>

<ul>
<li><a href="https://twitter.com/kinugawamasato/status/713307732628021248" title="Masato Kinugawa on Twitter: &amp;#34;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&amp;#34;">Masato Kinugawa on Twitter: &quot;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&quot;</a></li>
</ul>

<hr>

<h2 id="electronのセキュリティの話-hasegawa">Electronのセキュリティの話 - hasegawa</h2>

<p>スライド: <a href="http://utf-8.jp/public/2016/0328/shibuyaxss.pdf" title="shibuyaxss.pdf">Electronのはなし</a></p>

<ul>
<li>Electron vs. CSP

<ul>
<li>レンダラにCSPを適用しても</li>
<li><code>webview</code>タグ内で任意コード実行ができる</li>
<li>CSPでは(Electronの)XSSを防げない</li>
</ul></li>
<li>WebViewタグを使わないでXSSするパターン

<ul>
<li>レンダラ内は同一オリジン以外のリソースは禁止</li>
<li>外部リソースを<code>innerHTML</code>で読ませれも発火しない</li>
<li>表示されるページと同じオリジンなら可能</li>
<li><code>innerHTML = &lt;iframe src=&quot;&lt;同じオリジン&gt;&quot;&gt;</code>はいける</li>
<li><code>file://</code>で悪意があるものがあれば、任意コード実行できそう</li>
</ul></li>
<li>同一オリジン

<ul>
<li>ディレクトリと関係なく全てが同一オリジン in <code>file://</code></li>
<li>Chrome 45では修正が入ってる: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=455882" title="Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail">Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail</a></li>
<li>Electronもそのうち直る?</li>
</ul></li>
<li>悪意のあるファイル in <code>file://</code>

<ul>
<li>事前にダウンロード</li>
<li>ファイルサーバを立ち上げて、<code>file://</code>なものを用意しておくと同一オリジンとして認識される</li>
</ul></li>
<li>実行できてもNodeの機能が実行できない

<ul>
<li><code>window.open</code>でNodeを有効にしたウィンドウを開ける</li>
<li>XSSがあると何でも実行できる</li>
</ul></li>
<li>Electronのnodeモジュール探索パス

<ul>
<li>アプリ外のパスも探索パスとなる</li>
</ul></li>
</ul>

<hr>

<h2 id="http-こいつの-話-shibuya-xss-moe-yagihashoo">http://こいつの:話@shibuya.xss.moe/ - yagihashoo</h2>

<ul>
<li>パスワード認証の話</li>
<li>URI

<ul>
<li>RFC2396で定義、RFC3986で改定される</li>
<li>RFC1738 URL</li>
</ul></li>
<li>各ブラウザの対応状況

<ul>
<li>IE/Edge以外は大体何か動く</li>
<li>FirefoxとSafariとかは警告がでて確認される</li>
<li>Opera PWがマスクされるパターン</li>
</ul></li>
<li>Firefox

<ul>
<li>URLの履歴がそのまま表示される</li>
</ul></li>
<li>ベーシック認証をしてるサイトからログアウトできない

<ul>
<li>ブラウザを終了するしかない</li>
<li>もう一度同じURLでアクセスするとダイアログはでない</li>
</ul></li>
<li>各種ルータの管理画面ハック

<ul>
<li>管理画面はXSSとかCSRFがよくある</li>
<li>XSSの条件

<ul>
<li>ログイン済み</li>
<li>XSSが発言するURLが既知</li>
<li>ユーザがわなページを踏む</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="firefoxの話-llamakko_cafe">Firefoxの話 - llamakko_cafe</h2>

<ul>
<li>脆弱性を探す前に

<ul>
<li>ブラウザの脆弱性探しはハードル高そう</li>
<li>どんなものが脆弱性</li>
<li>どんなところに脆弱性</li>
</ul></li>
<li>ブラウザの脆弱性?

<ul>
<li>パッと浮かぶものがあまりない</li>
<li>引き出しが少ないと脆弱性結びつけるのが難しい</li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006323.html" title="JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース</a></li>
</ul></li>
<li>脆弱性を探す前に

<ul>
<li>Firefoxセキュリティアドバイザリ</li>
<li>脆弱性の一覧があって、ソースも見える</li>
</ul></li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006413.html" title="JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース</a>

<ul>
<li>data および view-source URIを通じたクロスサイト読み取り攻撃</li>
</ul></li>
<li>Firefoxの脆弱性を見つけたきっかけ

<ul>
<li>「戻るボタンを押すのがめんどうくさくてhistory.backしてた」</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JSDocをランタイムassertに変換するBabelプラグインを書いた</title>
   <link href="http://efcl.info/2016/03/25/jsdoc-to-assert/"/>
   <updated>2016-03-25T10:37:00+09:00</updated>
   <id>http://efcl.info/2016/03/25/jsdoc-to-assert</id>
   <content type="html"><![CDATA[ <p>JSDocをassertに変換するライブラリとそれを使ったBabelプラグインを書きました。</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>ライブラリの<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>の方は、JavaScript ASTのコメントから<code>assert</code>の文字列を作り出すだけのシンプルなものです。</p>

<p>実際に使う場合は、Babelのプラグインとして<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使い、コードを変換してランタイムassertを追加させます。</p>

<p>やっていることとしては、FlowTypeをランタイムチェックする<a href="https://github.com/codemix/babel-plugin-typecheck" title="babel-plugin-typecheck">babel-plugin-typecheck</a>のJSDoc版とも言えます。</p>

<ul>
<li><a href="http://qiita.com/mizchi/items/30a5f9560e86e0d5ab31">babel-plugin-typecheck を使って flowtype 文法で書かれたJSをランタイムチェックする - Qiita</a></li>
<li><a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
</ul>

<p>すごく難しい仕組みではないので、既にやって人がいるのではと思ったのですがいなかったので作りました。</p>

<ul>
<li><a href="https://github.com/azu/azu/issues/73" title="JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu">JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu</a></li>
</ul>

<h2 id="変換例">変換例</h2>

<p>例えば次のような関数とJSDocがあったとします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div>
<p>これを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>では次のように変換してassert処理を追加しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">param</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p>みて分かるようにかなりシンプルな変換がされます。(実際はもう少しメッセージを追加しますが、最小限です)</p>

<p><code>assert</code>ライブラリの依存を解決するのが面倒だったので、<code>console.assert</code>を使っていますが一部ブラウザは例外を投げずにログを出すだけらしいです。(Nodeは例外を投げてくれる)</p>

<p><code>d</code>はオプショナルな引数なので、今のところチェックしていません。
また、<code>string[]</code>のチェックが配列かどうかぐらいとなっていたり、まだまだ色々チェック不足な部分はあります。</p>

<p>Pull request 待ってます！</p>

<ul>
<li><a href="https://github.com/azu/jsdoc-to-assert/issues/1" title="Optional arguments support · Issue #1 · azu/jsdoc-to-assert">Optional arguments support · Issue #1 · azu/jsdoc-to-assert</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install babel-plugin-jsdoc-to-assert
</code></pre></div>
<h3 id="設定">設定</h3>

<p>Babelプラグインなので、Babelと共に利用するために<code>.babelrc</code>を設定します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;plugins&quot;: [
    &quot;jsdoc-to-assert&quot;
  ]
}
</code></pre></div>
<p>とシンプルに設定できますが、実際には開発中のみ変換して欲しいと思うので、<code>env</code>オプションを使うことで開発中のみ変換できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;presets&quot;: [
    &quot;es2015&quot;
  ],
  &quot;env&quot;: {
    &quot;development&quot;: {
      &quot;plugins&quot;: [
        &quot;jsdoc-to-assert&quot;
      ]
    }
  }
}
</code></pre></div>
<p><code>jsdoc-to-assert</code>の変換は含めずにビルドする場合は<code>production</code>を設定してビルドすれば、適応されずにすみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">NODE_ENV=production babel src --out-dir lib --source-maps
</code></pre></div>
<h2 id="仕組み">仕組み</h2>

<p><a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>はコメント(leadingComments Node)を<code>assert</code>などのコード片に変換するだけです。</p>

<p><code>function a(){}</code> や <code>const a = function(){}</code>、 <code>class A{ method(){} }</code> などJSDocを書ける場所は沢山あります。</p>

<p>これらどの関数宣言に対してコード変換をするかは<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>側に実装しています。</p>

<ul>
<li><a href="http://efcl.info/2016/03/06/ast-first-step/" title="JavaScript ASTを始める最初の一歩 | Web Scratch">JavaScript ASTを始める最初の一歩 | Web Scratch</a></li>
</ul>

<p>で書いていますが、BabelのASTはあんまり互換性がないので、<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>の部分は複数実装が存在してもおかしくない領域です。</p>

<p>以前、似たようなツールで<code>a; // =&gt; &quot;string&quot;</code> のようなコメントをassertに変換するライブラリも書いていましたが、この場合も<a href="https://github.com/azu/comment-to-assert">コメントをassertに変換する部分</a>と<a href="https://github.com/azu/power-doctest">変換したassertをコードに追加する部分</a>は分けて実装していました。</p>

<ul>
<li><a href="https://github.com/azu/comment-to-assert">azu/comment-to-assert: convert single line comment to assert.</a></li>
<li><a href="http://efcl.info/2015/08/10/power-doctest1.0/">power-assertを使ったDoctestツール power-doctestを書き直した | Web Scratch</a></li>
</ul>

<p>話を戻して、JSDoc自体の型定義が結構曖昧(nullableとか定義みたいな部分が曖昧)なので、<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>も実装見ると分かるようにかなり簡略化しています。</p>

<p>ESLintで静的にJSDocのコメントをチェックできる<a href="http://eslint.org/docs/rules/valid-jsdoc" title="valid-jsdoc">valid-jsdoc</a>と<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を合わせて使うようなイメージで書いています。</p>

<p>JSDoc単体の型定義はValidだけど、実際の利用方法と合ってるかどうかを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>でチェックするイメージです。</p>

<ul>
<li><a href="http://eslint.org/docs/rules/valid-jsdoc" title="Rule valid-jsdoc - ESLint - Pluggable JavaScript linter">Rule valid-jsdoc - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<p>また、<a href="https://ja.wikipedia.org/wiki/%E5%A5%91%E7%B4%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" title="契約プログラミング">契約プログラミング</a>に言えば<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>は事前条件、つまり<code>@param</code>のみのチェックをしています。
<code>@returns</code>のチェックはユニットテストで保証するのがいいと思います。</p>

<p>正直まだエラーメッセージも全然わかりやすくないし、中途半端なチェックしかできません。
この辺を改善したい人のContributionsを待ってます！</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>結局はキレイなJSDocが残ればいいだけなので、
<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>はいつでも外しても問題ない作りです。
なので、Babelを使ってるプロジェクトにひっそりいれて色々エラーを見つけると面白いのかもしれません。</p>

<p>類似</p>

<ul>
<li>FlowType: <a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
<li>TypeScript: <a href="https://github.com/Microsoft/TypeScript/issues/7607" title="Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript">Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ</title>
   <link href="http://efcl.info/2016/03/22/match-index/"/>
   <updated>2016-03-22T20:05:00+09:00</updated>
   <id>http://efcl.info/2016/03/22/match-index</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/match-index" title="match-index">match-index</a>という正規表現の補助JavaScriptライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>

<p>例えば、</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&quot;ABC ABC&quot;
</code></pre></div>
<p>という文字列から&quot;ABC&quot;という文字列とその位置(index)を取ろうとすると、非常に面倒な書き方をする必要があります。</p>

<p><code>&quot;ABC ABC&quot;.match(/(ABC)/g)</code> では文字列は取れますが、<code>index</code>を取ることができません。
これをやるには<code>match</code>ではなく、<code>g</code>フラグ付き正規表現と<code>exec</code>や<code>replace</code>を使ってやる必要があります。</p>

<p>これを直感的に行う<code>String.prototype.matchAll</code>というProposalも存在しています。</p>

<ul>
<li><a href="https://github.com/tc39/String.prototype.matchAll#rationale" title="String.prototype.matchAll">String.prototype.matchAll</a></li>
</ul>

<p>今回はこの<code>matchAll</code>的なものと、キャプチャした内容と位置を取得出来る<code>matchCaptureGroupAll</code>をもった<a href="https://github.com/azu/match-index" title="match-index">match-index</a>というライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchCaptureGroupAll</span><span class="p">(</span><span class="s2">&quot;ABC ABC&quot;</span><span class="p">,</span> <span class="sr">/(ABC)/</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install match-index
</code></pre></div>
<p>でインストールできます。</p>

<h2 id="usage">Usage</h2>

<p><code>match-index</code> は２つの関数を持ってます。</p>

<h3 id="matchcapturegroupall-text-regexp-matchcapturegroup"><code>matchCaptureGroupAll(text, regExp): MatchCaptureGroup</code></h3>

<p><code>(</code>と<code>)</code>で囲まれた内容を配列で返してくれます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[{</span>
  <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;strgin&quot;</span><span class="p">,</span>
  <span class="nx">index</span><span class="o">:</span> <span class="mi">5</span> <span class="c1">// 開始位置</span>
<span class="p">}]</span>
</code></pre></div>
<p>配列の中身は<code>text</code>と<code>index</code>という感じになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// get &quot;ABC&quot; and &quot;EFC that are captured by ( and )</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchCaptureGroupAll</span><span class="p">(</span><span class="s2">&quot;ABC EFG&quot;</span><span class="p">,</span> <span class="sr">/(ABC).*?(EFG)/</span><span class="p">);</span>
<span class="c1">// captureGroups is array of MatchAllGroup</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;EFG&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div>
<p><code>matchCaptureGroupAll</code> は内部的に次に紹介する <code>matchAll</code> を使っています。</p>

<h3 id="matchall-text-regexp-matchallgroup"><code>matchAll(text, regExp): MatchAllGroup</code></h3>

<p>一方、<code>matchAll()</code>は<a href="https://github.com/tc39/String.prototype.matchAll#rationale" title="String.prototype.matchAll">String.prototype.matchAll</a>と似たような感じですが、キャプチャに関する内容を<code>captureGroups</code>に保持する拡張をしています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;test1test2&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/t(e)(st\d?)/g</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchAll</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">regexp</span><span class="p">);</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>
</code></pre></div>
<p><strong>問題点</strong></p>

<p>これは実装上の問題で、多分正規表現ではなく<a href="http://blog.anatoo.jp/entry/2015/04/26/220026" title="パーサコンビネータ">パーサコンビネータ</a>とかで実装すればどうにかできると思いますが、<a href="https://github.com/azu/match-index" title="match-index">match-index</a>はネストしたキャプチャを正確に扱えないバグがあります。</p>

<p>例えば、次の例は<code>(st(\d?))</code>がネストしているため、<code>index</code>の値がおかしくなっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;test1test2&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/t(e)(st(\d?))/g</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchAll</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">regexp</span><span class="p">);</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>

<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">test1</span><span class="p">,</span> <span class="nx">test2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">input</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">all</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;st1&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">]);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">captureGroups</span><span class="p">,</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;e&#39;</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;st1&#39;</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="c1">// Limitation of capture nest</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span>
    <span class="p">}</span>
<span class="p">]);</span>
</code></pre></div>
<p>制限として受け止めれば使えますが、いい案が思いつかないので修正するPull Requestを募集しています…</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>

<p>このライブラリは<a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="textlint-rule-preset-JTF-style">textlint-rule-preset-JTF-style</a>を<a href="http://efcl.info/2016/03/15/textlint--fix/" title="--fixでの自動修正に対応">--fixでの自動修正に対応</a>に対応するときに、もっと直感的にマッチしてその位置を取得する方法が欲しくて作りました。</p>

<p>これにより書く効率は上がって、つねに<code>g</code>フラグで扱われるので、一度マッチしても最後までちゃんと繰り返しマッチするようになって、全てのエラーを出せるようになったので書いてよかったと思います。(<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>のようなLintの特性上、その行にある全部のエラーを出せた方がよいため)</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
</ul>

<p>小さなライブラリですが、先ほど書いたようなバグができたりするので正規表現は扱うのが結構難しいです…</p>

<ul>
<li><a href="http://blog.anatoo.jp/entry/2015/04/26/220026" title="JavaScriptでパーサコンビネータのコンセプトを理解する(「正規表現だけに頼ってはいけない」の続き) - id:anatooのブログ">JavaScriptでパーサコンビネータのコンセプトを理解する(「正規表現だけに頼ってはいけない」の続き) - id:anatooのブログ</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint 6.0リリース。--fixでの自動修正に対応</title>
   <link href="http://efcl.info/2016/03/15/textlint--fix/"/>
   <updated>2016-03-15T20:33:00+09:00</updated>
   <id>http://efcl.info/2016/03/15/textlint--fix</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a> 6.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/6.0.1" title="Release 6.0: --fix to be stable · textlint/textlint">Release 6.0: --fix to be stable · textlint/textlint</a></li>
</ul>

<p>モジュールとして使っている場合に、細かな破壊的な変更があります。
ツールとして使っている人は単純に<code>npm install textlint@6 -D</code>などでアップデートすれば動くと思います。</p>

<p>textlint自体については以下を見てください。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h2 id="fixによる自動修正の対応"><code>--fix</code>による自動修正の対応</h2>

<p><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3: --fix &amp;amp; --experimental support">5.5.3: --fix &amp; --experimental support</a>で<code>--fix</code>による自動修正機能を実験的にサポートしていました。</p>

<p>6.0では<code>--fix</code>を<code>--experimental</code>フラグなしで利用できるようになりました。</p>

<p>自動修正はルール側で対応が必要 かつ 原理的に自動修正が難しいルールもあると思うので、あくまで補助的な機能です。</p>

<p><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule">Wiki</a>にまとめてあるルールのうち、✔ fixableマークが付いてるものは対応しています。</p>

<p>対応しているルールをfixableルールと呼んでいて、以下のバッジをつけています。</p>

<p><a href="https://textlint.github.io/"><img src="https://img.shields.io/badge/textlint-fixable-green.svg?style=social" alt="textlint rule"></a></p>

<p>現状では以下のようなルールが<code>--fix</code>に対応しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-prh" title="azu/textlint-rule-prh: textlint rule for prh.">azu/textlint-rule-prh: textlint rule for prh.</a></li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">azu/textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-general-novel-style-ja">io-monad/textlint-rule-general-novel-style-ja: textlint rule to follow general style of Japanese novels</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-spellchecker">nodaguti/textlint-rule-spellchecker: textlint rule to check spellings with native spellchecker</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-ginger">nodaguti/textlint-rule-ginger: textlint rule to check your English grammar with Ginger Proofreading</a></li>
</ul>

<p>fixableルールは<a href="http://efcl.info/2015/09/14/textlint-rule-prh/">prhと辞書を使った表記揺れの統一</a>や<a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/">JTF日本語標準スタイルガイドを使った表記の統一</a>など、辞書ベースやスタイルの統一を簡単になるのが利点です。</p>

<p>逆に表現的なものをチェックするルールは自動修正が難しく、頑張ってもサジェストのような推敲支援になると思います。</p>

<ul>
<li><a href="http://efcl.info/2015/11/07/nodefest-2015/" title="東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch">東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch</a></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/90.html" title="校正と推敲 | 技術文書をソフトウェア開発する話">校正と推敲 | 技術文書をソフトウェア開発する話</a></li>
<li><a href="http://editor.hatenastaff.com/entry/2016/03/17/113000" title="編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」">編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>は校正支援として始めたツールなので、まだ推敲支援のような要素は入っていません。
以下のIssueでそのようなサジェストをどう扱うかについて話し合ってるので興味がある人は見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/158" title="Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint">Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint</a></li>
</ul>

<p>また<code>--fix</code>はread onlyなlintと違ってwrite処理であるため、バグを作りやすいです。
自分もリリースしてからあるルールでバグがあることに気づいたので、そういうのをテストする方法については以下で話し合っています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/136" title="Document: add &amp;#34;How to test your rule?&amp;#34; · Issue #136 · textlint/textlint">Document: add &quot;How to test your rule?&quot; · Issue #136 · textlint/textlint</a></li>
</ul>

<p>使用してバグを見つけたら、</p>

<ul>
<li>それが特定のルールのバグであるならルールのリポジトリへ</li>
<li>そうでなくて<code>textlint</code>のバグであるなら<a href="https://textlint.github.io/" title="textlint">textlint</a>へ</li>
</ul>

<p>報告してください。</p>

<p>バグ報告の仕方については以下を参考にしてください。</p>

<ul>
<li><a href="https://gist.github.com/azu/913454a54ea8ef59ba30" title="textlint Bug Reporting">textlint Bug Reporting</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/CONTRIBUTING.md#bug-reporting" title="textlint/CONTRIBUTING.md at master · textlint/textlint">textlint/CONTRIBUTING.md at master · textlint/textlint</a></li>
</ul>

<h2 id="fixableルール">Fixableルール</h2>

<p>実際に<code>--fix</code>による自動修正の例を見てみます。</p>

<p>このブログのリポジトリ対象にしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/efcl/efcl.github.io
cd efcl.github.io
</code></pre></div>
<p>次に<code>textlint</code>とfixableに対応してる3つのルール/プリセットをインストールします。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D textlint textlint-rule-preset-jtf-style textlint-rule-spellcheck-tech-word textlint-rule-common-misspellings
</code></pre></div>
<p>インストールし終わったら、<code>.textlintrc</code>にインストールしたルールを使うように設定します。
(<code>--rule</code>や<code>--preset</code>オプションでも指定できますが毎回やるのは面倒なので)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="k">$(</span>npm bin<span class="k">)</span>/textlnt --init
</code></pre></div>
<p>というコマンドを叩くと、空の<code>.textlintrc</code>設定ファイルが作成されるので、編集して次のような設定をします。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;preset-jtf-style&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;spellcheck-tech-word&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;common-misspellings&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>この状態でチェックしたいファイルを指定すれば<code>textlint</code>でLintすることができます。</p>

<p>自分の今まで書いてきた全記事のうちMarkdownをこのルールでLintしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts/

...
✖ 6091 problems (6091 errors, 0 warnings)
✓ 5639 fixable problems.
Try to run: $ textlint --fix [file]
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133066.png" alt="result of linting"></p>

<p>絶望的な数のエラーが表示されました…</p>

<p>デフォルトのformatterである<code>-f stylish</code> または <code>-f pretty-error</code>では、
Lintの結果にそのうち自動修正できるエラーの数を表示してくれます。</p>

<p>この数値は実際に修正できる数とは必ずしも一致しません。ルール間は独立しているので、重複や衝突が存在しているためです。基本的には衝突しないように修正を逐次的に処理していく形になります。</p>

<p>このエラーを実際に<code>--fix</code>で修正してみたいと思います。</p>

<p>修正する前に、対象のファイルは必ず復元できるように、バックアップを取るかGitにコミットしておくなどしてください。
また、<code>--dry-run</code>オプションを使うことで、実際にファイルの上書きはしないでどのような変更が行われるかを見ることができます。</p>

<p>変更を比較する場合は <code>-f diff</code> でdiff表示をするformatterを利用すると分かりやすいです。
(<code>--fix</code>は本当に逐次的に処理するので、ルールやファイルが多いと掛け算的に処理時間が増えます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix --dry-run -f diff
# 実際に変更は反映しないでdiffだけをみる

....
✔ Fixed 5713 problems
✖ Remaining 73 problems
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133752.png" alt="result of fixing"></p>

<p>✖ 6091 problemsのうち✔ Fixed 5713 problemsが自動で修正することができます。
<code>--dry-run</code>で問題ないのが確認できたら、<code>--fix</code>のみにして上書き保存できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458134174.png" alt="fix error"></p>

<h2 id="textlint-v5からv6の変更点">textlint v5からv6の変更点</h2>

<p><a href="http://efcl.info/2015/11/20/textlint5.0.0/" title="textlint 5.0.0">textlint 5.0.0までの変更点</a>については以前書いたので、5.0から6.0までにあった変更点を列挙してみます。</p>

<h3 id="5-1-0"><a href="https://github.com/textlint/textlint/releases/tag/5.1.0" title="5.1.0">5.1.0</a></h3>

<p><code>textlint-rule-preset</code>をサポートしました。
ルールプリセットは個別のルールをまとめたモジュールという位置づけです。</p>

<p>もちろん内蔵しているルール個別に設定を<code>.textlintrc</code>に書くことができるので、
一つのルールに沢山のチェック機能を設けるよりも、個別のルールに分けてルールプリセットとして公開することを推奨しています。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h3 id="5-2-0"><a href="https://github.com/textlint/textlint/releases/tag/5.2.0" title="5.2.0">5.2.0</a></h3>

<p><code>textlint-formatter-&lt;name&gt;</code>のようなモジュールを<code>--formatter &lt;name&gt;</code>という形で指定できるようになりました。</p>

<p>これを利用したカバレッジを出力するformatterを公開しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov: textlint formatter for lcov format</a></li>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov: textlint formatter for codecov json.</a></li>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a></li>
</ul>

<p>formatterの作り方はドキュメントを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/formatter.md" title="textlint/formatter.md at master · textlint/textlint">textlint/formatter.md at master · textlint/textlint</a></li>
</ul>

<h3 id="5-3-0"><a href="https://github.com/textlint/textlint/releases/tag/5.3.0" title="5.3.0">5.3.0</a></h3>

<p><code>--stdin-filename</code> をサポートしました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cat readme.md | textlint --format compact --stdin --stdin-filename readme.md
</code></pre></div>
<p>という感じで標準入力のテキストに対して擬似的な名前を付けることができます。
(拡張子に対応した種類のファイルとしてtextlintが処理するため)</p>

<p>この仕組はSublimeプラグインを作るのに使われています</p>

<ul>
<li><a href="https://github.com/joeybaker/sublimelinter-textlint" title="SublimeLinter-textlint">SublimeLinter-textlint</a></li>
</ul>

<h3 id="5-4-0"><a href="https://github.com/textlint/textlint/releases/tag/5.4.0" title="5.4.0">5.4.0</a></h3>

<p><code>.textlintrc</code>ファイルを作成する<code>--init</code>オプションが追加されました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint --init
</code></pre></div>
<p>で空の<code>.textlintrc</code>ファイルを作成してくれます。</p>

<p>まだ色々改良の余地があるので興味がある人は以下のIssueを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/129" title="--init options: Create .textlintrc file · Issue #129 · textlint/textlint">--init options: Create .textlintrc file · Issue #129 · textlint/textlint</a></li>
</ul>

<h3 id="5-5-3"><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3">5.5.3</a></h3>

<p><code>--fix</code>と<code>--experimental</code>を実験的にサポートしました。
ここで実験的に追加した<code>--fix</code>は6.0.0で正式サポートとなります。</p>

<h3 id="5-6-0"><a href="https://github.com/textlint/textlint/releases/tag/5.6.0" title="5.6.0">5.6.0</a></h3>

<p>ルール開発者向けに<code>RuleError</code>が<code>index</code>プロパティをサポートしました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ruleError</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">context</span><span class="p">.</span><span class="nx">RuleError</span><span class="p">(</span><span class="s2">&quot;Found rule error&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">paddingIndex</span> <span class="p">});</span>
</code></pre></div>
<p>正確なエラーの位置を簡単に指定できます。
今まで通り、<code>column</code>と<code>line</code>の組み合わせでも問題ないですが、<code>column</code>単独の指定は<code>index</code>に書き換える事を推奨しています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md#ruleerror" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md" title="textlint/failed-to-load-textlints-module.md at master · textlint/textlint">textlint/failed-to-load-textlints-module.md at master · textlint/textlint</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>でテストしている場合は、<code>column</code>単独の場合には警告を出してくれます。</p>

<h2 id="5-7-0"><a href="https://github.com/textlint/textlint/releases/tag/5.7.0" title="5.7.0">5.7.0</a></h2>

<p>5.7.0では一部formatterがエラーとそのエラーが自動修正できるかを出すようになりました。</p>

<h2 id="6-0"><a href="https://github.com/textlint/textlint/releases/tag/6.0.1" title="6.0">6.0</a></h2>

<p>6.0では</p>

<ul>
<li><code>--dry-run</code>のサポート(<code>--fix</code>と組み合わせて使います)</li>
<li><code>--fix</code>からexperimentalフラグが外れました</li>
<li><code>--fix</code>向けのformatterとして<code>-f diff</code>を追加しました</li>
</ul>

<p>モジュールとして使う場合に関連するものとして</p>

<ul>
<li><code>TextLintEngine#setRulesBaseDirectory</code> が削除されました</li>
<li><code>TextFixEngine</code>が追加されました

<ul>
<li><code>--fix</code>における処理を扱うEngineです</li>
</ul></li>
<li><code>TextLintCore#setupProcessors</code>が追加されました

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/plugin.md" title="Processor">Processor</a>を設定するAPIです</li>
</ul></li>
</ul>

<p>また内部をかなりリファクタリングして、</p>

<ul>
<li>CLI</li>
<li>Engine</li>
<li>Core</li>
</ul>

<p>の役割と関心を分離してディレクトリなどを切るようになりました。
詳しくは以下のドキュメントに書かれています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/src/README.md" title="textlint/README.md at master · textlint/textlint">textlint/README.md at master · textlint/textlint</a></li>
</ul>

<p>結構長くなりましたが、5.0.0〜6.0.0の変更点は以上です。
Breaking Changeはほとんどのユーザには関係ないものだと思います(実際使ってるコードはGitHub上にはなかった)</p>

<h2 id="その他">その他</h2>

<ul>
<li><a href="http://io-monad.hatenablog.com/entry/2016/03/14/225800" title="文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく">文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく</a></li>
<li><a href="https://chrome.google.com/webstore/detail/textlint-proofreader/hdongmdneapmhfblomidbafplpanpdmm?hl=ja&amp;gl=JP" title="textlint: 文章チェッカー - Chrome ウェブストア">textlint: 文章チェッカー - Chrome ウェブストア</a></li>
</ul>

<p><img src="https://monosnap.com/file/LTo4HPrWD0k8fzfC8J9PRf0dNSJerG.png" alt="textlint on chrome"></p>

<p>Chrome拡張として動くので、Node.jsを入れなくてもブラウザにインストールしてGUIで設定できるので簡単に使うことができます。</p>

<ul>
<li><a href="https://github.com/Nkzn/textlint-prh-template" title="Nkzn/textlint-prh-template: A writing environment watched by textlint &amp;amp; prh">Nkzn/textlint-prh-template: A writing environment watched by textlint &amp; prh</a></li>
</ul>

<p>Atomプラグインとして<a href="https://github.com/1000ch/linter-textlint" title="linter-textlint">linter-textlint</a>を使う場合は上記のリポジトリが参考になるかもしれません。</p>

<h2 id="開発メモ">開発メモ</h2>

<p><code>--fix</code>は5.5から使えたのですが、色々APIデザインを変更する可能性があったのでexperimentalフラグを付けてリリースしました。</p>

<p>浅いイテレーションをするには</p>

<ul>
<li>本体機能をテストしてもらいたいならbetaをとにかく出す</li>
<li>プラグインに関係するエコシステム的な機能を試したいならexperimentalフラグ付きで出す</li>
<li>プラグイン側は最新の本体でしか動かない変更を入れるならメジャーアップデート

<ul>
<li>本体バージョンとプラグインの参照するバージョンがズレているとユーザーはハマります</li>
<li>なのでメジャーアップデートとするのが無難です</li>
</ul></li>
<li>プラグイン側が特定バージョン以降に依存するならpeerDependenciesを付ける</li>
<li>npmのbetaとGitHubのprereleaseを使う

<ul>
<li><code>npm publish --tag beta</code>するalisを使っています</li>
<li><a href="https://gist.github.com/azu/fb3ec88231235511858a">npm version publish alias - http://efcl.info/2015/04/08/npm-publish-pattern/</a></li>
<li><a href="http://efcl.info/2015/04/08/npm-publish-pattern/">npm publishのパターン | Web Scratch</a></li>
</ul></li>
<li>フラグつき機能は、次のメジャーアップデートで外す</li>
<li>testライブラリを作りdeprecatedはプラグイン作者に通知

<ul>
<li>テスト中はガンガン例外を投げて伝える</li>
<li>textlintは<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>経由の実行時のみ例外を投げるUtilを持っています。</li>
<li><a href="https://github.com/textlint/textlint/blob/master/src/util/throw-log.js" title="throw-log.js">throw-log.js</a></li>
</ul></li>
<li>本体とプラグインが同時にnpmのbetaになると辛い

<ul>
<li>βはsemverで<code>&gt;=</code>のような指定ができなくて、直書きする事になって辛いです</li>
</ul></li>
<li>experimentalフラグ付きで本体はstableリリースして、プラグインはstableな本体に依存させたbetaを出す</li>
<li>プラグインがstableリリースする際はメジャーアップデート+peerDependenciesにする

<ul>
<li>この辺が<code>--experimental</code>フラグを作った理由です</li>
</ul></li>
</ul>

<p>課題としては</p>

<ul>
<li>本体のBreaking Changeに依存したプラグインの変更をうまく扱う方法がない</li>
<li>なので本体のBreaking Changeはなるべく小さく、単独でリリースする

<ul>
<li>プラグインがすぐに追従できるような変更の粒度を考える</li>
</ul></li>
</ul>

<p>という感じになっています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScript ASTを始める最初の一歩</title>
   <link href="http://efcl.info/2016/03/06/ast-first-step/"/>
   <updated>2016-03-06T12:39:00+09:00</updated>
   <id>http://efcl.info/2016/03/06/ast-first-step</id>
   <content type="html"><![CDATA[ <p>何かJavaScriptのソースコードを機械的にチェックするためのツールを作りたいという場合に、JavaScriptのASTというものを触る必要が出てくると思います。</p>

<p>この記事では、その取っ掛かりとなる案内を簡単にまとめたものです。</p>

<h2 id="astとは">ASTとは</h2>

<p><a href="http://azu.github.io/slide/JSojisan/#8"><img src="http://efcl.info/wp-content/uploads/2016/03/06-1457240557.png" alt="AST"></a></p>

<p>AST(Abstract Syntax Tree)はコードをパースした抽象構文木のこと。
JavaScriptの場合はJavaScriptオブジェクト(JSON)として表現されます。</p>

<p>コード:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>
<p>AST:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="mi">0</span><span class="p">,</span>
    <span class="mi">10</span>
  <span class="p">],</span>
  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Program&quot;</span><span class="p">,</span>
  <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="mi">10</span>
      <span class="p">],</span>
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclaration&quot;</span><span class="p">,</span>
      <span class="nt">&quot;declarations&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
            <span class="mi">4</span><span class="p">,</span>
            <span class="mi">9</span>
          <span class="p">],</span>
          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclarator&quot;</span><span class="p">,</span>
          <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">4</span><span class="p">,</span>
              <span class="mi">5</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Identifier&quot;</span><span class="p">,</span>
            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span>
          <span class="p">},</span>
          <span class="nt">&quot;init&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">8</span><span class="p">,</span>
              <span class="mi">9</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Literal&quot;</span><span class="p">,</span>
            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="nt">&quot;raw&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="nt">&quot;kind&quot;</span><span class="p">:</span> <span class="s2">&quot;var&quot;</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&quot;sourceType&quot;</span><span class="p">:</span> <span class="s2">&quot;module&quot;</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="http://azu.github.io/slide/JSojisan/">カジュアルJavaScript AST</a></li>
<li><a href="http://azu.github.io/slide/tkbjs/js-ast-walker.html">JavaScript AST Walker</a></li>
</ul>

<h2 id="astのコミュニティ標準">ASTのコミュニティ標準</h2>

<p>ESTreeというデファクトスタンダードがあります(ES6までは定義されている)</p>

<ul>
<li><a href="https://github.com/estree/estree" title="estree/estree: The ESTree Spec">estree/estree: The ESTree Spec</a></li>
</ul>

<p>経緯: <a href="http://efcl.info/2015/02/26/recent-js-ast/" title="[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch">[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch</a></p>

<ul>
<li><code>token</code>、<code>range</code>、コメントのいち情報周りの扱いがパーサによって異なる</li>
<li>ESTreeで定義されているASTの範囲内ならどのパーサでも殆ど同じ

<ul>
<li>注意: <code>Literal</code>やGeneratorに関してパーサ間で解釈が異なるため議論中です</li>
<li><a href="https://github.com/estree/estree/issues/120" title="Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree">Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree</a></li>
<li>ポータブルな実装をしようとした時にハマるかもしれないので注意</li>
</ul></li>
</ul>

<h2 id="パーサ">パーサ</h2>

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">Babylon</a>

<ul>
<li>Babelで使われてるAcorn派生のパーサ</li>
<li>まだ<a href="http://azu.github.io/slide-what-is-ecmascript/slide/12.html" title="TC39 Process: Stage | ECMAScriptとは何か？">仕様として入るか分からないStage</a>の構文も対応している</li>
<li>注意: 逆にESTree仕様外の拡張もしているため、ESTree互換ではないです。</li>
</ul></li>
<li><a href="http://esprima.org/" title="Esprima">Esprima</a>

<ul>
<li><a href="https://github.com/benjamn/ast-types" title="ast-types">ast-types</a></li>
</ul></li>
<li><a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a></li>
<li><a href="https://github.com/eslint/espree" title="espree">espree</a>

<ul>
<li><a href="http://eslint.org/" title="ESLint">ESLint</a>で使われてるパーサ</li>
<li>AcornベースでEsprimaのtokenとの互換性を持っているパーサ</li>
</ul></li>
</ul>

<p>どのパーサもいろんなツールで使われてる実績があります。
Esprimaで試して、何か足りないならAcorn -&gt; Babylonという感じでやるのが良いと思います。</p>

<p>大きく分けると以下の2系統になっています。</p>

<ul>
<li>Esprima</li>
<li>Acorn</li>
</ul>

<p>BabylonはEStreeの仕様外について積極的にサポートしているため、
それらが必要な場合はBabylonを使うが、そうでないなら他のパーサの方が安定しています。</p>

<h2 id="関連ツール">関連ツール</h2>

<ul>
<li><a href="http://astexplorer.net/" title="AST explorer">AST explorer</a>

<ul>
<li>AST見るのに便利</li>
</ul></li>
</ul>

<h2 id="よくある流れ">よくある流れ</h2>

<ul>
<li>パーサでコードをパースしてASTにする

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">babylon</a>、<a href="http://esprima.org/" title="Esprima">Esprima</a>、<a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a>、<a href="https://github.com/eslint/espree" title="espree">espree</a></li>
</ul></li>
<li>ASTをtraverseして処理(変換、チェック)する

<ul>
<li><a href="https://github.com/estools/estraverse" title="estraverse">estraverse</a>、<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>、<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" title="babel-traverse">babel-traverse</a></li>
<li><a href="https://github.com/Rich-Harris/estree-walker" title="estree-walker">estree-walker</a>、<a href="https://github.com/estools/esrecurse" title="esrecurse">esrecurse</a></li>
<li>どのライブラリもほぼおなじものを持っている</li>
</ul></li>
<li>ASTからJSのコードを生成する(チェックのみの場合は不要)

<ul>
<li><a href="https://github.com/estools/escodegen" title="escodegen">escodegen</a>、<a href="https://www.npmjs.com/package/babel-generator" title="babel-generator">babel-generator</a>を使う</li>
<li>ジェネレータはパーサと合わせたツールが必要</li>
<li>Esprimaならescodegen、babelならbabel-generator</li>
</ul></li>
</ul>

<p>Parser、Traverser、Generatorは基本的にセットで同じ系統のツールを使う形になります。</p>

<p>そういうのを考えるのが面倒なので、そこを抽象化するライブラリを作ったりしていました。
コンセプトの証明的なものなので、実用的に使う場合は未対応の部分があると思います。(維持コストが高い)
コントリビュートは歓迎です。</p>

<ul>
<li><a href="https://github.com/azu/ast-source" title="azu/ast-source: AST helper to transform source code.">azu/ast-source: AST helper to transform source code.</a></li>
</ul>

<h2 id="例-evalの中身を解析したい">例) evalの中身を解析したい</h2>

<p>evalの中を取り出して安全に評価したいというケース</p>

<h3 id="evalの中身">evalの中身</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">eval(&quot;var a = 20&quot;)
</code></pre></div>
<ul>
<li><a href="http://kitak.hatenablog.jp/entry/2014/11/15/233649" title="JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog">JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog</a></li>
</ul>

<p>のようにパースして、evalの中身を取り出すことが可能。</p>

<ul>
<li>何かを防ぐという仕組みから連想できるものはホワイトリスト</li>
<li>ホワイトリストでevalの中で使えるプロパティの名前などを制限する</li>
<li>未知のプロパティを見つけらたらその弾く?</li>
<li>ブラックリストだと何を防止すればいいのかが難しい</li>
</ul>

<h3 id="解析のフェーズ">解析のフェーズ</h3>

<p>適当な考え方(正しいのかは自信ないけど)</p>

<ol>
<li>evalのなかを取り出す</li>
<li>evalのなかのコードをパースする</li>
<li><strong>安全な部分</strong>だけを取り出す</li>
<li>安全な部分で評価する</li>
</ol>

<p><strong>安全な部分</strong> が何かを決める必要がありそう。
安全でないことが分かったら実行は諦める。</p>

<p>というような考え方でやるのがよくあるケースだと思います。</p>

<h2 id="おわりに">おわりに</h2>

<p>上記のようなチェックツールを書くには、まず<a href="http://eslint.org/" title="ESLint">ESLint</a>のルールを見てみるのが参考になるはずです。</p>

<p>書き換えをしたい場合はそのまま書き換えるとASTのTree内で不整合が起きて大変になります。
<a href="https://github.com/facebook/jscodeshift" title="jscodeshift">jscodeshift</a>や<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>などのライブラリが使えないか検討してみてください。</p>

<p>また、同様の機能を持つツールがどういうライブラリを使っているかを調べてみるのが近道になるはずです。
例えば、モジュールbundleツールの<a href="https://github.com/rollup/rollup" title="rollup">rollup</a>は<a href="https://github.com/Rich-Harris/magic-string" title="magic-string">magic-string</a>というライブラリで文字列の操作をしていることが分かります。</p>

<p>現在のASTの状況はESTreeより先のデファクトがないため新しい構文を扱おうとすると色々考えることが出てきます。
そういった時には<a href="https://github.com/azu/ast-source" title="ast-source">ast-source</a>のような抽象層が必要になってくるかもしれません。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>#uruu_sushi アウトラインメモ</title>
   <link href="http://efcl.info/2016/02/29/uruu_sushi/"/>
   <updated>2016-02-29T23:10:00+09:00</updated>
   <id>http://efcl.info/2016/02/29/uruu_sushi</id>
   <content type="html"><![CDATA[ <p>うるう年なので<a href="https://twitter.com/hashtag/uruu_sushi?src=hash" title="#uruu_sushi">#uruu_sushi</a>を食べてきた。</p>

<ul>
<li><a href="http://togetter.com/li/944473" title="#uruu_sushi - Togetterまとめ">#uruu_sushi - Togetterまとめ</a></li>
</ul>

<p>脆弱性報告</p>

<ul>
<li>バグハンター</li>
<li><a href="https://hackerone.com/" title="HackerOne: Vulnerability Coordination and Bug Bounty Platform">HackerOne: Vulnerability Coordination and Bug Bounty Platform</a></li>
<li>Bug Bountyのプラットフォームなども最近できてきた

<ul>
<li>報告者/企業のレーティングなどができる</li>
<li>特定のレーティング向けの案件なども存在する</li>
</ul></li>
<li>脆弱性報告はやり取りのコストがある</li>
<li>そのため単純にBug bounty programが増えるだけだと嬉しくない</li>
<li>報告したことに対して即時レスポンスがあると報告者として安心できる</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「報告者としては新規報告先とのやりとりは結構負担になるので、報告先が増えてもそんなに嬉しくない」<br> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/704269476515041280">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>報奨金制度</p>

<ul>
<li>バグハンター同士、企業間同士の脆弱性に関する情報共有する場所がない</li>
<li>報告を受け付ける側も脆弱性報告により新しい攻撃方法を知ることがある

<ul>
<li>関連サービスに同様の問題があり、そちらを直すことができる</li>
</ul></li>
<li><a href="https://www.ipa.go.jp/security/vuln/CVSS.html" title="共通脆弱性評価システムCVSS">共通脆弱性評価システムCVSS</a>

<ul>
<li>ドメインに依存しないので、指標として扱いやすい</li>
<li>逆にオープンリダイレクターの扱いが高いなど、現実の扱いと異なるケースもある</li>
</ul></li>
</ul>

<p>Case</p>

<ul>
<li>安全にファイルダウンロードを実装するのは難しい</li>
<li>ServiceWorkerは本当に安全?</li>
<li>HTMLをHTTPSでホスティングするサービスで何か悪さができてしまわないか</li>
<li>普通にウェブサイトで普通のXSSというような問題は少なくなってきてる</li>
<li>Railsのようなフレームワークに普通に乗っていればそういう問題はおこりにくい</li>
<li>ブラウザというサンドボックスはある程度安全

<ul>
<li>そこから外れたものを作った場合に問題が起こりやすい</li>
<li>Electron, Firefox OS</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a> これの話  &quot;Firefox OS is not helping the web — Anne’s Blog&quot;  <a href="https://t.co/XhdnAdaDTX">https://t.co/XhdnAdaDTX</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704275123025477632">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSとかSQLiとかはどんどん減ってきてる。今はアクセス権問題が割合として増えてきている <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704290564158525440">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="仕様とセキュリティ-azu">仕様とセキュリティ - azu</h2>

<p>セキュリティな問題のある仕様の変更や、
現実の実装に合わせた仕様の定義とうような変更があったよ的な話をしました。</p>

<ul>
<li><code>Object.prototype.</code> hijack</li>
<li><a href="http://ecmascript-daily.github.io/2015/12/26/how-should-browsers-mitigate-proxy-related-security-issues-issue-272-tc39-ecma262" title="How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily">How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily</a></li>
</ul>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;data=&quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://victim/test.csv&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<ul>
<li>POC on Chrome(<code>chrome://flags/#enable-javascript-harmony</code>)</li>
<li>Changed in ES2016 Draft 2016-02-15</li>
</ul>

<blockquote>
<p><code>Object.prototype</code> is an immutable prototype exotic object.<br>
-- <a href="https://github.com/tc39/ecma262/releases/tag/es2016-draft-20160215" title="Release ES2016 Draft 2016-02-15 · tc39/ecma262">Release ES2016 Draft 2016-02-15 · tc39/ecma262</a></p>
</blockquote>

<ul>
<li>WHATWG HTML define Window</li>
<li><a href="https://github.com/whatwg/html/commit/acae3df652b382e9f4f1d1b4dc7e08e2b00df821" title="Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df">Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df</a></li>
</ul>

<h2 id="node-js-と-es6-modules">Node.js と ES6 modules</h2>

<ul>
<li><a href="https://github.com/nodejs/node-eps/pull/3" title="002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps">002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps</a></li>
<li>interoperabilityに関するIssue</li>
<li>interoperability優先 vs 原則</li>
<li>interoperabilityは大事だが、何のためにES6モジュールを使うのかを見失っている可能性

<ul>
<li>静的に解析出来る</li>
<li>ブラウザ/Nodeどちらでも動く</li>
<li>本来はこの2つが目的だったはず。interoperabilityのためにこれが犠牲になってしまうのでは。</li>
</ul></li>
<li>npmというエコシステムの互換性</li>
<li>互換性という魔法のコトバがある限り意見の一致が難しい</li>
<li>Python 3になってはいけない</li>
<li>意見が割れてる、議論になってない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Python3ifyじゃなくて、Python3ishだった <a href="https://t.co/fwE7PBbIkQ">https://t.co/fwE7PBbIkQ</a> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; teppeis (@teppeis) <a href="https://twitter.com/teppeis/status/704327441595019265">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="どうやって脆弱性の探し方を学ぶのか">どうやって脆弱性の探し方を学ぶのか</h2>

<ul>
<li>脆弱性の探し方はどうやって学ぶのか</li>
<li>コード書くときにコード書くパターンがあるように、脆弱性を探す人も脆弱性を探すパターンがあるはず</li>
<li>検査的な文字列パターンを持ってる</li>
<li>特殊なツールは使ってない</li>
<li>逆に普通の開発者がどうやってセキュリティ的な問題を見つけたり、どういうツールを使ってるのかを知らない</li>
</ul>

<p>セキュリティ診断</p>

<ul>
<li>バグハンターのような特殊な人達に調査を頼むのと、脆弱性診断サービスの違い</li>
<li>セキュリティ業界とウェブ開発者の意識の違い

<ul>
<li>セキュリティ業界が最新のウェブに疎く見える問題</li>
<li>ウェブ側もセキュリティをよくわからない問題</li>
</ul></li>
<li>間に繋ぐような人が重要という話</li>
</ul>

<h2 id="おわり">おわり</h2>

<p>セキュリティ寿司は久々な気がする。</p>

<ul>
<li><a href="http://efcl.info/2014/0415/res3844/" title="テストとセキュリティの葉桜JSに参加してきた | Web Scratch">テストとセキュリティの葉桜JSに参加してきた | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintの公式サイト(オンラインデモ)を作りました</title>
   <link href="http://efcl.info/2016/02/24/textlint-online-demo/"/>
   <updated>2016-02-24T19:49:00+09:00</updated>
   <id>http://efcl.info/2016/02/24/textlint-online-demo</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/"><img src="http://azu.github.io/slide/2016/reject-sushi/img/textlint.png" alt="textlint"></a></p>

<p><a href="http://textlint.github.io/" title="textlint - pluggable linting tool for text and markdown">textlint - pluggable linting tool for text and markdown</a></p>

<p>textlintの公式サイトというがオンラインデモページを作成しました。</p>

<ul>
<li><a href="http://textlint.github.io/#demo">textlint.github.io/#demo</a></li>
</ul>

<p>上記にページにアクセスするとブラウザ上でtextlintを動かして試すことができます。</p>

<p>デフォルトだと<a href="https://github.com/azu/textlint-rule-rousseau" title="textlint-rule-rousseau">textlint-rule-rousseau</a>や<a href="https://github.com/azu/textlint-rule-alex" title="textlint-rule-alex">textlint-rule-alex</a>といった英語向けのルールが設定されていますが、npmモジュール名を指定すれば任意のルールも読み込めます。</p>

<p>例えば、<a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a>と入れて&quot;Add rule&quot;するとこのルールが動的に追加できて試せます
<a href="https://www.brcdn.org/" title="Browserify CDN">Browserify CDN</a>で動的にビルドして読み込んでいるので、Browserifyでビルドできないルールは流石にブラウザ上では動かないです。
(後、形態素解析とかやってるルールはそもそものファイルサイズが大きいです)</p>

<p>このサイトは<a href="https://github.com/dekujs/deku" title="Deku">Deku</a> v2互換の<a href="https://github.com/rstacruz/decca" title="decca">decca</a>と<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>で作りました。</p>

<p>Deku v2は最小限のAPIでReduxと合わせて使いやすい作りなので、初めてReduxを触るときはReact(<a href="https://github.com/reactjs/react-redux" title="react-redux">react-redux</a>)と合わせて使うよりもシンプルで理解しやすいかもしれません。</p>

<p>最近のtextlintを3分で把握できるスライドも書いたので、どんな感じのものをかをぱっと知りたい方は見ると面白いかもしれません。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/reject-sushi/textlint.html" title="3分でわかるtextlint">3分でわかるtextlint</a></li>
</ul>

<h2 id="デザイン">デザイン</h2>

<p><img src="https://textlint.github.io/media/logo/textlint-logo.png" alt="logo"></p>

<p>textlintのロゴやアイコンを<a href="https://github.com/uetchy" title="uetchy">@uetchy</a>さんに作っていただきました。</p>

<p>ロゴやアイコンやバナーはCC0ライセンスで利用できるので自由にご利用ください。</p>

<ul>
<li><a href="https://github.com/textlint/media" title="textlint/media: Official logo and icon.">textlint/media: Official logo and icon.</a></li>
</ul>

<p>このロゴやアイコンは<a href="https://github.com/textlint/media/pull/1#issuecomment-174872043">Issueで話し合いながら作って頂いた</a>のですが、その中の<a href="https://github.com/textlint/textlint.github.io/issues/1#issuecomment-176210780">デザイン見本にウェブサイト</a>があったのでそれを元に実装した感じになっています。</p>

<p>サイトは説明文とオンラインデモしかないので、ドキュメントはあいかわらずリポジトリの中に入ったままです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/tree/master/docs" title="textlint/docs at master · textlint/textlint">textlint/docs at master · textlint/textlint</a></li>
</ul>

<p>最近、<a href="https://github.com/textlint/textlint/blob/master/docs/getting-started.md" title="Getting Started with textlint">Getting Started with textlint</a>という最初にとりあえず動かすまでのチュートリアルを書いたので、textlintを使ってみたい人はこの辺から読むといいかもしれません。</p>

<p>またサクッとプロジェクトに導入したい場合はルールがある程度まとまったルールプリセットを使うと、手軽に日本語のLintを始めることができます。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<p>他のtextlint関連記事は以下から探すことができます。</p>

<ul>
<li><a href="http://efcl.info/tags/?q=textlint" title="タグ一覧 | Web Scratch">textlint - タグ一覧 | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#reject_sushi でReactとチーム開発について話してきた</title>
   <link href="http://efcl.info/2016/02/23/reject-sushi/"/>
   <updated>2016-02-23T23:05:00+09:00</updated>
   <id>http://efcl.info/2016/02/23/reject-sushi</id>
   <content type="html"><![CDATA[ <p><a href="http://reactjs-meetup.connpass.com/event/26229/" title="React.js meetup #3">React.js meetup #3</a>に参加できなかったので<a href="https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=reject_sushi&amp;src=typd" title="reject_sushi">#reject_sushi</a>に参加してきました。</p>

<ul>
<li><a href="http://togetter.com/li/942101" title="#reject_sushi - Togetterまとめ">#reject_sushi - Togetterまとめ</a></li>
</ul>

<hr>

<ul>
<li><a href="https://facebook.github.io/draft-js/" title="Draft.js | Rich Text Editor Framework for React">Draft.js | Rich Text Editor Framework for React</a>

<ul>
<li>©年号を見る感じ結構前から実装してそう</li>
</ul></li>
</ul>

<h2 id="how-to-work-as-a-team-azu"><a href="http://azu.github.io/slide/2016/reject-sushi/how-to-work-team.html" title="How to work as a Team">How to work as a Team</a> @ azu</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a> で発表したReact+Flux的な何かの意思決定と情報設計の話。  &quot;How to work as a Team&quot;  <a href="https://t.co/qM4iyipRFS">https://t.co/qM4iyipRFS</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702138441681637376">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>自分はチーム開発でReact + 何かを採用するときにどういうフローで話を進めていってるかについてを話しました。
まだ結論はないですが、Flux的な何かを採用したからといって設計がすごく簡単になるという話ではないです。</p>

<p>またStoreはただの入れ物的な使い方をした場合に、ドメイン層はActionCreator的な部分が持つのか、それはどうやって扱うのかという部分がふわふわしているという話になりました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">StoreはただのViewのためのStateという感じ。<br>その場合にドメイン層をどこに書くかが皆迷うところ。 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702105875771555840">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>なんとなくのレイヤー分けは見えてきていますが、それを説明するのにはまだ何か(サンプル?実例?体系化?)が足りてないのかなーという印象です。</p>

<p>以下のスライドも見てみると面白いかもしれません。</p>

<ul>
<li><a href="http://www.slideshare.net/saneyuki/my-thoughy-about-beyond-flux" title="My thought about beyond flux">My thought about beyond flux</a></li>
</ul>

<p>また最近<a href="http://www.amazon.co.jp/dp/4802510012/" title="今日からはじめる情報設計">今日からはじめる情報設計</a>や<a href="http://www.amazon.co.jp/dp/B00EESW7OG/" title="エンジニアのための図解思考">エンジニアのための図解思考</a>的な本を読んでいたので、そういった情報の扱い方や表現という話も兼ねています。</p>

<h2 id="rails-と-node-js-mizchi">Rails と Node.js @ mizchi</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">browserify-railsとtsify問題 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/702089989887172609">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>Node.jsのエコシステムにビルドを寄せる話</li>
<li>browserify-railsに寄せると楽</li>
<li>だけどtsifyが標準出力ではStreamを使うため browserify-railsと相性が悪い。</li>
<li>browserify-railsを使いたい理由は、Nodeを普段使わない人が多い環境でNodeの流儀をやってもらうとよくわからないことが多くてコストがある</li>
</ul>

<h2 id="http2-を前提とした-html-css-コンポーネントのレンダリングパス最適化-jxck">HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化 @ jxck</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a>   &quot;HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | <a href="https://t.co/Bb4j0utYux">https://t.co/Bb4j0utYux</a>&quot;  <a href="https://t.co/wQlZpQZBMj">https://t.co/wQlZpQZBMj</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702092500157145089">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://blog.jxck.io/entries/2016-02-15/loading-css-over-http2.html" title="HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | blog.jxck.io">HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について | blog.jxck.io</a></li>
<li>コンポーネント+CSSで送れると、サーバ側が全部のリソースが揃う前にレスポンスを返すことが出来る様になる</li>
<li>lengthは決まってないと行けないけど、例外としてTransfer-Encoding: chunkedを使う</li>
<li>= プログレッシブレスポンス?</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">プログレッシブレスポンスができるようになるそれようの仕組みがサーバで流行るのでは。<br>それってJSPで見た話だ！！！ <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702093276040433664">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>この時の問題点</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">HTTPはステータスコードを最初に返す必要があり、それを途中で変更できない。<br>ステータスコードは1行目問題はPushでも起きる<br>なのでプログレッシブレスポンスの場合は、CSSはpushしておいてchunkedで送ると <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702094414600994816">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>ステータスコードコードが最初に決まってないと行けない</li>
<li>プログレッシブレスポンスだとこれがやっかいなりそう</li>
<li>動画を全部読まないとシークできなかった話と似ている</li>
<li>このステータスコードの位置/変更/指定の問題は今後の課題になりそう(プログレッシブレスポンスするなら)</li>
</ul>

<h2 id="typescript-1-8のjavascriptをbundleしてくれる機能-kyo_ago">TypeScript 1.8のJavaScriptをbundleしてくれる機能 - kyo_ago</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">kyo_ago 「TypeScript 1.8のJavaScriptをbundleしてくれる機能」 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702099720164872192">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://github.com/Microsoft/TypeScript/wiki/What&#x27;s-new-in-TypeScript#concatenate-amd-and-system-modules-with---outfile" title="Concatenate AMD and System modules with --outFile">Concatenate AMD and System modules with --outFile</a></li>
<li><a href="https://blogs.msdn.microsoft.com/typescript/2016/02/22/announcing-typescript-1-8-2/" title="Announcing TypeScript 1.8 | TypeScript">Announcing TypeScript 1.8 | TypeScript</a></li>
<li>循環参照を避けるためbundleするのはimport/exportのみ?</li>
<li><code>require</code>は動的ロードとして扱われてる</li>
<li>ちょこっとsystemjs用のものを加えると動かせる</li>
</ul>

<h2 id="javascriptの非同期処理-例外処理">JavaScriptの非同期処理/例外処理</h2>

<ul>
<li>async/await

<ul>
<li>try/catchでハンドリングしないと行けないのは複雑になる可能性</li>
<li>GoLangのように多値を返すアプローチで解決できなかったのか</li>
<li><a href="http://saneyukis.hatenablog.com/entry/2015/03/22/184823" title="Option/Maybeとかで解決していることを、さながらgolangのようにES6のdestructuring assignmentで解決する - snyk_s log">Option/Maybeとかで解決していることを、さながらgolangのようにES6のdestructuring assignmentで解決する - snyk_s log</a></li>
</ul></li>
<li>WebComponents

<ul>
<li>名前がでかすぎて何から手を出せばいいのかよくわからなくなる問題</li>
<li>Polymerは何か別のものになってしまった</li>
<li>明らかに大事だけど流行るには何かが足りない</li>
<li>コンポーネント間の関係をどう管理するのか問題</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「Web Componentをどこから始めればいいのか分からない」<br>「Web Componentという名前が良くなかった。それぞれの仕様にフォーカスするべきだったのでは」 <a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702118804793356288">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script> 

<ul>
<li>ECMAScriptにEventEmitter的なのが欲しい

<ul>
<li>DOM Eventを通るのはなんか</li>
</ul></li>
</ul>

<h2 id="その他">その他</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reject_sushi?src=hash">#reject_sushi</a> で発表しなかった「3分でわかるtextlint」のスライドです。自然言語Lintツールの現状  &quot;3分でわかるtextlint&quot;  <a href="https://t.co/wtHBxxIOok">https://t.co/wtHBxxIOok</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/702133285934145536">February 23, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>発表しなかった<a href="http://azu.github.io/slide/2016/reject-sushi/textlint.html" title="3分でわかるtextlint">3分でわかるtextlint</a>のスライド。</p>

<p><a href="http://textlint.github.io/" title="textlint - pluggable linting tool for text and markdown">textlint - pluggable linting tool for text and markdown</a>のサイトがDeku v2 + Reduxで動いていて、Reduxを最初に試す場合はDekuと組み合わせたほうがわかりやすよという話をした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMAScript, TC39 Meeting Notesの読み方と修正方法</title>
   <link href="http://efcl.info/2016/02/12/tc39-meeting-notes/"/>
   <updated>2016-02-12T11:12:00+09:00</updated>
   <id>http://efcl.info/2016/02/12/tc39-meeting-notes</id>
   <content type="html"><![CDATA[ <p>ECMAScriptは毎年リリースの方針となったため、最新の仕様を管理している<a href="https://github.com/tc39/ecma262" title="tc39/ecma262">tc39/ecma262</a>には毎日のようにコミットされています。</p>

<p>ECMAScriptのリリース方針についてなどは以下を参照してください。</p>

<ul>
<li><a href="http://efcl.info/2015/10/18/ecmascript-paper/" title="ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch">ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch</a></li>
</ul>

<p>これらの最新の変更が反映されたLiving Standardなものは以下のURLで公開されています。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/">tc39.github.io/ecma262/</a></li>
</ul>

<p>また、Proposalを元にECMAScript 2016に<a href="http://jser.info/2016/02/01/es2016/">入る機能は既に決まっています</a>。
何か新しく入るのかは以下の記事を見てみてください。</p>

<ul>
<li><a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></li>
</ul>

<p>&quot;どこで&quot;決まっているのかというと2ヶ月に1回行われているTC39のミーティングです。(物理的に集合してF2Fでやる)</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>

<ul>
<li>具体的に「ES2016に入る機能は今回のミーティングでStage 4となったものがそうだ」と決まった</li>
</ul></li>
</ul>

<p>小さな修正などは直接GitHubで議論して終わることがありますが、TC39としての意志が求められる新しい機能の追加や互換性のない修正などはTC39のミーティングを通して判断されます。</p>

<ul>
<li>ProposalのStageをあげるあげない</li>
<li>ProposalをStage 0として追加するかどうか</li>
<li>後方互換性のない変更を加えるか</li>
<li>現実との互換性のためにAnnex Bへ仕様を追加するか</li>
</ul>

<p>などはここで議論された結果が仕様へ反映されます。
(大体はGitHub Issueで議論後、Pull Requestを出した状態で実際のミーティングに持ち込まれてる)</p>

<p>そのため、仕様/Proposalへどういう変更をどういう理由で加えるかというのはこのミーティングノートを見れば大体分かります。</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes" title="tc39/tc39-notes: These are the notes I take at TC39 Meetings, with Markdown formatting">tc39/tc39-notes</a>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>が元リポジトリ</li>
</ul></li>
<li><a href="https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aclosed" title="Pull Requests · tc39/ecma262">Pull Requests · tc39/ecma262</a>

<ul>
<li>あわせてPull Requestを見るのが早い</li>
</ul></li>
</ul>

<p>ミーティングノートは3日分がワンセットなのでちょっと多いですが、数時間あれば読める感じです。
ちゃんとテーマごとに議論の区切りと結論が書いてあるので、気になるものだけみるならすぐ読めると思います。</p>

<p>例えば、先ほどの<a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>なら、結論が&quot;Conclusion/Resolution&quot;にわかりやすく書いてあります。</p>

<p>口語表現が多くてよく分からなかったら(自分は大抵そうなります)、結論からさかのぼって読むといい気がします。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ECMA-262/402 2016 End-Game  

AWB: slide (Key dates)  
BT: the way I want to do this, at the march meeting I want us to approve what is in master, or a snapshot. I don&#39;t want to make minor tech or editorial changes. I will make fixes if major issues exist, but otherwise I wish we can leave it as is. Leaving it as a tag  
...  
Conclusion/Resolution
   30 days before the next meeting, the final draft will be provided
   next meeting we will vote to make it ES2016
   start the out-patent review process, you may need to alert your organizations
</code></pre></div>
<p>自分は<a href="https://twitter.com/search?f=realtime&amp;q=%20%23TC39MTG" title="#TC39MTG">#TC39MTG</a>というハッシュタグをつけて読んでいます。</p>

<ul>
<li><a href="https://tc39-mtg.doorkeeper.jp/" title="TC39 MTG Notes MTG | Doorkeeper">TC39 MTG Notes MTG | Doorkeeper</a></li>
</ul>

<h2 id="tc39ミーティングノートの修正方法">TC39ミーティングノートの修正方法</h2>

<p>ここでやっと本題ですが、ミーティングノートを読んでいると結構な頻度でtypoなどの間違いやリンク切れ、Markdownの構文ミスなどが見つかると思います。</p>

<p>間違いを見つけた時は<a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>に普通にPull Requestで修正を送りましょうという話です。</p>

<p>特に<a href="https://github.com/rwaldron/tc39-notes/pull/41">今回はtypoの数が多かった</a>ので、積極的に修正を送ると他の読む人が幸せになれます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/12-1455276798.png" alt="contributing"></p>

<p>typoを直すためにかなりの数コミットしたので跳ねてる…(まだtypoは残ってるのがあると思います…)</p>

<h3 id="具体的な修正の送り方">具体的な修正の送り方</h3>

<p>やり方も何もないですが、Markdownファイルを修正して以下のリポジトリにPull Requestを送るだけです。</p>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a></li>
</ul>

<p>注意点としてはこのミーティングノートを管理している<a href="https://github.com/rwaldron" title="rwaldron">@rwaldron</a>さんは、結構Pull Requestを見逃すことがあるのでmentionを本文に入れておいたほうが確実です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/cc @rwaldron
</code></pre></div>
<p>また、数日反応がなかったら<code>ping @rwaldron</code>などとコメントするといいかもしれません。</p>

<p>修正はまとめて一つのPull Requestで送ることが多いです。</p>

<h3 id="修正箇所の見つけ方">修正箇所の見つけ方</h3>

<p>結構、普通に見ていれば崩れている場所が見つかると思います。</p>

<ul>
<li>MarkdownのCodeBlockが壊れてる</li>
<li>インデントが揃ってない</li>
<li><code>----</code> が余計にある</li>
<li><code>-</code> だけが残ってる</li>
<li>リンク切れ</li>
<li>typo</li>
</ul>

<p>リアルタイムに文字起こしてるようなきがするので、スペルチェッカーを通すだけでも結構なtypoが見つかります。
(自分は英語に自信がないので、確実に間違ってるものだけ修正しています。もっと英語表現に詳しい方も修正送って欲しい…)</p>

<h2 id="おわりに">おわりに</h2>

<p>ECMAScriptの新しいProposalを知りたいという場合は、適当なブログを見るよりもProposalを書いてる人たちの意見が見られるミーティングノートを見るのが確実です。</p>

<p>ちょっと長いですが、一次情報を見ればモチベーションなどもわかるし、なんとなく見てても面白いのでおすすめです。(Conclusionだけ見ても色々分かります)</p>

<p>少なくてもBabelで<code>Stage X preset</code>を使ってる人は一度見るといいかと思います。(ミーティングノートにも度々Babelの話はでてきます)</p>

<p>Angular 2を使ってる人も<a href="https://github.com/wycats/javascript-decorators">Stage 1のDecorators</a>の上に<a href="http://ecmascript-daily.github.io/2016/01/28/stage0-descorator-related">Stage 0のDecorators関連Proposal</a>があることなどを知るために見ておくべきです。</p>

<blockquote>
<p>情報の伝達が早い順で並べるとTwitter &gt; GitHub &gt; その他という感じです。<br>
-- <a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></p>
</blockquote>

<p>こうしてミーティングノートや<a href="https://github.com/tc39/ecma262" title="tc39/ecma262: Status, process, and documents for ECMA262">tc39/ecma262</a>を見て集めた&quot;その他&quot;の情報を、適当なブログである<a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>に更新しています。</p>

<p><a href="https://twitter.com/ecmascriptdaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @ecmascriptdaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p><a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>はPull Requestで誰でも記事を追加できるので興味がある人は<a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="Contributing Guideline">Contributing Guideline</a>を見てください！</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>メモアプリをDayOneからQuiverに移行した</title>
   <link href="http://efcl.info/2016/02/03/quiver/"/>
   <updated>2016-02-03T20:28:00+09:00</updated>
   <id>http://efcl.info/2016/02/03/quiver</id>
   <content type="html"><![CDATA[ <p>メモアプリとしてEvernote、OneNote、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>、DayOneなどを使っていました。</p>

<p>EvernoteとOneNoteはメモ機能は強いですが、あんまり気軽に書けるような感じじゃないのでピンときませんでした。
(画像やテーブルは便利ですが、Markdownみたいなプレーンなテキストじゃないのも微妙な点)</p>

<p>そのため、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>などを作ったりしましたが、UIを作りこまないとあんまり使いやすくないということが分かったので、途中で飽きてました。</p>

<p>DayOneは気軽にMarkdownで書けて、iOSアプリもできがいいのは素晴らしいですが、検索機能が微妙でした。
(書くのはいいが、見るのが難しい)</p>

<p>最近Quiverというアプリを見つけて、これを使うようになりました。</p>

<h2 id="quiver">Quiver</h2>

<ul>
<li>AppStore: <a href="https://itunes.apple.com/jp/app/quiver-programmers-notebook/id866773894?mt=12" title="Quiver: The Programmer&amp;#39;s Notebook">Quiver: The Programmer&#39;s Notebook</a></li>
<li>Homepage: <a href="http://happenapps.com/#quiver">http://happenapps.com/#quiver</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki" title="Home · HappenApps/Quiver Wiki">Home · HappenApps/Quiver Wiki</a></li>
</ul>

<p>Quiverは<a href="http://jupyter.org/" title="Jupyter Notebook">Jupyter Notebook</a>のようにセルの概念を持っていて、Text(リッチテキスト)、Markdown、Code、Latex、Diagramsのセルがあります。</p>

<p>セルが分かれているので、Markdownで書きながらエディタ部分に画像をTextセルで埋め込んだりできます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/03-1454497208.png" alt="quiver"></p>

<p>また、<a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started#diagram-cell" title="Diagram Cell">Diagram Cell</a>ではシーケンスを書いたりできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Title: Here is a title
A-&gt;B: Normal line
B--&gt;C: Dashed line
C-&gt;&gt;D: Open arrow
D--&gt;&gt;A: Dashed open arrow
</code></pre></div>
<p>検索も全文検索が数千ファイルでちゃんと機能してるので問題ない感じです。</p>

<p>どういう機能があるかは以下を見るのがいいと思います。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started" title="Getting Started · HappenApps/Quiver Wiki">Getting Started · HappenApps/Quiver Wiki</a></li>
</ul>

<p>同期はDropboxなどを使ってファイル同期する仕組みがあり(競合した時にどっちを使うかを選択出来る)、上手く動いてていい感じです。</p>

<h3 id="体験版">体験版</h3>

<p>AppStoreで販売されていますが、<a href="http://happenapps.com/#quiver">公式サイト</a>の<a href="http://happenapps.com/downloads/QuiverFreeTrial.zip">Free Trial</a>から体験版をダウンロードできます。</p>

<p>また、GitHub Issueでやり取りしてるβ版でも試すことができます。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/issues/361" title="Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver">Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver</a></li>
</ul>

<h2 id="dayone-to-quiver">DayOne to Quiver</h2>

<p>Quiverはデータフォーマットがきちんと定義されていて、公開されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Quiver-Data-Format" title="Quiver Data Format · HappenApps/Quiver Wiki">Quiver Data Format · HappenApps/Quiver Wiki</a></li>
</ul>

<p>そのため、他のノートアプリからのimport/exportツールが色々と用意されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Import-Scripts">Import Scripts · HappenApps/Quiver Wiki</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Export-Scripts">Export Scripts · HappenApps/Quiver Wiki</a></li>
</ul>

<p>先ほど書いたように元々はDayOneを使っていたので、DayOneからQuiver形式に変換するツールを書きました。</p>

<ul>
<li><a href="https://github.com/azu/dayone-to-quiver" title="azu/dayone-to-quiver - JavaScript">azu/dayone-to-quiver - JavaScript</a></li>
</ul>

<p>DayOne の<code>Journal.dayone</code>ファイルをQuiverのNotebook形式に変換できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g dayone-to-quiver
<span class="nv">$ </span>dayone-to-quiver --entry Journal.dayone --output output.qvnotebook

    --entry path to Journal.dayone
    --output output path
</code></pre></div>
<p>そろそろ<a href="http://dayoneapp.com/2016/01/introducing-day-one-2/" title="Day One 2">Day One 2</a>が出るようですが、変換元はDayOne 1のみ対応しています。
(DayOne 2は3カラムになっていて大分ビューアとしてよくなってそう…)</p>

<h2 id="おわり">おわり</h2>

<p>作者さんが以下のブログで書いてますが、ノートブック/メモアプリに求めるものってそういうものだよなーって感じがしたので使い始めました。</p>

<ul>
<li><a href="http://yaoganglian.com/2015/12/06/What-is-Quiver/" title="What is Quiver? | Yaogang Lian">What is Quiver? | Yaogang Lian</a></li>
</ul>

<p>フォーマットがわかりやすいので、他のいいものがでてきたら変換ツールを書けばいいかなーという感じです。</p>

<p><a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>や<a href="http://b00st.io/" title="Boostnote">Boostnote</a>がUI的に近い系統だと思いますが、その辺のフォーマットとかに不安が出てきてしまいイマイチ使うことができなかった。</p>

<p>エディタ部分が<a href="https://ace.c9.io/" title="Ace - The High Performance Code Editor for the Web">Ace</a>なのはやっぱり好きではないけど、ぎりぎり許容範囲という感じの動作です。動作的な作りこみなら<a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>がやっぱりできがいいと思います。</p>

<p>タイトルで移行したと書いてますが、DayOneも併用はしていてDayOneには書捨て的なメモを書いたりしてます(今日何したとか)。
日にちをまたいで書く必要があるメモがQuiver、その場その場でいいのはDayOneみたいな感じの使い分けをしています。</p>
 ]]></content>
 </entry>
 

</feed>
