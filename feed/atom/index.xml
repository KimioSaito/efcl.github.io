<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2017-04-24T23:59:24+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>Node学園 25時限目でECMAScriptの国際標準化の話をした</title>
   <link href="http://efcl.info/2017/04/24/node-25/"/>
   <updated>2017-04-24T23:51:00+09:00</updated>
   <id>http://efcl.info/2017/04/24/node-25</id>
   <content type="html"><![CDATA[ <p><a href="https://nodejs.connpass.com/event/54749/" title="Node学園 25時限目 - connpass">Node学園 25時限目 - connpass</a>に受付として参加してきて、ついでにECMAScript Specification SuiteについてのLTをしました。</p>

<blockquote>
<p>ECMAScript Specification Suite<br>
スライド-- <a href="http://azu.github.io/slide/2017/node/ecmascript-specification-suite.html">http://azu.github.io/slide/2017/node/ecmascript-specification-suite.html</a></p>
</blockquote>

<p><a href="http://azu.github.io/slide/2017/node/ecmascript-specification-suite.html" title="ECMAScript Specification Suite">ECMAScript Specification Suite</a>は現在議論中のECMAScriptの新しい国際標準候補です。</p>

<p>どういうものがは次の記事でも書いています。</p>

<ul>
<li><a href="http://efcl.info/2017/02/27/ecma-414/" title="ECMA-414 ECMAScript Specification Suiteについて | Web Scratch">ECMA-414 ECMAScript Specification Suiteについて | Web Scratch</a></li>
</ul>

<p>以下はメモです。</p>

<p>受付をやっていたのでかなり断片的です。</p>

<h2 id="node-8-0-0"><a href="mailto:node@8.0.0">node@8.0.0</a></h2>

<blockquote>
<p><a href="http://abouthiroppy.github.io/slides/node8/" title="abouthiroppy/node8">abouthiroppy/node8</a></p>
</blockquote>

<h2 id="introduction-to-rust-by-akito0107">Introduction to Rust by Akito0107</h2>

<ul>
<li>Rustとは</li>
<li>Rustが新しいところ = メモリ管理</li>
<li>所有権の概念</li>
<li>メモリ領域の種類

<ul>
<li>Stack</li>
<li>1つの関数とかサブルーチンとか1つのブロックの中のメモリ</li>
<li>ブロックから抜けるとポップする</li>
<li>基本的に高速</li>
<li>Heap</li>
<li>複数のサブルーチンとか、関数で使いまわしたりする</li>
<li>明示的な管理が必要</li>
<li>Stackに比べるメモリ管理のコストが高い</li>
<li>メモリ管理</li>
<li>手動でmalloc/free</li>
</ul></li>
<li>GC

<ul>
<li>自動でメモリ管理 確保と解放を行う</li>
<li>生きてるオブジェクト死んでるオブジェクトを判別して処理する</li>
<li>参照してるかどうか</li>
<li>GC中は他の処理ができなくなることがある</li>
</ul></li>
<li>Rustのアプローチ

<ul>
<li>手動/GCでもなく所有権でメモリ管理を解決</li>
<li>RustのデフォルトはStackでallocate</li>
<li>Heap Allocation</li>
<li>Box::newするとHeapへ確保</li>
<li><code>let foo = boxed_foo()</code> fooはheap領域を参照</li>
<li>Stackから抜けるときにheap領域のものも消す</li>
</ul></li>
<li>Rustのコンパイルエラー

<ul>
<li>所有権 =　オブジェクトを開放する権利</li>
<li>Rustはオブジェクトの所有権は基本的に1つオブジェクトがもつ</li>
<li>既に所有権をもってないものが触ろうとしたらコンパイルエラー</li>
<li>Rust における <code>=</code> は「代入」じゃなくて「移譲」となる</li>
<li>所有権を「移譲」してる</li>
<li>参照と借用 = read onlyの参照は許可する概念がある</li>
</ul></li>
<li>寿命

<ul>
<li>借用先の寿命 &gt; 借用元の寿命</li>
<li>デフォルトはスタックであることを思い出す</li>
</ul></li>
<li>メモリ安全、データ競合安全

<ul>
<li>コンパイラがチェックしてくれる</li>
</ul></li>
<li>言語機能

<ul>
<li>パターンマッチ、エラー処理などがある</li>
</ul></li>
<li>Rustのユースケースについて</li>
<li><a href="https://tokio.rs/" title="Tokio">Tokio</a></li>
<li><a href="https://github.com/hyperium/hyper" title="hyperium/hyper: An HTTP library for Rust">hyperium/hyper: An HTTP library for Rust</a></li>
</ul>

<hr>

<h2 id="cycle-js">Cycle.js</h2>

<ul>
<li><a href="https://cycle.js.org/" title="Cycle.js">Cycle.js</a></li>
<li>Rx的なものをラップしたフレームワーク</li>
<li><a href="https://github.com/staltz/xstream" title="staltz/xstream: An extremely intuitive, small, and fast functional reactive stream library for JavaScript">staltz/xstream: An extremely intuitive, small, and fast functional reactive stream library for JavaScript</a>

<ul>
<li>RxJSのoperatorを減らしたり、変更したもの</li>
</ul></li>
<li>Cycle.jsの設計

<ul>
<li>Applicationを<code>main()</code> と <code>driver()</code> に分割</li>
<li><code>driver()</code> DOM、APIを叩いたりする</li>
<li><code>main()</code> 副作用のないRxの世界</li>
</ul></li>
</ul>

<hr>

<h2 id="初めてのoss初めてのnode-contribute-chiiia12">初めてのOSS初めてのnode contribute - chiiia12</h2>

<blockquote>
<p><a href="https://speakerdeck.com/chiiia12/chu-metefalseosschu-metefalsenode-dot-js-contribute-number-tng25" title="初めてのOSS初めてのNode.js Contribute#tng25 // Speaker Deck">初めてのOSS初めてのNode.js Contribute#tng25 // Speaker Deck</a></p>
</blockquote>

<ul>
<li>OSS勉強会</li>
<li>Node.jsへのPRする</li>
<li>3回目でやっとマージされた</li>
<li>大きい所にPRすることで自信を持てた</li>
<li>レビューしてもらえる</li>
<li>運用方法が参考になる</li>
</ul>

<hr>

<h2 id="v8-interpreter-ignitionについて-by-brn0227">V8 Interpreter Ignitionについて by brn0227</h2>

<blockquote>
<p><a href="https://www.slideshare.net/ssuser6f246f/v8-iginition-interpreter" title="V8 Iginition Interpreter">V8 Iginition Interpreter</a></p>
</blockquote>

<ul>
<li>V8のインタープリタ</li>
<li>昔は常にfull codegenだった

<ul>
<li>ファイルがサイズがでかい、時間がかかる</li>
</ul></li>
<li>関数を実行するときにコンパイルようにした

<ul>
<li>Facebookでなんか遅い</li>
</ul></li>
<li>Ignition

<ul>
<li>ピーク時はfull codegenよりは遅い</li>
<li>平常時はまあまあな速度がある</li>
</ul></li>
</ul>

<p>今までのビルドパス</p>

<ul>
<li>JavaScript -&gt; AST -&gt; アーキテクチャ毎のバイトコード</li>
</ul>

<p>Ignition</p>

<ul>
<li>JavaScript -&gt; AST -&gt; Ignition -&gt; 中間コード -&gt; アーキテクチャ毎のバイトコード</li>
</ul>

<p>TurboFun</p>

<ul>
<li>Ignitionの中間コードを最適化するオプティマイズコンパイラ</li>
<li>Ignitionで実行中のプロファイルを取って、最適化する</li>
<li>最適化パスが間違っていた場合は、de-optsして戻す</li>
<li>小さな単位でやるので、de-opt時に戻りやすい(中間コードに戻す)</li>
</ul>

<p>IC(Inlining Cache)</p>

<ul>
<li>キャッシュミス時の劣化があった</li>
<li>missとfound の2種類のみあった</li>
<li>fast path/no inlined/miss の3パターンになった</li>
<li>キャッシュミスを減らすことでICの効率を下げないような工夫が入った</li>
</ul>

<h2 id="hello-mobx-by-leader22">Hello, MobX! by leader22</h2>

<blockquote>
<p><a href="http://leader22.github.io/slides/node_gakuen-25/" title="Hello, MobX!">Hello, MobX!</a></p>
</blockquote>

<ul>
<li><a href="https://github.com/mobxjs/mobx" title="MobX">MobX</a></li>
<li>state管理ライブラリ</li>
<li>どういうものなのか?</li>
<li>autorun -&gt; stateをなんとかする</li>
<li>state管理に絞ってる</li>
<li>アーキテクチャ自体は自分で決める</li>
</ul>

<h2 id="slack-codegolf-by-darai0512">Slack CodeGolf by darai0512</h2>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>箇条書きにおける文末の句点（。）を統一するtextlintルール</title>
   <link href="http://efcl.info/2017/04/11/textlint-rule-period-in-list-item/"/>
   <updated>2017-04-11T08:41:00+09:00</updated>
   <id>http://efcl.info/2017/04/11/textlint-rule-period-in-list-item</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/textlint-rule-period-in-list-item" title="textlint-rule-period-in-list-item">textlint-rule-period-in-list-item</a>という<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>のルールを書きました。</p>

<p>箇条書きの文末に。がついてたりついてなかったりするのを統一するためのルールです。
本文中の句点（。）の統一するルールは別途あります。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-ja-no-mixed-period/" title="textlint-ja/textlint-rule-ja-no-mixed-period: 文末の句点(。)の統一 と 抜けをチェックするtextlintルール">textlint-ja/textlint-rule-ja-no-mixed-period: 文末の句点(。)の統一 と 抜けをチェックするtextlintルール</a></li>
</ul>

<p><strong>デフォルトの挙動</strong> </p>

<p>デフォルトは句点を付けないように統一します。
以前アンケートを取ってみたところ、箇条書きの文末に句点はつけない人のほうが多そうではありました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">[Poll] 箇条書きの文末に。をつける付けない</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/844535223278694404">March 22, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>(もちろんオプションで変更できます)</p>

<p><strong>OK</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- 項目1
- 項目2
- [textlint](https://github.com/textlint/textlint &quot;textlint&quot;)
</code></pre></div>
<p><strong>NG</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- 項目1。
- 項目2.
</code></pre></div>
<p>という感じになります。</p>

<h2 id="install">Install</h2>

<p><a href="https://www.npmjs.com/">npm</a>を使ってインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-period-in-list-item
</code></pre></div>
<h2 id="usage">Usage</h2>

<p><a href="https://www.google.com/search?q=textlint+%E4%BD%BF%E3%81%84%E6%96%B9">textlint 使い方</a>などで検索してください。</p>

<p>Via <code>.textlintrc</code>(Recommended)</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;period-in-list-item&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="オプション">オプション</h2>

<p>オプションは色々ありますが、句点をつけないひとはあんまり変更する必要がないはずです。
句点を付ける人は、<code>periodMark</code>に利用する記号を指定してください。</p>

<p>例えば、<code>periodMark: &quot;。&quot;</code>とすれば、箇条書きの文末に<code>。</code>を付けることをチェックします。</p>

<p>文末に<code>。</code>を必須にした場合でも <code>- 「OK」</code> は許可したいという場合は、<code>allowPeriodMarks</code>で設定できます。(<code>!</code>や<code>?</code>といった文末に来る可能性が高いものはデフォルトで入っていますが)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="c1">// prefer to use period mark.</span>
    <span class="c1">// &quot;&quot; (default is no period)</span>
    <span class="c1">// You can select period mark like &quot;.&quot; from &quot;periodMarks&quot;.</span>
    <span class="s2">&quot;periodMark&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
    <span class="c1">// Built-in recognized period mark list</span>
    <span class="c1">// if the period of the text is not `periodMark` and it is a string in the `periodMarks`,</span>
    <span class="s2">&quot;periodMarks&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;。&quot;</span><span class="p">,</span> <span class="s2">&quot;．&quot;</span><span class="p">],</span>
    <span class="c1">// Ignore only link tag</span>
    <span class="c1">// - [text](link)</span>
    <span class="c1">// It is not needed period mark</span>
    <span class="s2">&quot;ignoreLinkEnd&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="c1">// allow exception period mark list at end of the list item</span>
    <span class="c1">// Ignore this period mark</span>
    <span class="s2">&quot;allowPeriodMarks&quot;</span><span class="o">:</span> <span class="p">[],</span>
    <span class="c1">// Allow emoji at end of the list item</span>
    <span class="s2">&quot;allowEmoji&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="c1">// If not exist `periodMark` at end of the list item</span>
    <span class="c1">// Automatically, append `periodMark` when does textlint --fix</span>
    <span class="s2">&quot;forceAppendPeriod&quot;</span><span class="o">:</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="句点をつけるように自動修正">句点をつけるように自動修正</h2>

<p>このルールは<code>textlint --fix</code>の自動修正にも対応しています。
句点を取り除く方は常に<code>--fix</code>で修正されますが、句点を付ける方は<code>forceAppendPeriod:true</code>の時のみ有効です。
(エディタなどで保存ごとに<code>--fix</code>したいという場合に問題になるため)</p>

<p>次の設定では、<code>.</code>が<code>--fix</code>をした時に自動で追加されます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;period-in-list-item&quot;</span><span class="p">:</span> <span class="p">{</span>
           <span class="nt">&quot;periodMark&quot;</span><span class="p">:</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span>
           <span class="nt">&quot;forceAppendPeriod&quot;</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>Before</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- item
</code></pre></div>
<p><strong>After</strong></p>

<p><code>textlint --fix</code>した結果</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- item.
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p>箇条書きにおける句点の表記を統一するtextlintルールでした。
何か問題を見つけた場合次のリポジトリのIssueへ報告してください。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-period-in-list-item" title="textlint-rule-period-in-list-item">textlint-rule-period-in-list-item</a></li>
</ul>

<p>また<a href="https://gitter.im/textlint-ja/textlint-ja">Gitterのtextlint-ja</a>のチャットでも問題ないです。</p>

<p><a href="https://gitter.im/textlint-ja/textlint-ja?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/textlint-ja/textlint-ja.svg" alt="Gitter"></a></p>

<p>箇条書きに句点を付けるか付けないかの明確な根拠は探した感じよく分かりませんでした。
日本語だけじゃなくて英語でも人によっても違う感じだったので、何か興味深い資料があればおしらせください。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>不自然なアルファベットを見つけるtextlintルール</title>
   <link href="http://efcl.info/2017/03/27/unnatural-alphabet/"/>
   <updated>2017-03-27T20:14:00+09:00</updated>
   <id>http://efcl.info/2017/03/27/unnatural-alphabet</id>
   <content type="html"><![CDATA[ <p>不自然なアルファベットを検知する<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>のルールを書きました。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-ja-unnatural-alphabet" title="textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール">textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール</a></li>
</ul>

<p>IMEの入力ミスによるtypoを見つける目的です</p>

<h2 id="example">Example</h2>

<p><strong>OK</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">リリース
aiueo
This is pen.
</code></pre></div>
<p><strong>NG</strong>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">リイr−ス
対応でｋない
こrはおかしい。
検索してくd際
</code></pre></div>
<p>上記のようなIME特有の日本語の間に不自然に挟まった1文字のアルファベットを見つけるルールです。</p>

<h2 id="install">Install</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-ja-unnatural-alphabet
</code></pre></div>
<p>でインストールできます。
使い方はいろんな記事があるので、&quot;textlint 導入&quot;とかで検索してください。</p>

<ul>
<li><a href="http://qiita.com/azu/items/e36501d25593d008f6ac" title="textlintをTravis CIで動かして継続的に文章をチェックする - Qiita">textlintをTravis CIで動かして継続的に文章をチェックする - Qiita</a></li>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1" title="VS Codeでtextlintを使って文章をチェックする - Qiita">VS Codeでtextlintを使って文章をチェックする - Qiita</a></li>
</ul>

<h2 id="オプション">オプション</h2>

<p><code>X</code>軸などアルファベット一文字を使うことはあるので、そういうものはオプションで回避できるようになっています。
C言語のようなよくあるアルファベット一文字 + 日本語からなる単語は<code>allowCommonCase</code>で無視されています。</p>

<ul>
<li><code>allow</code>: <code>string[]</code>

<ul>
<li>無視するアルファベットや単語の配列</li>
<li>デフォルト: <code>[&quot;a&quot;, &quot;i&quot;, &quot;u&quot;, &quot;e&quot;, &quot;o&quot;, &quot;n&quot;, 典型例 ]</code></li>
<li>デフォルトでは母音とnを除外している</li>
<li><code>&quot;/正規表現/&quot;</code> のような文字列もサポート</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="c1">// 無視するアルファベット</span>
    <span class="c1">// 例) [&quot;X&quot;]</span>
    <span class="c1">// デフォルトでは母音とnを除外</span>
    <span class="s2">&quot;allow&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;u&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span>
    <span class="p">],</span>
    <span class="c1">// ビルトインの典型例を除外するかどうか</span>
    <span class="c1">// 例) C言語</span>
    <span class="s2">&quot;allowCommonCase&quot;</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="元ネタ">元ネタ</h2>

<p>この<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>ルールは元ネタがあって、<a href="http://ci.nii.ac.jp/naid/110002893543">CiNii 論文 -  日本語文章校正ツール&quot;Chanterelle&quot; : 入力ミス及び表記揺らぎについて</a>という論文が元ネタです。</p>

<p>不自然なアルファベットを見つけるルールが書かれていて、これを元に実装しました。</p>

<blockquote>
<p>(3) 不自然なアルファベット</p>
</blockquote>

<ul>
<li>1文字のみのアルファベットが日本語中に現れた場合に検出対象とする</li>
<li>大文字は、略記号などを意識して入れている可能性がある</li>
<li>このミスでは母音(<code>aiueo</code>)は発生しないので除く</li>
<li><code>n</code>も多くの場合には、<code>ん</code>となるため除く</li>
</ul>

<p>実装してみて<a href="https://github.com/textlint-ja/technological-book-corpus-ja">色々な再配布可能な技術書を集めた</a>ものに実際に通してみて、典型的な例外を少し加えるなどしています。</p>

<ul>
<li><a href="https://github.com/textlint-ja/technological-book-corpus-ja" title="textlint-ja/technological-book-corpus-ja: 日本語で書かれた技術書のコーパス">textlint-ja/technological-book-corpus-ja: 日本語で書かれた技術書のコーパス</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -g technological-book-corpus-ja textlint textlint-rule-ja-unnatural-alphabet
# 技術書のMarkdonファイルパスが出力される
# それをtextlintのルールに通してどんなところでおちるかをチェックする
technological-book-corpus-ja  | xargs textlint --rule textlint-rule-ja-unnatural-alphabet -f pretty-error
</code></pre></div> ]]></content>
 </entry>
 
 <entry>
   <title>3行でECMAScript仕様書アプリを作る</title>
   <link href="http://efcl.info/2017/03/21/ecmascript-spec-electron-app/"/>
   <updated>2017-03-21T09:45:00+09:00</updated>
   <id>http://efcl.info/2017/03/21/ecmascript-spec-electron-app</id>
   <content type="html"><![CDATA[ <p><a href="https://tc39.github.io/ecma262/" title="ECMAScript® 2017 Language Specification">ECMAScript® 2017 Language Specification</a>をアプリとして開けるWebViewアプリです。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ECMAScript仕様書アプリ<a href="https://t.co/twhhFqPca8">https://t.co/twhhFqPca8</a> <a href="https://t.co/bs2onkxNDo">pic.twitter.com/bs2onkxNDo</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/834914935331155968">February 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Electron製なのでどのプラットフォームでも動くと思います。</p>

<h2 id="作り方">作り方</h2>

<ul>
<li><a href="https://github.com/jiahaog/nativefier" title="nativefier">nativefier</a>を入れます。</li>
<li>サイト内検索をする<a href="https://github.com/azu/in-site-search-javascript" title="in-site-search-javascript">in-site-search-javascript</a>を入れます。</li>
<li>ビルドします。</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -g nativefier
curl https://azu.github.io/in-site-search-javascript/index.js &gt; index.js
nativefier --name &quot;ECMAScript&quot; &quot;https://tc39.github.io/ecma262/&quot; --fast-quit --hide-window-frame --show-menu-bar --maximize --inject ./index.js
</code></pre></div>
<p>完成です。</p>

<h2 id="使い方">使い方</h2>

<p>アプリを開いたら仕様書が読めます。</p>

<p>Cmd+Fとかでサイト内検索ができます(重たいです)</p>

<p>以上。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>AlminでFluxアーキテクチャをやってみる</title>
   <link href="http://efcl.info/2017/03/17/almin-introduction/"/>
   <updated>2017-03-17T19:33:00+09:00</updated>
   <id>http://efcl.info/2017/03/17/almin-introduction</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>でFluxアーキテクチャについてを見ていく話です。</p>

<p>AlminはいわゆるFluxライブラリ的なものですが、ドメイン駆動設計(DDD)を行うにあたって既存の<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>や<a href="https://github.com/facebook/flux" title="Flux">Flux</a>では上手くレイヤー分けをやりにくい部分がありました。</p>

<p>この辺の経緯については以前スライドやドキュメントにまとめてあるので、以下を参照してください。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
</ul>

<p>この記事では、実際のサンプルコードを見ていきながら、Flux的なデータフローについて見ていきます。</p>

<h2 id="alminでカウンターアプリを作る">Alminでカウンターアプリを作る</h2>

<p>このサンプルでは<a href="https://github.com/almin/almin" title="Almin">Almin</a>を使って次のようなカウンターアプリを作っていきます。</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/counter.png" alt="counter"></p>

<h2 id="source-code">Source Code</h2>

<p>ソースコードは次の場所にあります。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/counter">https://github.com/almin/almin/tree/master/example/counter</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/almin/almin.git

<span class="nb">cd </span>almin/example/counter
npm install
npm start
<span class="c"># manually open</span>
open http://localhost:8080/
</code></pre></div>
<h2 id="ディレクトリ構造">ディレクトリ構造</h2>

<p>最終的なディレクトリ構造を最初に見ておくとイメージがしやすいかもしれません。</p>

<p>データの流れとしては、Component -&gt; UseCase -&gt; Storeとなりますが、実装の順序はこの順序じゃなくても問題ありません。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">src/
├── index.js
├── component
│   ├── App.js
│   └── Counter.js
├── usecase
│   └── IncrementalCounterUseCase.js
└── store
    ├── CounterState.js
    └── CounterStore.js
</code></pre></div>
<p>Alminの構成要素については<a href="https://almin.js.org/docs/abstract/">Component of Almin</a>を参照してみてください。</p>

<p>このサンプルでは、最小限の要素のみが登場しています。</p>

<ul>
<li>View

<ul>
<li>ユーザーが自由に選ぶ</li>
<li>ここではReactを選択</li>
</ul></li>
<li>Store

<ul>
<li>アプリの状態(State)を保存する</li>
<li>Stateが変わったことを(Viewへ)通知する</li>
</ul></li>
<li>UseCase

<ul>
<li>ユーザーが行いたい処理の<strong>流れ</strong>を書く場所</li>
</ul></li>
</ul>

<p>他のライブラリと見比べてみると次のような形になります。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/17-1489747778.png" alt="比較table"></p>

<p>このサンプルは状態が一つしかないため、複数のStoreをまとめるStoreGroupや、
ロジックが殆どないためDomainといった要素は登場していません。</p>

<h2 id="カウンターの機能">カウンターの機能</h2>

<ol>
<li>ユーザーがボタンを押したら+1する</li>
</ol>

<p>以上。</p>

<p>つまり、このカウンターは「ユーザーがボタンを押したら+1する」というUseCaseがあります。</p>

<h2 id="usecase">UseCase</h2>

<p>カウンターの機能をUseCaseという形で実装します。
UseCaseとは、ユーザーとシステムのやり取りを対話的に書いたものです。</p>

<p>簡単に言えば、ユースケースにはユーザーがシステムとやり取りする手順を書いていきます。
カウンターの例では複雑な手順が出てこないため、ユーザーがUIを操作した時に行うアクションを書く場所と考えれば問題ありません。</p>

<blockquote>
<ol>
<li>ボタンを押したら+1する</li>
</ol>
</blockquote>

<p>基本的にAlminでは1 UseCase 1ファイル(クラス)として実装します。</p>

<p>これを実現する<code>IncrementalCounterUseCase.js</code>を作成します。
Alminの<code>UseCase</code>クラスを継承し、<code>execute()</code>メソッドに行いたい処理実装します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">UseCase</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">IncrementalCounterUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="c1">// UseCase should implement #execute method</span>
    <span class="nx">execute</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Write the UseCase code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>ここで行いたい処理というのは、カウンターを+1することです。
つまり、<code>IncrementalCounterUseCase</code>が実行されたときに、<strong>CounterアプリのState</strong>を更新したいわけです。</p>

<p>そのためには、まず<strong>CounterアプリのState</strong>を保持する場所が必要です。
ここでは、<strong>CounterアプリのState</strong>を<strong>Store</strong>という入れ物の中に実装します。</p>

<h2 id="store">Store</h2>

<p>まずは、<code>CounterStore</code>という<code>Store</code>クラスを継承したものを作成します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">Store</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// receive event from UseCase, then update state</span>
    <span class="p">}</span>

    <span class="c1">// return state object</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span> 
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Alminの<code>Store</code>は<code>UseCase</code>から<code>dispatch</code>されたpayloadを受け取ることができます。</p>

<p>つまり次のような流れを実装します。</p>

<ol>
<li>IncrementalCounterUseCaseが&quot;increment&quot; payloadをdispatchします.</li>
<li>CounterStoreは&quot;increment&quot; payloadを受け取り、自分自身のstateを更新します。</li>
</ol>

<p>これはいわゆるFluxパターンです</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/flux-diagram-white-background.png" alt="flux-diagram-white-background"></p>

<p>Fluxでは次のような説明になります。</p>

<ol>
<li>ActionCreatorで&quot;increment&quot; actionを作りdispatchします</li>
<li>CounterStoreは&quot;increment&quot; payloadを受け取り、自分自身のstateを更新します。</li>
</ol>

<h2 id="usecase-dispatch-gt-store"><strong>UseCase</strong> dispatch -&gt; Store</h2>

<p><code>IncrementalCounterUseCase</code>に話を戻して、「&quot;increment&quot; payloadをdispatch」を実装します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">UseCase</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">IncrementalCounterUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="c1">// IncrementalCounterUseCase dispatch &quot;increment&quot; ----&gt; Store</span>
    <span class="c1">// UseCase should implement #execute method</span>
    <span class="nx">execute</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;increment&quot;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>UseCase</code>クラスを継承したクラスは<code>this.dispatch(payload)</code>メソッド利用できます。</p>

<p><code>payload</code>オブジェクトは<code>type</code>プロパティを持ったオブジェクトです。
次の<code>payload</code>は最小のものと言えます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;type&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>次のように<code>type</code>以外のプロパティも持たせることができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span>
    <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;value&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>つまり、先ほど実装した<code>IncrementalCounterUseCase</code>は、<code>&quot;increment&quot;</code>いう<code>type</code>のpayloadをdispatchしています。</p>

<h2 id="usecase-gt-store-received">UseCase -&gt; <strong>Store</strong> received</h2>

<p>次は<code>CounterStore</code> が &quot;increment&quot; payloadを受け取れるようにします。</p>

<p><code>Store</code>クラスを継承したクラスは、<code>this.onDispatch(function(payload){ })</code>メソッドが利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span><span class="nx">Store</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="cm">/*</span>
<span class="cm">            {</span>
<span class="cm">                type: &quot;increment&quot;z</span>
<span class="cm">            }</span>
<span class="cm">            */</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">getState</span><span class="p">(){</span> <span class="cm">/* stateを返す */</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>Store#onDispatch</code>メソッドで、UseCaseがdispatchしたpayloadを受け取れます。
受け取ったら<code>CounterStore</code>のstateをアップデートします。</p>

<p>その前に、Alminでは多くの場合StoreがStateを別々のクラスとして実装しています。</p>

<p>つまり、<code>CouterStore</code>は<code>CounterState</code>のインスタンスを持つという形にしています。</p>

<p><strong>Store</strong></p>

<ul>
<li>dispatchや変更を監視、Stateを保持する層</li>
</ul>

<p><strong>State</strong></p>

<ul>
<li>ステート！</li>
</ul>

<h2 id="state">State</h2>

<p>まずは<code>CounterState.js</code>を作成します。
State自体はただのJavaScriptで、Alminとして<code>State</code>のようなクラスは提供していません。</p>

<p><code>CounterState</code>の目的は</p>

<ul>
<li>&quot;payload&quot;を受け取り、新しいStateを返す</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">CounterState</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * @param {Number} count</span>
<span class="cm">     */</span>
    <span class="nx">constructor</span><span class="p">({</span> <span class="nx">count</span> <span class="p">})</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Increment Counter</span>
            <span class="k">case</span> <span class="s2">&quot;increment&quot;</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
                    <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="p">});</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>このパターンはどこかで見たことがあるかもしれません。
Reduxの <strong>reducer</strong> と呼ばれるものによく似たものを実装しています。</p>

<ul>
<li><a href="http://redux.js.org/docs/basics/Reducers.html" title="Reducers | Redux">Reducers | Redux</a></li>
<li><a href="https://facebook.github.io/flux/docs/flux-utils.html" title="Flux | Application Architecture for Building User Interfaces">Flux | Application Architecture for Building User Interfaces</a></li>
</ul>

<h2 id="store-gt-state-newstate">Store -&gt; State: NewState</h2>

<p>最後に、<code>CounterStore</code>へStateを更新するコードをを追加したら完成です。</p>

<ol>
<li>dispatchされたpayloadを受け取り、<code>CounterState</code>を更新を試みます</li>
<li>もし<code>CounterState</code>が更新されたなら, <code>CounterStore#emitChange</code>を叩き変更を通知します</li>
<li><code>getState(){}</code>ではStateのインスタンスを返します。</li>
</ol>

<p><code>Store</code>を継承したクラスは<code>this.emitChange()</code>メソッドを持っています。
これは、Storeを監視しているもの(主にView)に対して、Store(State)が変わったことを通知しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;./CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// initial state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>
        <span class="p">});</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">newState</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">counterState</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="side-note-testing">Side note: Testing</h3>

<p>UseCase、Store、Stateと分かれているのでテストも書くのは簡単です。
次の場所にテストコードもあります。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/counter/test" title="almin/example/counter/test at master · almin/almin">almin/example/counter/test at master · almin/almin</a></li>
</ul>

<h2 id="view-integration">View Integration</h2>

<p>ここでは、Viewの例として<a href="https://facebook.github.io/react/" title="React">React</a>を使っています。</p>

<h3 id="app">App</h3>

<p><code>App.js</code>というコンポーネント、いわゆるContainer Componentを作成します。</p>

<p>次に<code>Context</code>オブジェクトを作成します。 
<code>Context</code>オブジェクトとはStoreとUseCaseを繋ぐ役割をするものです。</p>

<p>次のように、StoreのインスタンスとDispatcherのインスタンスを渡して初期化しています。
(ここではStoreが一つのみですが、Alminでは複数のStoreをまとめるStoreGroupというものも用意しています)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">Dispatcher</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">CounterStore</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterStore&quot;</span><span class="p">;</span>
<span class="c1">// a single dispatcher</span>
<span class="kr">const</span> <span class="nx">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">();</span>
<span class="c1">// a single store. if you want to use multiple, please use StoreGroup!</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="p">,</span>
    <span class="nx">store</span>
<span class="p">});</span>
</code></pre></div><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">Dispatcher</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">CounterStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterStore&quot;</span><span class="p">;</span>
<span class="c1">// a single dispatcher</span>
<span class="kr">const</span> <span class="nx">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">();</span>
<span class="c1">// a single store</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="p">,</span>
    <span class="nx">store</span>
<span class="p">});</span>
<span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s2">&quot;./Counter&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(...</span><span class="nx">args</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">appContext</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// when change store, update component</span>
        <span class="kr">const</span> <span class="nx">onChangeHandler</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">appContext</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
            <span class="p">});</span>
        <span class="p">};</span>
        <span class="nx">appContext</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">onChangeHandler</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="cm">/*</span>
<span class="cm">         Where is &quot;CounterState&quot; come from? </span>
<span class="cm">         It is CounterStore#getState()&#39;s key name</span>

<span class="cm">         getState() {</span>
<span class="cm">             return {</span>
<span class="cm">                counterState: this.state</span>
<span class="cm">             }</span>
<span class="cm">         }</span>
<span class="cm">        */</span>
        <span class="kr">const</span> <span class="nx">counterState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">counterState</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Counter</span> <span class="nx">counterState</span><span class="o">=</span><span class="p">{</span><span class="nx">counterState</span><span class="p">}</span>
                        <span class="nx">appContext</span><span class="o">=</span><span class="p">{</span><span class="nx">appContext</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>App.jsを見てみると、</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">appContext</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">onChangeHandler</span><span class="p">);</span>
</code></pre></div>
<p>これは、<code>CounterStore</code> が変更される(<code>emitChange()</code>を叩く)と<code>onChangeHandler</code>が呼ばれることを意味しています。
そして、<code>onChangeHandler</code> は<code>App</code> componentのState(ReactのState)を更新します。</p>

<h3 id="counter-component">Counter component</h3>

<p>後は、<code>counterState</code>をCounterComponent(実際にcountを表示するView)が受け取り、カウントの値を表示すれば完成です。</p>

<p>カウントを更新したい場合は、作成したIncrementalCounterUseCaseを<code>context.useCase(new IncrementalCounterUseCase()).execute(渡したい値);</code>で呼び出すことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">IncrementalCounterUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">();</span>
</code></pre></div><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">IncrementalCounterUseCase</span> <span class="nx">from</span> <span class="s2">&quot;../usecase/IncrementalCounterUseCase&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Context</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">CounterComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">incrementCounter</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// execute IncrementalCounterUseCase with new count value</span>
        <span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">appContext</span><span class="p">;</span>
        <span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">IncrementalCounterUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// execute UseCase ----&gt; Store</span>
        <span class="kr">const</span> <span class="nx">counterState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">counterState</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementCounter</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Increment</span> <span class="nx">Counter</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
                    <span class="nx">Count</span><span class="o">:</span> <span class="p">{</span><span class="nx">counterState</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span>
                <span class="o">&lt;</span><span class="err">/p&gt;</span>
            <span class="o">&lt;</span><span class="err">/div&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">CounterComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">appContext</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">instanceOf</span><span class="p">(</span><span class="nx">Context</span><span class="p">).</span><span class="nx">isRequired</span><span class="p">,</span>
    <span class="nx">counterState</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">instanceOf</span><span class="p">(</span><span class="nx">CounterState</span><span class="p">).</span><span class="nx">isRequired</span>
<span class="p">};</span>
</code></pre></div>
<p>これにより、一般的なFluxの一方こうのデータフローが次のようにできていることが分かります。</p>

<ul>
<li>React -&gt; UseCase -&gt; Store(State) -&gt; React</li>
</ul>

<h2 id="alminとロガー">Alminとロガー</h2>

<p>Alminはアプリケーションのログをキチンと取れるようにするという設計の思想があります。
そのため、<code>Context</code>にはAlminがやっていることを通知するイベントがあり、これを利用して殆どのログがとれます。</p>

<p><a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a>という開発用のロガーライブラリが用意されているので、これを先ほどのサンプルに入れて動かしてみます。</p>

<ul>
<li><a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a></li>
</ul>

<p>3行追加するだけで次のような、UseCaseの実装やそのUseCaseによるStoreの変更などがコンソールログとして表示されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">ContextLogger</span> <span class="nx">from</span> <span class="s2">&quot;almin-logger&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContextLogger</span><span class="p">();</span>
<span class="nx">logger</span><span class="p">.</span><span class="nx">startLogging</span><span class="p">(</span><span class="nx">appContext</span><span class="p">);</span>
</code></pre></div>
<p><iframe src="//giphy.com/embed/3og0ICodJBeY3BQk1y" width="480" height="392" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3og0ICodJBeY3BQk1y">via GIPHY</a></p></p>

<p>また、Reduxを使ったことがある人は<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>というブラウザ拡張で動く開発者ツールを使ったことがあるかもしれません。</p>

<p>この拡張実は任意のFluxライブラリと連携するAPIも公開されています。</p>

<ul>
<li><a href="https://github.com/zalmoxisus/redux-devtools-extension" title="Redux DevTools Extension">Redux DevTools Extension</a></li>
</ul>

<p>Alminでは<a href="https://github.com/almin/almin-devtools" title="almin-devtools">almin-devtools</a>を使うことで、
<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>と連携することができます。</p>

<p>ブラウザに<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>をインストールします。</p>

<ul>
<li>Chrome: <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Chrome Web Store</a>;</li>
<li>Firefox: <a href="https://addons.mozilla.org/en-US/firefox/addon/remotedev/">Mozilla Add-ons</a>;</li>
<li>Electron: <a href="https://github.com/GPMDP/electron-devtools-installer"><code>electron-devtools-installer</code></a>.</li>
</ul>

<p>そして、3行加えるだけで、Alminのログを<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>で見ることができます。(タイムマシーンデバッグなどはアプリ側でちゃんと実装しないと動かないので制限があります)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">AlminDevTools</span> <span class="nx">from</span> <span class="s2">&quot;almin-devtools&quot;</span>
<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AlminDevTools</span><span class="p">(</span><span class="nx">appContext</span><span class="p">);</span>
<span class="nx">logger</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</code></pre></div>
<p><iframe src="//giphy.com/embed/3ohzdEYLL9sEapqPUA" width="480" height="482" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3ohzdEYLL9sEapqPUA">via GIPHY</a></p></p>

<p>この辺のログ取ることによる開発時のメリットなどについては次の文章でまとめてあります。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
</ul>

<h2 id="おわりに">おわりに</h2>

<p>Alminで簡単なカウンターアプリを作成しました。</p>

<p>この例では典型的なFluxのパターンをAlminで行えていることが分かります。</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/almin-architecture-flux.png" alt="almin-flux.png"></p>

<p>実際のアプリケーションでは、StoreやUseCaseが一つだけというものはあまりないと思います。
TodoMVCの例では、CQRSやドメインモデルなどの要素も登場し、複数のUseCaseを実装していきます。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/todomvc/" title="Todo App · Almin.js">Todo App · Almin.js</a></li>
</ul>

<p>Alminは元々ある程度複雑になるであろうアプリケーションのために作成しています。
ただし、複雑なアプリケーションの開発を支えるのは設計や開発方法が主で、ライブラリはその一部分に過ぎません。</p>

<p>そのため、小さく使おうと思えば<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>や<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>などと使い勝手はそこまでは代わりません。
設計思想としてアプリケーションが大きくなることを前提としているので、
大きくなってきた時のレイヤリングのしやすさやログなど開発の補助の充実に力を入れています。</p>

<p>どれだけ短く書けるかよりも、どれだけ読みやすく書けて管理できるかの方がメインといえるかもしれません。</p>

<p>この辺の話は、以下のスライドやリポジトリを見てみると良いかもしれません。</p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Inroducing Almin 0.10.0: TypeScript, FlowType, Logger</title>
   <link href="http://efcl.info/2017/03/08/almim0.10/"/>
   <updated>2017-03-08T21:55:00+09:00</updated>
   <id>http://efcl.info/2017/03/08/almim0.10</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>の0.10.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/0.10.0" title="Release 0.10.0 · almin/almin">Release 0.10.0 · almin/almin</a></li>
</ul>

<p>AlminはいわゆるFluxライブラリ的なものですが、ドメイン駆動設計(DDD)を行うにあたって既存の<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>や<a href="https://github.com/facebook/flux" title="Flux">Flux</a>では上手くレイヤリングがしにくい問題があったため作成しました。</p>

<p>この辺の経緯については以前スライドやドキュメントにまとめてあるので、以下を参照してください。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul>

<h2 id="typescript">TypeScript</h2>

<p>Almin 0.10.0ではコードベースがTypeScript化されました。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/08-1488978556.png" alt="TypeScript"></p>

<p>殆どの作業を@<a href="https://github.com/saneyuki" title="saneyuki">saneyuki</a>さんがやってくれました。</p>

<p>以下のPRを見ると既存のJavaScriptプロジェクトを徐々にTypeScript化する流れが見れるので面白いと思います。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/68" title="Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin">Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin</a></li>
</ul>

<p>これにより、<code>d.ts</code>がnpmパッケージに同梱されるようになったので、TypeScriptからも扱いやすくなりました。</p>

<h2 id="flowtype">FlowType</h2>

<p>Alminは以前からFlowTypeの型定義ファイルが同梱されていましたが、@<a href="https://github.com/k-kinzal" title="k-kinzal">k-kinzal</a>さんにいくつかPRを頂いて、<a href="https://flowtype.org/docs/declarations.html#declaration-files" title="Declaration files">Declaration files</a>の扱いが改善されました。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/108" title="fixes flow type-def can not be read. by k-kinzal · Pull Request #108 · almin/almin">fixes flow type-def can not be read. by k-kinzal · Pull Request #108 · almin/almin</a></li>
</ul>

<p>サンプルプロジェクトにFlowで書いたTodoMVCがあるので、Flowと一緒に使いたい人は参照してみてください。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/todomvc-flow" title="almin/example/todomvc-flow at master · almin/almin">almin/example/todomvc-flow at master · almin/almin</a></li>
</ul>

<h2 id="logger">Logger</h2>

<p>0.10.0の直接的なBreaking Changeとして、AlminのUseCase(Actionみたいなものです)やStoreの変更などのイベントハンドラの形式が統一的なものへと変更されました。
ハンドラに<code>meta</code>オブジェクトが追加され、そのイベントがどこ(useCase)でいつ(timestamp)起きたのかというメタ情報を取れるようになりました。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/61">Proposal: Introduce <code>meta</code> object to Dispatcher#dispatch(payload, meta) · Issue #61 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/pull/62">Breaking Change: feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin</a></li>
</ul>

<p>この辺は普通の人にはあんまり関係なくてロガーのようなものを作っている場合に関係してきます。</p>

<p>Alminでは<a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a>というコンソールにUseCaseの実行結果やStoreの変化をログとして吐くライブラリが用意されています。</p>

<p><iframe src="https://giphy.com/embed/xUA7aU9G9jatPmKIz6" width="480" height="324" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/xUA7aU9G9jatPmKIz6">via GIPHY</a></p></p>

<p><code>meta</code>オブジェクトの導入によってこの辺のログ周りがより正確に出るように改善されました。</p>

<p>例えば、AlminではParentUseCaseの中でChildUseCaseを実行するといったネストしたUseCaseを扱えるような仕組みも持っています。
(トランザクション的なことがしたいときに使う)</p>

<ul>
<li><a href="https://almin.js.org/docs/tips/nesting-usecase.html" title="Nesting UseCase · Almin.js">Nesting UseCase · Almin.js</a></li>
</ul>

<p><code>meta</code>オブジェクトの導入で親子関係のあるUseCaseも、その関係がログとして出せるようになっています。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/08-1488979360.png" alt="nesting useCase"></p>

<p>自分としては開発中のログは結構重視しているのでこの辺は充実させていきたいです。(実際のデバッグでかなり便利になるため)</p>

<p>最近は<a href="https://github.com/zalmoxisus/redux-devtools-extension" title="redux-devtools-extension">redux-devtools-extension</a>でAlminのログを出す連携を実験してみたりしています。</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="ja" dir="ltr">Redux DevTools Redux以外でも動かせるんだ。<br>Alminで一応できた <a href="https://t.co/b0uvdEwd83">pic.twitter.com/b0uvdEwd83</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/839280950898876416">March 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://github.com/almin/almin/issues/115" title="Integration with redux-devtools-extension · Issue #115 · almin/almin">Integration with redux-devtools-extension · Issue #115 · almin/almin</a>

<ul>
<li>Redux用のブラウザ拡張だけど、その他のライブラリと連携するAPIが用意されている</li>
</ul></li>
</ul>

<p>追記: 作ってみた <a href="https://github.com/almin/almin-devtools" title="almin/almin-devtools: Integrate almin into redux-devtools">almin/almin-devtools: Integrate almin into redux-devtools</a></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://t.co/CmAMJReV3W">https://t.co/CmAMJReV3W</a><br><br>AlminのログをRedux DevTools Extensionに流すやつとりあえず動いてきた。 <a href="https://t.co/Fer2fRaN0N">pic.twitter.com/Fer2fRaN0N</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/839845967729864705">March 9, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="どんなことに向いてるのか">どんなことに向いてるのか</h2>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>の設計思想としては普通に読めるようなコードで、中規模以上にスケールできようにするというものです。</p>

<p>よくあるFluxのサンプルでのカウントアプリのチュートリアルを見ると<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>と殆ど変わらないことが分かるかもしれません。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/counter/" title="Counter App · Almin.js">Counter App · Almin.js</a></li>
</ul>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/almin-architecture-flux.png" alt="Counter"></p>

<p>ただ<a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a>でも書いてますが、ドメインロジックをどこに書くのかという問題が<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>や<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>だと曖昧になりやすいです。</p>

<p>Alminは、その辺や非同期処理やStateの持ち方もある程度方針を持って扱えるようにするパターンやドキュメントなどを提供しています。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/todomvc/" title="Todo App · Almin.js">Todo App · Almin.js</a></li>
</ul>

<p><img src="https://almin.js.org/docs/tutorial/todomvc/img/almin-architecture.png" alt="Almin Flow"></p>

<p>今は、いくつかのプロダクションで数万行以上コードでもある程度安定して動いている感じです。</p>

<p>今後は報告してもらった問題に泥臭いチェックを入れたり、もう少し簡単にセットアップできるような方法を見ています。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/116" title="test(UseCase): add isolated nesting usecase by azu · Pull Request #116 · almin/almin">test(UseCase): add isolated nesting usecase by azu · Pull Request #116 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/112" title="Proposal: almin-react-container · Issue #112 · almin/almin">Proposal: almin-react-container · Issue #112 · almin/almin</a></li>
</ul>

<p>また、TypeScriptの問題もまだ幾つかあるのでPR待っています！</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/107">TypeScript: improve UseCase#execute typing · Issue #107 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/89">Move object-assign.d.ts to pacakges · Issue #89 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/81">Use StoreLike interface more aggressively · Issue #81 · almin/almin</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>GitHubのPull Requestのレビューコメントをコマンドラインから取得するツール</title>
   <link href="http://efcl.info/2017/03/06/get-pull-request-review-comments/"/>
   <updated>2017-03-06T09:20:00+09:00</updated>
   <id>http://efcl.info/2017/03/06/get-pull-request-review-comments</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/get-github-pr-review-comments" title="get-github-pr-review-comments">get-github-pr-review-comments</a>というシンプルなCLIを作りました。</p>

<p>GitHubでPull Requestを出して、そこへレビューコメントを書いて、それを反映というのを繰り返すと思います。
そのときに、レビューコメントの位置をソースコードの位置で探すのが毎回大変でした。
（特に文章をPRしてるときは細かいtypoをレビューコメントで印を付けて直すみたいなことがよく起きるので、位置が見つけにくい)</p>

<p><a href="https://github.com/azu/get-github-pr-review-comments" title="get-github-pr-review-comments">get-github-pr-review-comments</a>は次の事を行うCLIです。</p>

<ol>
<li>指定したCommitShaを含むPull Requestを取得

<ul>
<li>ブランチのshaとかでいい</li>
</ul></li>
<li>Pull Requestについているレビューコメントを取得</li>
<li>実際のファイルパス:行数 + レビューコメントを出力</li>
</ol>

<p>VSCodeやWebStormなど大体のエディタはファイルパスをクリックしてジャンプできるので、ツールが吐いた結果をクリックすればレビューコメントの位置に飛べます。</p>

<p><img src="https://camo.githubusercontent.com/e72a21e8e26d09148a98fa1fec3fc600298931dd/68747470733a2f2f6d6f6e6f736e61702e636f6d2f66696c652f50496435716768484774756472387a486f42346f6c383762343747464c4a2e706e67" alt="VSCode"></p>

<p><img src="https://monosnap.com/file/D5dbRx42MbM0ynePcXb6rpztdkfw8d.png" alt="WebStorm"></p>

<p>自分は、次のようなシェルスクリプトを使って、現在ブランチのレビューコメントを取得しています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/usr/bin/env bash</span>

<span class="nb">declare </span><span class="nv">repo</span><span class="o">=</span><span class="k">$(</span>git config --local remote.origin.url <span class="p">|</span> perl -pe<span class="s1">&#39;s/(git@|https:\/\/)?github.com(:|\/)(\w+)\/(\w+)(.git)?/$3\/$4/&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/\.git//g&#39;</span><span class="k">)</span>
<span class="nv">GH_TOKEN</span><span class="o">=</span><span class="s2">&quot;GitHubのtoken&quot;</span> get-github-pr-review-comments <span class="se">\</span>
--repo <span class="s2">&quot;${repo}&quot;</span> <span class="se">\</span>
--projectRoot <span class="sb">`</span>git rev-parse --show-toplevel<span class="sb">`</span> <span class="se">\</span>
<span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</code></pre></div>
<p>GitHubトークンは以下から<code>repo</code>の権限を付けたものを作成します。</p>

<ul>
<li><a href="https://github.com/settings/tokens/new" title="New personal access token">New personal access token</a></li>
</ul>

<h2 id="既知の問題">既知の問題</h2>

<p>GitHubでは解決済みのコメント(コミットで変更された部分)は折りたたまれますが、それができていません。</p>

<p>APIの結果にそういう情報があるわけでもないのでどうやってやるのかがよく分かりませんでした。</p>

<ul>
<li><a href="https://github.com/azu/get-github-pr-review-comments/issues/1" title="How to know that comment is resolved? · Issue #1 · azu/get-github-pr-review-comments">How to know that comment is resolved? · Issue #1 · azu/get-github-pr-review-comments</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMA-414 ECMAScript Specification Suiteについて</title>
   <link href="http://efcl.info/2017/02/27/ecma-414/"/>
   <updated>2017-02-27T18:15:00+09:00</updated>
   <id>http://efcl.info/2017/02/27/ecma-414</id>
   <content type="html"><![CDATA[ <p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>というECMAScript関係の仕様をまとめたEcma仕様が公開されている。</p>

<p>背景については以下を参照。</p>

<blockquote>
<p>For ECMA-262 (the main ECMAWScript standard), we now have an agreement with ISO that we will not fast track it anymore; instead, the ECMAScript Suite ECMA-414 will supercede it (with normative references also to the needed Ecma standards), and the other redundant standard ISO IS 16262 (which is out of date) will be withdrawn. The only standards in common will be ECMA-414 (on the way to fast track), which happened after the Dec 7 ECMA GA. 
-- <a href="https://github.com/littledan/tc39-notes/blob/master/es7/2017-01/jan-25.md#5-report-from-the-ecma-secretariat">https://github.com/littledan/tc39-notes/blob/master/es7/2017-01/jan-25.md#5-report-from-the-ecma-secretariat</a></p>
</blockquote>

<p>今は、ECMA-262(ECMAScript)の国際標準として<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=55755" title="ISO/IEC 16262">ISO/IEC 16262</a>があるけど、今後は<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=55755" title="ISO/IEC 16262">ISO/IEC 16262</a>は更新しない。
代わりに<a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>を国際標準にしていくよ。</p>

<p>という話。</p>

<p>デファクトとデジュールの違いは以下を参照。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1210/23/news153.html" title="OSSコミュニティの“中の人”（4）：できないことは全部やる。できる依頼は断る――竹迫良範氏インタビュー【後編】 (1/2) - ＠IT">OSSコミュニティの“中の人”（4）：できないことは全部やる。できる依頼は断る――竹迫良範氏インタビュー【後編】 (1/2) - ＠IT</a></li>
</ul>

<p>ISO標準(国際標準)ってどんなフローで決まるのって話は以下を参照。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a></li>
</ul>

<h2 id="ecma-414って何">ECMA-414って何?</h2>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>とは、ECMAScript関係の仕様を集めた仕様です。</p>

<p>このSuiteは、以下の仕様のlatest editionを参照する仕様です。</p>

<ul>
<li>ECMA-262 - いわゆるECMAScript</li>
<li>ECMA-402 - Internationalization API Specificationの仕様</li>
<li>ECMA-404 - JSONの仕様</li>
<li>TR-104 <a href="https://www.ecma-international.org/publications/techreports/E-TR-104.htm" title="ECMAScript® Test Suite">ECMAScript® Test Suite</a> テストスイート</li>
</ul>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は、ECMA-262とECMA-404が必須で、ECMA-402とTR-104はオプショナルです。</p>

<p>この<a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は
参照する仕様自体が増えたり、減ったりした場合はSuiteも更新します。
しかし、参照する仕様の中身が変化した場合は、Suiteは変化しません。</p>

<p>ISOとしてECMA-262の標準化するのは毎年更新するのは大変なので、
ECMA-414(Suite)をISO標準化して、中身の管理はECMA側でやれるようにするための仕様。</p>

<p><strong>要約</strong></p>

<p>ECMAScriptのデジュール(ISO標準)はあるといいのだけど、毎年更新するデファクト(Ecma)をデジュールにするのはコストや時間が難しい。
なので、デファクトを参照するデジュールの標準仕様があるといいんじゃない?</p>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は、最新のECMAScript仕様を参照するよという仕様(10ページしかない仕様)。
ECMAScriptの仕様が更新されたら、自動的に最新のECMA-262仕様を参照するという仕様です。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/02/27-1488187017.png" alt="ECMA-414"></p>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>はこの図が全てというほど小さな仕様。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Map-likeというES2015 Mapのようなライブラリを書いた</title>
   <link href="http://efcl.info/2017/02/26/map-like/"/>
   <updated>2017-02-26T18:42:00+09:00</updated>
   <id>http://efcl.info/2017/02/26/map-like</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/map-like" title="map-like">map-like</a>という小さな<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>オブジェクトのライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/map-like" title="azu/map-like: ES2015 Map like object">azu/map-like: ES2015 Map like object</a></li>
</ul>

<p>API的にはES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>と同じです。</p>

<h2 id="制限">制限</h2>

<ul>
<li><code>Symbol.Iterator</code>が実装されていません</li>
<li><code>toString</code>が実装されていません</li>
</ul>

<p>つまりIteratorは省いています。</p>

<h2 id="目的">目的</h2>

<p>Mapのpolyfillを書いたことがある人はわかるかもしれませんが、オブジェクトをkeyにできるMapがほしいだけなのに、結構でかくなります。
これはIteratorを実装する部分が大きく、<code>Symbol.Iterator</code>をどうするかとか色々あります。
正直Mapを<code>for...of</code>で回したいとかは殆ど必要なかったので、それ以外の部分はMapと互換を持つ<a href="https://github.com/azu/map-like" title="map-like">map-like</a>というライブラリを書きました。</p>

<p>ファイルサイズも1.5kBほどです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">✈ bundle-size map-like
map-like@1.0.3

env  bundle   minify   gzip
--   5.73 kB  3.08 kB  1.5 kB
</code></pre></div>
<p>「オブジェクトリテラルをマップのようなものとして使いたくない」や「オブジェクトをMapのキーとして使いたい」というケースで便利です。</p>

<p>派生としてLRU cacheライブラリの<a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>というものもあります。</p>

<ul>
<li><a href="https://github.com/azu/lru-map-like" title="azu/lru-map-like: LRU cache top on Map-like. Support non-string key.">azu/lru-map-like: LRU cache top on Map-like. Support non-string key.</a></li>
</ul>

<p>LRUライブラリは色々あるのですが、オブジェクトをキーとして使えるLRUは<a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>ぐらいしかありませんでした。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/56" title="Reduce file size · Issue #56 · almin/almin">Reduce file size · Issue #56 · almin/almin</a>

<ul>
<li>LRUキャッシュの調査メモ</li>
</ul></li>
</ul>

<p><a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>は便利なのですが、やはりサイズが大きい(10kb gzip)です。</p>

<p><a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>は大体2kBです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">env  bundle   minify   gzip
--   13.8 kB  6.32 kB  2.34 kB
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p>オブジェクトリテラルでマップのようなことをやるよりは、
ES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>を使ったほうが明示的で良いです。
あと、キーにオブジェクトに使える便利な場面がキャッシュのようなものを実装する際にはよく出現します。
(Map &lt;-&gt; Objectの相互変換は難しいものでもないので、最近はマップっぽいものがでてきたら<code>Map</code>を使うようにしてます)</p>

<p>以下のライブラリやツールなどでりようしています。</p>

<ul>
<li><a href="https://github.com/almin/almin">almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application</a></li>
<li><a href="https://github.com/textlint/textlint">textlint/textlint: The pluggable natural language linter for text and markdown.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#t_wada_sushi でOpen Collectiveの話をしてきた</title>
   <link href="http://efcl.info/2017/01/23/t_wada_sushi/"/>
   <updated>2017-01-23T23:08:00+09:00</updated>
   <id>http://efcl.info/2017/01/23/t_wada_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?q=%23t_wada_sushi&amp;src=typd" title="#t_wada_sushi">#t_wada_sushi</a>で<a href="https://opencollective.com/" title="Open Source Collective is on Open Collective">Open Collective</a>の話をしてきました。</p>

<p><a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html"><img src="https://monosnap.com/file/JNTadjsjcWbTuHYcJY2Zdgd14R77Oe.png" alt="open"></a></p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a></li>
</ul>

<p>最近webpackなども利用し始めた<a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a>というウェブサービスについての話をしてきました。
いわゆる寄付サービスや<a href="https://www.patreon.com/" title="Patreon">Patreon</a>に近いものです。
オープンソースプロジェクトなどの小さなコミュニティが法人格を持たないで、透明性を持ってお金をやり取り出来るような状況を作ることを目的にしたサービスです。</p>

<ul>
<li><a href="https://hackernoon.com/how-webpack-raised-15-000-in-3-months-and-the-future-of-open-source-cb2c9f68fffa#.pp5mjn2jy" title="How Webpack raised $15,000 in 3 months, and the future of open source">How Webpack raised $15,000 in 3 months, and the future of open source</a></li>
</ul>

<p>どういう目的をもって作られてたか、また最近利用するJavaScriptのOSSが増えてきたので簡単に調べた感じです。</p>

<ul>
<li><a href="https://github.com/jser/report/issues/4" title="Open Collective · Issue #4 · jser/report">Open Collective · Issue #4 · jser/report</a></li>
</ul>

<p>Twitterログ</p>

<ul>
<li><a href="https://togetter.com/li/1073636" title="#t_wada_sushi - Togetterまとめ">#t_wada_sushi - Togetterまとめ</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">いろいろとヤバいプレゼントを貰いました。ありがとうございました！ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/8ilgnGhEAq">pic.twitter.com/8ilgnGhEAq</a></p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/823545108695875584">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="webpack2-会長">webpack2 - 会長</h2>

<ul>
<li>Tree shakingについて</li>
<li>webpack2への移行でハマったのは

<ul>
<li>postcss</li>
<li><a href="https://github.com/webpack/extract-text-webpack-plugin" title="extract-text-webpack-plugin">extract-text-webpack-plugin</a></li>
</ul></li>
<li>webpack2のTree shakingのしくみについて</li>
<li>webpackは<code>// unused</code> なコメントをつけていく</li>
<li>これをuglifyJSが圧縮時に消し去る</li>
<li>という仕組み</li>
<li>Tree shakingした結果12kb減った</li>
<li>モジュールを元からきちんと分けてるとそこまで効果がない感じ</li>
<li>圧縮を書けないとコメントが増える分余計に増える</li>
</ul>

<hr>

<h2 id="whatwg-urlについての最近の動向-laco"><a href="http://slides.com/laco/201701-twada-sushi#/" title="whatwg/urlについての最近の動向">whatwg/urlについての最近の動向</a> - laco</h2>

<ul>
<li><a href="https://github.com/whatwg/url/graphs/contributors" title="Contributors to whatwg/url">Contributors to whatwg/url</a></li>
<li>コミットが最近活発化</li>
<li>URLSearchParamsについての変更がある</li>
<li>URLフラグメントのASCII文字列化 (373dbed)</li>
<li>URL passwordの仕様変更 (5e0b05e)</li>
<li>URLSearchParamsのコンストラクタ仕様変更 (31ddc5b)

<ul>
<li>mapを受け入れるようになった</li>
<li>tuple、map、文字列にURLSearchParamのコンストラクタに渡せるようになった</li>
<li>オーバーロード</li>
<li><a href="https://github.com/whatwg/url/pull/175" title="Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url">Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url</a></li>
</ul></li>
<li>URLSearchParams#sort() (960f607)

<ul>
<li>Arrayと同じく破壊的なsort</li>
</ul></li>
<li>CanIuseだとバージョン毎の変更の対応が分からない</li>
<li>MDN

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/URLSearchParams" title="URLSearchParams - Web API インターフェイス | MDN">URLSearchParams - Web API インターフェイス | MDN</a></li>
<li>実装されたバージョンごとの違いもでる</li>
</ul></li>
</ul>

<hr>

<h2 id="mixed-content-jxck">mixed content - jxck</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Cookpad緑だよ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/oeWnGMbQ7V">https://t.co/oeWnGMbQ7V</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499642016890880">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>CookpadもHTTPS化した</li>
<li>大きなサイトがhttps化するのは大変</li>
<li>mixed contentの問題が大きい

<ul>
<li>広告とか</li>
</ul></li>
<li>一つでもmixed contentがあるとURLバーがグリーンにならない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contentには二種類<br>active mixed content = DOMいじれる<br>passive mixed content = DOMいじれない <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499937564348416">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>外れAdガジャ問題<br></li>
<li>広告配信サービスはHTTPS対応していても、中身の雑な広告があるとmixed contentになってしまうことがある</li>
<li>HTTP_UPGRADE_INSECURE_REQUESTSについて</li>
<li>ブラウザに対するHTTPヘッダ</li>
<li><a href="http://d.hatena.ne.jp/ASnoKaze/20150423/1429758051" title="Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ">Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ</a></li>
<li><a href="https://w3c.github.io/webappsec-upgrade-insecure-requests/" title="Upgrade Insecure Requests">Upgrade Insecure Requests</a></li>
<li>ヘッダを受けて、ブラウザはサブリソースのhttp://へのリクエストを自動でhttps://のものに変更する

<ul>
<li>httpで書いてあってもhttpsとしてリクエストする</li>
<li>リクエスト先がhttpsがじゃない場合は見つからないので400になる</li>
<li>mixed contentにはならない(httpは400になるので混ざらない)</li>
</ul></li>
<li>mixed contentの問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contetntの問題はmixed contentが起きてるか分からないこと。<br> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823502009298882560">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content" title="CSP: block-all-mixed-content">CSP: block-all-mixed-content</a> + report-onlyで発見できる

<ul>
<li>CSP: block-all-mixed-contentでmixed contentはblockされる</li>
<li><code>Content-Security-Policy-Report-Only: policy</code></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" title="Content Security Policy (CSP) - HTTP | MDN">Content Security Policy (CSP) - HTTP | MDN</a></li>
<li><code>report-only</code> modeなら実際にはblockされないで、reportだけを遅れる</li>
</ul></li>
<li><a href="https://report-uri.io/" title="Welcome to report-uri.io">Welcome to report-uri.io</a>

<ul>
<li>UIがダメ、すぐダウンする</li>
<li>CSP reportの管理ツールでいいものがまだない</li>
</ul></li>
<li><a href="https://www.w3.org/TR/2016/WD-reporting-1-20160407/" title="Reporting API 1">Reporting API 1</a></li>
<li>クライアントのログ問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSがなくてもCSPのinline scriptのreportが来る。<br>Chrome拡張、ブックマークレットとかクライアントはノイズデータが多い <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823503391577866240">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>エラーログ、CSPログなどはノイズが多い</li>
</ul>

<hr>

<h2 id="firefoxのtime-travel-debugging-kyo_ago">FirefoxのTime-Travel Debugging - kyo_ago</h2>

<ul>
<li><a href="http://www.slideshare.net/dynamis/firefox-devtools/39" title="Firefox DevTools">Firefox DevTools</a></li>
<li>FirefoxのTime-Travelデバッグがくる?</li>
<li>ブレークポイント貼って戻して、再現するデバッグ</li>
</ul>

<h2 id="electron-kyo_ago">Electron - kyo_ago</h2>

<ul>
<li>Electronのアプリに対してJavaScriptなどをinjectしたい</li>
<li>ブラウザのウェブサイドはユーザ側からいじれる</li>
<li>Electronアプリはいじれなくて不便</li>
</ul>

<hr>

<h2 id="イベント用の名札シート印刷アプリのcss-yoshiko">イベント用の名札シート印刷アプリのCSS - yoshiko</h2>

<ul>
<li><a href="http://yoshiko.hatenablog.jp/entry/your-name">イベント用の名札シート印刷アプリ「参加者の名は。」を作った - エンジニアをリングする</a></li>
<li><a href="https://yoshiko-pg.github.io/your-name/">参加者の名は。- Name cards generator for events</a></li>
<li>CSSで微妙にはみ出る表現の話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">A4サイズにしつつ、少し常にはみ出すようなCSSを書いた話 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/zZocQrChZq">https://t.co/zZocQrChZq</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823508811914756096">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">CSSで固定比率のスライド <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/R8jEe0PBh8">https://t.co/R8jEe0PBh8</a></p>&mdash; よしこ (@yoshiko_pg) <a href="https://twitter.com/yoshiko_pg/status/823516169143365633">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">::beforeはその要素の中の先頭、::afterはその要素の中の最後。<br>つまり疑似要素は中にくる <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823510075260026882">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>疑似要素とmarginが親の横幅を元にする仕様を使った固定比率の話</li>
</ul>

<hr>

<h2 id="modern-javascript概観、そしてelectronへ-taichi"><a href="http://blog.satotaichi.info/modern-javascript_201701/" title="Modern JavaScript概観、そしてElectronへ">Modern JavaScript概観、そしてElectronへ</a> - taichi</h2>

<ul>
<li>皆がよくハマるところを防ぐコードを書いていくとフレームワークは汚くなる</li>
<li>Angular 2、Vue1, 2はコードがキレイ</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「食べられる泥」 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; Local Proxy (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/823518103015301121">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="その他">その他</h2>

<ul>
<li>Dart</li>
<li>rubyのsassは<a href="https://github.com/sass/dart-sass" title="dart-sass">dart-sass</a>になった

<ul>
<li><a href="http://blog.sass-lang.com/posts/1022316-announcing-dart-sass" title="Announcing Dart Sass « Sass Blog">Announcing Dart Sass « Sass Blog</a></li>
</ul></li>
<li>Google社内での再熱</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Google内部でDartはかなり人気があるし、今でも2か月に一回はリリースされている。確かに公式サイトを見ると、次世代のAdWordsはDartで作られたとある。 <a href="https://t.co/2bKYmskevO">https://t.co/2bKYmskevO</a> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; 太一 (@ryushi) <a href="https://twitter.com/ryushi/status/823541009749422082">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">DartはHaxeの立ち位置を目指している? <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823516011584331776">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>DartのStrongModeは極限まで型推論を頑張るモード

<ul>
<li>V8の<a href="https://github.com/v8/v8/wiki/Experiments%20with%20Strengthening%20JavaScript#strong-mode" title="Strong Mode">Strong Mode</a>とはまた異なるもの</li>
</ul></li>
<li>Dart Dev Compilerがでない

<ul>
<li><a href="http://qiita.com/laco0416/items/04314d034d335bc620ff" title="Dart SDK Roadmapの進捗状況を確認する - Qiita">Dart SDK Roadmapの進捗状況を確認する - Qiita</a></li>
<li><a href="https://github.com/dart-lang/sdk/tree/master/pkg/dev_compiler" title="sdk/pkg/dev_compiler at master · dart-lang/sdk">sdk/pkg/dev_compiler at master · dart-lang/sdk</a></li>
</ul></li>
</ul>

<hr>

<h2 id="最近やったこと-t_wada">最近やったこと - t_wada</h2>

<ul>
<li><a href="https://github.com/unassert-js" title="unassert-js">unassert-js</a></li>
<li>organizationになった</li>
<li>power-assertの :star: 200ぐらい増えた

<ul>
<li>中国の人達が見つけたため</li>
</ul></li>
<li>alibabaとか最近OSSでも活発

<ul>
<li><a href="https://github.com/alibaba/rax" title="alibaba/rax: A universal React-compatible render engine.">alibaba/rax: A universal React-compatible render engine.</a></li>
</ul></li>
<li>chai to assert</li>
<li><a href="https://github.com/twada/chai-to-assert" title="twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert">twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert</a></li>
<li>元は<a href="https://github.com/power-assert-js/power-assert/issues/74" title="any tool to migrate `should/expect` code to `power-assert`? · Issue #74 · power-assert-js/power-assert">any tool to migrate <code>should/expect</code> code to <code>power-assert</code>? · Issue #74 · power-assert-js/power-assert</a>のIssue</li>
<li>chatの構文を調べてる

<ul>
<li>結構凶悪</li>
</ul></li>
<li>ランタイムに型をチェックして分岐している部分がでてくる</li>
<li>静的にはわからないため変換が難しい</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// simple referencing</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>

<span class="c1">// deep referencing</span>
<span class="kd">var</span> <span class="nx">deepObj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">green</span><span class="o">:</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;matcha&#39;</span> <span class="p">}</span>
  <span class="p">,</span> <span class="nx">teas</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;chai&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;konacha&#39;</span> <span class="p">}</span> <span class="p">]</span>
<span class="p">};</span>

<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;green.tea&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[1]&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[2].tea&#39;</span><span class="p">,</span> <span class="s1">&#39;konacha&#39;</span><span class="p">);</span>
</code></pre></div>
<ul>
<li><a href="http://chaijs.com/api/bdd/#method_property">http://chaijs.com/api/bdd/#method_property</a></li>
<li>wow</li>
<li>変換には<a href="https://github.com/facebook/jscodeshift" title="facebook/jscodeshift: A JavaScript codemod toolkit.">facebook/jscodeshift: A JavaScript codemod toolkit.</a>を使ってる

<ul>
<li><a href="https://github.com/substack/node-falafel" title="substack/node-falafel: transform the ast on a recursive walk">substack/node-falafel: transform the ast on a recursive walk</a>に近いところもある</li>
</ul></li>
<li>Reactのマイグレーションツールなどでも使われてる

<ul>
<li>フレームワーク側がマイグレーションをするツールとして提供するケース</li>
</ul></li>
<li>Assertionツール同士の変換ツールが色々有る</li>
<li>2週ぐらいすると必要なものが残る</li>
</ul>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 

</feed>
