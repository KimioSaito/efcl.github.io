<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2017-07-18T11:00:13+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>JavaScriptのライブラリを徐々にTypeScriptに移行する</title>
   <link href="http://efcl.info/2017/07/17/JavaScript-to-TypeScript/"/>
   <updated>2017-07-17T22:27:00+09:00</updated>
   <id>http://efcl.info/2017/07/17/JavaScript-to-TypeScript</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>というライブラリは元々JavaScript(+Babel)で書かれていましたが、今年の2月に<code>src/</code>下のソースコードはTypeScriptに移行しました。</p>

<p>その時のコミットログは次のPRに残っているため、コミットログを1コづつ見ていけばどのように行われていったが分かると思います。</p>

<p><a href="https://github.com/almin/almin/pull/68/commits"><img src="http://efcl.info/wp-content/uploads/2017/07/17-1500298209.png" alt="コミットログ"></a></p>

<ul>
<li><a href="https://github.com/almin/almin/pull/68" title="Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin">Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin</a></li>
</ul>

<p>この時取った方法は大まかに次のような手順でした</p>

<h2 id="src-の-typescript化"><code>src/</code> の TypeScript化</h2>

<ol>
<li>Babel -&gt; JS(js -&gt; js)だったものをTypeScript -&gt; Babel -&gt; JSに<a href="https://github.com/almin/almin/pull/68/commits/7afc5a9d5ed2aa2f45da497f07c881a8c13767f6">ビルドスクリプトを変更</a>

<ul>
<li>TypeScriptは<code>target</code>を<code>esnext</code>にすることで単純に型を取り除くだけの変換にする</li>
<li>ES2015 -&gt; ES5を実際にやるのは既存のBabelのまま</li>
<li>空のtsファイルを一つおいて実際にコンパイルが通るかを検証</li>
</ul></li>
<li><a href="https://github.com/almin/almin/pull/68/commits/721d9fec6066fdc4b091b851f962c1d3ef60ace9">既存のテストを1で変換したソースで動くようにパスを変える</a></li>
<li><a href="https://github.com/almin/almin/pull/68/commits/d83ccc11cf69f807e99b54add0de7ba469953cfb">1つ</a>づつ<code>.js</code>を<code>.ts</code>へ<a href="https://github.com/almin/almin/pull/68/commits/27520ff7eecb834870d2095d6050e33983cefd06">変換</a>していく

<ul>
<li>一時的に型が解決できないものは<code>any</code>にして後から型を直す</li>
<li>コンパイルが通ってテストが通るなら動作的に問題ない</li>
<li>実際に変換後のリリースではこれに起因するバグはなかったと思います</li>
<li><a href="http://efcl.info/2017/03/08/almim0.10/" title="Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch">Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch</a></li>
</ul></li>
</ol>

<p>という手順でJavaScript to TypeScriptを行いました。
この時の変更では、<code>test/</code>下のテストファイルはJavaScriptのままでした。</p>

<p>テストの方も複雑なケースが色々増えてきたので、TypeScriptに移行したいなーと思って最近移行できる環境を作りました。</p>

<h2 id="test-のtypescript化"><code>test/</code> のTypeScript化</h2>

<p><code>src/</code>下はまとめて移行するスタイルでしたが、<code>test/</code>下は徐々に必要なタイミングで移行できるような形にしています。</p>

<p>テストコードは<code>src/</code>下とは違い、テストコード同士が互いに依存することはないため、1つのテストファイルごとに移行していけるはずです。</p>

<p>そのため、<code>src/</code>のやり方とは異なりTypeScriptの<code>allowJs</code>機能を使って移行しています。
次のPRで移行した手順が見られます(試行錯誤したのでキレイなコミットではない)</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/232" title="test(almin): setup TypeScript testing env by azu · Pull Request #232 · almin/almin">test(almin): setup TypeScript testing env by azu · Pull Request #232 · almin/almin</a></li>
</ul>

<p>実際にまとめると次のような方法で移行しています。</p>

<ol>
<li><code>test/</code>以下にテスト用の<a href="https://github.com/almin/almin/blob/8a52b440b68693151b589415825fd6a26ebb6ada/packages/almin/test/tsconfig.json"><code>tsconfig.json</code></a>を追加する

<ul>
<li><code>src/</code>用のコンパイル設定を<code>&quot;extends&quot;: &quot;../tsconfig.json&quot;</code>で継承し、<code>&quot;allowJs&quot;: true</code>の設定を追加したものを利用</li>
<li><code>&quot;allowJs&quot;: true</code>にすることで<code>.js</code>もTypeScriptがコンパイルできるようになる</li>
<li><code>src/**/*</code>と<code>test/**/*</code>をincludesし、テスト向けにテストコードとソースコードを一緒にコンパイルする</li>
<li>コンパイル結果、 <code>src</code>は<code>lib/src</code>へ、 <code>test/</code>は<code>lib/test</code>へ出力する</li>
</ul></li>
<li>テストファイルが<code>import {Store} from &quot;../lib/&quot;</code>のソースコードをみているのを、<code>import {Store} from &quot;../src/&quot;</code>のソースコードを見るようにする

<ul>
<li>コンパイル前は<code>src/*.ts</code>を見るが、コンパイル後は<code>lib/src/*.js</code>を見ることになる</li>
<li>出力先は<code>lib/{src,test}/</code>となっていて、<code>lib/test</code>から<code>../src</code>を見ると<code>lib/src</code>をみる状態を作れる</li>
<li>これでコンパイル結果は全てただのJSなので、後は普通にmochaなどでJavaScriptのテストとして<code>lib/test</code>を実行する</li>
</ul></li>
<li>テストの実行前に<code>test/tsconfig.json</code>を使ってコンパイルする

<ul>
<li><code>&quot;test&quot;: &quot;npm run build:test &amp;&amp; npm run test:js&quot;</code>という感じ</li>
</ul></li>
</ol>

<p><code>test/tsconfig.json</code>:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;extends&quot;</span><span class="p">:</span> <span class="s2">&quot;../tsconfig.json&quot;</span><span class="p">,</span>
  <span class="nt">&quot;compilerOptions&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;allowJs&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;declaration&quot;</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">},</span>
  <span class="nt">&quot;include&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;../src/**/*&quot;</span><span class="p">,</span>
    <span class="s2">&quot;./**/*&quot;</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p><code>./tsconfig.json</code>に<code>&quot;rootDir&quot;: &quot;./&quot;,</code>を設定しておけば、テスト用と普段の設定で出力先が同じになる。</p>

<p>これで<code>.ts</code>と<code>.js</code>のテストファイルが混在している状態でもテストが実行できるので、必要なタイミングで<code>.js</code>を<code>.ts</code>に変更していけます。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/248" title="test(almin): cleanup by azu · Pull Request #248 · almin/almin">test(almin): cleanup by azu · Pull Request #248 · almin/almin</a></li>
</ul>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="ja" dir="ltr">alminのテスト TypeScriptに移行できる環境作ってあったけど、TypeScriptって(というかWebStormって)こんな混在してる状態でもちゃんと動くんだ<br>(TypeScript的にはAllowJSしてる、WebStorm普通に補完効いてて面白い) <a href="https://t.co/OUBcmOYjZv">pic.twitter.com/OUBcmOYjZv</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/886935717393215489">July 17, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>またすべてのテストがTypeScriptにはなってないのでコントリビュート待ってます。
基本的には<code>.ts</code>にして型エラーを潰していくだけの作業だと思います。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/144" title="Convert test/ to TypeScript · Issue #144 · almin/almin">Convert test/ to TypeScript · Issue #144 · almin/almin</a></li>
</ul>

<p>すべてのテストが<code>.ts</code>になった後は、<a href="https://github.com/TypeStrong/ts-node" title="ts-node/register">ts-node/register</a>などを使ってruntime hookで変換できるので<code>npm run build:test</code>が必要なくなります。</p>

<h2 id="おわり">おわり</h2>

<p><code>src/</code>のように依存関係があるものは<a href="https://github.com/almin/almin/pull/68">一気に</a>TypeScriptへ変換した方が良いです。</p>

<p>一方、<code>test/</code>のようにそれぞれのファイルが独立しているものは、<code>--allowJs</code>を使うことで既存のJavaScriptを混ぜた状態でTypeScriptへ移行できるようになりました。</p>

<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" title="Compiler Options · TypeScript">Compiler Options · TypeScript</a></li>
</ul>

<p>最近だと<code>--checkJs</code>と<code>--allowJs</code>を使うことでJavaScriptファイルに対してJSDocを使ったType Checkができるようになっています。
これを上手く使えば、もっと緩やかに移行することができるかもしれません(JSDoc全部のパターン対応してないので今の所限定的)</p>

<ul>
<li><a href="https://blog.mariusschulz.com/2017/06/16/typescript-2-3-type-checking-javascript-files-with-checkjs" title="TypeScript 2.3: Type-Checking JavaScript Files with --checkJs | Marius Schulz">TypeScript 2.3: Type-Checking JavaScript Files with --checkJs | Marius Schulz</a></li>
<li><a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files" title="Type Checking JavaScript Files · Microsoft/TypeScript Wiki">Type Checking JavaScript Files · Microsoft/TypeScript Wiki</a></li>
</ul>

<p>今回はライブラリだったので、テストカバレッジがかなり高い状態でした。
なのでテストがある程度保証してくれるので、一気にやっても壊れにくい状態でした。</p>

<p>UIなどテストがしにくい部分を含む実際のアプリケーションに後から型付けしていく場合は、次の記事などが参考になるかもしれません。</p>

<ul>
<li><a href="https://www.reaktor.com/blog/refactoring-30000-lines-js-types/" title="Refactoring 30000 lines of JS with types - Reaktor.com">Refactoring 30000 lines of JS with types - Reaktor.com</a></li>
<li><a href="https://slack.engineering/typescript-at-slack-a81307fa288d" title="TypeScript at Slack – Several People Are Coding">TypeScript at Slack – Several People Are Coding</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Array.prototypeのImmutable版メソッドを個別のパッケージで使えるものを作った</title>
   <link href="http://efcl.info/2017/07/11/immutable-array/"/>
   <updated>2017-07-11T20:03:00+09:00</updated>
   <id>http://efcl.info/2017/07/11/immutable-array</id>
   <content type="html"><![CDATA[ <p>JavaScriptの配列には破壊的なものと非破壊的なものが混在しています。
例えば<code>Arrray.prototype.push</code>は破壊的ですが、<code>Array.prototype.concat</code>は結合した新しい配列を返すので非破壊的です。
破壊的か非破壊的かは、基本的には覚えることでしか区別できません。</p>

<p>配列のメソッドの使い方については次の記事やjs-primerで今書いています。</p>

<ul>
<li><a href="http://efcl.info/2016/10/11/array-patterns/" title="JavaScriptの配列のパターン | Web Scratch">JavaScriptの配列のパターン | Web Scratch</a></li>
<li><a href="https://asciidwango.github.io/js-primer/basic/array/" title="配列 · JavaScriptの入門書 #jsprimer">配列 · JavaScriptの入門書 #jsprimer</a></li>
</ul>

<p>それらの破壊的メソッドの非破壊的なバージョン - Immutableバージョンのライブラリを作成しました。</p>

<ul>
<li><a href="https://github.com/azu/immutable-array-prototype" title="azu/immutable-array-prototype: A collection of Immutable Array prototype methods(Per method packages).">azu/immutable-array-prototype: A collection of Immutable Array prototype methods(Per method packages).</a></li>
</ul>

<h2 id="インストール">インストール</h2>

<p>すべてのImmutable版をまとめたものは次のパッケージでインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install @immutable-array/prototype
</code></pre></div>
<p>また、<code>push</code>のImmutable版だけ欲しいなどもあると思うので、それぞれのメソッド毎に別々のパッケージとしてインストールすることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install @immutable-array/pop
npm install @immutable-array/push
npm install @immutable-array/shift
npm install @immutable-array/unshift
npm install @immutable-array/sort
npm install @immutable-array/reverse
npm install @immutable-array/fill
npm install @immutable-array/splice
npm install @immutable-array/copy-within
</code></pre></div>
<p>対応してるメソッドは次の通りです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/07/11-1499771177.png" alt="method table"></p>

<p>それぞれのメソッドの使い方は第一引数が対象の配列となるだけで他の引数や挙動はECMAScriptに合わせています。</p>

<p>例えば<code>reverse</code>なら次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span>
    <span class="nx">reverse</span>
<span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;@immutable-array/prototype&quot;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">reversedArrray</span> <span class="o">=</span> <span class="nx">reverse</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span>
</code></pre></div>
<p>またよくある<a href="https://github.com/azu/immutable-array-prototype#related">Immutableライブラリのように</a>独自のImmutableメソッドは追加していません。
あくまで、JavaScriptの配列における破壊的なメソッドの非破壊的なバージョンを提供するという立ち位置にしています。</p>

<h2 id="作った理由">作った理由</h2>

<p>すでにいくつか同じ試みはありますが、このmonorepoな<a href="https://github.com/azu/immutable-array-prototype#benchmarks" title="immutable-array-prototype">immutable-array-prototype</a>を作った理由としては次の通りです。</p>

<ul>
<li>TypeScriptに対応してるものがない</li>
<li><code>Array#fill</code>など新しいメソッドに対応していない</li>
<li><code>Array#splice</code>のImmutable実装が正しくできているものがない…

<ul>
<li><a href="https://github.com/azu/immutable-array-prototype/blob/d9654c9d23178df7a4bc417d67341478d9292193/packages/splice/test/splice-test.ts#L97-L111">この<code>-1</code>`をindexに受け取るテストケース</a>が殆どのライブラリで落ちます…</li>
</ul></li>
<li>独自のメソッドを追加しているケースが多い

<ul>
<li><code>update()</code>など独自のメソッドはいらない</li>
</ul></li>
</ul>

<p><a href="https://github.com/azu/immutable-array-prototype#benchmarks" title="immutable-array-prototype">immutable-array-prototype</a>は基本的にドキュメントを見ないで<code>import</code>したら普通に使えるようにすることが目的なので、使い方はネイティブのArrayと同じです。</p>

<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/azu/immutable-array-prototype#benchmarks">Benchmark</a>(参考値)を見る限り、このImmutable版で配列を作り直してもそこまで急激な差はでませんでした。</p>

<p>原理的にネイティブのメソッドのステップ + コピーなので、ネイティブのものより早くなりません。(勝ってる部分があるように見えますが恐らくそれは誤差です。)
Lodashのように、エッジケースのステップを省略して早くすることは目的ではありません</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Native `Array.prototype`          |    @immutable-array
&gt; node src/array.js |                  &gt; immutable-array.js
                                  |
# pop 200000 times               &gt;&gt;&gt;   # pop 200000 times
ok ~330 ms (0 s + 330397151 ns)  &gt;&gt;&gt;   ok ~267 ms (0 s + 267348617 ns)
                              |
# push 200000 times              &gt;&gt;&gt;   # push 200000 times
ok ~169 ms (0 s + 168738061 ns)  &gt;&gt;&gt;   ok ~141 ms (0 s + 140502324 ns)
                              |
# shift 200000 times             &lt;&lt;&lt;   # shift 200000 times
ok ~296 ms (0 s + 295892983 ns)  &lt;&lt;&lt;   ok ~419 ms (0 s + 418852725 ns)
                              |
# unshift 200000 times           &lt;&lt;&lt;   # unshift 200000 times
ok ~51 ms (0 s + 50817590 ns)    &lt;&lt;&lt;   ok ~191 ms (0 s + 191329502 ns)
                              |
# sort 2000 times                &gt;&gt;&gt;   # sort 2000 times
ok ~933 ms (0 s + 932551400 ns)  &gt;&gt;&gt;   ok ~611 ms (0 s + 610748601 ns)
                              |
# reverse 200000 times           &gt;&gt;&gt;   # reverse 200000 times
ok ~555 ms (0 s + 554921645 ns)  &gt;&gt;&gt;   ok ~455 ms (0 s + 455068191 ns)
                              |
# fill 200000 times              &gt;&gt;&gt;   # fill 200000 times
ok ~782 ms (0 s + 782159758 ns)  &gt;&gt;&gt;   ok ~699 ms (0 s + 698677543 ns)
                              |
# splice 200000 times            &lt;&lt;&lt;   # splice 200000 times
ok ~287 ms (0 s + 286547242 ns)  &lt;&lt;&lt;   ok ~391 ms (0 s + 391294720 ns)
                              |
# copyWithin 200000 times        &lt;&lt;&lt;   # copyWithin 200000 times
ok ~237 ms (0 s + 236837575 ns)  &lt;&lt;&lt;   ok ~275 ms (0 s + 275267401 ns)
                              |
all benchmarks completed         &gt;&gt;&gt;   all benchmarks completed
ok ~3.64 s (3 s + 638863405 ns)  &gt;&gt;&gt;   ok ~3.45 s (3 s + 449089624 ns)
</code></pre></div>
<p>今のReactやRedux、Alminなどを使ってアプリケーションを書くと、オブジェクトはImmutableでやることが多いです。</p>

<p>ある程度の規模のJavaScriptアプリケーションを作ったときに、ドメイン層やStateをImmutableにすることがボトルネックになることはそこまで多くありません(巨大なリストとは別ですが)
Reactなどで作るアプリケーションは、配列などを作るよりも、値を比較する回数の方が圧倒的に多くなるため、作るコストよりも比較するコストを気にすることが多いです。</p>

<p>次のスライドでもそういう話をしてます。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html" title="Faao - ドメイン駆動設計で作るGitHub Issue Client -">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a></li>
</ul>

<p>Immutable.jsのような速度も兼ね備えたものを使うと便利ですが、通常の配列とは使い方やサイズも大きいので使うのに躊躇します。
サイズが小さくて、配列と同じ使い方ができるものがほしかったので作りました。</p>

<p>あとTypeScriptの型定義ファイルも入っています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>#teppeis_sushi でクライアントサイドDDDについて発表した</title>
   <link href="http://efcl.info/2017/07/04/teppeis_sushi/"/>
   <updated>2017-07-04T23:26:00+09:00</updated>
   <id>http://efcl.info/2017/07/04/teppeis_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?f=realtime&amp;q=%20%23teppeis_sushi" title="#teppeis_sushi">#teppeis_sushi</a>というイベントで、<a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html" title="Faao - ドメイン駆動設計で作るGitHub Issue Client -">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a>という話をしました。</p>

<p><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html"><img src="http://efcl.info/wp-content/uploads/2017/07/05-1499182533.png" alt="image"></a></p>

<p>Electronやブラウザなどで動く<a href="https://github.com/azu/faao" title="faao">faao</a>というGitHubクライアントを書いていてそれの技術的な話です。
クライアントサイドでDDDを取り入れた設計になっていて、その設計や規約の作り方やそれを守る方法についての話をしました。</p>

<ul>
<li><a href="https://github.com/azu/faao" title="azu/faao: Faao is a GitHub issue/pull-request client on Electron.">azu/faao: Faao is a GitHub issue/pull-request client on Electron.</a></li>
</ul>

<p><a href="https://leanpub.com/livingdocumentation" title="Living Documentation by… by Cyrille Martraire [PDF/iPad/Kindle]">Living Documentation by design, with Domain-Driven Design by Cyrille Martraire [PDF/iPad/Kindle]</a>という無料から買える書籍では、ドキュメントとコードを同じ速度で成長させていくためにはドキュメントに対しても自動化が必要であるなど(コミュニケーションの話なども)が書かれています。</p>

<p>それらを参考にして、レイヤーの違反を自動的に見つけたり、<a href="https://azu.github.io/faao/meta/use-case.html" title="Faao - UseCase architecture">Faao - UseCase architecture</a>のようにコードからユースケースの図を自動生成したりなど、モデリングへのフィードバックループができるようにしているという話です。</p>

<hr>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 前回も台風でしたね</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882191585122820096">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="http://efcl.info/2016/07/14/teppeis_sushi/" title="#teppeis_sushi に参加した | Web Scratch">#teppeis_sushi に参加した | Web Scratch</a></li>
</ul>

<hr>

<h2 id="vue-jsでssr">Vue.jsでSSR</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="cs" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> vue.jsでSSR - k2wanko</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882192039919599616">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://firebase.google.com/?hl=ja" title="Firebase">Firebase</a></li>
<li>lambdaのようなものが増えた</li>
<li>Node.jsが動くのでVue.jsのサーバサイドレンダリングができる</li>
<li><a href="https://vuejs.org/v2/guide/ssr.html" title="Server-Side Rendering — Vue.js">Server-Side Rendering — Vue.js</a></li>
<li><a href="https://firebase.google.com/docs/database/?hl=ja" title="Firebase Realtime Database  |  Firebase">Firebase Realtime Database  |  Firebase</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> Firebase裏がわにfastlyがいる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882194840183689216">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="最近electronでローカルプロキシを作っていてこまったこと-kyo_ago">最近Electronでローカルプロキシを作っていてこまったこと - kyo_ago</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> Reduxを使ってStateとドメインと二重管理してる感じ。DDDの恩恵をあんまり受けてない感じする</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882195657447972864">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>クライアントとサーバで両方データがある感じ</li>
<li>クライアントのデータはサーバのキャッシュにすぎないので嘘のデータに見える</li>
<li>サーバへ送信するまでの一時的なデータであるならばそれは無理してモデル化するべきなのか</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> クライアント側のデータだけで動くものなら意味があるのかもしれない。<br>クライアントサイドに嘘のデータを持っている感じる。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882195906057183232">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>クライアントのデータはキャッシュでしかないならば、サーバに比べてDDDの魅力がオチている</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> ちょうどいいところ落とし所を見つけるの重要なのでは by TDDのDDD談</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882196495218352128">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>ドメインの共有はIsomorphicで辞めたほうがいいかも</li>
<li>ドメインはクライアントとサーバで異なる</li>
<li>サーバから見たドメインは所有という概念がなかったりする</li>
<li>クライアントとサーバのドメインはアクターが異なるのでドメインモデルも異なる。 なので、クライアントとサーバで同じドメインモデルを共有することはできないのでは</li>
<li>サーバは「自分が持っている」という概念はないので</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> クラサバ時代のおじさんたち「ようやくその境地にやってきたな」</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882196920440987648">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> ユビキタス言語は共有していいけど、それ以外の共有は難しいのでは</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882197484763619329">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="大規模フロントエンドのddd-83">大規模フロントエンドのDDD - 83</h2>

<ul>
<li>8人でやってるフロントエンドのチーム</li>
<li>スキルレベルがバラバラ感</li>
<li>Angular1だったものを2にする設計を始めた</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">「Just Angular！」 <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; Local Proxy (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/882198460228706304">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>設計を担当して質問を受け付けるようになった</li>
<li>些細な質問なども殺到して個人が開発する時間がなくなった</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> レビューが一人に集中。<br>@ 83</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882198608082108416">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>質問ルームをslackチャットに作ってそこでやってもらったら質問が分散した</li>
<li>サーバのAPIを作ってる人とクライアントサイドを作って流人は別。</li>
<li>コンテキストがそもそも違う。 そこで腐敗防止層としてのDDDを取り入れる</li>
<li>サーバから渡ってきたものをリマップしてクライアント側に主導権を持てるように</li>
<li>AngularはViewは決まってるけど、設計は別に決まってない。</li>
<li>無理難題が振ってくることがあるので、ngrxじゃなくて普通にrxをベースにして開発した</li>
<li>モデリングをちゃんとやることでコピペコードは減る</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 「DDDとCQRSやってるよーいうと引かれる」</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882200748087427072">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>1画面を作るのに7 APIを叩く</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 「BFFを作ればいいのでは」</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882201176560721921">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="faao-ドメイン駆動設計で作るgithub-issue-client-azu"><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html" title="Faao - ドメイン駆動設計で作るGitHub Issue Client -">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a> - azu</h2>

<ul>
<li>クライアントサイドでTypeScript + <a href="https://github.com/almin/almin" title="Almin">Almin</a> + DDDでの開発</li>
<li>Living Documentationについて</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">いいドキュメントは自動化されてなければならない <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; OKUNOKENTARO (@armorik83) <a href="https://twitter.com/armorik83/status/882205550963851270">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">最も良いドキュメントは必要になるまで読まなくて良いドキュメント <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/882206099222482944">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ESLintは良いドキュメント、エラーになるまで読まなくて良い <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/882206293204664320">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="本の読み方-t_wada">本の読み方 - t_wada</h2>

<ul>
<li>本は未来方向には書けなくて、過去方向にしか書けない</li>
<li>技術書を読むときは発刊された年数をちゃんと見る</li>
<li>特に翻訳本はやたらと古い場合がある</li>
<li>DDD本はRailsが出る前に書かれたけど、翻訳はRailsのずっと後</li>
<li>絶版ショック</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">(トッパン|ピアソン)ショック、単に絶版、様々な要因でOOA/OODの書籍がほぼ死滅し、訳書が出るタイミングが遅かったDDD本だけがオーパーツのような存在になった結果、日本ではDDD ≒ OOA/OODになってしまったという奇妙な状況の背景の話をした <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/882241157639487488">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="rx6の話-laco">Rx6の話 - laco</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> RxJS 6で何が変わるのかの話 <a href="https://t.co/XtDXct5F0m">https://t.co/XtDXct5F0m</a></p>&mdash; Laco (@laco0416) <a href="https://twitter.com/laco0416/status/882213465598771200">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> bufferの挙動がfindのバグ経由でBreaking Change  &quot;rxjs/CHANGELOG.md at 6.0.0-alpha.0 · ReactiveX/rxjs&quot;  <a href="https://t.co/BXIRrMQmE0">https://t.co/BXIRrMQmE0</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882212815339012096">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>バグ修正によるBreaking Change</li>
<li>Rxを拡張してるユーザーには影響がある</li>
</ul>

<h2 id="api-aiの話-vvkame">api.aiの話 - vvkame</h2>

<p>聞けてなかった</p>

<hr>

<h2 id="2017年のフォームの話-会長">2017年のフォームの話 - 会長</h2>

<blockquote>
<p>スライド: <a href="https://speakerdeck.com/yosuke_furukawa/2017nian-falseformfalsehua" title="2017年のformの話 // Speaker Deck">2017年のformの話 // Speaker Deck</a></p>
</blockquote>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 2017年のフォームの話 - 会長</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882214321186521088">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>Reactでのformの値の管理 unctrolledとcontrolled</li>
<li>FBとしてはcontrolledで管理して</li>
<li>ちょっと複雑なフォームをやるとバリデーションが複雑化する =&gt; controlled推奨</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> jQueryなどの昔ながらのバリデーションライブラリはunctrolledで作られてる。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882214853485617152">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> ちょっとまって!<br>2017年 いろんな所にstateがある。<br>どこにstateを保存するのが正しいの?</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882215092464398336">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>React/Redux/永続化されたState</li>
<li>どこで何を管理する?</li>
<li>Twitterはハイブリット的な構造

<ul>
<li>入力中はコンポーネント、適宜Reduxへ</li>
</ul></li>
<li>ユーザー入力中に外からpropsで値がすり替わるとIMEなどで問題が起きるため</li>
<li>処理速度的にコンポーネントに閉じたほうが良いこともある</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 再生時間みたいなMediaを考えると処理速度的にはコンポーネントで描画は行って、ドメインに定期的に状態を反映する形</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882216123596390400">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="es-class-fieldの話-teppeis">ES class fieldの話 - teppeis</h2>

<blockquote>
<p>スライド: <a href="https://gist.github.com/teppeis/06c2b7e97c7d67684c3d3c94159893f3" title="ES Class Fieldsのプライベートフィールドがハッシュな変態記法なのは何でなんだぜ？">ES Class Fieldsのプライベートフィールドがハッシュな変態記法なのは何でなんだぜ？</a></p>
</blockquote>

<ul>
<li><a href="https://github.com/tc39/proposal-private-fields" title="tc39/proposal-private-fields: A Private Fields Proposal for ECMAScript">tc39/proposal-private-fields: A Private Fields Proposal for ECMAScript</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> Symbolでやれることをsyntaxでやる意味がない。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882217632459444228">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>hard protectionは言語としてできることを目指すべき</li>
<li>Reflectとかで闇雲見られるようにはしない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 見えちゃうとお前ら使うだろ。使えないようにするのが正義</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882219462954336257">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h1 id="flutterの話">flutterの話</h1>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「Flutterを知らないおじさん達へ」 <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; Local Proxy (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/882221826402734082">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">いつのまにかDartの話にすり替えるあくろすあざとい。 <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; OKUNOKENTARO (@armorik83) <a href="https://twitter.com/armorik83/status/882221967205519361">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://flutter.io/web-analogs/" title="HTML/CSS Analogs in Flutter - Flutter">HTML/CSS Analogs in Flutter - Flutter</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">OS再実装したりブラウザ再実装したり…。 <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; OKUNOKENTARO (@armorik83) <a href="https://twitter.com/armorik83/status/882222891726544896">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="web-packaging-jxck">Web Packaging - jxck</h2>

<ul>
<li><a href="https://tools.ietf.org/html/draft-yasskin-dispatch-web-packaging-00" title="draft-yasskin-dispatch-web-packaging-00 - Web Packaging">draft-yasskin-dispatch-web-packaging-00 - Web Packaging</a></li>
<li><a href="http://asnokaze.hatenablog.com/entry/2017/07/02/171513" title="Webページを丸ごとパッケージングする Web Packagingとは - ASnoKaze blog">Webページを丸ごとパッケージングする Web Packagingとは - ASnoKaze blog</a></li>
<li>ネットワークが遅いところで物理的p2pでサイトを見てるケース</li>
<li>mhtmlみたいな</li>
<li>データ・フォーマットなのでIETFへ</li>
<li>ギリギリにGoogleから投げつけられてきた(いつもの)</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> ネットワークが悪い国ではmhtmlをsdカードでやり取りしてる。<br>もっとカジュアルに共有できるようにしたい</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882225567365386241">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>dispatchというWGで議論されて、どこで議論するべきなのかを決める</li>
<li>WGができたら結構すごいことになるかも</li>
<li>Service Workerの横つながりみたいな話がでてくるかも</li>
<li>次回のプラハ会議に注目</li>
</ul>

<hr>

<h2 id="その他">その他</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 未だに2年前と同じ話をしてる es module</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/882228287862210560">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>Nodeの進捗がよくわからない</li>
<li>CSPとバグとお金</li>
</ul>

<hr>

<h2 id="おわり">おわり</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Big boss is watching you <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> <a href="https://t.co/Yxz03NerJq">pic.twitter.com/Yxz03NerJq</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/882229938232754177">July 4, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>おめでとうございます</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>書いた文章をレビューしてGitHubにIssueを切るためのGitBookプラグイン</title>
   <link href="http://efcl.info/2017/05/29/gitbook-plugin-github-issue-for-review/"/>
   <updated>2017-05-29T19:50:00+09:00</updated>
   <id>http://efcl.info/2017/05/29/gitbook-plugin-github-issue-for-review</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/gitbook-plugin-github-issue-feedback" title="gitbook-plugin-github-issue-feedback">gitbook-plugin-github-issue-feedback</a>という<a href="https://github.com/GitbookIO/gitbook" title="GitBook">GitBook</a>のプラグインを書きました。</p>

<p>次のGIFを見るとどんなものか分かるかもしれません。</p>

<p><a href="http://www.giphy.com/gifs/3o7btYpgJvLlhkJMfC"><img src="https://media.giphy.com/media/3o7btYpgJvLlhkJMfC/giphy.gif" alt="gif"></a></p>

<p><a href="https://github.com/azu/gitbook-plugin-github-issue-feedback" title="gitbook-plugin-github-issue-feedback">gitbook-plugin-github-issue-feedback</a>はGitBookの右下に<code>Bug Report</code>という雑なボタンを追加します。</p>

<p>このボタンを押すと次のようなことをして該当リポジトリのIssue作成ページを開きます。</p>

<ol>
<li>選択してる範囲の文字列を取得</li>
<li>現在表示してるページの元ソースであるMarkdownを取得</li>
<li>選択してる文字列がMarkdownの何行目にあるかを<a href="https://github.com/azu/position-map-text-to-markdown" title="position-map-text-to-markdown">position-map-text-to-markdown</a>で探索</li>
<li>取得した情報を使ってIssueのbodyを埋めた状態でIssueページを開く</li>
</ol>

<p>次のような感じの情報が入った状態のIssueを作れます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">URL : https://github.com/asciidwango/js-primer/blob/master/source/basic/string/README.md

&gt; `/`を使いエスケープする必要があります。
&gt; [:memo:](https://github.com/asciidwango/js-primer/edit/master/source/basic/string/README.md#L36 &quot;Edit&quot;) &lt;https://github.com/asciidwango/js-primer/blob/master/source/basic/string/README.md#L36&gt;
</code></pre></div>
<ul>
<li><a href="https://github.com/asciidwango/js-primer/issues/243" title="文字列: / （バックスラッシュ） · Issue #243 · asciidwango/js-primer">文字列: / （バックスラッシュ） · Issue #243 · asciidwango/js-primer</a></li>
</ul>

<p>後は内容を少し書いてIssueを作るだけです。</p>

<p>Issueには編集ページへのリンクも入るので、作ったIssueからすぐに修正しやすいです。(<code>#L行数</code>で指定した行数にカーソルがある状態で編集ページを開ける)</p>

<h2 id="インストール">インストール</h2>

<p>GitBookの<code>book.json</code>に設定を追加します。</p>

<p><code>repo</code>には GitHubのリポジトリを<code>/</code>で入れます。
<code>https://github.com/asciidwango/js-primer</code>がリポジトリなら、<code>repo</code>には<code>asciidwango/js-primer</code>を入れます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;gitbook&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=3.0.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Example&quot;</span><span class="p">,</span>
    <span class="nt">&quot;plugins&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&quot;github-issue-feedback&quot;</span>
    <span class="p">],</span>
    <span class="nt">&quot;pluginsConfig&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;github-issue-feedback&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;repo&quot;</span><span class="p">:</span> <span class="s2">&quot;azu/gitbook-plugin-github-issue-feedback&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p>今、JavaScriptの入門書を書いていて半分ぐらいはできてきたので、ちょっとづつ過去の部分をレビューしながら修正もしています。</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a></li>
<li><a href="https://asciidwango.github.io/js-primer/" title="Introduction · JavaScriptの入門書 #jsprimer">Introduction · JavaScriptの入門書 #jsprimer</a> (ウェブ版)</li>
</ul>

<p>GitHubのPRレビューだとMarkdownのままなので、GitBook上で見たときなどに違和感がある部分が見つかることが多いです。
こういう問題を見つけたらすぐにIssueを切れるようにするのために<a href="https://github.com/azu/gitbook-plugin-github-issue-feedback" title="gitbook-plugin-github-issue-feedback">gitbook-plugin-github-issue-feedback</a>を作りました。</p>

<p><a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>のときも同じような仕組みを入れてました。
こういう仕組みがあるとスマートフォンからIssueが簡単に切れるので、Issueだけ先に切っておいて後から直すということがしやすいです。</p>

<ul>
<li><a href="http://efcl.info/2015/01/06/ebook-env/" title="Promise本で取り組んだ電子書籍の開発ツール、CI、継続的リリースについて | Web Scratch">Promise本で取り組んだ電子書籍の開発ツール、CI、継続的リリースについて | Web Scratch</a></li>
</ul>

<p><a href="http://www.giphy.com/gifs/3o7btYpgJvLlhkJMfC"><img src="https://media.giphy.com/media/3o7btYpgJvLlhkJMfC/giphy.gif" alt="gif"></a></p>

<p><a href="https://asciidwango.github.io/js-primer/" title="Introduction · JavaScriptの入門書 #jsprimer">Introduction · JavaScriptの入門書 #jsprimer</a>のサイト上に組み込んであるので、是非バグ/typoを探して報告してみてください。（ついでに直してくれるとさらに嬉しいです。一文字のPRも歓迎です）</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>GitHubのリポジトリをDeprecatedにするスクリプト</title>
   <link href="http://efcl.info/2017/05/22/move-github-repository/"/>
   <updated>2017-05-22T10:02:00+09:00</updated>
   <id>http://efcl.info/2017/05/22/move-github-repository</id>
   <content type="html"><![CDATA[ <p>GitHubのリポジトリを別の場所に移す場合、リポジトリまるごと移動できるなら<a href="https://help.github.com/articles/about-repository-transfers/" title="repository transfers">repository transfers</a>を利用するのが正解です。</p>

<p>しかし、既存のリポジトリをmonorepoの一部として取り込む場合はそのようなことができません。リポジトリの履歴は<a href="https://lernajs.io/" title="Lerna">Lerna</a>などでは<code>lerna import</code>で取り込むことができますが、既に作ったリポジトリからリダイレクトさせることができません。</p>

<p>既存のリポジトリを消してしまうと、既に貼ったリンクなどが404になるためあまり良くありませんし、そのままにしておくと紛らわしいです。</p>

<p>そのため、よく取られるのはリポジトリは空にしてDescriptionなどで移動したことを書いておく手法です。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/05/22-1495415248.png" alt="moved"></p>

<p>これをやる<a href="https://github.com/azu/move-github-repository" title="azu/move-github-repository: Move GitHub repository(Update description &amp;amp;&amp;amp; URL &amp;amp;&amp;amp; default branch).">move-github-repository</a>というツールを書きました。</p>

<h2 id="move-github-repository"><a href="https://github.com/azu/move-github-repository" title="azu/move-github-repository: Move GitHub repository(Update description &amp;amp;&amp;amp; URL &amp;amp;&amp;amp; default branch).">move-github-repository</a></h2>

<p><a href="https://github.com/azu/move-github-repository" title="azu/move-github-repository: Move GitHub repository(Update description &amp;amp;&amp;amp; URL &amp;amp;&amp;amp; default branch).">move-github-repository</a>は、コマンド一発で次のようなことをします。</p>

<ul>
<li>リポジトリのdescription &amp;&amp; homepageを更新する</li>
<li><code>301_moved_permanently</code>ブランチを作る

<ul>
<li>このブランチは移転してことを書いたREADME.mdのみがある</li>
</ul></li>
<li><code>301_moved_permanently</code>をデフォルトブランチにする</li>
</ul>

<p>これによって既存のブランチは維持されるので、リンクなどは切れません。</p>

<h2 id="インストール">インストール</h2>

<p>npmでインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g move-github-repository
</code></pre></div>
<p>GitHubのTokenと更新後に付けたいdescriptionとhomepageを引数に渡して実行できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Usage
  $ GH_TOKEN=xxx move-github-repository --description &quot;[[MOVED]]&quot; --homepage http://example.com/new

Options
  --description -d Description repository
  --homepage -h    New URL

Env
  GH_TOKEN=xxx move-github-repository --description &quot;[[MOVED]]&quot; --homepage http://example.com/new

Examples
  $ GH_TOKEN=xxx move-github-repository --description &quot;[[MOVED]]&quot; --homepage http://example.com/new
</code></pre></div>
<h2 id="サンプル">サンプル</h2>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>をmonorepoに移動させていたので、実際に移動させたリポジトリなどは次のような感じです。</p>

<ul>
<li><a href="https://github.com/textlint/txt-to-ast" title="textlint/txt-to-ast: [CAUTION] This repository is MOVED to monorepo.">textlint/txt-to-ast: [CAUTION] This repository is MOVED to monorepo.</a></li>
<li><a href="https://github.com/textlint/textlint-plugin-text" title="textlint/textlint-plugin-text: [CAUTION] This repository is MOVED to monorepo.">textlint/textlint-plugin-text: [CAUTION] This repository is MOVED to monorepo.</a></li>
<li><a href="https://github.com/textlint/textlint-plugin-markdown" title="textlint/textlint-plugin-markdown: [CAUTION] This repository is MOVED to monorepo.">textlint/textlint-plugin-markdown: [CAUTION] This repository is MOVED to monorepo.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>GitHubのラベルをいい感じにセットアップするツール</title>
   <link href="http://efcl.info/2017/05/17/github-label/"/>
   <updated>2017-05-17T10:23:00+09:00</updated>
   <id>http://efcl.info/2017/05/17/github-label</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/github-label-setup" title="github-label-setup">github-label-setup</a>というGitHubリポジトリのラベルにいい感じのプリセットを追加する自分用のツールを書きました。</p>

<p>次のIssueに追加されるラベルが全部貼ってあります。</p>

<p><a href="https://github.com/azu/github-label-setup/issues/1"><img src="./img/demo.png" alt="demo"></a></p>

<h2 id="install">Install</h2>

<p>npmでインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install @azu/github-label-setup -g
</code></pre></div>
<h2 id="usage">Usage</h2>

<p>基本的にはデフォルトのプリセットがあるので、<code>--token</code>でGitHubのtokenを渡すだけで後は自動でやってくれます。</p>

<p>ラベルを設定したいプロジェクトのディレクトリに移動してコマンドを叩くだけです。
(git remoteのoriginを見ます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Usage
  $ github-label-setup --token xxx

Options

  -h, --help                  output usage information
  -l, --labels &lt;path&gt;         the path or npm packages name to look for the label configuration in. Default: labels.json
  --token &lt;token&gt;  a GitHub access token (also settable with a GITHUB_ACCESS_TOKEN environment variable)
  -d, --dry-run               calculate the required label changes but do not apply them
</code></pre></div>
<p>アクセストークンは<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a>から <code>&quot;repo&quot;</code> scope が有効になったものがあれば良いです。</p>

<p><code>--dry-run</code>オプションを使えば、実際にどういう変更が行われるかを見れるのでまずはそちらで確認してください。</p>

<p>デフォルトのGitHubのラベルやよく使われる似た意味のラベルはマイグレーションしますが、リストにないラベルは単純に消えてしまうので注意が必要です。</p>

<ul>
<li><a href="https://github.com/azu/github-label-setup/blob/master/labels.json" title="github-label-setup/labels.json at master · azu/github-label-setup">github-label-setup/labels.json at master · azu/github-label-setup</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">Fetching labels from GitHub
Changed: the &quot;duplicate&quot; label in the repo is out of date. It will be updated to &quot;duplicate&quot; with color &quot;#ededed&quot;.
Changed: the &quot;help wanted&quot; label in the repo is out of date. It will be updated to &quot;help wanted&quot; with color &quot;#e99695&quot;.
Missing: the &quot;good for beginner&quot; label is missing from the repo. It will be created.
Missing: the &quot;Priority: Critical&quot; label is missing from the repo. It will be created.
Missing: the &quot;Priority: High&quot; label is missing from the repo. It will be created.
Missing: the &quot;Priority: Low&quot; label is missing from the repo. It will be created.
Missing: the &quot;Priority: Medium&quot; label is missing from the repo. It will be created.
Changed: the &quot;invalid&quot; label in the repo is out of date. It will be updated to &quot;Status: Abandoned&quot; with color &quot;#000000&quot;.
Missing: the &quot;Status: Blocked&quot; label is missing from the repo. It will be created.
Missing: the &quot;Status: In Progress&quot; label is missing from the repo. It will be created.
Changed: the &quot;Idea&quot; label in the repo is out of date. It will be updated to &quot;Status: Proposal&quot; with color &quot;#d4c5f9&quot;.
Missing: the &quot;Status: Ready for PR&quot; label is missing from the repo. It will be created.
Missing: the &quot;Status: Review Needed&quot; label is missing from the repo. It will be created.
Changed: the &quot;breaking&quot; label in the repo is out of date. It will be updated to &quot;Type: Breaking Change&quot; with color &quot;#b60205&quot;.
Changed: the &quot;bug&quot; label in the repo is out of date. It will be updated to &quot;Type: Bug&quot; with color &quot;#ee0701&quot;.
Changed: the &quot;documents&quot; label in the repo is out of date. It will be updated to &quot;Type: Documentation&quot; with color &quot;#5319e7&quot;.
Changed: the &quot;enhancement&quot; label in the repo is out of date. It will be updated to &quot;Type: Feature&quot; with color &quot;#1d76db&quot;.
Missing: the &quot;Type: Refactoring&quot; label is missing from the repo. It will be created.
Changed: the &quot;greenkeeper&quot; label in the repo is out of date. It will be updated to &quot;Type: Maintenance&quot; with color &quot;#0e8a16&quot;.
Changed: the &quot;question&quot; label in the repo is out of date. It will be updated to &quot;Type: Question&quot; with color &quot;#cc317c&quot;.
Added: the &quot;example&quot; label in the repo is not expected. It will be deleted.
Added: the &quot;implementing&quot; label in the repo is not expected. It will be deleted.
Added: the &quot;Patch Welcome&quot; label in the repo is not expected. It will be deleted.
Added: the &quot;proposal&quot; label in the repo is not expected. It will be deleted.
Added: the &quot;wontfix&quot; label in the repo is not expected. It will be deleted.
This is a dry run. No changes have been made on GitHub
</code></pre></div>
<p>このツールは <code>github-label-sync</code> のラッパーなので、細かい部分はそちらをみてください。</p>

<ul>
<li><a href="https://github.com/Financial-Times/github-label-sync" title="Financial-Times/github-label-sync: Synchronise your GitHub labels with as few destructive operations as possible">Financial-Times/github-label-sync: Synchronise your GitHub labels with as few destructive operations as possible</a></li>
</ul>

<h3 id="npm-packages-for-labels">Npm packages for labels</h3>

<p><code>-l</code>オプションでラベルファイルを指定できますが、<code>require</code>できればなんでも通るので、npmパッケージを作っても多分通ります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ github-label-setup --token xxx --labels @owner/github-label-presets
</code></pre></div>
<p>ラベルのフォーマットは<a href="https://github.com/Financial-Times/github-label-sync#label-json" title="Label JSON">Label JSON</a>をみてください。</p>

<h2 id="デフォルトのラベル">デフォルトのラベル</h2>

<p>最初に書いたように自分用のツールなので、ラベルのデフォルトは自分がよく使う感じのものになってます。</p>

<p><a href="https://github.com/azu/github-label-setup/issues/1"><img src="./img/demo.png" alt="demo"></a></p>

<ul>
<li>duplicate</li>
<li>help wanted</li>
<li>good for beginner

<ul>
<li><a href="https://github.com/MunGell/awesome-for-beginners" title="MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects.">MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects.</a>を参考に</li>
</ul></li>
<li>Priority: Critical</li>
<li>Priority: High</li>
<li>Priority: Low</li>
<li>Priority: Medium

<ul>
<li>優先度管理</li>
</ul></li>
<li>Status: Abandoned</li>
<li>Status: Blocked</li>
<li>Status: In Progress</li>
<li>Status: Proposal</li>
<li>Status: Ready for PR</li>
<li>Status: Review Needed

<ul>
<li>ステータス管理</li>
</ul></li>
<li>Type: Breaking Change</li>
<li>Type: Bug</li>
<li>Type: Feature</li>
<li>Type: Documentation</li>
<li>Type: Refactoring</li>
<li>Type: Maintenance

<ul>
<li>Related: <a href="https://conventionalcommits.org/" title="Conventional Commits">Conventional Commits</a></li>
<li>これはコミットのスコープに大分近いです。</li>
<li><a href="https://github.com/lerna/lerna-changelog" title="lerna-changelog">lerna-changelog</a>などラベルをCHANGELOGのソースに使うツールなどもあるのを考えて、コミットのスコープに合わせたセットを作っています</li>
</ul></li>
<li>Type: Question&quot;</li>
</ul>

<p>Typeに関してはプロジェクト特有のTypeが増えていくと思います。
このスクリプトはリポジトリを作った直後に動かす目的が大きいです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">hub create &amp;&amp; github-label-setup --token XXXX
</code></pre></div>
<h2 id="関連">関連</h2>

<p>似たようなものは色々あるのでお気に入りを探してみてください。
<a href="https://github.com/Financial-Times/github-label-sync" title="github-label-sync">github-label-sync</a>をベースにしたのは既存のラベルをマイグレーションすることができるからです(紐付いていたIssueを保持できる)</p>

<ul>
<li><a href="https://github.com/yoshuawuyts/github-standard-labels" title="yoshuawuyts/github-standard-labels: Create a standard set of issue labels for a GitHub project">yoshuawuyts/github-standard-labels: Create a standard set of issue labels for a GitHub project</a></li>
<li><a href="https://github.com/Financial-Times/github-label-sync" title="Financial-Times/github-label-sync: Synchronise your GitHub labels with as few destructive operations as possible">Financial-Times/github-label-sync: Synchronise your GitHub labels with as few destructive operations as possible</a></li>
<li><a href="https://github.com/MunGell/awesome-for-beginners" title="MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects.">MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects.</a></li>
<li><a href="https://github.com/himynameisdave/git-labelmaker" title="himynameisdave/git-labelmaker: Manage your GitHub labels from the command line!">himynameisdave/git-labelmaker: Manage your GitHub labels from the command line!</a></li>
<li><a href="https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63" title="Sane GitHub Labels – Dave Lunny – Medium">Sane GitHub Labels – Dave Lunny – Medium</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintのElectronアプリを作った</title>
   <link href="http://efcl.info/2017/05/12/textlint-app/"/>
   <updated>2017-05-12T19:36:00+09:00</updated>
   <id>http://efcl.info/2017/05/12/textlint-app</id>
   <content type="html"><![CDATA[ <h1 id="textlint-app">textlint-app</h1>

<p><a href="https://github.com/textlint/textlint-app" title="textlint-app">textlint-app</a>という、インストールするだけで動くtextlintのElectronアプリを作成しました。</p>

<p><a href="https://github.com/textlint/textlint-app"><img src="https://media.giphy.com/media/3o7buj7KnuEurvGVm8/giphy.gif" alt="gif"></a></p>

<h2 id="インストール方法">インストール方法</h2>

<ul>
<li><a href="https://github.com/textlint/textlint-app/releases/latest">https://github.com/textlint/textlint-app/releases/latest</a> からバイナリをダウンロード</li>
</ul>

<p>ダウンロードしたインストーラー（Windows）、<code>app</code>（Mac）を実行すれば動きます。（Node.jsの環境なども不要です）
実行する際に署名されてないバイナリなので警告がでるので、その辺は許可しないと動きません。</p>

<ul>
<li>Windows: インストーラーで許可を選択する必要がある</li>
<li>Mac: <code>/Application/textlint.app</code> をコンテキストメニューから&quot;開く&quot;をして許可する必要がある</li>
</ul>

<h2 id="特徴">特徴</h2>

<p>一番の特徴はNode.jsなどの環境を作る必要なくインストールするだけで動く点です。
<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>はNode.js（一応ブラウザも動く）で動くツールです。
しかし、Node.jsのセットアップに慣れてない人には大変そうなので作成しました。</p>

<p>内部的にはElectronアプリで、Node.jsとnpmを同梱しています。
また<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>のルールもアプリ上でインストールして動かします。</p>

<p>利用できるルールはNode.jsのCLI版と全く同じ、設定ファイルの<code>.textlintrc</code>も同じです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<p>簡単にまとめると次のようなアプリです。</p>

<ul>
<li>Node.js環境がなくても動く<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>同梱のエディタ</li>
<li><code>.textlintrc</code>をそのままコピペすれば動く</li>
<li><code>textlint --fix</code>を使った自動修正に対応</li>
<li>Markdownファイルを読み書きできる</li>
</ul>

<h2 id="使い方">使い方</h2>

<p>アプリを開くとエディタ画面が出てきます。
最初はtextlintのルールが一切入っていない状態なので、ルールをインストールする必要があります。</p>

<ul>
<li><strong>1.</strong> &quot;Settings&quot;のタブを開く:</li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2017/05/12-1494586278.png" alt="Step 1"></p>

<ul>
<li><strong>2.</strong> <code>.textlintrc</code>の設定を書く</li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2017/05/12-1494586443.png" alt="Step 2"></p>

<p>次のような設定を<code>.textlintrc</code>へコピペします。</p>

<p><strong>例</strong>: <a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット">textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット</a>を使う設定</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;preset-ja-technical-writing&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><strong>3.</strong>: &quot;Install&quot;ボタンを押して完了する待つ</li>
</ul>

<p>&quot;Install&quot;ボタンを押すと内蔵しているnpm（パッケージマネージャ）を使ってルールをダウンロードしてきます。</p>

<p>（ダウンロードしたルールや<code>package.json</code>、<code>.textlintrc</code>は &quot;Working directory&quot; に自動的に配置されるので、CLI版でもそこを参照すれば共有できます）</p>

<ul>
<li><strong>4.</strong> &quot;Edit with textlint&quot;でテキストを書く</li>
</ul>

<p>現状はMarkdownしかサポートしてませんが、エディタ部分に書いていくとリアルタイムで先ほどインストールしたルールでチェックされます。</p>

<ul>
<li><a href="https://github.com/textlint/textlint-app/issues/8" title="Support html/rst/re:view · Issue #8 · textlint/textlint-app">Support html/rst/re:view · Issue #8 · textlint/textlint-app</a></li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2017/05/12-1494586618.png" alt="Screenshot"></p>

<p>また&quot;Fix all errors&quot;ボタンを押すことで、修正可能なエラーは自動的に修正できます。</p>

<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/textlint/textlint-app" title="textlint/textlint-app: textlint standalone application top on Electron.">textlint/textlint-app</a>はまだ開発段階の状態です。</p>

<p>目的としてNode.jsを普段使ってない人がてっとり早くtextlintを使えるようにすることです。
また、<code>.textlintrc</code>の設定ファイルはCLIやアプリで共有できるので、コピペして使い始めることができる所にフォーカスしています。
(この設定コピペすればとりあえずいい感じにチェックできるよみたいな）</p>

<p><a href="https://github.com/textlint/textlint-app#development">https://github.com/textlint/textlint-app#development</a>にローカルでの開発方法についてドキュメントが書いてあります。
デザインがまだまだだったり、目的に反してそこまで優しい感じではないのでその辺へのコントリビュートまってます。
（CodeMirrorのパフォーマンスとかガタガタする問題をどうにかしたいです…）</p>

<ul>
<li><a href="https://github.com/textlint/textlint-app/issues" title="Issues · textlint/textlint-app">Issues · textlint/textlint-app</a></li>
</ul>

<h2 id="おまけ">おまけ</h2>

<p>この記事を書いているときの<code>.textlintrc</code>の設定は次のようなものでした。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;comments&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;ja-no-redundant-expression&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;period-in-list-item&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;periodMark&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
    <span class="p">},</span>
    <span class="nt">&quot;preset-ja-technical-writing&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;no-exclamation-question-mark&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;allowFullWidthQuestion&quot;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">},</span>
      <span class="nt">&quot;max-kanji-continuous-len&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;max&quot;</span><span class="p">:</span> <span class="mi">6</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> ]]></content>
 </entry>
 
 <entry>
   <title>Living Documentation by design, with Domain-Driven Designを読んだ</title>
   <link href="http://efcl.info/2017/05/12/Living-Documentation-DDD/"/>
   <updated>2017-05-12T09:55:00+09:00</updated>
   <id>http://efcl.info/2017/05/12/Living-Documentation-DDD</id>
   <content type="html"><![CDATA[ <p><a href="https://leanpub.com/livingdocumentation" title="Living Documentation by… by Cyrille Martraire [PDF/iPad/Kindle]">Living Documentation by design, with Domain-Driven Design by Cyrille Martraire [PDF/iPad/Kindle]</a>という電子書籍を読んだ。</p>

<p>leanpubで$0から購入できて、任意の値段で購入できるドキュメンテーションとDDDについての書籍。</p>

<p>ドキュメンテーションもソフトウェア開発のように設計やテストといったパターンやアプローチがあります。
これは以前書いた技術文書をソフトウェア開発する話と似ているところがあります。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/" title="Introduction | 技術文書をソフトウェア開発する話">Introduction | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>ドキュメントに書かれる知識としてGenericなものとSpecificなものがあります。
ドキュメントもソフトウェアと同じように更新され続けるべきですが、
会社やチーム、プロダクトにおけるSpecificな知識には次のような問題が生まれやすいです。</p>

<ul>
<li>アクセスできない</li>
<li>古すぎる</li>
<li>フラグメント化してる</li>
<li>暗黙的になってる</li>
<li>理解できない</li>
<li>書かれてない</li>
</ul>

<p>要はドキュメントはコストがかかるので、更新されなくなって管理されなくなる。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">知識は会話から生まれ、知識がstableとなるには時間がかかる。<br>これは、その知識を記述したドキュメントにはメンテナンスコストが掛かることを示唆してる。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/840907540586102785">March 12, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>一番良いドキュメントはNo Documentationであることではあるが、これらのドキュメントをどうやって更新され続けるようにするかという戦略、パターン、仕組みなどについて書かれている書籍です。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> 良いドキュメンテーションのアプローチは設計が関わる。<br>急速に変化するプロジェクトに対するドキュメンテーションには設計的なアプローチが必要になる <a href="https://t.co/EPBf6yldDs">pic.twitter.com/EPBf6yldDs</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/840915700575215616">March 12, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="livingdocumentationのコア原則">LivingDocumentationのコア原則</h2>

<ul>
<li>Reliable

<ul>
<li>信頼性の高いドキュメントを作る2つの方法</li>
<li>single source of truth

<ul>
<li>ソースは一つにする</li>
</ul></li>
<li>reconciliation mechanism

<ul>
<li>ソースが複数の場所にあることを認め、それをテストする</li>
<li>Specifiction by Example</li>
</ul></li>
</ul></li>
<li>Low-Effort</li>
<li>Collaborative

<ul>
<li>Conversations over Documentations</li>
<li>ペアプロは強い</li>
<li>アクセスできる場所に知識は置く</li>
</ul></li>
<li>Insightful

<ul>
<li>意図を残す</li>
</ul></li>
</ul>

<h2 id="メモ">メモ</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">憶測をドキュメント化しない<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> では逐次的にドキュメントを作っていく。<br>そのため実際のニーズに基づくドキュメンテーションを行う。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/840944746684067841">March 12, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">多すぎる情報は、情報が全くないのと同じぐらい役に立たない。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/840946011761647616">March 12, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">実装のドキュメントはよく変わるため別のアプローチを用意すべき。<br>戦略のドキュメントは複数のプロジェクト間で共有できるStableなドキュメントすべき。<br>そのためにプロジェクト特有の細部、変更されやすい所は戦略のドキュメントからは省略する。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/842031191368769537">March 15, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>この辺は読んでいて、<a href="https://www.amazon.co.jp/dp/B01MQG41Y0/" title="関数型プログラミングの基礎">関数型プログラミングの基礎</a>も最近読んだのもあって、ドキュメントとプログラミングの次のような対比が浮かんだ。</p>

<p>戦略というドキュメンテーションは、複数のプロジェクトで共有して参照できるStableなものであるべきで、逆にプロジェクト特有のものは変更の可能性が高いので、戦略からの参照はしない。</p>

<ul>
<li>OK: Unstable -&gt; Stable</li>
<li>NG: Stable -&gt; Unstable</li>
</ul>

<p>プログラミングにおいて、副作用を持つ部分と副作用を持たない部分をきちんと分離する。
副作用のあるものから純粋なものを参照するが、逆はしない(純粋なものが副作用を持って本末転倒)</p>

<ul>
<li>OK: 副作用を持つ関数 -&gt; 純粋な関数</li>
<li>NG: 純粋な関数 -&gt; 副作用を持つ関数</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">URLはKnowledge Networkの一部である。<br>URLでリンクすることは知識を伝達するの有用。<br>壊れたリンクを回避するためのメカニズムも必要。<br>参照をするときは、揮発性の高いもの -&gt; 安定したものとなるようにリンクをする。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/842035348204994560">March 15, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>これ読んでいて一番面白かった話。
よくよく考えると当たり前だけど、文章からソースコードへリンクを貼るとすぐ壊れてしまうので、ソースコードから文章へリンクを貼ったほうが安定するという話。</p>

<p>ソースコードへリンクする際に間接的な方法があるという話も何か面白かった。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> ファイルへ直接リンクするんじゃなくて、検索キーワードへ間接的にリンクするという話。 <a href="https://t.co/Vo4P3Q0xBi">pic.twitter.com/Vo4P3Q0xBi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/842036645029322753">March 15, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> ドメイン学び方<br>- 調査結果を壁にはりつけるようにまとめる<br>- チームについてトレーニングを受ける<br>- 他の開発者がやってることを半日ぐらい観察する Live-my-Life Sessions<br>- そのプロダクトのユーザーの行動を見てみる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843813350660173824">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a><br>これのペアプロ、クロスプログラミング、モブプログラミングのような形は、継続的なドキュメンテーションに役立つ。<br>ならならFace to Faceでインタラクティブに進む得ることで、お互いの知識を共有でき、<br>疑問点をすぐに質問することができる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843818057076097024">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> Working collectivelyはトラック係数(Truck Factor)の改善にも役立つ。<br><br>単一障害点を避け、情報の集中度を分散できる。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843818978225012736">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">小さなTruck Factorはそのプロジェクトのヒーローであり、<br>他のチームメイトと共有されていない多くの知識があることを意味している。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843819605499895808">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ドメイン知識の共有の仕方と単一障害点の話。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a><br>現実的な例の話として、<br>コードスタイルのLintツールとLint結果の参考文献としてのガイドラインのドキュメントがベストな関係。<br>ユーザーは必要となるまでそのドキュメントを読まずにすみ、必要なタイミングはLintツールが教えてくれる。</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843829013319639040">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>これは読んでいてESLintとかのドキュメントを思い浮かべた。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ガイドラインの&quot;強制&quot;と&quot;推奨&quot;どっちをとるか。<br>新しく追加されたコードに対しては強制的にエラーとし、<br>既存のコードベースは、そのガイドラインを違反していることが多いため、警告に留める。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843829944270516225">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> ガイドラインを決めたとしても、そのルールは既存のLintツールではカバーできないことがある。<br>このときに、コード自体を文書化することでできるかもという話。 annotationある言語は便利だなー <a href="https://t.co/6DHksjYiGl">pic.twitter.com/6DHksjYiGl</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843832241063047168">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ガイドラインに向かって少しづつに移行する方法</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">例外はあるが、トラブルシューティングはShameful Documentationの一種とも言える。<br>そこに書かれているものは、つまり解決されていない問題で修正されていないことを意味してる。<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843834095599673344">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">問題を解決するためにトラブルシューティングのようなドキュメントを追加するよりも、その問題を直すために時間を使うべきであるという話<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/843834201291931650">March 20, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>なんでもかんでもトラブルシューティングに逃げてはいけないという話。</p>

<p><strong>ADR(Architecture Decision Records)</strong></p>

<p>重要なアーキテクチャの意思決定のプロセスを記録するフォーマットであるADRというやつがあるのを読んでて初めて知った。</p>

<ul>
<li><a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" title="Blog | Documenting Architecture Decisions | Relevance">Blog | Documenting Architecture Decisions | Relevance</a></li>
<li><a href="http://tbpgr.hatenablog.com/entry/2017/02/22/080000" title="アーキテクチャの意思決定を記録する Lightweight Architecture Decision Records について - Tbpgr Blog">アーキテクチャの意思決定を記録する Lightweight Architecture Decision Records について - Tbpgr Blog</a></li>
</ul>

<p><a href="https://github.com/rwaldron/tc39-notes" title="ECMA, TC39 Meeting Notes">ECMA, TC39 Meeting Notes</a>とかもこれと似たようなフォーマットになっていて、自分がミーティングノートを書いたときも真似ていたので面白かった。</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer/tree/master/meetings" title="js-primer/meetings at master · asciidwango/js-primer">js-primer/meetings at master · asciidwango/js-primer</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">実際の問題の小さな模型でシミュレートする。<br>頭で理解できる(複雑さの)サイズにし、シミュレートすることで、<br>後の議論において具体的に参照できるコードが作れる。<br>これがコミュニケーションツールとして役に立つ<a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> <a href="https://t.co/GvFG2hZGKy">pic.twitter.com/GvFG2hZGKy</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/861242247991271424">May 7, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/LivingDocumentation?src=hash">#LivingDocumentation</a> を取り入れるときは、セオリーの話をするんじゃなくて、シンプルな話として始める <a href="https://t.co/sG523au8O9">pic.twitter.com/sG523au8O9</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/861243980570177539">May 7, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>実践する時のやり方。</p>

<hr>

<p><a href="https://leanpub.com/livingdocumentation" title="Living Documentation by… by Cyrille Martraire [PDF/iPad/Kindle]">Living Documentation by design, with Domain-Driven Design by Cyrille Martraire [PDF/iPad/Kindle]</a> 400-500ページぐらいあって長かったけど読んでいて面白い話が多かったので良かった。
感覚的なものが結構文章化されてので面白い。</p>

<p>一応DDDの本ではあるので、DDDについては簡単に知っておくと読みやすいかも(コード的な話はあんまりないので、概念だけでもよさそう)</p>

<ul>
<li><a href="https://booth.pm/ja/items/392260" title="わかる！ドメイン駆動設計 ～もちこちゃんの大冒険～【C91新刊】 - TechBooster - BOOTH">わかる！ドメイン駆動設計 ～もちこちゃんの大冒険～【C91新刊】 - TechBooster - BOOTH</a></li>
</ul>

<p>あたりを見ておけば大体概念としての事前知識は大丈夫そうな気がする。
後は、IA(情報設計)的なことが好きな人は読むといいのかもしれない。</p>

<ul>
<li><a href="https://www.amazon.co.jp/dp/4802510012/" title="今日からはじめる情報設計 -センスメイキングするための7ステップ | アビー・コバート, 長谷川敦士, 安藤 幸央 |本 | 通販 | Amazon">今日からはじめる情報設計 -センスメイキングするための7ステップ | アビー・コバート, 長谷川敦士, 安藤 幸央 |本 | 通販 | Amazon</a></li>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/" title="アーキテクチャをめぐるたび | Web Scratch">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul>

<p>実際のコードからドキュメントを同期するアプローチはアノテーション前提がちょっと強いので簡単には実践できない気はするけど、話として読むといいかなーと思った。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Almin 0.12リリース: Read層におけるState更新のアプローチ</title>
   <link href="http://efcl.info/2017/05/11/almin-0.12/"/>
   <updated>2017-05-11T15:22:00+09:00</updated>
   <id>http://efcl.info/2017/05/11/almin-0.12</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a> 0.12をリリースしました。</p>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/almin%400.12.3" title="Release Almin 0.12 · almin/almin">Release Almin 0.12 · almin/almin</a></li>
</ul>

<p><code>Store</code>と<code>StoreGroup</code>が書き直されたので色々変わっていますが、マイグレーションツールでアップデートできます。</p>

<h2 id="変更点">変更点</h2>

<h3 id="storegroupを書き直した"><code>StoreGroup</code>を書き直した</h3>

<p><strong>Before</strong>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">AStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="nx">a</span> <span class="o">:</span> <span class="s2">&quot;a value&quot;</span><span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kr">class</span> <span class="nx">BStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="nx">b</span> <span class="o">:</span> <span class="s2">&quot;b value&quot;</span><span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">aStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">bStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">storeGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StoreGroup</span><span class="p">(</span>
    <span class="nx">aStore</span><span class="p">,</span>
    <span class="nx">bStore</span>
<span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">storeGroup</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
<span class="c1">// { a: &quot;a value&quot;, b: &quot;b value&quot; }</span>
</code></pre></div>
<p><strong>After</strong>:</p>

<p>Almin 0.12 では次のように<code>StoreGroup</code>のコンストラクタに</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
 <span class="s2">&quot;ステート名&quot;</span><span class="o">:</span> <span class="nx">store</span>
<span class="p">}</span>
</code></pre></div>
<p>という組み合わせで定義を渡すようになりました。
代わりに<code>Store#getState</code>でステート名を返さなくても良くなっています。</p>

<p>Reduxの<a href="http://redux.js.org/docs/api/combineReducers.html" title="combineReducers · Redux">combineReducers</a>と似たような感じです(変更してから似てるのに気づいた)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">AStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">&quot;a value&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kr">class</span> <span class="nx">BStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">&quot;b value&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">aStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">bStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">storeGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StoreGroup</span><span class="p">({</span>
    <span class="c1">// stateName: store</span>
    <span class="nx">a</span><span class="o">:</span> <span class="nx">aStore</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="nx">bStore</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">storeGroup</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
<span class="c1">// { a: &quot;a value&quot;, b: &quot;b value&quot; }</span>
</code></pre></div>
<p>古い<code>StoreGroup</code>の実装を使いたい場合は<a href="https://github.com/almin/legacy-store-group" title="legacy-store-group">legacy-store-group</a>にあるのでモジュールとして利用できます。</p>

<p>この変更の主な目的は次の2つです。</p>

<ul>
<li><code>Store#getState</code>を単純にStateを返すように</li>
<li>型の整合がとれたStoreGroup</li>
</ul>

<p>次のように<code>context.getState()</code>した結果が、最初にコンストラクタで渡した<code>Store</code>と<code>State</code>の関係でマッピングされて自動的に型付けされたstateのオブジェクトを返すようになっています。</p>
<div class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// Store &lt;-&gt; Stateの関係を定義</span>
<span class="kr">interface</span> <span class="nx">AState</span> <span class="p">{</span>
    <span class="nx">a</span>: <span class="kt">number</span>
<span class="p">}</span>
<span class="kr">class</span> <span class="nx">AStore</span> <span class="kr">extends</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">AState</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">state</span>: <span class="kt">AState</span><span class="p">;</span>
    <span class="c1">// ..</span>
    <span class="nx">getState() {</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// ...</span>
<span class="c1">// StoreGroup</span>
<span class="kr">const</span> <span class="nx">storeGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StoreGroup</span><span class="p">({</span>
    <span class="nx">aState</span>: <span class="kt">new</span> <span class="nx">AStore</span><span class="p">()</span>
<span class="p">});</span>
<span class="c1">// Context</span>
<span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="p">,</span>
    <span class="nx">store</span>: <span class="kt">storeGroup</span>
<span class="p">});</span>
<span class="c1">// get state</span>
<span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">unknown</span><span class="p">);</span> <span class="c1">// &lt;= 知らないstateを参照してる</span>
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2017/05/11-1494484857.png" alt="storegroup"></p>

<p>ちゃんとTypeScriptでコンパイルエラーになる。</p>

<h3 id="store-receivepayload-payload-payload-の追加"><code>Store#receivePayload(payload: Payload)</code>の追加</h3>

<p>Storeに<code>receivePayload(payload: Payload)</code>というメソッドを実装するとAlminのライフサイクルにおいて、それが呼びされるようになりました。
Reactの<code>componentWillReceiveProps(nextProps)</code>と役割が似ています。</p>

<p>これを導入した経緯は以下のIssueにも書いているのですが、<a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">クライアントサイドでCQRSをちゃんとやろう</a>としたのがAlminの開発目的の一つなので、その目的を再確認した結果として生まれました。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/160" title="feat(Store): add Store#receivePayload(payload: Payload) by azu · Pull Request #160 · almin/almin">feat(Store): add Store#receivePayload(payload: Payload) by azu · Pull Request #160 · almin/almin</a></li>
</ul>

<p>Alminの最初の目的として、writeとreadの掛け算の複雑さを一つのモデルに持たせるのはやめようというところから始まっています。
1つのモデルですべてをやるのではなく、writeとreadの2つのモデルに分けることでこの複雑さの掛け算をなくす目的です。</p>

<hr>

<p><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">複雑なJavaScriptアプリケーションを考えながら作る話</a>より</p>

<p><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html"><img src="http://efcl.info/wp-content/uploads/2017/05/11-1494485424.png" alt="slide 1"></a></p>

<p><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html"><img src="http://efcl.info/wp-content/uploads/2017/05/11-1494485454.png" alt="slide 2"></a></p>

<hr>

<p>この考え方で、Domain(いわゆるロジックを持つモデル/Write model)とStore(ViewModelのようなViewのためのモデル/Read Model)の2種類にわけることで、ビジネスロジックはDomainに集中することができました。
またViewはどのようなUIを目指すかによって、色々な細かいStateがでてきます。</p>

<p>しかし、Viewを意識したコードはStore/Stateで吸収できるので、Domain modelが変にUIを意識して書くケースをかなり減らせていたと思います。</p>

<p>先ほどのスライドでいうと、DomainはWrite層で、StoreはRead層という分離ができていました。</p>

<p>しかし、書いていくとStore側はRead層であるにもかかわらず、次のような書き込む処理が出てきています。(<code>this.onDispatch</code>でイベントを受け取って、<code>Store</code>が保持する<code>state</code>を更新する処理)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;./CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// initial state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>
        <span class="p">});</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">newState</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// return own state</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>このRead層にも書き込み処理があるのが気持ち悪いなーと思いました。
しかし、Write層で作ったものをRead層に渡す方法(タイミング)がないとViewに反映されないので、Read層のどこかでStateを更新する必要があるのは明白です。</p>

<p>これについて考えていて、<a href="https://msdn.microsoft.com/en-us/library/jj554200.aspx" title="CQRS Journey">CQRS Journey</a>というCQRSについて書かれた文書中に次のような図がでてきます。</p>

<p><img src="https://msdn.microsoft.com/en-us/library/jj591579.2c44f48caf131a5a65fcb0799a3ad4e7(l=en-us).png" alt="image"></p>

<p>この図では<code>OrderViewModelGenerator</code>というRead層にあるものが、Read層のRepositoryにデータを書き込んでいる様子が見えます。
(Write modelからドメインイベントを受け取り、それを<code>OrderViewModelGenerator</code>がRead modelに変換して保存するという流れ)</p>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/jj591579" title="Journey 4: Extending and Enhancing the Orders and Registrations Bounded Context">Journey 4: Extending and Enhancing the Orders and Registrations Bounded Context</a></li>
</ul>

<p>Almin 0.11まではこの<code>OrderViewModelGenerator</code>にあたるような、Read層のデータを更新する要素が明示的には存在していませんでした。
そのため、次のようにRead層でWrite層からくるイベントを受け取って更新するという処理を各Storeに書いたりしていました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js">        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">newState</span><span class="p">);</span>
        <span class="p">});</span>
</code></pre></div>
<p>この「Write層からくるイベントを受け取り、Read層を更新する」を明示的なStoreのライフサイクルとして取り入れようとしてできたのが、<code>Store#receivePayload(payload: Payload)</code>です。</p>

<p><code>Store#receivePayload(payload: Payload)</code>はWrite層からイベント発火やAlminのライフサイクルで呼び出されるため、先ほどのコードは次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-diff" data-lang="diff"> import { Store } from &quot;almin&quot;;
 import CounterState from &quot;./CounterState&quot;;
 export class CounterStore extends Store {
     constructor() {
         super();
         // initial state
         this.state = new CounterState({
             count: 0
         });
<span class="gd">-        // receive event from UseCase, then update state</span>
<span class="gd">-        this.onDispatch(payload =&gt; {</span>
<span class="gd">-            const newState = this.state.reduce(payload);</span>
<span class="gd">-            if (newState !== this.state) {</span>
<span class="gd">-                this.state = newState;</span>
<span class="gd">-                this.emitChange();</span>
<span class="gd">-            }</span>
<span class="gd">-        });</span>
     }

<span class="gi">+    // receive event from UseCase, then update state</span>
<span class="gi">+    receivePayload(payload) {</span>
<span class="gi">+        this.setState(this.state.reduce(payload));</span>
<span class="gi">+    }</span>
<span class="gi">+</span>
<span class="gi">+    // return own state</span>
     getState() {
        return this.state;
     }
 }
</code></pre></div>
<p>単純に言えば、Storeのstateを更新する処理は<code>receivePayload</code>に書けばいいという形です。
(Reactで<code>componentWillReceiveProps(nextProps)</code>の中で<code>setState</code>が許可されているのと同じです)</p>
<div class="highlight"><pre><code class="language-diff" data-lang="diff">import { Store } from &quot;almin&quot;;
import CounterState from &quot;./CounterState&quot;;
export class CounterStore extends Store {
    constructor() {
        super();
        // initial state
        this.state = new CounterState({
            count: 0
        });
    }

    // receive event from UseCase, then update state
    receivePayload(payload) {
        this.setState(this.state.reduce(payload));
    }

    // return own state
    getState() {
        return this.state;
    }
}
</code></pre></div>
<p>Almin 0.12でも今までのように自分でイベントを監視して更新する方法も動きます。
しかし、<code>Store#receivePayload(payload: Payload)</code>を使ったほうが将来的な最適化の余地が生まれるのでこちらを推奨しています。
(簡単にいうと、自分で監視したイベントと違い<code>Store#receivePayload(payload: Payload)</code>はAlminのライフサイクル管理下にあるので、うまいこと処理をできる可能性があるということ)</p>

<p>次のTodoMVCのサンプルでもその説明をしています。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/todomvc/" title="Todo App · Almin.js">Todo App · Almin.js</a></li>
</ul>

<h3 id="read側のstate更新アプローチ">Read側のState更新アプローチ</h3>

<p>(次の前提の)Read側のState更新処理のアプローチ多く分けて2つあると思います。</p>

<p>前提として、Read側のStateというのはWrite側のドメインモデルやデータベースをソースにして、View向けのデータしたものという扱いです(つまりWrite -&gt; Readという順序と関係がある)</p>

<p>そのため、Read側のStateは元となるソースから計算した値を持つComputed propertyのような形になってます。</p>

<p>Mobxの<a href="https://github.com/mobxjs/mobx-state-tree" title="mobx-state-tree">mobx-state-tree</a>というライブラリについて紹介してる<a href="https://immer-mutable-state.surge.sh/#1" title="The Quest For Immer Mutable State Management">The Quest For Immer Mutable State Management</a>というスライドは、その2つの方法についてわかりやすく書かれています。</p>

<p><strong>Pull Based: Recompute every time value is needede</strong></p>

<p>簡単に言えばgetterです。
そのプロパティの値を取得するときに、計算して返すという形です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;Michel&quot;</span>
    <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;Weststrate&quot;</span>
    <span class="nx">get</span> <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;calculating!&quot;</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>Push Based: Recompute when a source value changes</strong></p>

<p>もう一つは、ソースとなる値が変化した時に事前に計算結果を作って置くという方法です。
簡単に言えばキャッシュを事前に作っておくイメージです。</p>

<p>この場合は<code>lastName</code>か<code>firstName</code>の値が変化した時に<code>fullName</code>というプロパティを計算して更新するということです。
<code>person.fullName</code>へアクセスした時はその結果を返すだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="err">@</span><span class="nx">observable</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;Michel&quot;</span>
    <span class="err">@</span><span class="nx">observable</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;Weststrate&quot;</span>
    <span class="err">@</span><span class="nx">computed</span> <span class="nx">get</span> <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;calculating!&quot;</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>このPullとPushの方法 どちらがいいのかはケースバイケースで、プロパティの値を読む回数が多いなら、事前に計算結果が作れる<strong>Push Based: Recompute when a source value changes</strong>の方がコストが低くなるかもしれません。
逆に、書き込む回数の方が圧倒的に多いなら、<strong>Pull Based: Recompute every time value is needede</strong>で実際に読むこむときに遅延評価的に結果を作って返したほうがコストが低いです。
(両方合わせるとかも考えられます)</p>

<p>話を戻して、先ほどのAlminのコードはソースの変更があったことを元に書き込んでいるのでPush Basedなやり方と言えます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;./CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// initial state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>
        <span class="p">});</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">newState</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// return own state</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>しかし、先ほども書いたように自分でイベントを監視(<code>this.onDispatch</code>)だと、そのStoreがPush Basedで更新する処理があるかが外から(この場合はStoreGroupから)はわかりません。
イベントを監視 !== 更新処理がある ではないからです。</p>

<p><code>receivePayload</code>を実装している == 更新処理がある という形になります。(必ずも更新されるわけではないですが、更新を期待していい形になる)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js">    <span class="c1">// receive event from UseCase, then update state</span>
    <span class="nx">receivePayload</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">));</span>
    <span class="p">}</span>
</code></pre></div>
<p>このようなインターフェースが決まると何が嬉しいかというと、次のようなReduxのreducerみたいなインターフェースでStoreを書けるようにしようといったことがやりやすくなります。</p>
<div class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Store</span><span class="p">,</span> <span class="nx">Payload</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">interface</span> <span class="nx">State</span> <span class="p">{</span>
    <span class="nx">reduce</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nx">State</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">payload</span>: <span class="kt">Payload</span><span class="p">)</span><span class="o">:</span> <span class="nx">T</span> <span class="o">|</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">Reactor</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nx">State</span><span class="o">&gt;</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="kr">abstract</span> <span class="nx">state</span>: <span class="kt">T</span><span class="p">;</span>
    <span class="kr">abstract</span> <span class="nx">reduce</span><span class="p">(</span><span class="nx">prevState</span>: <span class="kt">T</span><span class="p">,</span> <span class="nx">payload</span>: <span class="kt">Payload</span><span class="p">)</span><span class="o">:</span> <span class="nx">T</span><span class="p">;</span>

    <span class="nx">receivePayload</span><span class="p">(</span><span class="nx">payload</span>: <span class="kt">Payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span> <span class="nx">reduce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shouldStateUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">newState</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">getState() {</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// The user implement this</span>
<span class="kr">class</span> <span class="nx">MyStore</span> <span class="kr">extends</span> <span class="nx">Reactor</span> <span class="p">{</span>
    <span class="nx">reduce</span><span class="p">(</span><span class="nx">prevState</span>: <span class="kt">T</span><span class="p">,</span> <span class="nx">payload</span>: <span class="kt">Payload</span><span class="p">)</span><span class="o">:</span> <span class="nx">T</span> <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span>
            <span class="k">case</span> <span class="s2">&quot;INCREMENT&quot;</span><span class="o">:</span>
                <span class="k">return</span> <span class="nx">prevState</span> <span class="o">+</span> <span class="nx">1</span>:
            <span class="kt">default</span><span class="o">:</span>
                <span class="k">return</span> <span class="nx">prevState</span><span class="p">;</span>
        <span class="p">}</span>   
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>簡単にまとめると、まだ曖昧な部分があったStoreをもう少し明確な役割付けしたという話です。</p>

<p><strong>Notes:</strong></p>

<p><code>receivePayload</code>という名前がまだしっくりきてないところがある。
なんかもっと広い意味になる可能性がありそうなので、何かもっといい方法があるのかもしれない。</p>

<p>Read層にもRead用のRepositoryやRead用のDatabaseなどを用意すれば、もっとクラス的に分解できるけど、流石にそこまでやるととオーバーキルな感じがしたのでやらなかった。
理由として、Read(View)側のデータを永続的なデータベースに書き込んで保持したいというケースが浮かばなかった(Read側はそこまで複雑な永続データを持ちたくないはず)</p>

<p>UI的に保持したい状態ってIndexedDBじゃなくて、localStorageに保存するぐらいで終わる気がした。</p>

<blockquote>
<p>FluxのStoreの話</p>
</blockquote>

<p><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html"><img src="http://efcl.info/wp-content/uploads/2017/05/11-1494492570.png" alt="Flux Store"></a></p>

<h2 id="マイグレーション方法">マイグレーション方法</h2>

<p>Almin 0.11から0.12へのアップグレードは次のマイグレーションツールが利用できます。</p>

<ul>
<li><a href="https://github.com/almin/migration-tools" title="almin/migration-tools: Migration scripts for Almin.">almin/migration-tools: Migration scripts for Almin.</a></li>
</ul>

<p>jscodeshiftというツールで動くマイグレーションスクリプトを用意しています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Installation
npm install -g jscodeshift @almin/migration-tools 
# 1. Storeクラスを一括で変換
jscodeshift --run-in-band -t `npm root -g`/@almin/migration-tools/scripts/store-get-state-return-object-to-flat.js src/store/*/**/*Store.js
# 2. 1.の変換結果を使ってStoreGroupを変換
jscodeshift --run-in-band -t `npm root -g`/@almin/migration-tools/scripts/store-group-arguments.js src/store/AppStore.js
# store-state-mapping.jsonは変換中に使うデータなので消していい
rm store-state-mapping.json
</code></pre></div>
<p>実際にアップデートしてる例は次のPRを見てください。</p>

<ul>
<li><a href="https://github.com/azu/presentation-annotator/pull/11" title="chore(deps): update dependencies by azu · Pull Request #11 · azu/presentation-annotator">chore(deps): update dependencies by azu · Pull Request #11 · azu/presentation-annotator</a></li>
<li><a href="https://github.com/textlint/textlint-app/pull/5" title="chore(almin): Update to Almin 0.12 by azu · Pull Request #5 · textlint/textlint-app">chore(almin): Update to Almin 0.12 by azu · Pull Request #5 · textlint/textlint-app</a></li>
</ul>

<p>その他の変更点についてはリリースノートをみてください。</p>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/almin%400.12.3" title="Release Almin 0.12 · almin/almin">Release Almin 0.12 · almin/almin</a></li>
</ul>

<h2 id="next">Next</h2>

<p>Almin 0.12 + TypeScriptならStoreは、型の整合がとれるように書けるようなったと思います。
(明示的なキャストなどむりやりやらなくても型がちゃんとついてくる)</p>

<p>UseCaseの部分が余計な情報を明示的に渡さないと型チェックが上手くできていません。</p>
<div class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="nx">type</span> <span class="nx">MyUseCaseArgs</span> <span class="o">=</span> <span class="kt">string</span><span class="p">;</span>
<span class="kr">class</span> <span class="nx">MyUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="nx">execute</span><span class="p">(</span><span class="nx">value</span>: <span class="kt">MyUseCaseArgs</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span><span class="p">,</span>
            <span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// execute UseCase</span>
<span class="kr">const</span> <span class="nx">useCase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyUseCase</span><span class="p">();</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="nx">useCase</span><span class="p">).</span><span class="nx">execute</span><span class="o">&lt;</span><span class="nx">MyUseCaseArgs</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="c1">// something</span>
  <span class="p">})</span><span class="o">:</span>
</code></pre></div>
<p>これを次期Alminでは次のように書けるようにしたいと思っています。</p>
<div class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="kr">class</span> <span class="nx">MyUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="nx">execute</span><span class="p">(</span><span class="nx">value</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span><span class="p">,</span>
            <span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyUseCase</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">executor</span><span class="p">(</span><span class="nx">useCase</span> <span class="o">=&gt;</span> <span class="nx">useCase</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="mi">42</span><span class="p">))</span> <span class="c1">// &lt;= Error</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div>
<p>この辺で上手くBatch Action的な処理も解決できればなーと思って考えています。</p>

<p>次のIssueとPRで実験してるので何か意見があったらください。
(特に<code>executor</code>とかの命名が難しい…)</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/193" title="UseCase: Fluent style UseCase · Issue #193 · almin/almin">UseCase: Fluent style UseCase · Issue #193 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/pull/194" title="[WIP] feat(UseCase): Fluent style UseCase by azu · Pull Request #194 · almin/almin">[WIP] feat(UseCase): Fluent style UseCase by azu · Pull Request #194 · almin/almin</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Travis CIでGitHub Personal access tokensが漏れないようにする</title>
   <link href="http://efcl.info/2017/05/09/travis-ci-github-token/"/>
   <updated>2017-05-09T09:20:00+09:00</updated>
   <id>http://efcl.info/2017/05/09/travis-ci-github-token</id>
   <content type="html"><![CDATA[ <p>2017-05-09 漏れていた人はメールで通知が来ていると思いますが、Travis CIのログ上にGitHubのTokenが漏れていたケースがあるという話がありました。
(漏れていたTokenはGitHub側で既にrevokeされていると思います。またメールに漏れている一覧が載ってるはず)</p>

<ul>
<li><a href="https://blog.travis-ci.com/2017-05-08-security-advisory" title="The Travis CI Blog: Security Advisory: Secured Environment Variables">The Travis CI Blog: Security Advisory: Secured Environment Variables</a></li>
</ul>

<p>これ自体はTravis CIのバグではなくて、ユーザーが書いたデプロイスクリプトなどのツール側のバグによってGitHubのTokenなどsecretな環境変数がログ上に出ている話です。
Travis CIのログはPublicで誰でも見ることができるので、標準出力にTokenが露出していると問題があります。</p>

<p>どのようなケースでGitHubのTokenが標準出力に出てしまうかというと、<code>git push</code>のミスが一番多いと思います。</p>

<p>例えば次のようにGitHubのTokenを使って、Travis CIからGitHubへpushしているスクリプトは問題があります。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git push --force --quiet <span class="s2">&quot;https://${GH_TOKEN}@github.com/example/test.git&quot;</span> gh-pages
</code></pre></div>
<p>このスクリプトは、<code>--quiet</code>が付いてるので <code>GH_TOKEN</code> が漏れないように見えますが、
<code>git push</code>に失敗すると、エラー結果に含まれるpush先(<code>&quot;https://${GH_TOKEN}@github.com/example/test.git&quot;</code>)がログにでるため安全ではありません。</p>

<p>そのため、標準出力と標準エラー出力を両方共潰さないと、<code>GH_TOKEN</code>が漏れるケースがあります。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git push --force --quiet <span class="s2">&quot;https://${GH_TOKEN}@github.com/example/test.git&quot;</span> gh-pages &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</code></pre></div>
<ul>
<li><a href="https://docs.travis-ci.com/user/best-practices-security/" title="Best Practices in Securing Your Data - Travis CI">Best Practices in Securing Your Data - Travis CI</a></li>
</ul>

<p>この手法は<a href="https://gist.github.com/domenic/ec8b0fc8ab45f39403dd" title="Auto-deploying built products to gh-pages with Travis">Auto-deploying built products to gh-pages with Travis</a>の古いバージョンで紹介されていたので知ってる人も多いと思います。</p>

<p>このTravis CI上のGitHub Token(GitHubには限らないけど)漏れは結構前から見かけることがあって、いくつか報告した記憶もあります。</p>

<ul>
<li><a href="https://github.com/jirutka/rake-jekyll/issues/8" title="GH_TOKEN is leaked · Issue #8 · jirutka/rake-jekyll">GH_TOKEN is leaked · Issue #8 · jirutka/rake-jekyll</a></li>
<li><a href="https://github.com/babel/babel/issues/3727" title="Security concern about merge-development-with-master.sh (T6661) · Issue #3727 · babel/babel">Security concern about merge-development-with-master.sh (T6661) · Issue #3727 · babel/babel</a></li>
</ul>

<p>この辺の問題があるリポジトリについて、Travis側が過去のログを調査して今回の通知を出したようです。
また、今日から環境変数とマッチする文字列は、ログ上では<code>[secure]</code>に自動で置換されるようになっています。</p>

<blockquote>
<p>Both new builds and archived build logs with this issue will see the string [secure] instead of potentially exposed secure environment variables. Logs on both our open-source .org, and closed-source .com platforms have been updated.
-- <a href="https://blog.travis-ci.com/2017-05-08-security-advisory" title="The Travis CI Blog: Security Advisory: Secured Environment Variables">The Travis CI Blog: Security Advisory: Secured Environment Variables</a></p>
</blockquote>

<p><img src="http://efcl.info/wp-content/uploads/2017/05/09-1494289700.png" alt="image"></p>

<h2 id="travis-ciからgithubへpushする">Travis CIからGitHubへpushする</h2>

<p>Travis CIからGitHub(gh-pages)へpushしたい場合、自分の場合はGitHubのtokenではなくSSHのキーを使うようにしています。</p>

<p>GitHubにはリポジトリごとにreadまたはwriteの<a href="https://developer.github.com/guides/managing-deploy-keys/" title="Deploy Keys">Deploy Keys</a>としてSSHの公開鍵を登録することができます。</p>

<ul>
<li><a href="https://developer.github.com/guides/managing-deploy-keys/" title="Deploy Keys">Deploy Keys</a></li>
<li><a href="https://docs.travis-ci.com/user/deployment/custom/" title="Custom Deployment - Travis CI">Custom Deployment - Travis CI</a></li>
<li><a href="https://circleci.com/docs/1.0/adding-read-write-deployment-key/" title="Adding read/write deployment key - CircleCI">Adding read/write deployment key - CircleCI</a></li>
</ul>

<p>GitHubのTokenは権限は設定できますがユーザー単位なので、一度漏れるとそのユーザーのすべてのリポジトリに影響があります。
GitHubの<a href="https://developer.github.com/guides/managing-deploy-keys/" title="Deploy Keys">Deploy Keys</a>はリポジトリごとなので、漏れてもそのリポジトリのみしか読み書きすることができません。</p>

<p><a href="https://github.com/azu/add-deploy-key-to-github" title="add-deploy-key-to-github">add-deploy-key-to-github</a>などを使うと、CLIから<a href="https://developer.github.com/guides/managing-deploy-keys/" title="Deploy Keys">Deploy Keys</a>を作ってリポジトリに登録できるので、それを使ってgit pushすると簡単です。
(Token方式みたいにgit push先を変更する必要もないけど、ssh経由にする必要があるので <code>git config --global url.ssh://git@github.com/.insteadOf https://github.com/</code> などしておくとデプロイスクリプトの変更がいらない)</p>

<p><a href="https://developer.github.com/guides/managing-deploy-keys/" title="Deploy Keys">Deploy Keys</a>(SSHキー)を使った<code>gh-pages</code>へのpush方法は次の記事などで解説されています。</p>

<ul>
<li><a href="https://gist.github.com/domenic/ec8b0fc8ab45f39403dd" title="Auto-deploying built products to gh-pages with Travis">Auto-deploying built products to gh-pages with Travis</a></li>
<li><a href="http://efcl.info/2016/09/27/deploy-from-travis-ci-to-gh-pages/" title="Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch">Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch</a></li>
<li><a href="https://www.tam-tam.co.jp/tipsnote/program/post11795.html" title="Travis CI から GitHub へ git push を行う設定 ｜ Tips Note by TAM">Travis CI から GitHub へ git push を行う設定 ｜ Tips Note by TAM</a></li>
</ul>

<h2 id="フローチャート">フローチャート</h2>

<ol>
<li>Travis CIからGitHubへpushしたい

<ul>
<li>=&gt; リポジトリ用のsshキーを作ってdeploy keyに登録して使う</li>
</ul></li>
<li>Travis CIでGitHubのtokenが必要(APIを使う処理)

<ul>
<li>=&gt; Personal access tokensをリポジトリ用に新規作成して使う</li>
<li>Tokenが漏れると影響範囲が広いので、使い回しはしない</li>
</ul></li>
</ol>

<h2 id="その他">その他</h2>

<p>今回の話はまた違いますが、npmへpublishされたパッケージから秘密の情報が混じっていたり、awsのcredentialsがリポジトリに漏れているのは稀によく見るので、そういうのが起こりにくいような仕組みを保つ必要がありそうです。</p>

<ul>
<li><a href="https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md" title="notes/Do-not-underestimate-credentials-leaks.md at master · ChALkeR/notes">notes/Do-not-underestimate-credentials-leaks.md at master · ChALkeR/notes</a></li>
<li><a href="https://github.com/blog/1390-secrets-in-the-code" title="Secrets in the code">Secrets in the code</a></li>
</ul>

<p>npmへpublishするのに<a href="http://t-wada.hatenablog.jp/entry/nodejs-package-json-tips" title="package.json の files フィールドでホワイトリスト">package.json の files フィールドでホワイトリスト</a>を使うとか、<a href="https://github.com/awslabs/git-secrets" title="awslabs/git-secrets: Prevents you from committing secrets and credentials into git repositories">awslabs/git-secrets</a>などでpush前にチェックするなど</p>
 ]]></content>
 </entry>
 

</feed>
