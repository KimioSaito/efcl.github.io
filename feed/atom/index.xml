<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title></title>
 <link href="http://efcl.info/feed/atom/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-02-12T22:49:20+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>ECMAScript, TC39 Meeting Notesの読み方と修正方法</title>
   <link href="http://efcl.info/2016/02/12/tc39-meeting-notes/"/>
   <updated>2016-02-12T11:12:00+09:00</updated>
   <id>http://efcl.info/2016/02/12/tc39-meeting-notes</id>
   <content type="html"><![CDATA[ <p>ECMAScriptは毎年リリースの方針となったため、最新の仕様を管理している<a href="https://github.com/tc39/ecma262" title="tc39/ecma262">tc39/ecma262</a>には毎日のようにコミットされています。</p>

<p>ECMAScriptのリリース方針についてなどは以下を参照してください。</p>

<ul>
<li><a href="http://efcl.info/2015/10/18/ecmascript-paper/" title="ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch">ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch</a></li>
</ul>

<p>これらの最新の変更が反映されたLiving Standardなものは以下のURLで公開されています。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/">tc39.github.io/ecma262/</a></li>
</ul>

<p>また、Proposalを元にECMAScript 2016に<a href="http://jser.info/2016/02/01/es2016/">入る機能は既に決まっています</a>。
何か新しく入るのかは以下の記事を見てみてください。</p>

<ul>
<li><a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></li>
</ul>

<p>&quot;どこで&quot;決まっているのかというと2ヶ月に1回行われているTC39のミーティングです。(物理的に集合してF2Fでやる)</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>

<ul>
<li>具体的にES2016は、ここで今回のミーティングでStage 4となったものがそうだと決まった</li>
</ul></li>
</ul>

<p>小さな修正などは直接GitHubで議論して終わることがありますが、TC39としての意志が求められる新しい機能の追加や互換性のない修正などはTC39のミーティングを通して判断されます。</p>

<ul>
<li>ProposalのStageをあげるあげない</li>
<li>ProposalをStage 0として追加するかどうか</li>
<li>後方互換性のない変更を加えるか</li>
<li>現実との互換性のためにAnnex Bへ仕様を追加するか</li>
</ul>

<p>などはここで議論された結果が仕様へ反映されます。
(大体はGitHub Issueで議論後、Pull Requestを出した状態で実際のミーティングに持ち込まれてる)</p>

<p>そのため、仕様/Proposalへどういう変更をどういう理由で加えるかというのはこのミーティングノートを見れば大体分かります。</p>

<ul>
<li><a href="https://github.com/tc39/tc39-notes" title="tc39/tc39-notes: These are the notes I take at TC39 Meetings, with Markdown formatting">tc39/tc39-notes</a>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>が元リポジトリ</li>
</ul></li>
<li><a href="https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aclosed" title="Pull Requests · tc39/ecma262">Pull Requests · tc39/ecma262</a>

<ul>
<li>あわせてPull Requestを見るのが早い</li>
</ul></li>
</ul>

<p>ミーティングノートは3日分がワンセットなのでちょっと多いですが、数時間あれば読める感じです。
ちゃんとテーマごとに議論の区切りと結論が書いてあるので、気になるものだけみるならすぐ読めると思います。</p>

<p>例えば先ほどの<a href="https://github.com/tc39/tc39-notes/blob/master/es7/2016-01/2016-01-27.md#ecma-262402-2016-end-game" title="ECMA-262/402 2016 End-Game">ECMA-262/402 2016 End-Game</a>なら、以下のように終わりに&quot;Conclusion/Resolution&quot;がわかりやすく書いてあります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ECMA-262/402 2016 End-Game  

AWB: slide (Key dates)  
BT: the way I want to do this, at the march meeting I want us to approve what is in master, or a snapshot. I don&#39;t want to make minor tech or editorial changes. I will make fixes if major issues exist, but otherwise I wish we can leave it as is. Leaving it as a tag  
...  
Conclusion/Resolution
   30 days before the next meeting, the final draft will be provided
   next meeting we will vote to make it ES2016
   start the out-patent review process, you may need to alert your organizations
</code></pre></div>
<p>自分は<a href="https://twitter.com/search?f=realtime&amp;q=%20%23TC39MTG" title="#TC39MTG">#TC39MTG</a>というハッシュタグをつけて読んでいます。</p>

<ul>
<li><a href="https://tc39-mtg.doorkeeper.jp/" title="TC39 MTG Notes MTG | Doorkeeper">TC39 MTG Notes MTG | Doorkeeper</a></li>
</ul>

<h2 id="tc39ミーティングノートの修正方法">TC39ミーティングノートの修正方法</h2>

<p>ここでやっと本題ですが、ミーティングノートを読んでいると結構な頻度でtypoなどの間違いやリンク切れ、Markdownの構文ミスなどが見つかると思います。</p>

<p>間違いを見つけた時は<a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>に普通にPull Requestで修正を送りましょうという話です。</p>

<p>特に<a href="https://github.com/rwaldron/tc39-notes/pull/41">今回はtypoの数が多かった</a>ので、積極的に修正を送ると他の読む人が幸せになれます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/12-1455276798.png" alt="contributing"></p>

<p>typoを直すためにかなりの数コミットしたので跳ねてる…(まだtypoは残ってるのがあると思います…)</p>

<h3 id="具体的な修正の送り方">具体的な修正の送り方</h3>

<p>やり方も何もないですが、Markdownファイルを修正して以下のリポジトリにPull Requestを送るだけです。</p>

<ul>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a></li>
</ul>

<p>注意点としてはこのミーティングノートを管理している<a href="https://github.com/rwaldron" title="rwaldron">@rwaldron</a>さんは、結構Pull Requestを見逃すことがあるのでmentionを本文に入れておいたほうが確実です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/cc @rwaldron
</code></pre></div>
<p>また、数日反応がなかったら<code>ping @rwaldron</code>などとするのがいい気がしています。</p>

<p>修正はまとめて一つのPull Requestで送ることが多いです。</p>

<h3 id="修正箇所の見つけ方">修正箇所の見つけ方</h3>

<p>結構、普通に見ていれば崩れている場所が見つかると思います。</p>

<ul>
<li>MarkdownのCodeBlockが壊れてる</li>
<li>インデントが揃ってない</li>
<li><code>----</code> が余計にある</li>
<li><code>-</code> だけが残ってる</li>
<li>リンク切れ</li>
<li>typo</li>
</ul>

<p>リアルタイムに文字起こしてるようなきがするので、スペルチェッカーを通すだけでも結構なtypoが見つかります。
(自分は英語に自信がないので、確実に間違ってるものだけ修正しています。もっと英語表現に詳しい方も修正送って欲しい…)</p>

<h2 id="おわりに">おわりに</h2>

<p>ECMAScriptの新しいProposalを知りたいという場合は、適当なブログを見るよりもProposalを書いてる人たちの意見が見られるミーティングノートを見るのが確実です。</p>

<p>ちょっと長いですが、一次情報を見ればモチベーションなどもわかるし、なんとなく見てても面白いのでおすすめです。(Conclusionだけ見ても色々分かります)</p>

<p>少なくてもBabelで<code>Stage X preset</code>を使ってる人は一度見るといいかと思います。(ミーティノートにも度々Babelの話はでてきます)</p>

<p>Angular 2を使ってる人も<a href="https://github.com/wycats/javascript-decorators">Stage 1のDecorators</a>の上に<a href="http://ecmascript-daily.github.io/2016/01/28/stage0-descorator-related">Stage 0のDecorators関連Proposal</a>があることなどを知るために見ておくべきです。</p>

<blockquote>
<p>情報の伝達が早い順で並べるとTwitter &gt; GitHub &gt; その他という感じです。<br>
-- <a href="http://jser.info/2016/02/01/es2016/#%E5%A4%89%E6%9B%B4%E3%82%92%E7%9F%A5%E3%82%8B%E6%96%B9%E6%B3%95" title="ECMAScript 2016 features &amp;amp; changes - JSer.info">ECMAScript 2016 features &amp; changes - JSer.info</a></p>
</blockquote>

<p>こうしてミーティングノートや<a href="https://github.com/tc39/ecma262" title="tc39/ecma262: Status, process, and documents for ECMA262">tc39/ecma262</a>を見て集めた&quot;その他&quot;の情報を、適当なブログである<a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>に更新しています。</p>

<p><a href="https://twitter.com/ecmascriptdaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @ecmascriptdaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p><a href="http://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>はPull Requestで誰でも記事を追加できるので興味がある人は<a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="Contributing Guideline">Contributing Guideline</a>を見てください！</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>メモアプリをDayOneからQuiverに移行した</title>
   <link href="http://efcl.info/2016/02/03/quiver/"/>
   <updated>2016-02-03T20:28:00+09:00</updated>
   <id>http://efcl.info/2016/02/03/quiver</id>
   <content type="html"><![CDATA[ <p>メモアプリとしてEvernote、OneNote、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>、DayOneなどを使っていました。</p>

<p>EvernoteとOneNoteはメモ機能は強いですが、あんまり気軽に書けるような感じじゃないのでピンときませんでした。
(画像やテーブルは便利ですが、Markdownみたいなプレーンなテキストじゃないのも微妙な点)</p>

<p>そのため、<a href="https://github.com/azu/markdown-finder">ファイルベースのMarkdown管理アプリ</a>などを作ったりしましたが、UIを作りこまないとあんまり使いやすくないということが分かったので、途中で飽きてました。</p>

<p>DayOneは気軽にMarkdownで書けて、iOSアプリもできがいいのは素晴らしいですが、検索機能が微妙でした。
(書くのはいいが、見るのが難しい)</p>

<p>最近Quiverというアプリを見つけて、これを使うようになりました。</p>

<h2 id="quiver">Quiver</h2>

<ul>
<li>AppStore: <a href="https://itunes.apple.com/jp/app/quiver-programmers-notebook/id866773894?mt=12" title="Quiver: The Programmer&amp;#39;s Notebook">Quiver: The Programmer&#39;s Notebook</a></li>
<li>Homepage: <a href="http://happenapps.com/#quiver">http://happenapps.com/#quiver</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki" title="Home · HappenApps/Quiver Wiki">Home · HappenApps/Quiver Wiki</a></li>
</ul>

<p>Quiverは<a href="http://jupyter.org/" title="Jupyter Notebook">Jupyter Notebook</a>のようにセルの概念を持っていて、Text(リッチテキスト)、Markdown、Code、Latex、Diagramsのセルがあります。</p>

<p>セルが分かれているので、Markdownで書きながらエディタ部分に画像をTextセルで埋め込んだりできます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/02/03-1454497208.png" alt="quiver"></p>

<p>また、<a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started#diagram-cell" title="Diagram Cell">Diagram Cell</a>ではシーケンスを書いたりできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Title: Here is a title
A-&gt;B: Normal line
B--&gt;C: Dashed line
C-&gt;&gt;D: Open arrow
D--&gt;&gt;A: Dashed open arrow
</code></pre></div>
<p>検索も全文検索が数千ファイルでちゃんと機能してるので問題ない感じです。</p>

<p>どういう機能があるかは以下を見るのがいいと思います。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Getting-Started" title="Getting Started · HappenApps/Quiver Wiki">Getting Started · HappenApps/Quiver Wiki</a></li>
</ul>

<p>同期はDropboxなどを使ってファイル同期する仕組みがあり(競合した時にどっちを使うかを選択出来る)、上手く動いてていい感じです。</p>

<h3 id="体験版">体験版</h3>

<p>AppStoreで販売されていますが、<a href="http://happenapps.com/#quiver">公式サイト</a>の<a href="http://happenapps.com/downloads/QuiverFreeTrial.zip">Free Trial</a>から体験版をダウンロードできます。</p>

<p>また、GitHub Issueでやり取りしてるβ版でも試すことができます。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/issues/361" title="Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver">Quiver 3.0.1 Beta · Issue #361 · HappenApps/Quiver</a></li>
</ul>

<h2 id="dayone-to-quiver">DayOne to Quiver</h2>

<p>Quiverはデータフォーマットがきちんと定義されていて、公開されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Quiver-Data-Format" title="Quiver Data Format · HappenApps/Quiver Wiki">Quiver Data Format · HappenApps/Quiver Wiki</a></li>
</ul>

<p>そのため、他のノートアプリからのimport/exportツールが色々と用意されています。</p>

<ul>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Import-Scripts">Import Scripts · HappenApps/Quiver Wiki</a></li>
<li><a href="https://github.com/HappenApps/Quiver/wiki/Export-Scripts">Export Scripts · HappenApps/Quiver Wiki</a></li>
</ul>

<p>先ほど書いたように元々はDayOneを使っていたので、DayOneからQuiver形式に変換するツールを書きました。</p>

<ul>
<li><a href="https://github.com/azu/dayone-to-quiver" title="azu/dayone-to-quiver - JavaScript">azu/dayone-to-quiver - JavaScript</a></li>
</ul>

<p>DayOne の<code>Journal.dayone</code>ファイルをQuiverのNotebook形式に変換できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g dayone-to-quiver
<span class="nv">$ </span>dayone-to-quiver --entry Journal.dayone --output output.qvnotebook

    --entry path to Journal.dayone
    --output output path
</code></pre></div>
<p>そろそろ<a href="http://dayoneapp.com/2016/01/introducing-day-one-2/" title="Day One 2">Day One 2</a>が出るようですが、変換元はDayOne 1のみ対応しています。
(DayOne 2は3カラムになっていて大分ビューアとしてよくなってそう…)</p>

<h2 id="おわり">おわり</h2>

<p>作者さんが以下のブログで書いてますが、ノートブック/メモアプリに求めるものってそういうものだよなーって感じがしたので使い始めました。</p>

<ul>
<li><a href="http://yaoganglian.com/2015/12/06/What-is-Quiver/" title="What is Quiver? | Yaogang Lian">What is Quiver? | Yaogang Lian</a></li>
</ul>

<p>フォーマットがわかりやすいので、他のいいものがでてきたら変換ツールを書けばいいかなーという感じです。</p>

<p><a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>や<a href="http://b00st.io/" title="Boostnote">Boostnote</a>がUI的に近い系統だと思いますが、その辺のフォーマットとかに不安が出てきてしまいイマイチ使うことができなかった。</p>

<p>エディタ部分が<a href="https://ace.c9.io/" title="Ace - The High Performance Code Editor for the Web">Ace</a>なのはやっぱり好きではないけど、ぎりぎり許容範囲という感じの動作です。動作的な作りこみなら<a href="http://www.ulyssesapp.com/mac/" title="Ulysses">Ulysses</a>がやっぱりできがいいと思います。</p>

<p>タイトルで移行したと書いてますが、DayOneも併用はしていてDayOneには書捨て的なメモを書いたりしてます(今日何したとか)。
日にちをまたいで書く必要があるメモがQuiver、その場その場でいいのはDayOneみたいな感じの使い分けをしています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>未知の頭字語を見つけるtextlintルール</title>
   <link href="http://efcl.info/2016/01/22/textlint-unexpanded-acronym/"/>
   <updated>2016-01-22T20:10:00+09:00</updated>
   <id>http://efcl.info/2016/01/22/textlint-unexpanded-acronym</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/textlint-rule-unexpanded-acronym" title="textlint-rule-unexpanded-acronym">textlint-rule-unexpanded-acronym</a>という<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>ルールを書きました。</p>

<p>textlint自体については以下を参照してください。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h2 id="textlint-rule-unexpanded-acronym"><a href="https://github.com/azu/textlint-rule-unexpanded-acronym" title="textlint-rule-unexpanded-acronym">textlint-rule-unexpanded-acronym</a></h2>

<p>textlint-rule-unexpanded-acronymが見つけるのは未知の<a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E5%AD%97%E8%AA%9E" title="頭字語">頭字語</a>です。</p>

<blockquote>
<p>頭字語（とうじご）とは、主にヨーロッパ言語のアルファベットにおける略語の一種で、複数の単語から構成された合成語の頭文字を繋げて作られた語のこと。</p>
</blockquote>

<ul>
<li>OSS: Open Source Software</li>
<li>IEEE: Institute of Electrical and Electronics Engineers</li>
</ul>

<p>みたいな短縮された単語です。</p>

<p>頭字語がいきなり説明なしに出てきた場合に、最後までそれがなんの略語なのかわからないと意味が分からない文章になってしまいます。</p>

<p>そのため、頭字語がでてきたらその元となった単語が文章中にでてきているかをチェックするルールです。</p>

<p>例えば、以下のような文章ではOSSがOpen Source Softwareの略であることを説明してないのでエラーとなります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">OSS開発を行う人には色々なタイプがいるはずだ。
</code></pre></div>
<p>まだアルファベットしか対応してないです(日本語対応できるのか謎)。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-unexpanded-acronym
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>で設定する場合は以下のように設定できます。
(内容はデフォルト値になっています)</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;unexpanded-acronym&quot;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;min_acronym_len&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
            <span class="nt">&quot;max_acronym_len&quot;</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
            <span class="nt">&quot;ignore_acronyms&quot;</span> <span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="設定">設定</h3>

<p>上記の設定で書いたように幾つかのオプションがあります。</p>

<ul>
<li><code>min_acronym_len</code>(default:<code>3</code>): 指定した文字数以上の頭字語をチェック対象とします。</li>
<li><code>max_acronym_len</code>(default:<code>5</code>): 指定した文字数以下の頭字語をチェック対象とします。</li>
<li><code>ignore_acronyms</code>(default:<code>[]</code>): 無視する頭字語を指定できます。</li>
</ul>

<p><code>min_acronym_len</code> 以上 <code>max_acronym_len</code> 以下の文字数をチェックするので、デフォルトでは3-5文字の頭字語だけがチェックされます。</p>

<p>また、OSSというような説明しなくても分かるであろう頭字語を無視するオプションもあります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;rules&quot;: {
        &quot;unexpanded-acronym&quot; : {
            // AB is ignore, ABC is recognized.
            &quot;min_acronym_len&quot; : 3,
            // GREEEEEEN is ignore
            &quot;max_acronym_len&quot; : 5,
            // OSS is ignore
            &quot;ignore_acronyms&quot; : [&quot;OSS&quot;]
        }
    }
}
</code></pre></div>
<h3 id="todo">TODO</h3>

<p>日本語も対応できると良さそうだけど、普通に難しそうな気がする。</p>

<p><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/96.html" title="実験: 文章に対して文章でテスト | 技術文書をソフトウェア開発する話">実験: 文章に対して文章でテスト | 技術文書をソフトウェア開発する話</a>で似たような話をしていました</p>

<h2 id="参考">参考</h2>

<p>RedPenの同様の機能を参考に実装しました。</p>

<ul>
<li><a href="http://redpen.cc/docs/latest/index.html#unexpandedacronym" title="UnexpandedAcronym">RedPen UnexpandedAcronym</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScriptのコードを分解してよく使われてる機能を分析する</title>
   <link href="http://efcl.info/2016/01/22/es-usage-rate/"/>
   <updated>2016-01-22T13:09:00+09:00</updated>
   <id>http://efcl.info/2016/01/22/es-usage-rate</id>
   <content type="html"><![CDATA[ <p><a href="http://efcl.info/2015/12/31/oss-in-2015/" title="今年のOSS活動振り返り @ 2015 | Web Scratch">今年のOSS活動振り返り @ 2015 | Web Scratch</a>で</p>

<blockquote>
<ul>
<li>JavaScript/ECMAScriptを改めてどう学べばいいのか考える

<ul>
<li><a href="https://github.com/azu/how-to-learn-es6" title="azu/how-to-learn-es6">azu/how-to-learn-es6</a>とか<a href="https://twitter.com/hashtag/thinking_in_es6?src=hash" title="#thinking_in_es6">#thinking_in_es6</a>で考えてるやつ</li>
</ul></li>
</ul>
</blockquote>

<p>というのを今年考える事としてあげていました。
それを考えるために、既存のコードがどうなってるかを見てみるという話です。</p>

<p>具体的には既存のコードを見て、そこでどういう機能/構文が多く使われているのかが分かれば、どこを中心的に学ぶと結果が出やすくなるのではという感じです。</p>

<p>それを分析するために<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">azu/es-usage-rate</a>というツールを書いた。</p>

<h3 id="installation">Installation</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g es-usage-rate
</code></pre></div>
<h3 id="使い方">使い方</h3>

<p>例えば、<code>es-usage-rate</code>自体がどういう構文を使って書かれてるかを見てみてます。</p>

<p><code>es-usage-rate</code>は他のCLIと組み合わせて使う事を前提としてるので、
デフォルトでは指定したコードをパースして、それらのAST Node typeを出力するだけです。</p>

<p>AST Node typeは以下を参照すると分かりますが、ECMAScriptの構文の名前が入ってる感じです。
(Generatorとかはtypeとしてはないので独自に出してます。</p>

<ul>
<li><a href="https://github.com/estree/estree" title="estree/estree: The ESTree Spec">estree/estree: The ESTree Spec</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>es-usage-rate <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span>
ImportDeclaration
AssignmentExpression
Identifier
CallExpression
Identifier
Identifier
CatchClause
....
</code></pre></div>
<p>注意点としては、AST Node typeというのは基本的には構文にしか<code>type</code>がついてません。
例えば、<code>Promise</code>とか構文としては新しいものではなくただのオブジェクトなので、<code>type</code>だけでは区別できないと思います。
(名前などを見れば判定はできますが面倒なのでやってないです)</p>

<p><code>es-usage-rate</code>を使えば標準出力には<code>type</code>が出現した回数だけ出力されるので、これを<a href="https://github.com/philovivero/distribution" title="philovivero/distribution">distribution</a>で集計して見たりするのが簡単な使い方です。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>git clone https://github.com/azu/es-usage-rate.git
<span class="nv">$ </span>es-usage-rate <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba --height<span class="o">=</span>50
                      Key<span class="p">|</span>Ct  <span class="o">(</span>Pct<span class="o">)</span>    Histogram
               Identifier<span class="p">|</span><span class="m">334</span> <span class="o">(</span>37.70%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            StringLiteral<span class="p">|</span> <span class="m">84</span>  <span class="o">(</span>9.48%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
           CallExpression<span class="p">|</span> <span class="m">61</span>  <span class="o">(</span>6.88%<span class="o">)</span> ▬▬▬▬▬▬▬▬
         MemberExpression<span class="p">|</span> <span class="m">55</span>  <span class="o">(</span>6.21%<span class="o">)</span> ▬▬▬▬▬▬▬
           BlockStatement<span class="p">|</span> <span class="m">38</span>  <span class="o">(</span>4.29%<span class="o">)</span> ▬▬▬▬▬
       VariableDeclarator<span class="p">|</span> <span class="m">34</span>  <span class="o">(</span>3.84%<span class="o">)</span> ▬▬▬▬▬
          ReturnStatement<span class="p">|</span> <span class="m">26</span>  <span class="o">(</span>2.93%<span class="o">)</span> ▬▬▬▬
VariableDeclaration:const<span class="p">|</span> <span class="m">25</span>  <span class="o">(</span>2.82%<span class="o">)</span> ▬▬▬
      FunctionDeclaration<span class="p">|</span> <span class="m">18</span>  <span class="o">(</span>2.03%<span class="o">)</span> ▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">17</span>  <span class="o">(</span>1.92%<span class="o">)</span> ▬▬▬
      ExpressionStatement<span class="p">|</span> <span class="m">15</span>  <span class="o">(</span>1.69%<span class="o">)</span> ▬▬
           ObjectProperty<span class="p">|</span> <span class="m">15</span>  <span class="o">(</span>1.69%<span class="o">)</span> ▬▬
                Directive<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
                  Program<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
         DirectiveLiteral<span class="p">|</span> <span class="m">14</span>  <span class="o">(</span>1.58%<span class="o">)</span> ▬▬
  ArrowFunctionExpression<span class="p">|</span> <span class="m">12</span>  <span class="o">(</span>1.35%<span class="o">)</span> ▬▬
         ObjectExpression<span class="p">|</span> <span class="m">12</span>  <span class="o">(</span>1.35%<span class="o">)</span> ▬▬
     AssignmentExpression<span class="p">|</span> <span class="m">10</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
   ExportNamedDeclaration<span class="p">|</span>  <span class="m">9</span>  <span class="o">(</span>1.02%<span class="o">)</span> ▬▬
          ImportSpecifier<span class="p">|</span>  <span class="m">9</span>  <span class="o">(</span>1.02%<span class="o">)</span> ▬▬
   ImportDefaultSpecifier<span class="p">|</span>  <span class="m">8</span>  <span class="o">(</span>0.90%<span class="o">)</span> ▬
 ExportDefaultDeclaration<span class="p">|</span>  <span class="m">7</span>  <span class="o">(</span>0.79%<span class="o">)</span> ▬
         BinaryExpression<span class="p">|</span>  <span class="m">7</span>  <span class="o">(</span>0.79%<span class="o">)</span> ▬
              IfStatement<span class="p">|</span>  <span class="m">6</span>  <span class="o">(</span>0.68%<span class="o">)</span> ▬
  VariableDeclaration:let<span class="p">|</span>  <span class="m">5</span>  <span class="o">(</span>0.56%<span class="o">)</span> ▬
           NumericLiteral<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
          ArrayExpression<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
  VariableDeclaration:var<span class="p">|</span>  <span class="m">4</span>  <span class="o">(</span>0.45%<span class="o">)</span> ▬
          TemplateElement<span class="p">|</span>  <span class="m">3</span>  <span class="o">(</span>0.34%<span class="o">)</span> ▬
            ObjectPattern<span class="p">|</span>  <span class="m">3</span>  <span class="o">(</span>0.34%<span class="o">)</span> ▬
           BreakStatement<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
        AssignmentPattern<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
               SwitchCase<span class="p">|</span>  <span class="m">2</span>  <span class="o">(</span>0.23%<span class="o">)</span> ▬
         UpdateExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          UnaryExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             ObjectMethod<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
            RegExpLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          SwitchStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
              CatchClause<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             ForStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
           BooleanLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
             TryStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
           ThrowStatement<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
            NewExpression<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
 ImportNamespaceSpecifier<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
          TemplateLiteral<span class="p">|</span>  <span class="m">1</span>  <span class="o">(</span>0.11%<span class="o">)</span> ▬
</code></pre></div>
<p>ターミナルでのグラフ表示に<a href="https://github.com/philovivero/distribution" title="philovivero/distribution">philovivero/distribution</a>を使うと便利です。</p>

<p>全部を出すとちょっと多いので、ES6の構文だけに絞ってみます。
<code>es-usage-rate</code>は<code>--reducer</code>で任意のフィルターファイル処理を指定できるので、ビルトインしてある<code>es6</code>を指定します。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>es-usage-rate --reducer es6  <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">25</span> <span class="o">(</span>24.51%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">17</span> <span class="o">(</span>16.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">12</span> <span class="o">(</span>11.76%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>7.84%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>6.86%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>4.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.94%<span class="o">)</span> ▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.94%<span class="o">)</span> ▬▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.96%<span class="o">)</span> ▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.98%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.98%<span class="o">)</span> ▬▬
</code></pre></div>
<p>ES6のうち、<code>import</code>と<code>export</code>のみを比較してみたいなら、<code>distribution</code>に渡す前にgrepすることでできます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">es-usage-rate --reducer es6  <span class="s2">&quot;es-usage-rate/src/**/*.js&quot;</span> <span class="p">|</span> grep -e <span class="s2">&quot;Import&quot;</span> -e <span class="s2">&quot;Export&quot;</span> <span class="p">|</span> distribution --char<span class="o">=</span>ba
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
       ImportDeclaration<span class="p">|</span><span class="m">17</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
         ImportSpecifier<span class="p">|</span> <span class="m">9</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ExportNamedDeclaration<span class="p">|</span> <span class="m">9</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>15.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ExportDefaultDeclaration<span class="p">|</span> <span class="m">7</span> <span class="o">(</span>13.73%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.96%<span class="o">)</span> ▬▬▬
</code></pre></div>
<p>当たり前な感じはしますが、<code>import</code>の方が<code>export</code>より使われているという結果が見えました。</p>

<p><code>es-usage-rate</code>は大した処理をしてなくて、<code>--formatter</code>、<code>--reducer</code>、<code>--mapper</code>の引数で指定したスクリプトを組み合わせて欲しい形で、コードをパースした結果を吐くためのツールです。
(<code>reduce</code>のシグネチャがイマイチなので変えるかも)</p>

<ol>
<li>parse(Code) =&gt; AST</li>
<li>map(AST) =&gt; Nodes</li>
<li>reduce(Nodes) =&gt; Nodes</li>
<li>format(Nodes) =&gt; result!</li>
</ol>

<h2 id="使われているes6の構文を見ていく">使われているES6の構文を見ていく</h2>

<p>あるコードで、どれくらいES6の構文が使われているのか、またどういう構文の使用率が高いのか、
ということを調べたくて<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">es-usage-rate</a>を書きました。</p>

<p>なので、実際に調べて行ってみます。</p>

<p>ES6で書かれていて、いろんな人が同じものを書いてるサンプルとして以下のFlux実装比較を使ってみます。</p>

<ul>
<li><a href="https://github.com/staltz/flux-challenge" title="flux-challenge">flux-challenge</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/staltz/flux-challenge.git
<span class="nb">cd </span>flux-challeng/submissions
<span class="c"># 人別に見ていく</span>
find . ! -path . -type d -maxdepth <span class="m">1</span> <span class="p">|</span> xargs -I <span class="o">{}</span>  ksh -c <span class="s1">&#39;echo {}; es-usage-rate &quot;{}/**/*.js&quot; --reducer es6 2&gt; /dev/null  | distribution --char=ba&#39;</span>
./abaran
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
         ImportSpecifier<span class="p">|</span><span class="m">15</span> <span class="o">(</span>18.99%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ExportNamedDeclaration<span class="p">|</span><span class="m">12</span> <span class="o">(</span>15.19%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
       ImportDeclaration<span class="p">|</span><span class="m">11</span> <span class="o">(</span>13.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ArrowFunctionExpression<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ClassDeclaration<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
               ClassBody<span class="p">|</span><span class="m">10</span> <span class="o">(</span>12.66%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
           ObjectPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
       AssignmentPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.27%<span class="o">)</span> ▬▬▬
./arqex
                     Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
       ImportDeclaration<span class="p">|</span><span class="m">15</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ImportDefaultSpecifier<span class="p">|</span><span class="m">14</span> <span class="o">(</span>31.11%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ExportDefaultDeclaration<span class="p">|</span> <span class="m">5</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>8.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
               ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>8.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬
 ArrowFunctionExpression<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>4.44%<span class="o">)</span> ▬▬▬▬▬▬
         ImportSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>2.22%<span class="o">)</span> ▬▬▬
./ds300
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">8</span> <span class="o">(</span>57.14%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">5</span> <span class="o">(</span>35.71%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>7.14%<span class="o">)</span> ▬▬▬▬▬▬
./fab1an
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">12</span> <span class="o">(</span>66.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span> <span class="m">2</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span> <span class="o">(</span>11.11%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>5.56%<span class="o">)</span> ▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>5.56%<span class="o">)</span> ▬▬▬▬
./garbles
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">34</span> <span class="o">(</span>33.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">28</span> <span class="o">(</span>27.45%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.65%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.92%<span class="o">)</span> ▬▬▬▬▬
./hyperturtle
./jas-chen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">75</span> <span class="o">(</span>35.89%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">27</span> <span class="o">(</span>12.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">27</span> <span class="o">(</span>12.92%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">26</span> <span class="o">(</span>12.44%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">13</span>  <span class="o">(</span>6.22%<span class="o">)</span> ▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>5.26%<span class="o">)</span> ▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>5.26%<span class="o">)</span> ▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.87%<span class="o">)</span> ▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.87%<span class="o">)</span> ▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
                ClassBody<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>0.96%<span class="o">)</span> ▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.48%<span class="o">)</span> ▬
./jelz
./jollytoad
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">66</span> <span class="o">(</span>37.29%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">53</span> <span class="o">(</span>29.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span><span class="m">33</span> <span class="o">(</span>18.64%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>3.95%<span class="o">)</span> ▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>3.39%<span class="o">)</span> ▬▬▬▬
              RestElement<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>2.82%<span class="o">)</span> ▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
          TemplateElement<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.13%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.56%<span class="o">)</span> ▬
./josepot
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">54</span> <span class="o">(</span>21.09%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">40</span> <span class="o">(</span>15.62%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">39</span> <span class="o">(</span>15.23%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">27</span> <span class="o">(</span>10.55%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">23</span>  <span class="o">(</span>8.98%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">18</span>  <span class="o">(</span>7.03%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span><span class="m">14</span>  <span class="o">(</span>5.47%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>3.52%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>3.12%<span class="o">)</span> ▬▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>2.73%<span class="o">)</span> ▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>2.34%<span class="o">)</span> ▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.56%<span class="o">)</span> ▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.56%<span class="o">)</span> ▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>1.17%<span class="o">)</span> ▬▬▬
./kyldvs
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
        ImportDeclaration<span class="p">|</span><span class="m">31</span> <span class="o">(</span>23.31%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">28</span> <span class="o">(</span>21.05%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">24</span> <span class="o">(</span>18.05%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">18</span> <span class="o">(</span>13.53%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>6.02%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>6.02%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>3.76%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.01%<span class="o">)</span> ▬▬▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.01%<span class="o">)</span> ▬▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.50%<span class="o">)</span> ▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.75%<span class="o">)</span> ▬▬
./leoasis
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">20</span> <span class="o">(</span>19.80%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">18</span> <span class="o">(</span>17.82%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">17</span> <span class="o">(</span>16.83%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">12</span> <span class="o">(</span>11.88%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span> <span class="m">9</span>  <span class="o">(</span>8.91%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>5.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>3.96%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
                ClassBody<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.97%<span class="o">)</span> ▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
        AssignmentPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.98%<span class="o">)</span> ▬▬▬▬▬
./masiulis
./mattjbray
./milankinen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">23</span> <span class="o">(</span>34.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">17</span> <span class="o">(</span>25.37%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">10</span> <span class="o">(</span>14.93%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>11.94%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>8.96%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬
./mweststrate
./mynomoto
./pasieronen
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
VariableDeclaration:const<span class="p">|</span><span class="m">20</span> <span class="o">(</span>26.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
  ArrowFunctionExpression<span class="p">|</span><span class="m">16</span> <span class="o">(</span>21.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">13</span> <span class="o">(</span>17.33%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span> <span class="o">(</span>10.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>8.00%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span> <span class="m">5</span>  <span class="o">(</span>6.67%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>2.67%<span class="o">)</span> ▬▬▬▬▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>2.67%<span class="o">)</span> ▬▬▬▬▬
              RestElement<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
             ArrayPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
          ExportSpecifier<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>1.33%<span class="o">)</span> ▬▬▬
./pindia
./retozi
./salsita
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">99</span> <span class="o">(</span>30.09%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">83</span> <span class="o">(</span>25.23%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">54</span> <span class="o">(</span>16.41%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">38</span> <span class="o">(</span>11.55%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ImportNamespaceSpecifier<span class="p">|</span><span class="m">22</span>  <span class="o">(</span>6.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">11</span>  <span class="o">(</span>3.34%<span class="o">)</span> ▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">7</span>  <span class="o">(</span>2.13%<span class="o">)</span> ▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>1.82%<span class="o">)</span> ▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">4</span>  <span class="o">(</span>1.22%<span class="o">)</span> ▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>0.91%<span class="o">)</span> ▬▬
            ObjectPattern<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.30%<span class="o">)</span> ▬
  VariableDeclaration:let<span class="p">|</span> <span class="m">1</span>  <span class="o">(</span>0.30%<span class="o">)</span> ▬
./staltz
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">40</span> <span class="o">(</span>29.85%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">35</span> <span class="o">(</span>26.12%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">19</span> <span class="o">(</span>14.18%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">15</span> <span class="o">(</span>11.19%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span> <span class="m">8</span>  <span class="o">(</span>5.97%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬▬
          TemplateElement<span class="p">|</span> <span class="m">6</span>  <span class="o">(</span>4.48%<span class="o">)</span> ▬▬▬▬▬▬▬
          TemplateLiteral<span class="p">|</span> <span class="m">3</span>  <span class="o">(</span>2.24%<span class="o">)</span> ▬▬▬▬
            ObjectPattern<span class="p">|</span> <span class="m">2</span>  <span class="o">(</span>1.49%<span class="o">)</span> ▬▬▬
./stinson7
./winstonewert
                      Key<span class="p">|</span>Ct <span class="o">(</span>Pct<span class="o">)</span>    Histogram
  ArrowFunctionExpression<span class="p">|</span><span class="m">7</span> <span class="o">(</span>24.14%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
        ImportDeclaration<span class="p">|</span><span class="m">6</span> <span class="o">(</span>20.69%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
   ImportDefaultSpecifier<span class="p">|</span><span class="m">4</span> <span class="o">(</span>13.79%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
 ExportDefaultDeclaration<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
          ImportSpecifier<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
   ExportNamedDeclaration<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
        AssignmentPattern<span class="p">|</span><span class="m">2</span>  <span class="o">(</span>6.90%<span class="o">)</span> ▬▬▬▬▬▬▬▬▬▬▬▬▬
           ForOfStatement<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
VariableDeclaration:const<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
         ClassDeclaration<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
                ClassBody<span class="p">|</span><span class="m">1</span>  <span class="o">(</span>3.45%<span class="o">)</span> ▬▬▬▬▬▬▬
</code></pre></div>
<p>注意点としては、<code>if</code>とか<code>var</code>などの方が<code>class</code>などより出現率が高いのは当たり前なので、
単純にランキングとして見ると少し観点としてズレがある気がします。</p>

<p>人別の結果を重ねて見たいので、ちょっと縦長だと見えにくい気がします。</p>

<p>とりあえず<a href="https://github.com/azu/es-usage-rate/blob/master/src/formatters/json-by-all.js" title="json-by-all">json-by-all</a>というformatterを書いたので、これを元にCSV化してみてNumbersでグラフにしてみます。
(Rとかそういうので処理したかったけど、簡単な方法が欲しい…)</p>

<p>標準入力の文字列を既存のJSON配列に追記していく<a href="https://github.com/azu/json-append" title="json-append">json-append</a>というも書いたので、以下のようにすれば、それぞれの人(ディレクトリ)ごとの集計結果を得られます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">find . ! -path . -type d -maxdepth <span class="m">1</span> <span class="p">|</span> xargs -I <span class="o">{}</span>  ksh -c <span class="s1">&#39;echo {}; es-usage-rate &quot;{}/**/*.js&quot; --reducer es6 --formatter json-by-all  | json-append results.json&#39;</span>
</code></pre></div>
<p>これでJSONとして集計結果が手に入ったので、これをCSVにしてExcelとかで読み込ませてみます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./abaran/src/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./arqex/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./ds300/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">5</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./fab1an/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./garbles/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">34</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">4</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jas-chen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">75</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">26</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jelz/resources/public/js/app.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./jollytoad/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">53</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">66</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">33</span><span class="p">,</span>
    <span class="nt">&quot;RestElement&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./josepot/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">3</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./kyldvs/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./leoasis/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mattjbray/dist/app.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./milankinen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">8</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mweststrate/dist/bundle.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./mynomoto/index.html.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./pasieronen/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nt">&quot;RestElement&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ArrayPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ExportSpecifier&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./pindia/reflux.min.js&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./retozi/&quot;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./salsita/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportNamespaceSpecifier&quot;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">83</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:let&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./staltz/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;TemplateLiteral&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&quot;TemplateElement&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&quot;ObjectPattern&quot;</span><span class="p">:</span> <span class="mi">2</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&quot;@file&quot;</span><span class="p">:</span> <span class="s2">&quot;./winstonewert/&quot;</span><span class="p">,</span>
    <span class="nt">&quot;ImportDeclaration&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&quot;ImportDefaultSpecifier&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nt">&quot;ExportNamedDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ArrowFunctionExpression&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&quot;ImportSpecifier&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;VariableDeclaration:const&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;AssignmentPattern&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ExportDefaultDeclaration&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;ClassDeclaration&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ClassBody&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;ForOfStatement&quot;</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>
<p>JSON to CSVをするには</p>

<ul>
<li><a href="https://github.com/zemirco/json2csv#command-line-interface" title="json2csv">json2csv</a></li>
<li><a href="http://konklone.io/json/" title="JSON to CSV">JSON to CSV</a></li>
</ul>

<p>などが使えます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">json2csv -i results.json -o results.csv
<span class="c"># 何か要素が消える気がする… </span>
</code></pre></div>
<p>Numbersで読み込んで積み重ね棒グラフにしてみました。</p>

<p><a href="http://efcl.info/wp-content/uploads/2016/01/22-1453435236.png"><img src="http://efcl.info/wp-content/uploads/2016/01/22-1453435236.png" alt="graph"></a></p>

<p>先ほども書いたように 数が多い ≠ 使われる頻度が高い なので、
大して意味のないグラフです。(どういうグラフ使うのがいいんだろ?)</p>

<p>カラフル具合から<code>ArrowFunctionExpression</code> (Arrow Function)や<code>const</code>はやっぱり使われてるなーとか、
<code>require</code>でもいいはずだけど<code>import</code>を使ってる人も多いなどがわかった気がします。</p>

<p>この辺は題材によるので、色々なものを見てみると面白い発見があるかもしれません。</p>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>コードを分解して解析する<a href="https://github.com/azu/es-usage-rate" title="azu/es-usage-rate">azu/es-usage-rate</a>を作った</li>
<li>ES6のサンプルコードとして<a href="https://github.com/staltz/flux-challenge" title="staltz/flux-challenge: A frontend challenge to test UI architectures and solutions">staltz/flux-challenge: A frontend challenge to test UI architectures and solutions</a>を見た</li>
<li>人/ライブラリによって使う機能が結構違うことがわかった</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JSer.info 5周年記念イベント アウトラインメモ</title>
   <link href="http://efcl.info/2016/01/17/jserinfo-5years/"/>
   <updated>2016-01-17T16:42:00+09:00</updated>
   <id>http://efcl.info/2016/01/17/jserinfo-5years</id>
   <content type="html"><![CDATA[ <p><a href="http://jser.connpass.com/event/24202/" title="JSer.info 5周年記念イベント">JSer.info 5周年記念イベント</a>を開催&amp;参加してきたのでメモ。</p>

<p>スライドとかの概要は以下にも書いてあります。</p>

<ul>
<li><a href="http://jser.info/2016/01/16/jser-5years/">JSer.info 5周年記念イベントを開催しました - JSer.info</a></li>
<li><a href="http://togetter.com/li/926573">JSer.info 5周年記念イベント - Togetterまとめ</a></li>
</ul>

<p>以下メモ書きです。</p>

<h2 id="jser.info-5周年---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/jser.info.html" title="JSer.info 5周年">JSer.info 5周年</a> - @azu_re</h2>

<p>5年間での総計は以下のような感じになりました。</p>

<ul>
<li>投稿記事数: 261</li>
<li>毎週1回投稿: (261*7) / 365 ≒ 5(年)</li>
<li>合計紹介URL数: 6312</li>
</ul>

<h2 id="javascript情報って何だっけ?---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/javascript-information.html">JavaScript情報って何だっけ?</a> - @azu_re</h2>

<p>そもそもなんでJavaScriptについて知りたいのという話。
後で別記事書くかも</p>

<h2 id="angularの5年とこれから---@armorik83"><a href="https://speakerdeck.com/armorik83/angularfalse5nian-tokorekara" title="Angularの5年とこれから">Angularの5年とこれから</a> - @armorik83</h2>

<ul>
<li>Angularも変化が大きい</li>
<li>フロントエンドの歴史とバインディングの歴史</li>
<li>Ajax + jQueryを始めとすると技術</li>
<li>Backbone.js MV*architectureの提案</li>
<li>AngularJS双方向データバインディング

<ul>
<li>DI</li>
<li>双方向データバインディング</li>
</ul></li>
<li>AngularJSの弱点の顕在化

<ul>
<li>冗長なDirty Checkingが問題視される</li>
<li>React 仮想DOM</li>
</ul></li>
<li>Angular beta 0リリース

<ul>
<li><code>@input</code>、<code>@output</code>というAPI</li>
<li>Component間のデータ、イベントバンディングを整合化</li>
<li>下から来た情報をバブリングじゃなくて<code>output</code>という属性にいれて</li>
</ul></li>
<li>TypeScript前提、

<ul>
<li>型情報、型アノテーション</li>
</ul></li>
<li>Change Detection

<ul>
<li><a href="http://qiita.com/laco0416/items/78edd53f5da8ead02e75" title="Angular2のChange Detectionについて - Qiita">Angular2のChange Detectionについて - Qiita</a></li>
</ul></li>
<li><code>ngAnimate</code>

<ul>
<li>引き続きサポート</li>
<li>スコープをコンポーネント内に限定出来る<code>Style</code></li>
</ul></li>
<li>AngularJSの互換性

<ul>
<li>ngUpdate

<ul>
<li>プロセスの名前</li>
<li>Misko Hveryによるもの</li>
</ul></li>
<li>1.xのなかで2を使う方法</li>
</ul></li>
<li>Offline Compiled Template

<ul>
<li>独特なHTMLで表記できるAngular</li>
</ul></li>
<li>Angular Universal

<ul>
<li>ブラウザとNode.jsの両方で動くJS</li>
<li>サーバサイドレンダリングをDOMRendererとServerDOMRendererの切り替えで出来る</li>
<li>SEO対応とかも</li>
</ul></li>
<li>Web Workers

<ul>
<li>Angular 2のほぼ全てのコードをWeb Workers上で実行する仕組み</li>
</ul></li>
<li>AngularDart

<ul>
<li>Dartの資産</li>
<li>Angular 2のマイクロタスクキュー Zone.js</li>
<li>TypeScriptで利用可能になった Decorators構文</li>
</ul></li>
<li>情報源

<ul>
<li><a href="http://ng2-info.github.io/" title="Angular2 Info">Angular2 Info</a></li>
</ul></li>
<li>Angular 1のメンテンス期間

<ul>
<li>みんなが使わなくなるまでメンテする</li>
</ul></li>
</ul>

<h2 id="webidlを見てみる---@takenspc"><a href="http://www.slideshare.net/takenspc/webidl" title="WebIDLを見てみる">WebIDLを見てみる</a>  - @Takenspc</h2>

<ul>
<li>ブラウザに実装されてるWeb IDLを見てみる</li>
<li>ブラウザで使えるAPI: 沢山ある

<ul>
<li>新たなAPIが生まれる</li>
<li>途中でAPIが変わる</li>
</ul></li>
<li>実際に使えるAPIは何なのか、知りたい</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="s2">&quot;...&quot;</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">param</span> <span class="nx">of</span> <span class="nx">url</span><span class="p">.</span><span class="nx">searchParams</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">param</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">param</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>ブラウザの実装とドキュメントが分離されてる

<ul>
<li>別々にメンテナンスされてる</li>
</ul></li>
<li>自分が欲しいと思っている粒度なのか頻度は別になってる</li>
<li>ブラウザの実装ってだけが書いているのか?

<ul>
<li>誰かが何かを元に書いている</li>
</ul></li>
<li>各種ブラウザはWebIDLからインタフェースを機械生成している</li>
<li>WebIDLがブラウザと仕様を結ぶもの。</li>
<li>ブラウザと仕様での共通言語の1つ

<ul>
<li>共通言語なので比較が出来る</li>
</ul></li>
<li>WebIDLを比較して見てみるという話</li>
<li>FirefoxでChromeでIDLの使い方が違う</li>
<li>WebIDLを比較するには

<ul>
<li>継承や<code>[</code>　Extended attributes <code>]</code> をなどがある</li>
<li>これらを正規化する必要がある</li>
</ul></li>
<li>まとめ

<ul>
<li>WebIDLはしようとブラウザーの共通言語の1つ</li>
</ul></li>
</ul>

<h2 id="[ie8枠]-ぼくたちの愛したie8---@hasegawayosuke">[IE8枠] ぼくたちの愛したIE8 - @hasegawayosuke</h2>

<ul>
<li>XSSでalert出すためにJavaScriptを覚えた</li>
<li>IE8のすごい機能</li>
<li>XSSフィルター

<ul>
<li>リクエストとレスポンスを比較 スクリプトがあったら実行を阻止</li>
<li>保守的なのに大胆な機能</li>
<li>XSSフィルターを使ってXSS</li>
</ul></li>
<li>XDomainRequest

<ul>
<li>クロスオリジンで使えるXHRモドキ</li>
</ul></li>
<li>toStaticHTML

<ul>
<li>いい感じに安全なHTMLにしてくれる</li>
<li>HTMLメールとかMarkdownなどで使える</li>
<li>細かい指定ができない</li>
<li>他のブラウザでは簡単な代替方法がない

<ul>
<li>DOMPurifyなど</li>
<li>HTML5 iframe sandbox</li>
</ul></li>
<li>標準化もされていないのであんまり使われない</li>
</ul></li>
<li>X-Content-Type-Options

<ul>
<li>Content-Typeに従うようになる</li>
<li>普通の挙動</li>
</ul></li>
<li>X-Frame-Options

<ul>
<li>クリックジャッキングへの対応</li>
</ul></li>
</ul>

<h2 id="[ie8枠]-active-scripting---@makoto_kato">[IE8枠] <a href="http://www.slideshare.net/djraven/active-scripting" title="Active scripting">Active scripting</a> - @makoto_kato</h2>

<ul>
<li>IE4-8のアーキテクチャ

<ul>
<li>COM API</li>
<li>Browser Helper Object(BHO) API for ブラウザ拡張</li>
<li>プラガブルなプロトコル</li>
</ul></li>
<li>Active Scription

<ul>
<li>COM I/Fバインディングエンジン</li>
<li>For Engine API</li>
<li>For Host API - サードパーティでも使える</li>
<li>IE3-8</li>
<li>WSH</li>
<li>IIS</li>
<li>Office</li>
</ul></li>
<li>バックエンドも色々

<ul>
<li>MS

<ul>
<li>JScript</li>
<li>VBScript</li>
</ul></li>
<li>3Party

<ul>
<li>Ruby</li>
<li>Python</li>
<li>Perl</li>
<li>PHP</li>
<li>etc..</li>
</ul></li>
<li>サードパーティアプリでIEのセキュリティホールを作れる</li>
</ul></li>
<li>COM Interfaces

<ul>
<li>IE IDispatchEx</li>
</ul></li>
</ul>

<h2 id="非同期イベントがんばるぞい---@saneyuki_s">非同期イベントがんばるぞい - @saneyuki_s</h2>

<ul>
<li>イベント

<ul>
<li>Data</li>
<li>Domain</li>
<li>File I/O</li>
<li>Net work I/O</li>
<li>等色々イベントがある</li>
</ul></li>
<li>イベントの依存関係の管理が面倒問題</li>
<li>FRP</li>
<li>何でイベントを待ち受けられないの?</li>
<li>Duality

<ul>
<li>PullとPush型</li>
</ul></li>
<li>イベントは何で<code>Observable&lt;T&gt;</code>にするのか

<ul>
<li>一回しか来ないイベント</li>
<li>複数回来るイベント</li>
</ul></li>
<li>Promiseは基本的に1回のイベント(使い捨て)</li>
<li>複数回のイベントに対応するためにObservableという考え方の話</li>
<li>FRPとは?

<ul>
<li>FRPとRxは別の動物であるという話</li>
<li>似たような仕組みだけど違うもの</li>
</ul></li>
<li>Jafar Husain

<ul>
<li>.NetのものをJSにもってきた</li>
</ul></li>
<li>イベント文字列を機械的に考えられるようになった

<ul>
<li>パースしてASTで処理出来るようなイベントの流れ</li>
<li>イベントのgotoみたいなものじゃなくてもっと宣言的な流れ</li>
</ul></li>
</ul>

<hr>

<ul>
<li>How abstract RPC call

<ul>
<li>イベントをRPCのようなものだと考える</li>
</ul></li>
<li>RPCのコンセプト

<ul>
<li>Address どこへ</li>
<li>Protocol どうやって</li>
<li>Data type どういう値を渡して、どういう値を返すか</li>
</ul></li>
<li>根本的な哲学は再利用が可能である

<ul>
<li>ABC(Address &amp; Protocol &amp; Data typeと同じ)</li>
</ul></li>
<li>これはFlux

<ul>
<li>ActionとDispatcherと似た感じ</li>
<li>Actionはイベントをオブジェクトとして名前を付けた感じ</li>
</ul></li>
</ul>

<hr>

<h2 id="react-on-現場---@mizchi">React on 現場 - @mizchi</h2>

<ul>
<li>あるいはModern JavaScript on Rails</li>
</ul>

<p>モダンJSとは</p>

<ol>
<li>npm/Browserify</li>
<li>Babel/ES2015</li>
<li>React/Fux</li>
<li>Testable</li>
<li>No more jQuery plugins</li>
</ol>

<p>という構成</p>

<ul>
<li>使われてないものを捨てるのは簡単</li>
<li>でも使われてると書き換えないと行けないので辛い</li>
</ul>

<p>何か良くしてくれ - 方針</p>

<ul>
<li>再利用できるものと再利用出来るものを分ける</li>
<li>エディタの書き換えへの挑戦

<ul>
<li>コード量が多い</li>
<li>Kobitoとかやってたのでノウハウ活かせるかも</li>
</ul></li>
<li>破綻

<ul>
<li>分量</li>
<li>ドメイン知識が色々必要</li>
</ul></li>
<li>教訓

<ul>
<li>仕様を理解してないものはコード書けない</li>
<li>モジュールの境界面が明示されてないものは分解できない</li>
</ul></li>
<li>ゴールの設定

<ul>
<li>新規モジュールを負債を引き継ぐことなく受け入れられる環境</li>
<li>Turbolinksが導入可能な初期化フロー

<ul>
<li>Turbolinkは初期化フローの制御ができてないと行けない</li>
</ul></li>
</ul></li>
<li>やったこと

<ul>
<li>npmに依存ライブラリを集約

<ul>
<li>ライブラリごとに異なるCDNを参照</li>
<li>オーバーヘッドが大きい</li>
<li>どのライブラリを使ってるか分からない</li>
</ul></li>
<li>npmとbowerでライブラリの依存を解決

<ul>
<li>npmを優先的に使う</li>
</ul></li>
<li>Browserify導入

<ul>
<li>Sprocketsを捨てる</li>
<li>Rails上のデファクトモジュールシステム</li>
</ul></li>
<li>Sprocketsの問題

<ul>
<li>ファイルスコープで返り値を持てない</li>
<li>Nodeで動かない</li>
<li>RubyとJSの問題切り分けられない</li>
<li>JavaScriptのエコシステムに乗れない</li>
<li>Sprocketsで動くJS系のgemメンテされない</li>
</ul></li>
<li>書き換える

<ul>
<li>分量が多い</li>
<li>平行して開発している機能が沢山あってコンフリクトする</li>
<li>スクリプトを書いて一発</li>
<li>全てのモジュールをCommonJS形式に書き換えた</li>
</ul></li>
<li>Browserifyによって変わったこと

<ul>
<li>依存がそれぞれのファイルで完結した状態になる</li>
<li>単体テスト可能な閉じた参照の提供</li>
<li>名前空間の初期化順に左右されない</li>
</ul></li>
<li>gulp

<ul>
<li>browserify-rails

<ul>
<li>中ではbrowserify-incrementalを使ってる</li>
</ul></li>
</ul></li>
<li>Babel

<ul>
<li>Babelのロード時間が長い</li>
<li>プロセスを毎回立てると、毎回読み込みが起きてしまう</li>
</ul></li>
<li>テスト

<ul>
<li><code>require.cache</code></li>
</ul></li>
<li>React化

<ul>
<li>Qiitaのヘッダー</li>
<li>Fluxの選定が面倒だったのでベタ書き</li>
<li><a href="http://qiita.com/mizchi/items/79673c4d406cc85b44aa" title="redux への 不満を解消する為に, flumptというFlux実装を作った - Qiita">redux への 不満を解消する為に, flumptというFlux実装を作った - Qiita</a></li>
<li>FluxはアプリケーションRootを管理するものが多いので、小さくPub/Subしたい</li>
</ul></li>
<li>react-unit

<ul>
<li>ReactのshaddlowRenderのラッパー</li>
</ul></li>
</ul></li>
<li>まとめ

<ul>
<li>必要なのは「仕様理解」と「勇気」</li>
</ul></li>
</ul>

<hr>

<h2 id="javascript-discussion">JavaScript Discussion</h2>

<p><a href="https://app.sli.do/event/0egbwyxz/ask"><img src="https://monosnap.com/file/z2VC0MmCQKox5DjQXlvOpNaYQjVhum.png" alt="discussion"></a></p>

<ul>
<li><a href="https://app.sli.do/event/0egbwyxz/ask" title="[JSer.info] JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)">[JSer.info] JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)</a></li>
</ul>

<p>を元に議論</p>

<blockquote>
<p>JSはいつ無くなるのか。</p>
</blockquote>

<p>ウェブが死ぬまで?</p>

<blockquote>
<p>モダンなJSの構成で開発したらこんなに良いことがありました！儲かりました！みたいな話が、もっと世の中に出回ると良いと思っています。</p>
</blockquote>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">modern JavaScript に変えてサーバーの転送量が減った <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; kiyoshi nomo (@kysnm) <a href="https://twitter.com/kysnm/status/688287820717281280">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
<p>WebGLって流行るの？</p>
</blockquote>

<p>WebGLは使われるようになる。(WebGL自体というよりはそれを利用したものが使われてる)</p>

<p>WebGL流行る = SVG流行る</p>

<blockquote>
<p>IE6,7,8 のサポートはもう切ってもいいですか……?</p>
</blockquote>

<ul>
<li>プロダクトはプロダクト次第</li>
<li>ライブラリは切る+shim入れれば動くという形にする例

<ul>
<li>サポート切るのはmajorアップデートなのか(コードは変化してないが)</li>
</ul></li>
</ul>

<blockquote>
<p>O.o とは何だったのか</p>
</blockquote>

<p>顔文字</p>

<blockquote>
<p>jQueryって皆使ってるの？バージョンは？</p>
</blockquote>

<p>jQuery自体を使ってる人が全体の半分以下ぐらい。</p>

<p>バージョン</p>

<ul>
<li>9割が1.x系。</li>
<li>1割が2.x/3.x系</li>
</ul>

<blockquote>
<p>JavaScriptがコンパイル言語っぽくなってるのはどうやったら解決するのかな?</p>
</blockquote>

<p>ECMAScriptの新しい機能を試すのにビルドツールとかが必要みたいな話。
いろんなところでビルドツールが必要になる。</p>

<p>言語にマクロのような機能がないので、こういったTranspilerは仕様と実装の緩衝材となるため重要という話。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">使用したフィードバックを渡せるので開発者と使用者の溝を埋めれる。だから現在のbabelによるトランスパイルが重要という考えすごい <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; rChaser53 (@rChaser53) <a href="https://twitter.com/rChaser53/status/688299229157011457">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
<p>hasegawayusuke さんへ electron XSS の怖いところを伝えて下さい</p>
</blockquote>

<p>ElectronでXSSが起きると、任意のコード実行ができてしまう問題について</p>

<blockquote>
<p>いつになったらFlashを超えられるのか。足りないものは何か？</p>
</blockquote>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">JSがFlashを超えるのに足りないものはなにか？&#10;→GUIエディタがない&#10;それっぽいのはたまにぽつぽつでてくるけど大きくならない <a href="https://twitter.com/hashtag/jserinfo?src=hash">#jserinfo</a></p>&mdash; よしこ (@yoshiko_pg) <a href="https://twitter.com/yoshiko_pg/status/688299239495999488">January 16, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="chrome-api-#jserinfo---kyo_ago"><a href="http://0-9.sakura.ne.jp/pub/lt/JSerInfo20160116/start.html" title="Chrome API #jserinfo">Chrome API #jserinfo</a> - kyo_ago</h2>

<ul>
<li>Chrome Extension/OSのAPIについて</li>
</ul>

<h2 id="railsのrailから解放される始めの一歩---joe-re"><a href="http://www.slideshare.net/masatonoguchi169/railsrails-57123076" title="RailsのRailから解放される始めの一歩">RailsのRailから解放される始めの一歩</a> - joe-re</h2>

<ul>
<li><a href="http://qiita.com/joe-re/items/1d5e1d0527cc439e03ef" title="Rails - フロントエンド開発における革命とビルドプロセスについて - Qiita">Rails - フロントエンド開発における革命とビルドプロセスについて - Qiita</a></li>
<li>Sprockets捨てたい理由</li>
<li>Railsのfingerprintの解決が難しい</li>
<li>まだ app/asset に成果物を吐いてる</li>
<li>Reduxはロックイン感があるので、<a href="https://facebook.github.io/flux/docs/flux-utils.html" title="Flux Utils">Flux Utils</a>を使うという話</li>
</ul>

<p><a href="http://joe-re.hatenablog.com/entry/2016/01/17/151923" title="JSer.info 5周年記念イベントに行ってきた(LTもした) #jserinfo - Please Drive Faster">JSer.info 5周年記念イベントに行ってきた(LTもした) #jserinfo - Please Drive Faster</a></p>

<hr>

<h2 id="node-eps---@yosuke_furukawa"><a href="https://speakerdeck.com/yosuke_furukawa/nodeeps" title="nodeeps // Speaker Deck">node-eps</a> - @yosuke_furukawa</h2>

<ul>
<li><a href="https://github.com/nodejs/node-eps" title="Node.js Enhancement Proposals">Node.js Enhancement Proposals</a>について</li>
<li>C++ Streams</li>
<li>ES6 Modules interop

<ul>
<li><a href="https://docs.google.com/presentation/d/1tXziuBheum53jk-FgtFkEUGKNVTdHzbpzhJLk7FatGc/present#slide=id.p" title="ES6/WhatWG Loader &amp;amp; Node - Google スライド">ES6/WhatWG Loader &amp; Node - Google スライド</a></li>
<li>Node/ES6 どっちからも読めるようにするという</li>
<li>JSのレイヤーじゃなくて、C++のレイヤーでfallbackさせてtryする</li>
</ul></li>
</ul>

<h2 id="sc22-ecmascript-ad-hoc委員会---@azu_re"><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a> - @azu_re</h2>

<p>ISO/IEC 16262であるECMASCript仕様の策定プロセスやどういう活動をしてるかという話。</p>

<p><a href="http://azu.github.io/slide-what-is-ecmascript/" title="Introduction | ECMAScriptとは何か？">Introduction | ECMAScriptとは何か？</a>とはまた違う話です。</p>

<h2 id="ava---@t_wada">AVA - @t_wada</h2>

<ul>
<li><a href="https://github.com/sindresorhus/ava" title="sindresorhus/ava: Futuristic test runner">sindresorhus/ava: Futuristic test runner</a>について</li>
<li>sindresorhusのオピニオンが強い話</li>
<li>後発のTest Runnerは独自性を求められる</li>
<li>テストケースのネストはnon support</li>
<li>代わりに並列性</li>
<li>ネストではなくファイルを分けろという方針</li>
<li>power-assertがビルトイン</li>
</ul>

<h2 id="ortcの話---jxck">ORTCの話 - jxck</h2>

<ul>
<li><a href="https://github.com/openpeer/ortc" title="openpeer/ortc">openpeer/ortc</a>のHTMLを修正してる話</li>
<li>Bookflashの人がメイン

<ul>
<li>IETF系のプロトコルギークの人</li>
<li>JavaScriptよくわからない</li>
</ul></li>
<li>PRしまくる日々

<ul>
<li>PRしまくってたら「お前の方が上手く(Example)書けると思うけど?」</li>
</ul></li>
<li>Exampleをどう書いていくのか

<ul>
<li>標準仕様なのでどう書けばいいのか</li>
</ul></li>
<li>将来的にWebRTCにマージ WebRTC NVになるかも</li>
<li>Promiseも部分的に入ってる</li>
<li>そもそもExampleの目的

<ul>
<li>APIの呼び出し方を例示する</li>
<li>呼び出し順序を例示する</li>
</ul></li>
<li>参照される可能性が高い

<ul>
<li>本質はわかりやすく</li>
<li>新しい機能を使うと記述が少なくて見やすい</li>
<li>逆に「俺の知っているJSと違う」問題</li>
</ul></li>
<li>どれくらいのレベルで書くのか?

<ul>
<li>仕様をどれくらいのJavaScriptで書くのか</li>
<li>仕様書を読む人のレベル想定</li>
<li>ExampleはMSEdgeで動くレベルのAPIで書くか</li>
<li>let、Arrow Function、module、async await</li>
</ul></li>
</ul>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintで文章カバレッジレポートを継続的に見ていく</title>
   <link href="http://efcl.info/2016/01/12/textlint-coverage/"/>
   <updated>2016-01-12T09:44:00+09:00</updated>
   <id>http://efcl.info/2016/01/12/textlint-coverage</id>
   <content type="html"><![CDATA[ <h2 id="文章カバレッジ">文章カバレッジ</h2>

<p>以前、<a href="https://azu.gitbooks.io/nodefest-technical-writing/content/" title="Introduction | 技術文書をソフトウェア開発する話">技術文書をソフトウェア開発する話</a>で<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>や<a href="https://www.gitbook.com/" title="GitBook · Writing made easy">GitBook</a>を使って文書を開発する方法についてお話しました。</p>

<p>その時に、自然言語のチェックの自動化などはまだ色々考えられることがあるという話をしました。</p>

<blockquote>
<p>文書のテストはまだまだ色々できることがある<br>
カバレッジを取るとかメトリクスを取るとか<br>
-- <a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/100.html" title="まとめ1 | 技術文書をソフトウェア開発する話">まとめ1 | 技術文書をソフトウェア開発する話</a></p>
</blockquote>

<p>そこで文章のカバレッジというものを考えて実装してみました。</p>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>とコードカバレッジの仕組みを使ったものですが、こういうのをなんと呼べばいいのかよくわからなかったので、ここではとりあえず&quot;文章カバレッジ&quot;と読んでいます。</p>

<p>textlintは全ての文に対してLintを実行するので命令網羅と近い感じがします。</p>

<blockquote>
<p>命令網羅（statement coverage：SC）<br>
コード内のすべての命令が少なくとも1回は実行されるようにテストを設計する。欠陥検出力は弱い
-- <a href="http://www.itmedia.co.jp/im/articles/1111/07/news142.html" title="情報システム用語事典：カバレッジ基準（かばれっじきじゅん） - ITmedia エンタープライズ">情報システム用語事典：カバレッジ基準（かばれっじきじゅん） - ITmedia エンタープライズ</a></p>
</blockquote>

<p>よくよく考える仕組み的にカバレッジではないので、何か別の名前が必要な気がします。</p>

<h3 id="カバレッジ">カバレッジ</h3>

<p>具体例がないとイメージしにくいと思うので、<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="azu/JavaScript-Plugin-Architecture">azu/JavaScript-Plugin-Architecture</a>を例にしてみます。</p>

<p><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="azu/JavaScript-Plugin-Architecture">JavaScript-Plugin-Architecture</a>という文書では今回作ったtextlintの文章カバレッジを表示しています。</p>

<p><a href="https://codecov.io/github/azu/JavaScript-Plugin-Architecture?branch=master"><img src="https://codecov.io/github/azu/JavaScript-Plugin-Architecture/coverage.svg?branch=master" alt="codecov.io"></a></p>

<p><img src="https://codecov.io/github/azu/JavaScript-Plugin-Architecture/branch.svg?branch=master" alt="coverage graph"></p>

<p>textlintから既存のコードカバレッジのフォーマットである<a href="http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php">lcov</a>を出力出来るようにしているので、Coverallsなどコードカバレッジサービスとそのまま連携することができます。</p>

<ul>
<li><a href="https://coveralls.io/">Coveralls - Test Coverage History &amp; Statistics</a></li>
<li><a href="https://codecov.io/">Codecov - Code Coverage</a></li>
</ul>

<p>コマンドラインからもこのカバレッジを表示することができます。
lcovファイルを渡すとそのカバレッジを表示してくれる<a href="https://github.com/azu/lcov-summary" title="lcov-summary">lcov-summary</a>というCLIを書いたのでそれを利用しています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm run textlint:coverage

&gt; javaScript-plugin-architecture@0.1.1 textlint:coverage /Users/azu/.ghq/github.com/azu/JavaScript-Plugin-Architecture
&gt; summary-to-path <span class="p">|</span> xargs textlint -c coverage.textlintrc -f lcov <span class="p">|</span> lcov-summary


Code Coverage Results:

 96.83% <span class="o">(</span>61/63<span class="o">)</span> README.md
 92.59% <span class="o">(</span>25/27<span class="o">)</span> ORGANIZATION.md
 97.60% <span class="o">(</span>122/125<span class="o">)</span> ja/jQuery/README.md
 96.45% <span class="o">(</span>299/310<span class="o">)</span> ja/ESLint/README.md
 95.59% <span class="o">(</span>195/204<span class="o">)</span> ja/connect/README.md
 96.38% <span class="o">(</span>293/304<span class="o">)</span> ja/gulp/README.md

Total Coverage:  96.32%
</code></pre></div>
<h2 id="仕組み">仕組み</h2>

<p>仕組みは意外と簡単で、既存のパーツを組み合わせて動くようにしました。</p>

<p>textlintのLintの結果は&quot;compact&quot;, &quot;checkstyle&quot;, &quot;jslint-xml&quot;, &quot;junit&quot;, &quot;tap&quot;, &quot;pretty-error&quot;, &quot;json&quot;などの形式で出力できます。
それらに加えて、コードカバレッジのフォーマットである<code>lcov</code>と<code>codecov</code>を作りました。</p>

<ul>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov</a></li>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov</a></li>
</ul>

<p><a href="https://gist.github.com/codecov-io/96e1addb96856a9034c2" title="Codecov JSON">Codecov JSON</a>フォーマットは<a href="https://codecov.io/" title="Codecov">Codecov</a>用の形式ですが、他のコードカバレッジにはないメッセージ情報を含めることができます。</p>

<p>これを利用すれば、Codecov上にカバレッジとメッセージ(Lintのエラーメッセージ)を表示することができます。</p>

<p><a href="https://codecov.io/github/azu/JavaScript-Plugin-Architecture/ja/connect/README.md?ref=e2fabe23359c253760b48641ad464c79a4f483e9"><img src="http://efcl.info/wp-content/uploads/2016/01/12-1452563559.png" alt="architecuture"></a></p>

<p>カバレッジの結果として</p>

<ul>
<li>textlintで問題がなかった行を1</li>
<li>textlintで問題があった行を0</li>
</ul>

<p>としています。(マイナスとか小数点をサポートしてない場合もあるので1と0という風にしてます)</p>

<h2 id="文章カバレッジのモチベーション">文章カバレッジのモチベーション</h2>

<p>この仕組みのモチベーションについて書いておきます。</p>

<p><a href="http://eslint.org/" title="ESLint">ESLint</a>や<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>などのLint系に共通する話ですが、LintはCIに入れるとユニットテストに比べて、スタイルに近いチェックが多いためCIを落としやすいです。</p>

<p>厳しいスタイルのチェックをLintで行うと毎回のようにCIが落とすので、厳しめのルールは入れにくい気がしています。</p>

<p>Lintはエディタなどの書く環境に統合してリアルタイムでチェックするのが一般的だと思いますが、そうした場合でも厳しめのルールを一つ入れるだけで大量のエラーがでるため書くモチベーションを奪ってしまうことがあります。</p>

<p>この場合、FAIL/PASSという極端な結果ではなく、WARNINGやINFOというようなレベルを間に入れることで解決するように思えますが、そういった情報に慣れてしまうと無視してしまうのが人間です。</p>

<p>そのため、警告などの情報を上手く扱える必要があると思っていました。カバレッジは百分率で値がでるので、そういう中間的な状態を扱いやすいと思います。</p>

<p>これを利用すると普通に書いてて落としてしまうような厳しめのルールが導入しやすいと思いました。</p>

<p>例えば、<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="azu/JavaScript-Plugin-Architecture">azu/JavaScript-Plugin-Architecture</a>では通常全て通ってるべき<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/.textlintrc" title=".textlintrc">.textlintrc</a>と厳しめのルールを採用した<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/coverage.textlintrc" title="coverage.textlintrc">coverage.textlintrc</a>を使っています。</p>

<p>カバレッジには<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/coverage.textlintrc" title="coverage.textlintrc">coverage.textlintrc</a>を使ったtextlintの結果を<a href="https://codecov.io/" title="Codecov">Codecov</a>に送っています。</p>

<p>こうすることで、普通に書いてると入れるのが難しいルールも取り入れやすくなり、後で<a href="https://codecov.io/" title="Codecov">Codecov</a>上で特定のファイルだけ妙に数値が落ちてることなどが発見できます。</p>

<ul>
<li><a href="https://codecov.io/github/azu/JavaScript-Plugin-Architecture?branch=master" title="azu/JavaScript-Plugin-Architecture@master">azu/JavaScript-Plugin-Architecture@master</a></li>
</ul>

<p>チェック結果を継続的に数値化して見ることが出来ることを実現したくて、そういう仕組みを持っている既存のコードカバレッジの仕組みに乗ったという感じです。</p>

<p>なのでやっぱりカバレッジではない気はしています。</p>

<p>多分これはJenkinsで静的解析の警告数レポートを出すのと似たような話なのだと思います。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/suzukij/20120611/1339368249">Jenkinsを使って継続的に静的コード解析をさせる - suzukijの日記</a></li>
<li><a href="http://labs.opentone.co.jp/?p=735">Jenkinsでカバレッジレポートや静的解析レポートを出力してみよう！Part1 | Opentone Labs.</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<p>使い方は単純でtextlintのformatterとして実装してあるので</p>

<p>例えば、<a href="https://github.com/azu/textlint-formatter-lcov" title="azu/textlint-formatter-lcov">textlint-formatter-lcov</a>ならインストールして<code>-f lcov</code>と指定すればいいだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint textlint-formatter-lcov
$(npm bin)/textlint -f lcov README.md
# lcov形式で結果が出力される
$(npm bin)/textlint -f lcov README.md -o lcov.info
# ファイルとして保存する
</code></pre></div>
<p><a href="https://codecov.io/" title="Codecov">Codecov</a>へカバレッジを送りたい場合<code>textlint-formatter-codecov</code>を使って</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint textlint-formatter-codecov codecov.io
$(npm bin)/textlint -f codecov README.md | codecov
</code></pre></div>
<p>とするだけです。</p>

<p>CodecovはPull Request毎にカバレッジを書いてくれるBotとかもあるので面白いです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/01/12-1452597521.png" alt="codecov bot"></p>

<ul>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/pull/91" title="feat(coverage): add coverage for text by azu · Pull Request #91 · azu/JavaScript-Plugin-Architecture">feat(coverage): add coverage for text by azu · Pull Request #91 · azu/JavaScript-Plugin-Architecture</a></li>
</ul>

<h2 id="おわり">おわり</h2>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>を使って文章カバレッジ?を取る方法について書きました。</p>

<ul>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov</a></li>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov</a></li>
<li><a href="https://github.com/azu/lcov-summary" title="azu/lcov-summary">azu/lcov-summary</a></li>
</ul>

<p>最初は<a href="https://github.com/azu/textstat" title="textstat">textstat</a>を使ってメトリクスを継続的に取る方法を探していましたが、途中でコードカバレッジの仕組みをLinterにも持ってくれば面白いのではないかと気づきました。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p lang="ja" dir="ltr">コードカバレッジを常に100%としてるプロジェクトって普通はないから、理想的な状態を表現したルールを100%として、コードカバレッジの%が理想に対する現実の%として表現できそうな感じ。&#10;&#10;Lintのルールは厳しくすると書くのが辛いから、理想と現実のルールは上手く分離できそう</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/684300797102800896">January 5, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>この仕組みは<a href="http://eslint.org/" title="ESLint">ESLint</a>とか他のLintでもlcov形式で出力すればできるので、Lintカバレッジレポートみたいなものなのかもしれません。</p>

<p>Travis CIとかと連携してコミットに紐付いて特定の値を貯めることが出来るウェブサービスがあったらまた別の方法がとれるかもしれません。</p>

<p>Google Analyticsとかで実現できそうですがあんまり使いやすくないです。</p>

<ul>
<li><a href="http://t32k.me/mol/log/gaer/" title="コマンドラインからGoogle Analyticsにデータを記録するGAERをつくった - MOL">コマンドラインからGoogle Analyticsにデータを記録するGAERをつくった - MOL</a></li>
<li><a href="https://github.com/mattdesl/npm-install-analytics" title="mattdesl/npm-install-analytics">mattdesl/npm-install-analytics</a></li>
</ul>

<p><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/" title="Introduction | 技術文書をソフトウェア開発する話">技術文書をソフトウェア開発する話</a>でも話していましたが、文章に対するプログラミング言語のようなツールはまだまだ少ない印象です。
(研究から出てるツールはあるけど、特定のユースケースをはみ出ると使えなくなる印象)</p>

<p>文書もCIを回して開発するのがもっとあたりまえになってくると、もっと面白いことが色々起きるのではないかと思っています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>今年のOSS活動振り返り @ 2015</title>
   <link href="http://efcl.info/2015/12/31/oss-in-2015/"/>
   <updated>2015-12-31T01:44:00+09:00</updated>
   <id>http://efcl.info/2015/12/31/oss-in-2015</id>
   <content type="html"><![CDATA[ <p>2015年のOSS活動の振り返り</p>

<p>去年のこちら =&gt; <a href="http://efcl.info/2014/12/31/oss-in-2014/" title="今年のOSS活動振り返り @ 2014 | Web Scratch">今年のOSS活動振り返り @ 2014 | Web Scratch</a></p>

<h2 id="github">GitHub</h2>

<p><a href="https://github.com/azu"><img src="http://efcl.info/wp-content/uploads/2015/12/30-1451483221.png" alt="github contributes"></a></p>

<p>Contributions in the last yearが6490 =&gt; 9322になってるけど、全体では自分のトークンを使ったCIからの自動デプロイが1/3ぐらい占めてそうなので水増し感がある</p>

<p>9月ぐらいまでだいたい7000前後で安定してて、その辺りで<a href="http://realtime.jser.info/" title="Realtime JSer.info">Realtime JSer.info</a>追加したのと<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>の開発を再開したり<a href="https://www.gitbook.com/book/azu/javascript-plugin-architecture/details" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>という本書いてたのが増えてる原因。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p lang="ja" dir="ltr">Current streak 666だ。&#10;Contributionsはゾロ目にはならなかった。 <a href="http://t.co/i7ohh0hKqg">pic.twitter.com/i7ohh0hKqg</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/638740485498998784">September 1, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Current streakの方を見ると2年ぐらい毎日コミットを継続してる。
コミットするのは習慣なので特に意識はしてない。
原因としては<a href="http://efcl.info/2014/12/31/oss-in-2014/">去年も書いた</a>けど<a href="https://github.com/jser/jser.info" title="jser/jser.info">jser/jser.info</a>とかのブログ周りが入ってるのと、移動中とか空いてる時間にコミットしているのが影響してる。
逆に移動中もコミット出来るように、あらかじめIssueで設計とかをしてすぐ作業できるものをキューに積んでいる感じ。</p>

<p>最近GTD本読んでて同じようなことが書いてあった。</p>

<blockquote>
<p>そのときやることに関して最初に考えなければならないのは、その場所で、そこにあるものを使ってできるのは何かということだ。
...
「@電話」「@家」「@パソコン」「@買い物・用事」...といった具合だ。行動を選択する際に、こうして&quot;状況&quot;で分類されたリストがあれば便利だ。
...
一つのToDoリストにさまざまな状況の行動がごちゃまぜになっていると、いちいち全部をチェックしなおさなければならないからだ。</p>
</blockquote>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4576082116/" title="はじめてのGTD ストレスフリーの整理術">はじめてのGTD ストレスフリーの整理術</a></li>
</ul>

<p>自分の場合は移動中にやることはIssueを立てて<a href="https://github.com/issues/assigned">自分をassign</a>しておき、移動中はIssueを処理することに集中している。
インストールが重いやつとか調べ物はネットワーク的に辛いので、事前に調べた事を書いておきオフラインに近い状況で出来るように準備してる。</p>

<h2 id="issue/pull-reuqst">Issue/Pull Reuqst</h2>

<ul>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2015-01-01..2016-01-01+is%3Aissue&amp;type=Issues&amp;ref=searchresults">立てたIssue</a>: 299</li>
<li><a href="https://github.com/search?q=author%3Aazu+created%3A2015-01-01..2016-01-01++is%3Aissue&amp;ref=searchresults&amp;state=closed&amp;type=Issues&amp;utf8=%E2%9C%93">閉じたIssue</a>: 231</li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2015-01-01..2016-01-01+is%3Apr&amp;type=Issues&amp;ref=searchresults">出したPull Requst</a>: 367</li>
<li><a href="https://github.com/search?q=author%3Aazu+created%3A2015-01-01..2016-01-01+is%3Apr+&amp;state=closed&amp;type=Issues&amp;utf8=%E2%9C%93">閉じたPull Request</a>: 355</li>
</ul>

<h2 id="作ったもの"><a href="https://github.com/search?o=asc&amp;q=user%3Aazu+created%3A2015-01-01..2016-01-01&amp;ref=searchresults&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93">作ったもの</a></h2>

<p>記憶にあるものを抜粋</p>

<ul>
<li><a href="https://github.com/azu/node-cocproxy" title="azu/node-cocproxy">azu/node-cocproxy</a>

<ul>
<li>Node.js版<a href="http://coderepos.org/share/wiki/CocProxy" title="CocProxy">CocProxy</a></li>
</ul></li>
<li><a href="https://github.com/azu/wait-for-element.js" title="azu/wait-for-element.js">azu/wait-for-element.js</a>

<ul>
<li><a href="http://efcl.info/2015/04/06/wait-for-element/" title="ある要素が表示されるまで待つJSライブラリを書いた(MutationObserver)">ある要素が表示されるまで待つJSライブラリを書いた(MutationObserver)</a></li>
</ul></li>
<li><a href="https://github.com/azu/mini-flux">azu/mini-flux</a>

<ul>
<li><a href="http://azu.github.io/slide/react-meetup/flux.html">10分で実装するFlux</a></li>
</ul></li>
<li><a href="https://github.com/azu/pdf-markdown-annotator" title="azu/pdf-markdown-annotator">azu/pdf-markdown-annotator</a>

<ul>
<li><a href="http://efcl.info/2015/05/04/pdf-annotation-markdown/" title="PDFを見ながらMarkdownでメモを取れるアプリを書いた | Web Scratch">PDFを見ながらMarkdownでメモを取れるアプリを書いた | Web Scratch</a></li>
<li><a href="https://github.com/azu/azu/issues/47" title="ECMAScript仕様書を読む">ECMAScript仕様書を読む</a>ために作成した</li>
<li><a href="http://azu.github.io/annotation-memo/es6/">ECMAScript 6 読書メモ</a></li>
<li><a href="http://azu.github.io/annotation-memo/es6-draft/">ECMAScript 6 draft 読書メモ</a></li>
<li><a href="http://azu.github.io/annotation-memo/es5/">ECMAScript 5 読書メモ</a></li>
</ul></li>
<li><a href="https://github.com/azu/github-issue-teev" title="azu/github-issue-teev">azu/github-issue-teev</a>

<ul>
<li><a href="http://efcl.info/2015/07/30/github-issue-manager/" title="自分に関係するGitHub Issueを一覧できるアプリを書いた | Web Scratch">自分に関係するGitHub Issueを一覧できるアプリを書いた | Web Scratch</a></li>
<li>自分をassignしたIssueを確認するために作った</li>
<li><a href="https://www.producteev.com/" title="Producteev">Producteev</a>と<a href="https://tacoapp.com/" title="Taco">Taco</a>をインスパイアした</li>
</ul></li>
<li><a href="https://github.com/azu/browser-runner" title="azu/browser-runner">azu/browser-runner</a>

<ul>
<li><a href="http://efcl.info/2015/07/23/browser-runner/" title="コマンドラインまたはNodeモジュールからブラウザでURLへ簡単にアクセスさせる | Web Scratch">コマンドラインまたはNodeモジュールからブラウザでURLへ簡単にアクセスさせる | Web Scratch</a></li>
<li>Seleniumで遊んでた</li>
</ul></li>
<li><a href="https://github.com/azu/video-transcript-note" title="azu/video-transcript-note">azu/video-transcript-note</a>

<ul>
<li><a href="http://efcl.info/2015/07/27/video-transcript-note/" title="動画とルビ翻訳された字幕をみながらMarkdownメモできるアプリを書いた | Web Scratch">動画とルビ翻訳された字幕をみながらMarkdownメモできるアプリを書いた | Web Scratch</a></li>
<li><a href="https://github.com/azu/video-transcript-tracker">azu/video-transcript-tracker</a></li>
<li><a href="https://github.com/azu/video-transcript-note">azu/video-transcript-note</a></li>
<li><a href="https://github.com/azu/video-shortcut-controller">azu/video-shortcut-controller</a></li>
<li><a href="https://github.com/azu/video-prefetcher">azu/video-prefetcher</a></li>
</ul></li>
<li><a href="http://azu.github.io/tc39-svg/" title="TC39 Process">TC39 Process</a>

<ul>
<li>TC39プロセスの図解</li>
</ul></li>
<li><a href="https://github.com/azu/power-doctest" title="azu/power-doctest">azu/power-doctest</a>

<ul>
<li><a href="http://efcl.info/2015/08/10/power-doctest1.0/" title="power-assertを使ったDoctestツール power-doctestを書き直した | Web Scratch">power-assertを使ったDoctestツール power-doctestを書き直した | Web Scratch</a></li>
<li><a href="https://github.com/azu/ast-equal">azu/ast-equal</a></li>
<li><a href="https://github.com/azu/tagged-template-to-ast">azu/tagged-template-to-ast</a></li>
<li><a href="https://github.com/azu/comment-to-assert">azu/comment-to-assert</a></li>
<li><a href="https://github.com/azu/ast-source">azu/ast-source</a>

<ul>
<li>ast-sourceは未完成な感じなので書き直す</li>
</ul></li>
</ul></li>
<li><a href="https://github.com/azu/reftest-runner">azu/reftest-runner</a>

<ul>
<li><a href="http://efcl.info/2015/05/14/reftest-runner/">ブラウザでビジュアルテストをするreftest-runnerを作った | Web Scratch</a></li>
<li>ブラウザの描画結果を比較するテストツールを書いた</li>
<li><a href="https://speakerdeck.com/ooooooo_q/nds-8-reftest">nds_8_reftest.pdf // Speaker Deck</a></li>
</ul></li>
<li><a href="https://github.com/azu/npm-relative-install" title="azu/npm-relative-install">azu/npm-relative-install</a></li>
<li><a href="https://github.com/azu/npm-relative-version" title="azu/npm-relative-version">azu/npm-relative-version</a>

<ul>
<li>現在のpatchバージョン前のモジュールをインストールするツール</li>
<li>reftestで前回のバージョンからの描画差異がないかを自動的にやるために書いた</li>
<li><a href="http://azu.github.io/slide/assistant-bucho/test-everything.html" title="ロジック、E2E、描画、音、動画、Example、文章 - 色々なJSテスト">ロジック、E2E、描画、音、動画、Example、文章 - 色々なJSテスト</a></li>
</ul></li>
<li><a href="https://github.com/azu/stemming-x-keywords" title="azu/stemming-x-keywords">azu/stemming-x-keywords</a>

<ul>
<li>文章からキーワードを取り出すやつ</li>
</ul></li>
<li><a href="http://azu.github.io/slide-what-is-ecmascript/">Introduction | ECMAScriptとは何か？</a></li>
<li><a href="http://efcl.info/2015/10/18/ecmascript-paper/">ECMAScriptの仕様策定に関するカンニングペーパー | Web Scratch</a>

<ul>
<li><a href="http://nextwebconf.connpass.com/event/19699/" title="次世代 Web カンファレンス">次世代 Web カンファレンス</a>の予習用に作ったやつ</li>
</ul></li>
<li><a href="https://github.com/azu/read-all-later" title="azu/read-all-later">azu/read-all-later</a>

<ul>
<li>PocketにURLをまとめて追加するアプリ</li>
<li><a href="http://efcl.info/2015/11/30/read-all-later/" title="WeeklyメルマガのURLを貼ったら中のリンクを全部Pocketに突っ込むアプリ | Web Scratch">WeeklyメルマガのURLを貼ったら中のリンクを全部Pocketに突っ込むアプリ | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/pdf.js-controller" title="azu/pdf.js-controller">azu/pdf.js-controller</a>

<ul>
<li><a href="http://efcl.info/2015/12/07/pdf.js-controller/" title="[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch">[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch</a></li>
<li>PDFをスライド表示するライブラリ</li>
<li><a href="http://www.decksetapp.com/" title="Deckset">Deckset</a>で作った自分の発表資料を公開するときに作ったのが元</li>
</ul></li>
<li><a href="https://github.com/azu/browser-javascript-resource" title="azu/browser-javascript-resource">azu/browser-javascript-resource</a>

<ul>
<li>ブラウザ公式の情報はどこを見ればいいのかをまとめたもの</li>
</ul></li>
<li><a href="https://github.com/azu/idempotent-bind" title="azu/idempotent-bind">azu/idempotent-bind</a>

<ul>
<li>毎回同じものを返す<code>bind</code>のライブラリ</li>
<li><a href="http://efcl.info/2015/06/05/this-component/" title="React/dekuコンポーネントとthisのパターン | Web Scratch">React/dekuコンポーネントとthisのパターン | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/tweet-truncator" title="azu/tweet-truncator">azu/tweet-truncator</a>

<ul>
<li>Twitterへ投稿するメッセージを140文字以内に省略するライブラリ</li>
</ul></li>
<li><a href="http://azu.github.io/github-ribbon-generator/" title="GitHub Ribbon Generator">GitHub Ribbon Generator</a>

<ul>
<li><a href="http://efcl.info/2015/12/25/github-ribbon-generator/" title="GitHub Ribbon GeneratorをVue.jsで書いた | Web Scratch">GitHub Ribbon GeneratorをVue.jsで書いた | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/material-flux-container" title="azu/material-flux-container">azu/material-flux-container</a>

<ul>
<li><a href="https://github.com/azu/material-flux" title="material-flux">material-flux</a>のcontainer実装</li>
</ul></li>
<li><a href="https://github.com/azu/electron-authentication-hatena" title="azu/electron-authentication-hatena">azu/electron-authentication-hatena</a>

<ul>
<li>ElectronではてなのOAuth認証をするライブラリ</li>
<li><a href="https://github.com/hatena/Hatena-Bookmark-iOS-SDK/issues/40" title="複数クライアントで発生する認証の問題 · Issue #40 · hatena/Hatena-Bookmark-iOS-SDK">複数クライアントで発生する認証の問題 · Issue #40 · hatena/Hatena-Bookmark-iOS-SDK</a>がつらすぎる</li>
</ul></li>
<li><a href="https://github.com/azu/postem" title="azu/postem">azu/postem</a>

<ul>
<li><a href="https://github.com/tombfix" title="Tombfix">Tombfix</a>のようなクロスポストクライアント</li>
<li>Electronで作っていてOAuth認証とかをやってる</li>
<li>拡張する仕組みはあるけど、アプリで配布すると拡張が難しい問題にはまってる</li>
</ul></li>
</ul>

<p>npmに上げたモジュールは122個となった</p>

<ul>
<li><a href="https://www.npmjs.com/%7Eazu">https://www.npmjs.com/~azu</a></li>
</ul>

<h2 id="文書開発について">文書開発について</h2>

<p>今年の後半は<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>を始めとした文書関連のものを色々やったので別途項目を設ける。</p>

<p><a href="http://efcl.info/2014/12/31/oss-in-2014/">去年</a>は<a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>を書いていたけど、今年は書くためのツールや手法を考えるのを目的にした</p>

<p>今年やってたことの大元は以下のIssueから始まってる形</p>

<blockquote>
<p>コンセプト: もっと気軽に書ける電子書籍
-- <a href="https://github.com/azu/azu/issues/42#issuecomment-155667921" title="[Markdown] 電子書籍開発環境 · Issue #42 · azu/azu">[Markdown] 電子書籍開発環境 · Issue #42 · azu/azu</a></p>
</blockquote>

<ul>
<li><a href="http://efcl.info/2015/09/28/easy-to-create-ebook/" title="今すぐ電子書籍(技術書)を書き始める方法と文章の自動チェック | Web Scratch">今すぐ電子書籍(技術書)を書き始める方法と文章の自動チェック | Web Scratch</a>

<ul>
<li><a href="http://efcl.info/2015/09/27/niku_sushi/" title="#niku_sushi">#niku_sushi</a>で発表した</li>
</ul></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/" title="Introduction | 技術文書をソフトウェア開発する話">Introduction | 技術文書をソフトウェア開発する話</a>

<ul>
<li><a href="http://efcl.info/2015/11/07/nodefest-2015/" title="東京Node学園祭2015">東京Node学園祭2015</a>で発表した</li>
</ul></li>
<li><a href="https://github.com/azu/gitbook-starter-kit" title="azu/gitbook-starter-kit">azu/gitbook-starter-kit</a>

<ul>
<li>GitBookで電子書籍を書くスターターキットを作った</li>
</ul></li>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="azu/JavaScript-Plugin-Architecture">azu/JavaScript-Plugin-Architecture</a>

<ul>
<li>文書開発するためにJavaScriptのプラグインアーキテクチャについての本を書いてた</li>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>とかのツールを書いても定量的に確かめられる文章がないと困るので一緒に書いてた</li>
</ul></li>
</ul>

<h3 id="textlint">textlint</h3>

<p>textlint自体は去年の今頃作った。</p>

<p>だけど、この時は<a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a>だけのためにtextlintという汎用的な仕組みを作っただけでした。</p>

<ul>
<li><a href="http://efcl.info/2014/12/30/textlint/" title="JavaScriptでルールを書けるテキスト/Markdownの校正ツール textlint を作った | Web Scratch">JavaScriptでルールを書けるテキスト/Markdownの校正ツール textlint を作った | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/01/15/reactsushi/">#reactsushi でESLintとtextlintの設計について話してきた | Web Scratch</a></li>
</ul>

<p>今年の9月ぐらいから電子書籍開発環境についてちゃんと手を動かそうと思って開発が再開した。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">今ひたすらこれやってる  &quot;[Markdown] 電子書籍開発環境 · Issue #‌42 · azu/azu&quot;  <a href="https://t.co/Pze9xH2x4g">https://t.co/Pze9xH2x4g</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/637230368148426752">August 28, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>文章を書こうと思ったら自分ですぐ書けるようなチェックツールが絶対必要になる(かつそれが独自のものだと再利用できないしだるい)ので、
<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>をちゃんと使えるものにした。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/09/14/textlint-rule-prh/">textlint + prhで表記ゆれを検出する | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/">JTF日本語標準スタイルガイドのルールセットで文章をチェックできるtextlintプリセット | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/11/20/textlint5.0.0/">textlint 5.0.0で非同期処理に対応、kuromoji.jsで校正、テキストの統計処理 | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<p>これに関連して<a href="https://github.com/azu/textlint-rule-no-doubled-joshi">色々</a><a href="https://github.com/azu/textlint-rule-no-double-negative-ja">論文</a>や<a href="http://redpen.cc/" title="RedPen">RedPen</a>の実装などを参考にtextlintルールを書いてた。</p>

<p><img src="http://efcl.info/wp-content/uploads/2015/12/31-1451491109.png" alt="textlint module"></p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<p>textlint側も拡張に必要なものは大体実装して、ある程度日本語関係のルールも出てきたので、
これから使ってみたい人は以下の記事あたりを見ると良さそう。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
</ul>

<h2 id="その他のコミット">その他のコミット</h2>

<ul>
<li>ECMAScriptのISO標準関連(ISO/IEC 16262)

<ul>
<li>SC 22/ECMAScript Ad Hoc委員会への参加</li>
</ul></li>
<li><a href="https://github.com/rwaldron/tc39-notes" title="rwaldron/tc39-notes">rwaldron/tc39-notes</a>

<ul>
<li>TC39のミーティングノートに<a href="https://github.com/rwaldron/tc39-notes/commits?author=azu">毎回</a>修正投げてる</li>
</ul></li>
<li><a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Aazu+is%3Aclosed+created%3A%222015-01-01+..+2016-01-01%22+fix+OR+Markdown+OR+README">いろんなところでドキュメントの修正</a>をPull Request

<ul>
<li>機能追加とかのPRとかよりはドキュメントの修正を送ることが多い</li>
</ul></li>
<li><a href="https://github.com/takuyaa/kuromoji.js/pulls?q=is%3Apr+author%3Aazu+is%3Aclosed">kuromoji.js</a>に何個か修正送った

<ul>
<li><a href="https://github.com/azu/kuromojin" title="kuromojin">kuromojin</a>を作ったりもした</li>
</ul></li>
</ul>

<h2 id="来年">来年</h2>

<ul>
<li><a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>のVer 2.0がでるといいな

<ul>
<li>async/awaitとjQuery待ち</li>
</ul></li>
<li><a href="http://jser.info/" title="JSer.info">JSer.info</a>

<ul>
<li>来月で<a href="http://jser.info/2015/12/14/jser-info-announce-5-years/" title="JSer.info 5周年記念イベントを1/16(土)に開催します - JSer.info">JSer.info 5周年記念</a>になる</li>
</ul></li>
<li>自動化、コストを小さくする

<ul>
<li>気合で解消してる場所をシステムとして解消していきたい</li>
</ul></li>
<li>テストへコミットする

<ul>
<li>テストフレームワークの変化はゆっくりである</li>
<li>けど、<a href="https://github.com/mochajs/mocha/issues/1969">最近</a>、<a href="https://github.com/sindresorhus/ava">ちょっと</a>変化の<a href="https://github.com/js-reporters/js-reporters">タイミング</a>がありそうなのでちゃんと考える</li>
</ul></li>
<li>作って継続的に動くサイト?を作る

<ul>
<li><a href="http://sisidovski.hatenablog.com/entry/2015/12/04/120633" title="Progressive Web Apps">Progressive Web Apps</a>的なものとかはそれを目的に何か作るよりも、既にあるものへそれを取り組む姿勢が必要そう</li>
<li>そういう遊び場となるサイトがないので欲しい</li>
</ul></li>
<li>JavaScript/ECMAScriptを改めてどう学べばいいのか考える

<ul>
<li><a href="https://github.com/azu/how-to-learn-es6" title="azu/how-to-learn-es6">azu/how-to-learn-es6</a>とか<a href="https://twitter.com/hashtag/thinking_in_es6?src=hash" title="#thinking_in_es6">#thinking_in_es6</a>で考えてるやつ</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>ルールプリセットを使ってお手軽にtextlint入門</title>
   <link href="http://efcl.info/2015/12/30/textlint-preset/"/>
   <updated>2015-12-30T16:01:00+09:00</updated>
   <id>http://efcl.info/2015/12/30/textlint-preset</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>はルールで拡張出来る自然言語向けのLintツールです。</p>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> <a href="https://github.com/textlint/textlint/releases/tag/5.1.0" title="5.1.0">5.1.0</a>でルールのプリセットをサポートしました。</p>

<p>ルール、プリセット、プラグインは以下のような関係です。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/tree/master/docs/docs/rule.md">rule</a>

<ul>
<li>いわゆるルール</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint/tree/master/docs/docs/rule-preset.md">rule-preset</a>

<ul>
<li>ルールをまとめたもの</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint/tree/master/docs/docs/plugin.md">plugin</a>

<ul>
<li>ルールとプロセッサ(拡張機能)を持ってる</li>
</ul></li>
</ul>

<p><img src="https://raw.githubusercontent.com/textlint/textlint/master/docs/resources/rule-preset-plugin.png" alt="rule-preset-plugin"></p>

<p>textlintはデフォルトでは一つもルールを持っていません。</p>

<p>そのため、どのルールを入れたらいいか迷った場合に、誰かがまとめてくれたプリセットをとりあえず入れれば、とりあえず文章のチェックが出来るようになります。</p>

<p>textlintの使い方は以下で解説しているのと基本的に同じですが、今回はプリセットの使い方を紹介します。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/" title="textlintで日本語の文章をチェックする | Web Scratch">textlintで日本語の文章をチェックする | Web Scratch</a></li>
</ul>

<h2 id="インストール">インストール</h2>

<p>textlint本体と2つのプリセットをインストールしてみます。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-japanese">azu/textlint-rule-preset-japanese</a>

<ul>
<li>自分が作った日本語関係のルールセット</li>
</ul></li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style">azu/textlint-rule-preset-JTF-style</a>

<ul>
<li><a href="https://www.jtf.jp/jp/style_guide/styleguide_top.html">JTFスタイルガイド</a>のルールセット</li>
<li><a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/" title="JTF日本語標準スタイルガイドのルールセットで文章をチェックできるtextlintプリセット | Web Scratch">JTF日本語標準スタイルガイドのルールセットで文章をチェックできるtextlintプリセット | Web Scratch</a></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm i -D textlint textlint-rule-preset-japanese textlint-rule-preset-jtf-style
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p>プリセットをコマンドラインから指定することで設定ファイルなしに利用することもできます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="k">$(</span>npm bin<span class="k">)</span>/textlint --preset preset-japanese --preset preset-jtf-style README.md
</code></pre></div>
<p>逆にこの場合はルール毎の設定ができないので、設定ファイルである<code>.textlintrc</code>を使ってみます。</p>

<h3 id="設定ファイル">設定ファイル</h3>

<p>サンプルリポジトリを以下に置いておきます。</p>

<ul>
<li><a href="https://github.com/azu/textlint-preset-example" title="azu/textlint-preset-example">azu/textlint-preset-example</a></li>
</ul>

<p><code>.textlintrc</code>に以下のように書くとプリセットを有効化できます</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;preset-japanese&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">&quot;preset-jtf-style&quot;</span><span class="o">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>プリセットはルールの集合なので、プリセットの中にある特定のルールを設定したい場合があります。</p>

<p>例えば、<a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="textlint-rule-preset-JTF-style">textlint-rule-preset-JTF-style</a>の<code>&quot;1.2.2.ピリオド(.)とカンマ(,)&quot;</code>だけを無効化したいなら次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;preset-jtf-style&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;1.2.2.ピリオド(.)とカンマ(,)&quot;</span><span class="o">:</span> <span class="kc">false</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>同じディレクトリに<code>.textlinrc</code>があれば、実行は<code>textlint</code>コマンドを叩くだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint README.md
</code></pre></div>
<p><img src="https://monosnap.com/file/tndweS7k0ZsrVz8yN3olPvD3l2rbTx.png" alt="result"></p>

<h3 id="もっとルールを加える">もっとルールを加える</h3>

<p>プリセットとルールは併用可能なので、プリセットにないルールは自分で追加していくといいと思います。</p>

<p><a href="https://github.com/azu/textlint-rule-prh" title="textlint-rule-prh">textlint-rule-prh</a>を使った表記揺れの検出などは効果的なルールと言えます。</p>

<ul>
<li><a href="http://efcl.info/2015/09/14/textlint-rule-prh/" title="textlint + prhで表記ゆれを検出する | Web Scratch">textlint + prhで表記ゆれを検出する | Web Scratch</a></li>
</ul>

<h3 id="もっと優しい使い方">もっと優しい使い方</h3>

<p>Node.jsやGitなどに慣れてない人は以下を参考にしてください。
(プリセットではなくルールベースですが、プリセットとルールの使い方はだいたい同じです)</p>

<ul>
<li><a href="https://github.com/kubosho/textlint-starter-kit">kubosho/textlint-starter-kit</a></li>
<li><a href="https://github.com/KenshoFujisaki/TextlintAtom">KenshoFujisaki/TextlintAtom</a></li>
</ul>

<p><img src="https://gyazo.com/430f92606e5f5bdb06e0583001a9a2b0.gif" alt="preview"></p>

<h2 id="プリセットの作り方">プリセットの作り方</h2>

<p>プリセットの作り方は以下のドキュメントを参考にしてください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule-preset.md" title="textlint/rule-preset.md at master · textlint/textlint">textlint/rule-preset.md at master · textlint/textlint</a></li>
</ul>

<p>基本的にルール本体を<code>rules</code>に、ルールのデフォルト設定を<code>rulesConfig</code>に書いたオブジェクトを返すだけなので単純です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">module.exports = {
    &quot;rules&quot;: {
        &quot;no-todo&quot;: require(&quot;textlint-rule-no-todo&quot;)
    },
    &quot;rulesConfig&quot;: {
        &quot;no-todo&quot;: true
    }
};
</code></pre></div>
<p>作ったプリセットは<code>textlint-rule-preset-&lt;好きな名前&gt;</code>で公開してください。
(この命名規則だとtextlint-rule部分の指定を省略できます)</p>

<p>プリセットは元々別にあるルールを集めただけの場合が多くなると思うので、依存するルールが更新された時にプリセットも更新できると便利です。</p>

<p><a href="http://greenkeeper.io/" title="Greenkeeper">Greenkeeper</a>と<a href="https://github.com/semantic-release/semantic-release" title="semantic-release">semantic-release</a>を使うと依存するルールモジュールが更新されたら自動でPull Requestがきて、マージしたら自動的にnpm publishすることができて便利です。</p>

<ul>
<li><a href="http://qiita.com/itkrt2y/items/c0e77a4e3cda173917bb" title="JavaScript - 自動でnpmライブラリをアプデ&amp;amp;プルリクしてくれるサービスのgreenkeeperがすごく便利だった - Qiita">JavaScript - 自動でnpmライブラリをアプデ&amp;プルリクしてくれるサービスのgreenkeeperがすごく便利だった - Qiita</a></li>
<li><a href="http://azu.github.io/slide/niku_sushi/npm-semantic-release.html" title="npmで成果物をsemantic-release :rocket:">npmで成果物をsemantic-release :rocket:</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>GitHub Ribbon GeneratorをVue.jsで書いた</title>
   <link href="http://efcl.info/2015/12/25/github-ribbon-generator/"/>
   <updated>2015-12-25T19:39:00+09:00</updated>
   <id>http://efcl.info/2015/12/25/github-ribbon-generator</id>
   <content type="html"><![CDATA[ <p><a href="http://qiita.com/advent-calendar/2015/vue" title="Vue.js Advent Calendar 2015 - Qiita">Vue.js Advent Calendar 2015 - Qiita</a> 25日目</p>

<h2 id="github-ribbon-generator">GitHub Ribbon Generator</h2>

<p><a href="http://azu.github.io/github-ribbon-generator/" title="GitHub Ribbon Generator">GitHub Ribbon Generator</a>というツールを作りました。</p>

<p><a href="http://azu.github.io/github-ribbon-generator/"><img src="http://efcl.info/wp-content/uploads/2015/12/25-1451045310.png" alt="github ribbon"></a></p>

<p><a href="https://github.com/blog/273-github-ribbons" title="GitHub Ribbons">GitHub Ribbons</a>というのは、右上にあるFork Meボタンのことです。</p>

<ul>
<li><a href="https://github.com/blog/273-github-ribbons" title="GitHub Ribbons">GitHub Ribbons</a> 公式の解説</li>
</ul>

<h2 id="使い方">使い方</h2>

<ul>
<li>GitHub Repository</li>
<li>Position(右か左)</li>
<li>Color</li>
</ul>

<p>を入力してあげれば、そのままコピペ出来るGitHub RibbonのHTMLが出来上がるので後はコピペするだけです。</p>

<h2 id="仕組み">仕組み</h2>

<p>このツール自体はコピペしてURLを書き換えとか毎回やるの面倒だなと思って作った程度ですが、
もう一つの目的としては<a href="http://vuejs.org/2015/10/26/1.0.0-release/" title="Vue.js 1.0.0">Vue.js 1.0.0</a>を使ってみたかったというのがあります。</p>

<ul>
<li><a href="https://github.com/azu/github-ribbon-generator" title="azu/github-ribbon-generator">azu/github-ribbon-generator</a></li>
</ul>

<p><a href="http://jp.vuejs.org/guide/application.html" title="大規模アプリケーションの構築 - vue.js">大規模アプリケーションの構築 - vue.js</a>にかかれていること大体実装した感じになっています。
Vue.jsというと2 wayのgetter/setterを使ったデータバインディング的な感じですが、アプリが大きくなると辛くなるというのはわかっていました。(フォームとかは簡単で便利ですが)</p>

<p>なので、目的としては以下の2つになっています。</p>

<ul>
<li>React + Fluxみたいなデータの流れは実装ができるのか</li>
<li><code>.vue</code>というフォーマット?での書き心地を確かめたい</li>
</ul>

<p>大したことはやってないので<a href="https://github.com/azu/github-ribbon-generator" title="azu/github-ribbon-generator">azu/github-ribbon-generator</a>を直接見たほうが速いです。</p>

<h3 id="state">state</h3>

<p>このツールではstateは3つしか出てきません。</p>

<ul>
<li>GitHub Repository</li>
<li>Position</li>
<li>Color</li>
</ul>

<p>これを<a href="https://github.com/azu/github-ribbon-generator/blob/master/src/store/UserStore.js" title="UserStore">UserStore</a>という適当なものへ出し入れ出来るようにしています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// ChangeEmitterは</span>
<span class="kr">import</span> <span class="nx">ChangeEmitter</span> <span class="nx">from</span> <span class="s2">&quot;./ChangeEmitter&quot;</span><span class="p">;</span>
<span class="kr">class</span> <span class="nx">UserStore</span> <span class="kr">extends</span> <span class="nx">ChangeEmitter</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">repositoryURL</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
            <span class="nx">position</span><span class="o">:</span> <span class="nx">defaultOptions</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span>
            <span class="nx">color</span><span class="o">:</span> <span class="nx">defaultOptions</span><span class="p">.</span><span class="nx">color</span>
        <span class="p">};</span>
    <span class="p">}</span>

    <span class="nx">setState</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">state</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserStore</span><span class="p">();</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">emitter</span><span class="p">;</span>
</code></pre></div>
<h3 id=".vue">.vue</h3>

<p><code>.vue</code> はVue.jsが公式に提供してるBrowseryとWebpackから扱えるフォーマットで、HTML/CSS/JSを一つにまとめたファイルです。</p>

<ul>
<li><a href="http://vuejs.github.io/vue-loader/start/spec.html">Vue Component Spec | Introduction</a></li>
<li><a href="https://github.com/vuejs/vue-loader">vuejs/vue-loader</a></li>
<li><a href="https://github.com/vuejs/vueify">vuejs/vueify</a></li>
</ul>

<p>このツールのRoot Componentとなってる<a href="https://github.com/azu/github-ribbon-generator/blob/master/src/component/app.vue" title="app.vue">app.vue</a>を見てみると分かりやすいと思います。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style&gt;</span>
    <span class="nc">.App</span> <span class="p">{</span>
        <span class="k">padding-left</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
        <span class="k">padding-right</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
        <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
        <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
        <span class="k">padding-top</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
        <span class="k">max-width</span><span class="o">:</span> <span class="m">768px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.App</span> <span class="nt">h1</span><span class="o">,</span> <span class="nc">.App</span> <span class="nt">h2</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
        <span class="k">font-weight</span><span class="o">:</span> <span class="m">100</span><span class="p">;</span>
        <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.App</span> <span class="nc">.header</span> <span class="p">{</span>
        <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;App&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1&gt;</span>GitHub Ribbon Generator<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;h2&gt;</span>
                <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;https://ghbtns.com/github-btn.html?user=azu&amp;repo=github-ribbon-generator&amp;type=star&amp;count=true&amp;size=large&quot;</span>
                        <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;0&quot;</span> <span class="na">width=</span><span class="s">&quot;160px&quot;</span> <span class="na">height=</span><span class="s">&quot;30px&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
            <span class="nt">&lt;/h2&gt;</span>
            <span class="nt">&lt;h2&gt;</span>Create Copy-Pastable GitHub Ribbon HTML snippet<span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;user-input</span> <span class="na">:repository-url=</span><span class="s">&quot;state.repositoryURL&quot;</span>
                    <span class="na">:color=</span><span class="s">&quot;state.color&quot;</span>
                    <span class="na">:position=</span><span class="s">&quot;state.position&quot;</span><span class="nt">&gt;&lt;/user-input&gt;</span>
        <span class="nt">&lt;copy-paste-box</span> <span class="na">:repository-url=</span><span class="s">&quot;state.repositoryURL&quot;</span>
                        <span class="na">:color=</span><span class="s">&quot;state.color&quot;</span>
                        <span class="na">:position=</span><span class="s">&quot;state.position&quot;</span><span class="nt">&gt;&lt;/copy-paste-box&gt;</span>
        <span class="nt">&lt;git-hub-ribbon</span> <span class="na">:repository-url=</span><span class="s">&quot;state.repositoryURL&quot;</span>
                        <span class="na">:color=</span><span class="s">&quot;state.color&quot;</span>
                        <span class="na">:position=</span><span class="s">&quot;state.position&quot;</span><span class="nt">&gt;&lt;/git-hub-ribbon&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="kr">import</span> <span class="nx">UserInput</span> <span class="nx">from</span> <span class="s2">&quot;./user-input.vue&quot;</span><span class="p">;</span>
    <span class="kr">import</span> <span class="nx">GitHubRibbon</span> <span class="nx">from</span> <span class="s2">&quot;./github-ribbon.vue&quot;</span><span class="p">;</span>
    <span class="kr">import</span> <span class="nx">CopyPasteBox</span> <span class="nx">from</span> <span class="s2">&quot;./copypaste-box.vue&quot;</span><span class="p">;</span>
    <span class="kr">import</span> <span class="nx">Store</span> <span class="nx">from</span> <span class="s2">&quot;../store/UserStore&quot;</span><span class="p">;</span>
    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;App&quot;</span><span class="p">,</span>
        <span class="c1">// App&#39;s state</span>
        <span class="nx">data</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="nx">state</span><span class="o">:</span> <span class="nx">Store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()</span>
            <span class="p">};</span>
        <span class="p">},</span>
        <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">UserInput</span><span class="p">,</span>
            <span class="nx">GitHubRibbon</span><span class="p">,</span>
            <span class="nx">CopyPasteBox</span>
        <span class="p">},</span>
        <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
            <span class="c1">// update State</span>
            <span class="nx">updateState</span> <span class="p">()</span> <span class="p">{</span>
                <span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">Store</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">state</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="nx">created</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">Store</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">updateState</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="nx">destroyed</span><span class="p">(){</span>
            <span class="nx">Store</span><span class="p">.</span><span class="nx">removeChange</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">updateState</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<ul>
<li><code>&lt;style&gt;</code> に書いたものがそのまま<code>&lt;style&gt;</code>要素として追加されています。

<ul>
<li><code>&lt;style scoped&gt;</code> とすればカプセル化もできます。</li>
</ul></li>
<li><code>&lt;template&gt;</code> がそのコンポーネントなので、分かりやすく<code>&lt;div class=&quot;App&quot;&gt;</code>で囲んでいます。</li>
<li><code>&lt;script&gt;</code> はVueの<a href="http://jp.vuejs.org/guide/components.html" title="コンポーネント">コンポーネント</a>のコードです。</li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2015/12/2015-12-25_20-00-13.jpg" alt=".vue style"></p>

<p>Reactだと<code>&lt;style&gt;</code>がない事以外は大体同じですが、<code>&lt;style&gt;</code>が同じ所に書けるのでコンポーネントのスタイルを簡単に適応するのがやりやすいです。</p>

<p>Reactの場合も、コンポーネント毎にCSSファイルを作ってスタイルの設定をしていたので、同じ事がそのままできるのは分かりやすいです。</p>

<blockquote>
<p>これはSUIT CSSという命名ルールと殆ど同じで、MyComponentというコンポーネントには.MyComponentというクラス名をつけるという命名ルールです。</p>
</blockquote>

<ul>
<li><a href="http://efcl.info/2015/08/24/flux-utils/" title="はてなブックマーク検索を作りながらFlux Utilsについて学ぶ | Web Scratch">はてなブックマーク検索を作りながらFlux Utilsについて学ぶ | Web Scratch</a></li>
</ul>

<p>逆に分かりにくい所としては、<code>.Vue</code>でも<code>components</code>に子コンポーネントの<code>.vue</code>を読み込んだインスタンスを渡す事で、<code>&lt;template&gt;</code>の中でそのコンポーネントをタグとして書くことが出来ます。
(JSXでも大体同じ)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js">        <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">UserInput</span><span class="p">,</span>
            <span class="nx">GitHubRibbon</span><span class="p">,</span>
            <span class="nx">CopyPasteBox</span>
        <span class="p">},</span>
</code></pre></div>
<p>しかし、<code>.vue</code>では<code>components</code>に渡した名前そのままではなく、ケバブケースにした名前で<code>&lt;template&gt;</code>に書く必要があります。</p>

<p>例えば、<code>UserInput</code>ならば<code>user-input</code>というようになります。(keyで指定すればそのkeyで書くことが出来ます)</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;user-input</span> <span class="na">:repository-url=</span><span class="s">&quot;state.repositoryURL&quot;</span>
            <span class="na">:color=</span><span class="s">&quot;state.color&quot;</span>
            <span class="na">:position=</span><span class="s">&quot;state.position&quot;</span><span class="nt">&gt;&lt;/user-input&gt;</span>
</code></pre></div>
<blockquote>
<p>HTML の属性は大文字と小文字を区別しません。キャメルケースされた prop 名を属性として使用するとき、それらをケバブケース(kebab-case: ハイフンで句切られた)として使用する必要があります:</p>
</blockquote>

<ul>
<li><a href="http://jp.vuejs.org/guide/components.html#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9_%E5%AF%BE_%E3%82%B1%E3%83%90%E3%83%96%E3%82%B1%E3%83%BC%E3%82%B9" title="キャメルケース 対 ケバブケース">キャメルケース 対 ケバブケース</a></li>
</ul>

<p>このケバブケースで書かないといけないのが、警告もでなくてとても分かりにくい感じでした。
(Reactの<code>className</code>とか、Riotの<a href="http://riotjs.com/ja/api/#tag" title="riot.tag">riot.tag</a>関数の制限とかも似た話ですが)</p>

<h3 id="コンポーネントとデータ">コンポーネントとデータ</h3>

<p>ReactのPropsと同じですが、Vue.jsも<code>props</code>というの子コンポーネントで宣言してあげると、親コンポーネントから値を受け取れます。</p>

<p>親(App.vue)からは</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;user-input</span> <span class="na">:repository-url=</span><span class="s">&quot;state.repositoryURL&quot;</span>
            <span class="na">:color=</span><span class="s">&quot;state.color&quot;</span>
            <span class="na">:position=</span><span class="s">&quot;state.position&quot;</span><span class="nt">&gt;&lt;/user-input&gt;</span>
</code></pre></div>
<p>と3つの値を渡したいで、子となる<a href="https://github.com/azu/github-ribbon-generator/blob/master/src/component/user-input.vue" title="user-input.vue">user-input.vue</a>では</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">props: {
    repositoryURL: String,
    position: String,
    color: String
},
</code></pre></div>
<p>と宣言しています。</p>

<p>受け取れるデータのタイプも書くことができ、<a href="https://facebook.github.io/react/docs/reusable-components.html" title="React.PropTypes">React.PropTypes</a>よりはシンプルなので分かりやすいです。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Why is React&#39;s PropTypes naming inconsistent with JS? number, object, string, array — all good — but then &quot;func&quot; and &quot;bool&quot;. Um...</p>&mdash; kangax (@kangax) <a href="https://twitter.com/kangax/status/647110546194624512">September 24, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style&gt;</span>
    <span class="nc">.UserInput</span> <span class="nc">.UserInput-field</span> <span class="p">{</span>
        <span class="k">margin</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;UserInput&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;pure-form pure-form-aligned&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;fieldset&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;UserInput-field pure-control-group&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;label&gt;</span>GitHub Repository:<span class="nt">&lt;/label&gt;</span>
                    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;pure-input-2-3&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">v-model=</span><span class="s">&quot;repositoryURL&quot;</span>
                           <span class="na">placeholder=</span><span class="s">&quot;https://github.com/jquery/jquery&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;UserInput-field pure-control-group&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;position&quot;</span><span class="nt">&gt;</span>Position:<span class="nt">&lt;/label&gt;</span>
                    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;position&quot;</span> <span class="na">v-model=</span><span class="s">&quot;position&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;option</span> <span class="na">v-for=</span><span class="s">&quot;position in positionList&quot;</span> <span class="na">:value=</span><span class="s">&quot;position.value&quot;</span><span class="nt">&gt;</span>

                        <span class="nt">&lt;/option&gt;</span>
                    <span class="nt">&lt;/select&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;UserInput-field pure-control-group&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;</span>Color:<span class="nt">&lt;/label&gt;</span>
                    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;color&quot;</span> <span class="na">v-model=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;option</span> <span class="na">v-for=</span><span class="s">&quot;color in colorList&quot;</span> <span class="na">:value=</span><span class="s">&quot;color.value&quot;</span><span class="nt">&gt;</span>

                        <span class="nt">&lt;/option&gt;</span>
                    <span class="nt">&lt;/select&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/fieldset&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="kr">import</span> <span class="nx">Store</span> <span class="nx">from</span> <span class="s2">&quot;../store/UserStore&quot;</span><span class="p">;</span>
    <span class="kr">import</span> <span class="p">{</span><span class="nx">colorList</span><span class="p">,</span> <span class="nx">positionList</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;../util/ribbon&quot;</span><span class="p">;</span>
    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;UserInput&#39;</span><span class="p">,</span>
        <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">repositoryURL</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
            <span class="nx">position</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
            <span class="nx">color</span><span class="o">:</span> <span class="nb">String</span>
        <span class="p">},</span>
        <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// http://jp.vuejs.org/guide/forms.html#Select</span>
            <span class="c1">// Create [{ text, value }]</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="nx">colorList</span><span class="o">:</span> <span class="nx">colorList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="nx">color</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">color</span><span class="p">}</span>
                <span class="p">}),</span>
                <span class="nx">positionList</span><span class="o">:</span> <span class="nx">positionList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="nx">position</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">position</span><span class="p">}</span>
                <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">repositoryURL</span><span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">Store</span><span class="p">.</span><span class="nx">setRepositoryURL</span><span class="p">(</span><span class="nx">newVal</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="nx">color</span><span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">Store</span><span class="p">.</span><span class="nx">setColor</span><span class="p">(</span><span class="nx">newVal</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="nx">position</span><span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">Store</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">newVal</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p><code>&lt;template&gt;</code>ではその受け取った値を元に表示するHTMLを書くという感じです。</p>

<p>Vue.jsでは<code>watch</code>プロパティに書いたキー名で、Vueインスタンス[キー名] を監視する機能があるので、
これで値が変わったらStoreの値を書き換える<code>Store.set*</code>を呼んでいます。
(<a href="http://jp.vuejs.org/api/#vm-$watch(_expOrFn,_callback,_%5Boptions%5D_)" title="vm.$watch">vm.$watch</a>の宣言的なバージョンですね)</p>

<p>Storeに直接setter的なメソッドが生えてますが、この辺をAction的なものを経由するようにしたりすれば、大体Fluxと似たようなデータフローになると思います。</p>

<p><img src="http://efcl.info/wp-content/uploads/2015/12/25-1451042957.png" alt="data-flow"></p>

<ul>
<li><a href="http://jp.vuejs.org/guide/application.html" title="大規模アプリケーションの構築 - vue.js">大規模アプリケーションの構築 - vue.js</a></li>
</ul>

<p>今回はFluxフレームワーク的なライブラリを使わずにEventEmitterのみで書いてます。</p>

<p>公式でもFluxライクなフレームワークは作ってるらしいので、その辺を見てみると面白いかもしれません。</p>

<ul>
<li><a href="http://qiita.com/tomato360/items/b2f11a392bf8fb125610">Vue.js用のFluxライクなライブラリVuexを試してみる - Qiita</a></li>
<li><a href="https://github.com/vuejs/vuex">vuejs/vuex</a></li>
<li><a href="http://blog.mmmcorp.co.jp/blog/2015/12/03/vue-with-redux/" title="Vue.jsにreduxを載せた話 | MMMブログ">Vue.jsにreduxを載せた話 | MMMブログ</a></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>React + Fluxみたいなデータの流れは実装ができるのか

<ul>
<li>=&gt; まあ普通にできそう</li>
</ul></li>
<li><code>.vue</code>というフォーマット?での書き心地を確かめたい

<ul>
<li>=&gt; HTML/CSS/JSがまとまった感じ</li>
<li>JSXに比べるとCSSも一緒なのは分かりやすい</li>
<li>テンプレートがちょこちょこ難しい</li>
</ul></li>
</ul>

<p>データフローの話は公式でも<a href="https://github.com/vuejs/vuex">vuejs/vuex</a>みたいので模索していそうです。</p>

<p>Vue.jsで適当に書くとデータバインディングに頼って、どこで何が更新されているのか分からなくなるみたいな事が起きやすい印象です。
そのため、複雑になったものからデータフローをどう整理するかを色々考えてみると面白そうです。
(Reactでもいい気はしていますが)</p>

<p><code>.vue</code>はCSSのカプセル化もあり結構いい感じですが、ただの独自フォーマットであるのでやり過ぎると後戻りできなくなる場合があるので気をつける必要がありそうです。</p>

<ul>
<li>Browserify、Webpackのプラグインとして実装されているので全てをコントロールできなくて破壊的な変更が起きる可能性</li>
<li><a href="http://vuejs.github.io/vue-loader/" title="vue-loader">vue-loader</a>は特に何でも出来る感じなので、何でもやると危なそう</li>
</ul>

<p>また、テンプレートの構文がちょこちょこ複雑(評価結果が見た目から直感的に分からない)な所があったりします。</p>

<ul>
<li><a href="http://jp.vuejs.org/guide/components.html#%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB_%E5%AF%BE_%E5%8B%95%E7%9A%84" title="リテラル 対 動的">リテラル 対 動的</a></li>
<li><a href="http://jp.vuejs.org/guide/syntax.html" title="データバインディング構文 - vue.js">データバインディング構文 - vue.js</a></li>
</ul>

<p>この辺は独自のテンプレート言語を持つ宿命という感じがするので慣れなのかもしれません。</p>

<p>ただ、今回のツールだと大体何で書いても大した違いはない気がします。
以下の比較も読んでみると面白いかもしれません。</p>

<ul>
<li><a href="http://jp.vuejs.org/guide/comparison.html" title="他のフレームワークとの比較 - vue.js">他のフレームワークとの比較 - vue.js</a></li>
</ul>

<p>以上、JavaScriptの素振りの話でした。</p>

<ul>
<li><a href="http://qiita.com/azu/items/bacd146ed2e26980b9b0" title="JavaScriptのトレンドを素振りして確認する方法 - Qiita">JavaScriptのトレンドを素振りして確認する方法 - Qiita</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#忘年_sushi でJavaScriptの素振りする技術について話してきた</title>
   <link href="http://efcl.info/2015/12/09/year-end-sushi/"/>
   <updated>2015-12-09T23:19:00+09:00</updated>
   <id>http://efcl.info/2015/12/09/year-end-sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?q=%23%E5%BF%98%E5%B9%B4_sushi" title="#忘年_sushi">#忘年_sushi</a>で<a href="http://azu.github.io/slide/2015/year-end/javascript-swing.html" title="JavaScriptの素振りする技術">JavaScriptの素振りする技術</a>について話してきました。</p>

<ul>
<li><a href="http://togetter.com/li/910679" title="#忘年_sushi - Togetterまとめ">#忘年_sushi - Togetterまとめ</a></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="und" dir="ltr">🍣 <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> <a href="https://t.co/NAnBXXucnl">pic.twitter.com/NAnBXXucnl</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674538717093085184">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="angular2">Angular2</h2>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> こう感じ(AngularJS) <a href="https://t.co/rvr8jAsl4S">pic.twitter.com/rvr8jAsl4S</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674535461642104832">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>Angualr 2を想定して書くAngular 1はAngularらしくない感じ</li>
<li>Angular 1での縛りプレイ</li>
<li>Angualr 2はαがアップデートされまくってる

<ul>
<li><a href="https://github.com/angular/angular/releases" title="Releases · angular/angular">Releases · angular/angular</a></li>
<li><a href="https://github.com/ReactiveX/RxJS/releases" title="RxJS">RxJS</a>もαがアップデートされまくってる</li>
</ul></li>
</ul>

<h2 id="コーチング">コーチング</h2>

<ul>
<li>コーチングとは

<ul>
<li>DDDみたいなもの</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">DDDを多人数との現実的なコミュニケーションパターンとして捉えるなら、コーチングで学んでることも同じようなパターンランゲージ&#10; <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674537699605262336">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>コーチングの分類</li>
<li>広義なコーチング = 人との関わり全般</li>
<li>狭義のコーチング = コーチング資格の持ってるひとのやること</li>
<li>マネージメントとコーチング

<ul>
<li>コーチングから見るとマネージメントは別</li>
<li>マネージメントから見るとコーチングは別、またマネージメントの一種の手法</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">マネージメントの問題を解決するときのツールが欲しいという話 <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674541071724994560">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="pdf.js-controller">pdf.js-controller</h2>

<blockquote class="twitter-tweet" lang="en"><p lang="und" dir="ltr"><a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> <a href="https://t.co/X3FRXzSkzA">pic.twitter.com/X3FRXzSkzA</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/674541370808270848">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="http://efcl.info/2015/12/07/pdf.js-controller/" title="[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch">[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch</a></li>
<li>pdf.jsは扱いにくいけど普通に動いても面白い</li>
<li>楽に扱えるライブラリを書いたよという話</li>
</ul>

<h2 id="serviceworkerとhttp/2-push">ServiceWorkerとHTTP/2 push</h2>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">これからの AppCache (？)の話をしている。 <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> <a href="https://t.co/NVr9AntFk6">pic.twitter.com/NVr9AntFk6</a></p>&mdash; Jxck (@Jxck_) <a href="https://twitter.com/Jxck_/status/674553985764737024">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><a href="http://jxck.hatenablog.com/entry/service-worker-casper" title="HTTP/2 Push を Service Worker + Cache Aware Server Push で効率化したい話 - Block Rockin’ Codes">HTTP/2 Push を Service Worker + Cache Aware Server Push で効率化したい話 - Block Rockin’ Codes</a></p>

<ul>
<li>localhostのHTTPS化問題

<ul>
<li>HTTP2がHTTPSじゃないと使えないので<a href="https://localhost/%E3%81%A8%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%82%E3%82%8B">https://localhost/とする必要がある</a></li>
<li>でもlocalhostの証明書がinvalidだとSWが登録できない</li>
<li>これを回避する安全な方法がChromeではバグッてる</li>
<li>危険なフラグで無理矢理開発してる。怖い。</li>
</ul></li>
<li>SWを使ったキャッシュレイヤーがあり、Server pushでそれに必要なものを送り込む

<ul>
<li>次回のリクエストをhookしてSWがレスポンスを返せれば、実際のリクエストをしなくてよくなるという話</li>
</ul></li>
<li>cache aware server pushの理論

<ul>
<li>クライアントが持ってるSWのキャッシュをサーバに教える</li>
<li>クッキーかヘッダーか</li>
</ul></li>
<li>Hookポイントが色々足りない</li>
</ul>

<h2 id="社内let&#39;s-encrypt">社内Let&#39;s Encrypt</h2>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">Let&#39;s Encryptが社内ネットワークにあるドメインには使えないという話。&#10;社外から認証のリクエストを制限してるから <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674554358290255872">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>社内ネットワークにあるドメインにはLet&#39;s Encryptが使えない

<ul>
<li>社内ネットワーク内のみからアクセス出来るドメイン</li>
<li>ACMEプロトコルでのやり取りは外と繋ぐ必要がある</li>
<li>更新時に開けるか社内CA&amp;社内Let&#39;s Encrypt</li>
</ul></li>
<li>社内に置くとhttpにしてしまう文化ができがち

<ul>
<li>AppCache Poistioning + HTTP のリスク</li>
<li>社内ネットワークからのアクセスのみで中間者攻撃が残る</li>
<li>社内ネットワークからのアクセスもSSL化すると安全</li>
<li>社内ツールもちゃんとSSL化する</li>
</ul></li>
<li>社内ツールを置くドメイン + ワイルドカードでSSL</li>
<li>社内CAを作って各端末にRoot証明書?

<ul>
<li>やっぱりリスクがあるのでは</li>
</ul></li>
<li>社内やデータセンター内などのSSL化でACMEプロトコルを使ったものは増えるかも</li>
<li><a href="http://jxck.hatenablog.com/entry/letsencrypt-acme" title="Let&amp;#39;s Encrypt を支える ACME プロトコル - Block Rockin’ Codes">Let&#39;s Encrypt を支える ACME プロトコル - Block Rockin’ Codes</a></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">唐突に🍣 <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> <a href="https://t.co/iwIpydUM7j">pic.twitter.com/iwIpydUM7j</a></p>&mdash; teppeis (@teppeis) <a href="https://twitter.com/teppeis/status/674571307334275076">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="let-vs-const">let vs const</h2>

<p><a href="https://speakerdeck.com/yosuke_furukawa/const-vs-let" title="const vs let // Speaker Deck">const vs let // Speaker Deck</a></p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">そろそろ決着を付けたい let vs const <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/674437783772004352">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">御社はこんな会議やってるんですか？ <a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> <a href="https://t.co/SIHnmY8hcq">pic.twitter.com/SIHnmY8hcq</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674559952023719936">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><code>const</code>のPros

<ul>
<li>脳内メモリの節約に役立つ</li>
<li>変わる場所だけが<code>let</code>で宣言される</li>
<li>if分岐で代入みたいなパターンが減る</li>
</ul></li>
<li><code>const</code>のCons

<ul>
<li>オブジェクトのプロパティなどは書き換え可能</li>
<li><code>const</code>という文字数が長い、威圧感がある</li>
<li><code>const</code>を使ったからといってすべてがimmutableにはならない</li>
<li>モジュールからexportされたconstはconstではなくなる</li>
<li>現状では<code>const</code>できない場所が色々ある

<ul>
<li><a href="http://wiki.ecmascript.org/doku.php?id=strawman:defensible_classes" title="strawman:defensible_classes [ES Wiki]">strawman:defensible_classes [ES Wiki]</a></li>
</ul></li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> 「今のconstは精神的なconst」</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674565236536422400">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
    

<ul>
<li>精神的なconst

<ul>
<li>const使う事自体は正しい</li>
<li>一種のコーディングスタイルに近い効力</li>
<li>引数のconst問題</li>
<li>constを利用することは問題ないが、既存の全てをconstにしろと言える程の効力がない</li>
<li>constで解決出来ることは別のスタイルでも解決できる可能性もある</li>
</ul></li>
<li><a href="http://hjm333.hatenablog.com/entry/2015/09/15/000644">【Effective Java】項目１５：可変性を最小限にする - モノクローム</a></li>
<li><a href="http://tatsuyamuku.hatenablog.com/entry/2015/06/20/223021">【Effective Java】項目15 可変性を最小限にする - tatsuyamukuの日記</a>

<ul>
<li>Javaのfinalはフィールドなどに対してという話。</li>
<li>ローカル変数を全てconstしろという話ではない。</li>
<li>現状のES6 constはローカル変数に対してのconstしかない</li>
<li>JavaScriptにはスレッドセーフという概念はない</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E5%BF%98%E5%B9%B4_sushi?src=hash">#忘年_sushi</a> 「結論はケースバイケース」 <a href="https://t.co/Qc2vIdnlhP">https://t.co/Qc2vIdnlhP</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/674568622187020288">December 9, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="javascriptの素振りする技術"><a href="http://azu.github.io/slide/2015/year-end/javascript-swing.html" title="JavaScriptの素振りする技術">JavaScriptの素振りする技術</a></h2>

<p>JavaScriptのトレンドというのは半分ぐらい主張なので、それを確認する術を身につけようと言う話でした。</p>

<p>需要があったら別の記事で書くかもしれません。</p>

<h2 id="おわり">おわり</h2>

<p>今年もお疲れ様でした！</p>
 ]]></content>
 </entry>
 

</feed>
