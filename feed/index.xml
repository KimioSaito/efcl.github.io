<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2017-03-17T19:55:00+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>AlminでFluxアーキテクチャをやってみる</title>
   <link href="http://efcl.info/2017/03/17/almin-introduction/"/>
   <updated>2017-03-17T19:33:00+09:00</updated>
   <id>http://efcl.info/2017/03/17/almin-introduction</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>でFluxアーキテクチャについてを見ていく話です。</p>

<p>AlminはいわゆるFluxライブラリ的なものですが、ドメイン駆動設計(DDD)を行うにあたって既存の<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>や<a href="https://github.com/facebook/flux" title="Flux">Flux</a>では上手くレイヤー分けをやりにくい部分がありました。</p>

<p>この辺の経緯については以前スライドやドキュメントにまとめてあるので、以下を参照してください。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
</ul>

<p>この記事では、実際のサンプルコードを見ていきながら、Flux的なデータフローについて見ていきます。</p>

<h2 id="alminでカウンターアプリを作る">Alminでカウンターアプリを作る</h2>

<p>このサンプルでは<a href="https://github.com/almin/almin" title="Almin">Almin</a>を使って次のようなカウンターアプリを作っていきます。</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/counter.png" alt="counter"></p>

<h2 id="source-code">Source Code</h2>

<p>ソースコードは次の場所にあります。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/counter">https://github.com/almin/almin/tree/master/example/counter</a></li>
</ul>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/almin/almin.git

<span class="nb">cd </span>almin/example/counter
npm install
npm start
<span class="c"># manually open</span>
open http://localhost:8080/
</code></pre></div>
<h2 id="ディレクトリ構造">ディレクトリ構造</h2>

<p>最終的なディレクトリ構造を最初に見ておくとイメージがしやすいかもしれません。</p>

<p>データの流れとしては、Component -&gt; UseCase -&gt; Storeとなりますが、実装の順序はこの順序じゃなくても問題ありません。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">src/
├── index.js
├── component
│   ├── App.js
│   └── Counter.js
├── usecase
│   └── IncrementalCounterUseCase.js
└── store
    ├── CounterState.js
    └── CounterStore.js
</code></pre></div>
<p>Alminの構成要素については<a href="https://almin.js.org/docs/abstract/">Component of Almin</a>を参照してみてください。</p>

<p>このサンプルでは、最小限の要素のみが登場しています。</p>

<ul>
<li>View

<ul>
<li>ユーザーが自由に選ぶ</li>
<li>ここではReactを選択</li>
</ul></li>
<li>Store

<ul>
<li>アプリの状態(State)を保存する</li>
<li>Stateが変わったことを(Viewへ)通知する</li>
</ul></li>
<li>UseCase

<ul>
<li>ユーザーが行いたい処理の<strong>流れ</strong>を書く場所</li>
</ul></li>
</ul>

<p>他のライブラリと見比べてみると次のような形になります。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/17-1489747778.png" alt="比較table"></p>

<p>このサンプルは状態が一つしかないため、複数のStoreをまとめるStoreGroupや、
ロジックが殆どないためDomainといった要素は登場していません。</p>

<h2 id="カウンターの機能">カウンターの機能</h2>

<ol>
<li>ユーザーがボタンを押したら+1する</li>
</ol>

<p>以上。</p>

<p>つまり、このカウンターは「ユーザーがボタンを押したら+1する」というUseCaseがあります。</p>

<h2 id="usecase">UseCase</h2>

<p>カウンターの機能をUseCaseという形で実装します。
UseCaseとは、ユーザーとシステムのやり取りを対話的に書いたものです。</p>

<p>簡単に言えば、ユースケースにはユーザーがシステムとやり取りする手順を書いていきます。
カウンターの例では複雑な手順が出てこないため、ユーザーがUIを操作した時に行うアクションを書く場所と考えれば問題ありません。</p>

<blockquote>
<ol>
<li>ボタンを押したら+1する</li>
</ol>
</blockquote>

<p>基本的にAlminでは1 UseCase 1ファイル(クラス)として実装します。</p>

<p>これを実現する<code>IncrementalCounterUseCase.js</code>を作成します。
Alminの<code>UseCase</code>クラスを継承し、<code>execute()</code>メソッドに行いたい処理実装します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">UseCase</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">IncrementalCounterUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="c1">// UseCase should implement #execute method</span>
    <span class="nx">execute</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Write the UseCase code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>ここで行いたい処理というのは、カウンターを+1することです。
つまり、<code>IncrementalCounterUseCase</code>が実行されたときに、<strong>CounterアプリのState</strong>を更新したいわけです。</p>

<p>そのためには、まず<strong>CounterアプリのState</strong>を保持する場所が必要です。
ここでは、<strong>CounterアプリのState</strong>を<strong>Store</strong>という入れ物の中に実装します。</p>

<h2 id="store">Store</h2>

<p>まずは、<code>CounterStore</code>という<code>Store</code>クラスを継承したものを作成します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">Store</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// receive event from UseCase, then update state</span>
    <span class="p">}</span>

    <span class="c1">// return state object</span>
    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span> 
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Alminの<code>Store</code>は<code>UseCase</code>から<code>dispatch</code>されたpayloadを受け取ることができます。</p>

<p>つまり次のような流れを実装します。</p>

<ol>
<li>IncrementalCounterUseCaseが&quot;increment&quot; payloadをdispatchします.</li>
<li>CounterStoreは&quot;increment&quot; payloadを受け取り、自分自身のstateを更新します。</li>
</ol>

<p>これはいわゆるFluxパターンです</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/flux-diagram-white-background.png" alt="flux-diagram-white-background"></p>

<p>Fluxでは次のような説明になります。</p>

<ol>
<li>ActionCreatorで&quot;increment&quot; actionを作りdispatchします</li>
<li>CounterStoreは&quot;increment&quot; payloadを受け取り、自分自身のstateを更新します。</li>
</ol>

<h2 id="usecase-dispatch-gt-store"><strong>UseCase</strong> dispatch -&gt; Store</h2>

<p><code>IncrementalCounterUseCase</code>に話を戻して、「&quot;increment&quot; payloadをdispatch」を実装します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">UseCase</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">IncrementalCounterUseCase</span> <span class="kr">extends</span> <span class="nx">UseCase</span> <span class="p">{</span>
    <span class="c1">// IncrementalCounterUseCase dispatch &quot;increment&quot; ----&gt; Store</span>
    <span class="c1">// UseCase should implement #execute method</span>
    <span class="nx">execute</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;increment&quot;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>UseCase</code>クラスを継承したクラスは<code>this.dispatch(payload)</code>メソッド利用できます。</p>

<p><code>payload</code>オブジェクトは<code>type</code>プロパティを持ったオブジェクトです。
次の<code>payload</code>は最小のものと言えます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;type&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>次のように<code>type</code>以外のプロパティも持たせることができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span>
    <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;value&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>つまり、先ほど実装した<code>IncrementalCounterUseCase</code>は、<code>&quot;increment&quot;</code>いう<code>type</code>のpayloadをdispatchしています。</p>

<h2 id="usecase-gt-store-received">UseCase -&gt; <strong>Store</strong> received</h2>

<p>次は<code>CounterStore</code> が &quot;increment&quot; payloadを受け取れるようにします。</p>

<p><code>Store</code>クラスを継承したクラスは、<code>this.onDispatch(function(payload){ })</code>メソッドが利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span><span class="nx">Store</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="cm">/*</span>
<span class="cm">            {</span>
<span class="cm">                type: &quot;increment&quot;z</span>
<span class="cm">            }</span>
<span class="cm">            */</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">getState</span><span class="p">(){</span> <span class="cm">/* stateを返す */</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>Store#onDispatch</code>メソッドで、UseCaseがdispatchしたpayloadを受け取れます。
受け取ったら<code>CounterStore</code>のstateをアップデートします。</p>

<p>その前に、Alminでは多くの場合StoreがStateを別々のクラスとして実装しています。</p>

<p>つまり、<code>CouterStore</code>は<code>CounterState</code>のインスタンスを持つという形にしています。</p>

<p><strong>Store</strong></p>

<ul>
<li>dispatchや変更を監視、Stateを保持する層</li>
</ul>

<p><strong>State</strong></p>

<ul>
<li>ステート！</li>
</ul>

<h2 id="state">State</h2>

<p>まずは<code>CounterState.js</code>を作成します。
State自体はただのJavaScriptで、Alminとして<code>State</code>のようなクラスは提供していません。</p>

<p><code>CounterState</code>の目的は</p>

<ul>
<li>&quot;payload&quot;を受け取り、新しいStateを返す</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">CounterState</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * @param {Number} count</span>
<span class="cm">     */</span>
    <span class="nx">constructor</span><span class="p">({</span> <span class="nx">count</span> <span class="p">})</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Increment Counter</span>
            <span class="k">case</span> <span class="s2">&quot;increment&quot;</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
                    <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="p">});</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>このパターンはどこかで見たことがあるかもしれません。
Reduxの <strong>reducer</strong> と呼ばれるものによく似たものを実装しています。</p>

<ul>
<li><a href="http://redux.js.org/docs/basics/Reducers.html" title="Reducers | Redux">Reducers | Redux</a></li>
<li><a href="https://facebook.github.io/flux/docs/flux-utils.html" title="Flux | Application Architecture for Building User Interfaces">Flux | Application Architecture for Building User Interfaces</a></li>
</ul>

<h2 id="store-gt-state-newstate">Store -&gt; State: NewState</h2>

<p>最後に、<code>CounterStore</code>へStateを更新するコードをを追加したら完成です。</p>

<ol>
<li>dispatchされたpayloadを受け取り、<code>CounterState</code>を更新を試みます</li>
<li>もし<code>CounterState</code>が更新されたなら, <code>CounterStore#emitChange</code>を叩き変更を通知します</li>
<li><code>getState(){}</code>ではStateのインスタンスを返します。</li>
</ol>

<p><code>Store</code>を継承したクラスは<code>this.emitChange()</code>メソッドを持っています。
これは、Storeを監視しているもの(主にView)に対して、Store(State)が変わったことを通知しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;./CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">CounterStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="c1">// initial state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterState</span><span class="p">({</span>
            <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>
        <span class="p">});</span>
        <span class="c1">// receive event from UseCase, then update state</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onDispatch</span><span class="p">(</span><span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">newState</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">counterState</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="side-note-testing">Side note: Testing</h3>

<p>UseCase、Store、Stateと分かれているのでテストも書くのは簡単です。
次の場所にテストコードもあります。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/counter/test" title="almin/example/counter/test at master · almin/almin">almin/example/counter/test at master · almin/almin</a></li>
</ul>

<h2 id="view-integration">View Integration</h2>

<p>ここでは、Viewの例として<a href="https://facebook.github.io/react/" title="React">React</a>を使っています。</p>

<h3 id="app">App</h3>

<p><code>App.js</code>というコンポーネント、いわゆるContainer Componentを作成します。</p>

<p>次に<code>Context</code>オブジェクトを作成します。 
<code>Context</code>オブジェクトとはStoreとUseCaseを繋ぐ役割をするものです。</p>

<p>次のように、StoreのインスタンスとDispatcherのインスタンスを渡して初期化しています。
(ここではStoreが一つのみですが、Alminでは複数のStoreをまとめるStoreGroupというものも用意しています)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">Dispatcher</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">CounterStore</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterStore&quot;</span><span class="p">;</span>
<span class="c1">// a single dispatcher</span>
<span class="kr">const</span> <span class="nx">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">();</span>
<span class="c1">// a single store. if you want to use multiple, please use StoreGroup!</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="p">,</span>
    <span class="nx">store</span>
<span class="p">});</span>
</code></pre></div><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">Dispatcher</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">CounterStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterStore&quot;</span><span class="p">;</span>
<span class="c1">// a single dispatcher</span>
<span class="kr">const</span> <span class="nx">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">();</span>
<span class="c1">// a single store</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CounterStore</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Context</span><span class="p">({</span>
    <span class="nx">dispatcher</span><span class="p">,</span>
    <span class="nx">store</span>
<span class="p">});</span>
<span class="kr">import</span> <span class="nx">Counter</span> <span class="nx">from</span> <span class="s2">&quot;./Counter&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(...</span><span class="nx">args</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">appContext</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// when change store, update component</span>
        <span class="kr">const</span> <span class="nx">onChangeHandler</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">requestAnimationFrame</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">appContext</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
            <span class="p">});</span>
        <span class="p">};</span>
        <span class="nx">appContext</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">onChangeHandler</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="cm">/*</span>
<span class="cm">         Where is &quot;CounterState&quot; come from? </span>
<span class="cm">         It is CounterStore#getState()&#39;s key name</span>

<span class="cm">         getState() {</span>
<span class="cm">             return {</span>
<span class="cm">                counterState: this.state</span>
<span class="cm">             }</span>
<span class="cm">         }</span>
<span class="cm">        */</span>
        <span class="kr">const</span> <span class="nx">counterState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">counterState</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Counter</span> <span class="nx">counterState</span><span class="o">=</span><span class="p">{</span><span class="nx">counterState</span><span class="p">}</span>
                        <span class="nx">appContext</span><span class="o">=</span><span class="p">{</span><span class="nx">appContext</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>App.jsを見てみると、</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">appContext</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">onChangeHandler</span><span class="p">);</span>
</code></pre></div>
<p>これは、<code>CounterStore</code> が変更される(<code>emitChange()</code>を叩く)と<code>onChangeHandler</code>が呼ばれることを意味しています。
そして、<code>onChangeHandler</code> は<code>App</code> componentのState(ReactのState)を更新します。</p>

<h3 id="counter-component">Counter component</h3>

<p>後は、<code>counterState</code>をCounterComponent(実際にcountを表示するView)が受け取り、カウントの値を表示すれば完成です。</p>

<p>カウントを更新したい場合は、作成したIncrementalCounterUseCaseを<code>context.useCase(new IncrementalCounterUseCase()).execute(渡したい値);</code>で呼び出すことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">IncrementalCounterUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">();</span>
</code></pre></div><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">IncrementalCounterUseCase</span> <span class="nx">from</span> <span class="s2">&quot;../usecase/IncrementalCounterUseCase&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Context</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;almin&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">CounterState</span> <span class="nx">from</span> <span class="s2">&quot;../store/CounterState&quot;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">CounterComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">incrementCounter</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// execute IncrementalCounterUseCase with new count value</span>
        <span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">appContext</span><span class="p">;</span>
        <span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="k">new</span> <span class="nx">IncrementalCounterUseCase</span><span class="p">()).</span><span class="nx">execute</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// execute UseCase ----&gt; Store</span>
        <span class="kr">const</span> <span class="nx">counterState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">counterState</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">incrementCounter</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Increment</span> <span class="nx">Counter</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
                    <span class="nx">Count</span><span class="o">:</span> <span class="p">{</span><span class="nx">counterState</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span>
                <span class="o">&lt;</span><span class="err">/p&gt;</span>
            <span class="o">&lt;</span><span class="err">/div&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">CounterComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">appContext</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">instanceOf</span><span class="p">(</span><span class="nx">Context</span><span class="p">).</span><span class="nx">isRequired</span><span class="p">,</span>
    <span class="nx">counterState</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">instanceOf</span><span class="p">(</span><span class="nx">CounterState</span><span class="p">).</span><span class="nx">isRequired</span>
<span class="p">};</span>
</code></pre></div>
<p>これにより、一般的なFluxの一方こうのデータフローが次のようにできていることが分かります。</p>

<ul>
<li>React -&gt; UseCase -&gt; Store(State) -&gt; React</li>
</ul>

<h2 id="alminとロガー">Alminとロガー</h2>

<p>Alminはアプリケーションのログをキチンと取れるようにするという設計の思想があります。
そのため、<code>Context</code>にはAlminがやっていることを通知するイベントがあり、これを利用して殆どのログがとれます。</p>

<p><a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a>という開発用のロガーライブラリが用意されているので、これを先ほどのサンプルに入れて動かしてみます。</p>

<ul>
<li><a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a></li>
</ul>

<p>3行追加するだけで次のような、UseCaseの実装やそのUseCaseによるStoreの変更などがコンソールログとして表示されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">ContextLogger</span> <span class="nx">from</span> <span class="s2">&quot;almin-logger&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContextLogger</span><span class="p">();</span>
<span class="nx">logger</span><span class="p">.</span><span class="nx">startLogging</span><span class="p">(</span><span class="nx">appContext</span><span class="p">);</span>
</code></pre></div>
<p><iframe src="//giphy.com/embed/3og0ICodJBeY3BQk1y" width="480" height="392" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3og0ICodJBeY3BQk1y">via GIPHY</a></p></p>

<p>また、Reduxを使ったことがある人は<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>というブラウザ拡張で動く開発者ツールを使ったことがあるかもしれません。</p>

<p>この拡張実は任意のFluxライブラリと連携するAPIも公開されています。</p>

<ul>
<li><a href="https://github.com/zalmoxisus/redux-devtools-extension" title="Redux DevTools Extension">Redux DevTools Extension</a></li>
</ul>

<p>Alminでは<a href="https://github.com/almin/almin-devtools" title="almin-devtools">almin-devtools</a>を使うことで、
<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>と連携することができます。</p>

<p>ブラウザに<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>をインストールします。</p>

<ul>
<li>Chrome: <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Chrome Web Store</a>;</li>
<li>Firefox: <a href="https://addons.mozilla.org/en-US/firefox/addon/remotedev/">Mozilla Add-ons</a>;</li>
<li>Electron: <a href="https://github.com/GPMDP/electron-devtools-installer"><code>electron-devtools-installer</code></a>.</li>
</ul>

<p>そして、3行加えるだけで、Alminのログを<a href="https://github.com/gaearon/redux-devtools" title="Redux DevTools">Redux DevTools</a>で見ることができます。(タイムマシーンデバッグなどはアプリ側でちゃんと実装しないと動かないので制限があります)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">AlminDevTools</span> <span class="nx">from</span> <span class="s2">&quot;almin-devtools&quot;</span>
<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AlminDevTools</span><span class="p">(</span><span class="nx">appContext</span><span class="p">);</span>
<span class="nx">logger</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</code></pre></div>
<p><iframe src="//giphy.com/embed/3ohzdEYLL9sEapqPUA" width="480" height="482" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3ohzdEYLL9sEapqPUA">via GIPHY</a></p></p>

<p>この辺のログ取ることによる開発時のメリットなどについては次の文章でまとめてあります。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
</ul>

<h2 id="おわりに">おわりに</h2>

<p>Alminで簡単なカウンターアプリを作成しました。</p>

<p>この例では典型的なFluxのパターンをAlminで行えていることが分かります。</p>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/almin-architecture-flux.png" alt="almin-flux.png"></p>

<p>実際のアプリケーションでは、StoreやUseCaseが一つだけというものはあまりないと思います。
TodoMVCの例では、CQRSやドメインモデルなどの要素も登場し、複数のUseCaseを実装していきます。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/todomvc/" title="Todo App · Almin.js">Todo App · Almin.js</a></li>
</ul>

<p>Alminは元々ある程度複雑になるであろうアプリケーションのために作成しています。
ただし、複雑なアプリケーションの開発を支えるのは設計や開発方法が主で、ライブラリはその一部分に過ぎません。</p>

<p>そのため、小さく使おうと思えば<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>や<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>などと使い勝手はそこまでは代わりません。
設計思想としてアプリケーションが大きくなることを前提としているので、
大きくなってきた時のレイヤリングのしやすさやログなど開発の補助の充実に力を入れています。</p>

<p>どれだけ短く書けるかよりも、どれだけ読みやすく書けて管理できるかの方がメインといえるかもしれません。</p>

<p>この辺の話は、以下のスライドやリポジトリを見てみると良いかもしれません。</p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Inroducing Almin 0.10.0: TypeScript, FlowType, Logger</title>
   <link href="http://efcl.info/2017/03/08/almim0.10/"/>
   <updated>2017-03-08T21:55:00+09:00</updated>
   <id>http://efcl.info/2017/03/08/almim0.10</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>の0.10.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/almin/almin/releases/tag/0.10.0" title="Release 0.10.0 · almin/almin">Release 0.10.0 · almin/almin</a></li>
</ul>

<p>AlminはいわゆるFluxライブラリ的なものですが、ドメイン駆動設計(DDD)を行うにあたって既存の<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>や<a href="https://github.com/facebook/flux" title="Flux">Flux</a>では上手くレイヤリングがしにくい問題があったため作成しました。</p>

<p>この辺の経緯については以前スライドやドキュメントにまとめてあるので、以下を参照してください。</p>

<ul>
<li><a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul>

<h2 id="typescript">TypeScript</h2>

<p>Almin 0.10.0ではコードベースがTypeScript化されました。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/08-1488978556.png" alt="TypeScript"></p>

<p>殆どの作業を@<a href="https://github.com/saneyuki" title="saneyuki">saneyuki</a>さんがやってくれました。</p>

<p>以下のPRを見ると既存のJavaScriptプロジェクトを徐々にTypeScript化する流れが見れるので面白いと思います。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/68" title="Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin">Convert src/ to TypeScript by saneyuki · Pull Request #68 · almin/almin</a></li>
</ul>

<p>これにより、<code>d.ts</code>がnpmパッケージに同梱されるようになったので、TypeScriptからも扱いやすくなりました。</p>

<h2 id="flowtype">FlowType</h2>

<p>Alminは以前からFlowTypeの型定義ファイルが同梱されていましたが、@<a href="https://github.com/k-kinzal" title="k-kinzal">k-kinzal</a>さんにいくつかPRを頂いて、<a href="https://flowtype.org/docs/declarations.html#declaration-files" title="Declaration files">Declaration files</a>の扱いが改善されました。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/108" title="fixes flow type-def can not be read. by k-kinzal · Pull Request #108 · almin/almin">fixes flow type-def can not be read. by k-kinzal · Pull Request #108 · almin/almin</a></li>
</ul>

<p>サンプルプロジェクトにFlowで書いたTodoMVCがあるので、Flowと一緒に使いたい人は参照してみてください。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/example/todomvc-flow" title="almin/example/todomvc-flow at master · almin/almin">almin/example/todomvc-flow at master · almin/almin</a></li>
</ul>

<h2 id="logger">Logger</h2>

<p>0.10.0の直接的なBreaking Changeとして、AlminのUseCase(Actionみたいなものです)やStoreの変更などのイベントハンドラの形式が統一的なものへと変更されました。
ハンドラに<code>meta</code>オブジェクトが追加され、そのイベントがどこ(useCase)でいつ(timestamp)起きたのかというメタ情報を取れるようになりました。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/61">Proposal: Introduce <code>meta</code> object to Dispatcher#dispatch(payload, meta) · Issue #61 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/pull/62">Breaking Change: feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin</a></li>
</ul>

<p>この辺は普通の人にはあんまり関係なくてロガーのようなものを作っている場合に関係してきます。</p>

<p>Alminでは<a href="https://github.com/almin/almin-logger" title="almin-logger">almin-logger</a>というコンソールにUseCaseの実行結果やStoreの変化をログとして吐くライブラリが用意されています。</p>

<p><iframe src="https://giphy.com/embed/xUA7aU9G9jatPmKIz6" width="480" height="324" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/xUA7aU9G9jatPmKIz6">via GIPHY</a></p></p>

<p><code>meta</code>オブジェクトの導入によってこの辺のログ周りがより正確に出るように改善されました。</p>

<p>例えば、AlminではParentUseCaseの中でChildUseCaseを実行するといったネストしたUseCaseを扱えるような仕組みも持っています。
(トランザクション的なことがしたいときに使う)</p>

<ul>
<li><a href="https://almin.js.org/docs/tips/nesting-usecase.html" title="Nesting UseCase · Almin.js">Nesting UseCase · Almin.js</a></li>
</ul>

<p><code>meta</code>オブジェクトの導入で親子関係のあるUseCaseも、その関係がログとして出せるようになっています。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/03/08-1488979360.png" alt="nesting useCase"></p>

<p>自分としては開発中のログは結構重視しているのでこの辺は充実させていきたいです。(実際のデバッグでかなり便利になるため)</p>

<p>最近は<a href="https://github.com/zalmoxisus/redux-devtools-extension" title="redux-devtools-extension">redux-devtools-extension</a>でAlminのログを出す連携を実験してみたりしています。</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="ja" dir="ltr">Redux DevTools Redux以外でも動かせるんだ。<br>Alminで一応できた <a href="https://t.co/b0uvdEwd83">pic.twitter.com/b0uvdEwd83</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/839280950898876416">March 8, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://github.com/almin/almin/issues/115" title="Integration with redux-devtools-extension · Issue #115 · almin/almin">Integration with redux-devtools-extension · Issue #115 · almin/almin</a>

<ul>
<li>Redux用のブラウザ拡張だけど、その他のライブラリと連携するAPIが用意されている</li>
</ul></li>
</ul>

<p>追記: 作ってみた <a href="https://github.com/almin/almin-devtools" title="almin/almin-devtools: Integrate almin into redux-devtools">almin/almin-devtools: Integrate almin into redux-devtools</a></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://t.co/CmAMJReV3W">https://t.co/CmAMJReV3W</a><br><br>AlminのログをRedux DevTools Extensionに流すやつとりあえず動いてきた。 <a href="https://t.co/Fer2fRaN0N">pic.twitter.com/Fer2fRaN0N</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/839845967729864705">March 9, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="どんなことに向いてるのか">どんなことに向いてるのか</h2>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>の設計思想としては普通に読めるようなコードで、中規模以上にスケールできようにするというものです。</p>

<p>よくあるFluxのサンプルでのカウントアプリのチュートリアルを見ると<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>と殆ど変わらないことが分かるかもしれません。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/counter/" title="Counter App · Almin.js">Counter App · Almin.js</a></li>
</ul>

<p><img src="https://almin.js.org/docs/tutorial/counter/img/almin-architecture-flux.png" alt="Counter"></p>

<p>ただ<a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html">複雑なJavaScriptアプリケーションを考えながら作る話</a>でも書いてますが、ドメインロジックをどこに書くのかという問題が<a href="https://github.com/facebook/flux" title="facebook/flux">facebook/flux</a>や<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>だと曖昧になりやすいです。</p>

<p>Alminは、その辺や非同期処理やStateの持ち方もある程度方針を持って扱えるようにするパターンやドキュメントなどを提供しています。</p>

<ul>
<li><a href="https://almin.js.org/docs/tutorial/todomvc/" title="Todo App · Almin.js">Todo App · Almin.js</a></li>
</ul>

<p><img src="https://almin.js.org/docs/tutorial/todomvc/img/almin-architecture.png" alt="Almin Flow"></p>

<p>今は、いくつかのプロダクションで数万行以上コードでもある程度安定して動いている感じです。</p>

<p>今後は報告してもらった問題に泥臭いチェックを入れたり、もう少し簡単にセットアップできるような方法を見ています。</p>

<ul>
<li><a href="https://github.com/almin/almin/pull/116" title="test(UseCase): add isolated nesting usecase by azu · Pull Request #116 · almin/almin">test(UseCase): add isolated nesting usecase by azu · Pull Request #116 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/112" title="Proposal: almin-react-container · Issue #112 · almin/almin">Proposal: almin-react-container · Issue #112 · almin/almin</a></li>
</ul>

<p>また、TypeScriptの問題もまだ幾つかあるのでPR待っています！</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/107">TypeScript: improve UseCase#execute typing · Issue #107 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/89">Move object-assign.d.ts to pacakges · Issue #89 · almin/almin</a></li>
<li><a href="https://github.com/almin/almin/issues/81">Use StoreLike interface more aggressively · Issue #81 · almin/almin</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>GitHubのPull Requestのレビューコメントをコマンドラインから取得するツール</title>
   <link href="http://efcl.info/2017/03/06/get-pull-request-review-comments/"/>
   <updated>2017-03-06T09:20:00+09:00</updated>
   <id>http://efcl.info/2017/03/06/get-pull-request-review-comments</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/get-github-pr-review-comments" title="get-github-pr-review-comments">get-github-pr-review-comments</a>というシンプルなCLIを作りました。</p>

<p>GitHubでPull Requestを出して、そこへレビューコメントを書いて、それを反映というのを繰り返すと思います。
そのときに、レビューコメントの位置をソースコードの位置で探すのが毎回大変でした。
（特に文章をPRしてるときは細かいtypoをレビューコメントで印を付けて直すみたいなことがよく起きるので、位置が見つけにくい)</p>

<p><a href="https://github.com/azu/get-github-pr-review-comments" title="get-github-pr-review-comments">get-github-pr-review-comments</a>は次の事を行うCLIです。</p>

<ol>
<li>指定したCommitShaを含むPull Requestを取得

<ul>
<li>ブランチのshaとかでいい</li>
</ul></li>
<li>Pull Requestについているレビューコメントを取得</li>
<li>実際のファイルパス:行数 + レビューコメントを出力</li>
</ol>

<p>VSCodeやWebStormなど大体のエディタはファイルパスをクリックしてジャンプできるので、ツールが吐いた結果をクリックすればレビューコメントの位置に飛べます。</p>

<p><img src="https://camo.githubusercontent.com/e72a21e8e26d09148a98fa1fec3fc600298931dd/68747470733a2f2f6d6f6e6f736e61702e636f6d2f66696c652f50496435716768484774756472387a486f42346f6c383762343747464c4a2e706e67" alt="VSCode"></p>

<p><img src="https://monosnap.com/file/D5dbRx42MbM0ynePcXb6rpztdkfw8d.png" alt="WebStorm"></p>

<p>自分は、次のようなシェルスクリプトを使って、現在ブランチのレビューコメントを取得しています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/usr/bin/env bash</span>

<span class="nb">declare </span><span class="nv">repo</span><span class="o">=</span><span class="k">$(</span>git config --local remote.origin.url <span class="p">|</span> perl -pe<span class="s1">&#39;s/(git@|https:\/\/)?github.com(:|\/)(\w+)\/(\w+)(.git)?/$3\/$4/&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/\.git//g&#39;</span><span class="k">)</span>
<span class="nv">GH_TOKEN</span><span class="o">=</span><span class="s2">&quot;GitHubのtoken&quot;</span> get-github-pr-review-comments <span class="se">\</span>
--repo <span class="s2">&quot;${repo}&quot;</span> <span class="se">\</span>
--projectRoot <span class="sb">`</span>git rev-parse --show-toplevel<span class="sb">`</span> <span class="se">\</span>
<span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</code></pre></div>
<p>GitHubトークンは以下から<code>repo</code>の権限を付けたものを作成します。</p>

<ul>
<li><a href="https://github.com/settings/tokens/new" title="New personal access token">New personal access token</a></li>
</ul>

<h2 id="既知の問題">既知の問題</h2>

<p>GitHubでは解決済みのコメント(コミットで変更された部分)は折りたたまれますが、それができていません。</p>

<p>APIの結果にそういう情報があるわけでもないのでどうやってやるのかがよく分かりませんでした。</p>

<ul>
<li><a href="https://github.com/azu/get-github-pr-review-comments/issues/1" title="How to know that comment is resolved? · Issue #1 · azu/get-github-pr-review-comments">How to know that comment is resolved? · Issue #1 · azu/get-github-pr-review-comments</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMA-414 ECMAScript Specification Suiteについて</title>
   <link href="http://efcl.info/2017/02/27/ecma-414/"/>
   <updated>2017-02-27T18:15:00+09:00</updated>
   <id>http://efcl.info/2017/02/27/ecma-414</id>
   <content type="html"><![CDATA[ <p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>というECMAScript関係の仕様をまとめたEcma仕様が公開されている。</p>

<p>背景については以下を参照。</p>

<blockquote>
<p>For ECMA-262 (the main ECMAWScript standard), we now have an agreement with ISO that we will not fast track it anymore; instead, the ECMAScript Suite ECMA-414 will supercede it (with normative references also to the needed Ecma standards), and the other redundant standard ISO IS 16262 (which is out of date) will be withdrawn. The only standards in common will be ECMA-414 (on the way to fast track), which happened after the Dec 7 ECMA GA. 
-- <a href="https://github.com/littledan/tc39-notes/blob/master/es7/2017-01/jan-25.md#5-report-from-the-ecma-secretariat">https://github.com/littledan/tc39-notes/blob/master/es7/2017-01/jan-25.md#5-report-from-the-ecma-secretariat</a></p>
</blockquote>

<p>今は、ECMA-262(ECMAScript)の国際標準として<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=55755" title="ISO/IEC 16262">ISO/IEC 16262</a>があるけど、今後は<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=55755" title="ISO/IEC 16262">ISO/IEC 16262</a>は更新しない。
代わりに<a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>を国際標準にしていくよ。</p>

<p>という話。</p>

<p>デファクトとデジュールの違いは以下を参照。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1210/23/news153.html" title="OSSコミュニティの“中の人”（4）：できないことは全部やる。できる依頼は断る――竹迫良範氏インタビュー【後編】 (1/2) - ＠IT">OSSコミュニティの“中の人”（4）：できないことは全部やる。できる依頼は断る――竹迫良範氏インタビュー【後編】 (1/2) - ＠IT</a></li>
</ul>

<p>ISO標準(国際標準)ってどんなフローで決まるのって話は以下を参照。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a></li>
</ul>

<h2 id="ecma-414って何">ECMA-414って何?</h2>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>とは、ECMAScript関係の仕様を集めた仕様です。</p>

<p>このSuiteは、以下の仕様のlatest editionを参照する仕様です。</p>

<ul>
<li>ECMA-262 - いわゆるECMAScript</li>
<li>ECMA-402 - Internationalization API Specificationの仕様</li>
<li>ECMA-404 - JSONの仕様</li>
<li>TR-104 <a href="https://www.ecma-international.org/publications/techreports/E-TR-104.htm" title="ECMAScript® Test Suite">ECMAScript® Test Suite</a> テストスイート</li>
</ul>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は、ECMA-262とECMA-404が必須で、ECMA-402とTR-104はオプショナルです。</p>

<p>この<a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は
参照する仕様自体が増えたり、減ったりした場合はSuiteも更新します。
しかし、参照する仕様の中身が変化した場合は、Suiteは変化しません。</p>

<p>ISOとしてECMA-262の標準化するのは毎年更新するのは大変なので、
ECMA-414(Suite)をISO標準化して、中身の管理はECMA側でやれるようにするための仕様。</p>

<p><strong>要約</strong></p>

<p>ECMAScriptのデジュール(ISO標準)はあるといいのだけど、毎年更新するデファクト(Ecma)をデジュールにするのはコストや時間が難しい。
なので、デファクトを参照するデジュールの標準仕様があるといいんじゃない?</p>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>は、最新のECMAScript仕様を参照するよという仕様(10ページしかない仕様)。
ECMAScriptの仕様が更新されたら、自動的に最新のECMA-262仕様を参照するという仕様です。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/02/27-1488187017.png" alt="ECMA-414"></p>

<p><a href="https://www.ecma-international.org/publications/standards/Ecma-414.htm" title="Standard ECMA-414">ECMA-414 ECMAScript Specification Suite</a>はこの図が全てというほど小さな仕様。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Map-likeというES2015 Mapのようなライブラリを書いた</title>
   <link href="http://efcl.info/2017/02/26/map-like/"/>
   <updated>2017-02-26T18:42:00+09:00</updated>
   <id>http://efcl.info/2017/02/26/map-like</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/map-like" title="map-like">map-like</a>という小さな<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>オブジェクトのライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/map-like" title="azu/map-like: ES2015 Map like object">azu/map-like: ES2015 Map like object</a></li>
</ul>

<p>API的にはES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>と同じです。</p>

<h2 id="制限">制限</h2>

<ul>
<li><code>Symbol.Iterator</code>が実装されていません</li>
<li><code>toString</code>が実装されていません</li>
</ul>

<p>つまりIteratorは省いています。</p>

<h2 id="目的">目的</h2>

<p>Mapのpolyfillを書いたことがある人はわかるかもしれませんが、オブジェクトをkeyにできるMapがほしいだけなのに、結構でかくなります。
これはIteratorを実装する部分が大きく、<code>Symbol.Iterator</code>をどうするかとか色々あります。
正直Mapを<code>for...of</code>で回したいとかは殆ど必要なかったので、それ以外の部分はMapと互換を持つ<a href="https://github.com/azu/map-like" title="map-like">map-like</a>というライブラリを書きました。</p>

<p>ファイルサイズも1.5kBほどです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">✈ bundle-size map-like
map-like@1.0.3

env  bundle   minify   gzip
--   5.73 kB  3.08 kB  1.5 kB
</code></pre></div>
<p>「オブジェクトリテラルをマップのようなものとして使いたくない」や「オブジェクトをMapのキーとして使いたい」というケースで便利です。</p>

<p>派生としてLRU cacheライブラリの<a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>というものもあります。</p>

<ul>
<li><a href="https://github.com/azu/lru-map-like" title="azu/lru-map-like: LRU cache top on Map-like. Support non-string key.">azu/lru-map-like: LRU cache top on Map-like. Support non-string key.</a></li>
</ul>

<p>LRUライブラリは色々あるのですが、オブジェクトをキーとして使えるLRUは<a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>ぐらいしかありませんでした。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/56" title="Reduce file size · Issue #56 · almin/almin">Reduce file size · Issue #56 · almin/almin</a>

<ul>
<li>LRUキャッシュの調査メモ</li>
</ul></li>
</ul>

<p><a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>は便利なのですが、やはりサイズが大きい(10kb gzip)です。</p>

<p><a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>は大体2kBです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">env  bundle   minify   gzip
--   13.8 kB  6.32 kB  2.34 kB
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p>オブジェクトリテラルでマップのようなことをやるよりは、
ES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>を使ったほうが明示的で良いです。
あと、キーにオブジェクトに使える便利な場面がキャッシュのようなものを実装する際にはよく出現します。
(Map &lt;-&gt; Objectの相互変換は難しいものでもないので、最近はマップっぽいものがでてきたら<code>Map</code>を使うようにしてます)</p>

<p>以下のライブラリやツールなどでりようしています。</p>

<ul>
<li><a href="https://github.com/almin/almin">almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application</a></li>
<li><a href="https://github.com/textlint/textlint">textlint/textlint: The pluggable natural language linter for text and markdown.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#t_wada_sushi でOpen Collectiveの話をしてきた</title>
   <link href="http://efcl.info/2017/01/23/t_wada_sushi/"/>
   <updated>2017-01-23T23:08:00+09:00</updated>
   <id>http://efcl.info/2017/01/23/t_wada_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?q=%23t_wada_sushi&amp;src=typd" title="#t_wada_sushi">#t_wada_sushi</a>で<a href="https://opencollective.com/" title="Open Source Collective is on Open Collective">Open Collective</a>の話をしてきました。</p>

<p><a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html"><img src="https://monosnap.com/file/JNTadjsjcWbTuHYcJY2Zdgd14R77Oe.png" alt="open"></a></p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a></li>
</ul>

<p>最近webpackなども利用し始めた<a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a>というウェブサービスについての話をしてきました。
いわゆる寄付サービスや<a href="https://www.patreon.com/" title="Patreon">Patreon</a>に近いものです。
オープンソースプロジェクトなどの小さなコミュニティが法人格を持たないで、透明性を持ってお金をやり取り出来るような状況を作ることを目的にしたサービスです。</p>

<ul>
<li><a href="https://hackernoon.com/how-webpack-raised-15-000-in-3-months-and-the-future-of-open-source-cb2c9f68fffa#.pp5mjn2jy" title="How Webpack raised $15,000 in 3 months, and the future of open source">How Webpack raised $15,000 in 3 months, and the future of open source</a></li>
</ul>

<p>どういう目的をもって作られてたか、また最近利用するJavaScriptのOSSが増えてきたので簡単に調べた感じです。</p>

<ul>
<li><a href="https://github.com/jser/report/issues/4" title="Open Collective · Issue #4 · jser/report">Open Collective · Issue #4 · jser/report</a></li>
</ul>

<p>Twitterログ</p>

<ul>
<li><a href="https://togetter.com/li/1073636" title="#t_wada_sushi - Togetterまとめ">#t_wada_sushi - Togetterまとめ</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">いろいろとヤバいプレゼントを貰いました。ありがとうございました！ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/8ilgnGhEAq">pic.twitter.com/8ilgnGhEAq</a></p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/823545108695875584">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="webpack2-会長">webpack2 - 会長</h2>

<ul>
<li>Tree shakingについて</li>
<li>webpack2への移行でハマったのは

<ul>
<li>postcss</li>
<li><a href="https://github.com/webpack/extract-text-webpack-plugin" title="extract-text-webpack-plugin">extract-text-webpack-plugin</a></li>
</ul></li>
<li>webpack2のTree shakingのしくみについて</li>
<li>webpackは<code>// unused</code> なコメントをつけていく</li>
<li>これをuglifyJSが圧縮時に消し去る</li>
<li>という仕組み</li>
<li>Tree shakingした結果12kb減った</li>
<li>モジュールを元からきちんと分けてるとそこまで効果がない感じ</li>
<li>圧縮を書けないとコメントが増える分余計に増える</li>
</ul>

<hr>

<h2 id="whatwg-urlについての最近の動向-laco"><a href="http://slides.com/laco/201701-twada-sushi#/" title="whatwg/urlについての最近の動向">whatwg/urlについての最近の動向</a> - laco</h2>

<ul>
<li><a href="https://github.com/whatwg/url/graphs/contributors" title="Contributors to whatwg/url">Contributors to whatwg/url</a></li>
<li>コミットが最近活発化</li>
<li>URLSearchParamsについての変更がある</li>
<li>URLフラグメントのASCII文字列化 (373dbed)</li>
<li>URL passwordの仕様変更 (5e0b05e)</li>
<li>URLSearchParamsのコンストラクタ仕様変更 (31ddc5b)

<ul>
<li>mapを受け入れるようになった</li>
<li>tuple、map、文字列にURLSearchParamのコンストラクタに渡せるようになった</li>
<li>オーバーロード</li>
<li><a href="https://github.com/whatwg/url/pull/175" title="Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url">Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url</a></li>
</ul></li>
<li>URLSearchParams#sort() (960f607)

<ul>
<li>Arrayと同じく破壊的なsort</li>
</ul></li>
<li>CanIuseだとバージョン毎の変更の対応が分からない</li>
<li>MDN

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/URLSearchParams" title="URLSearchParams - Web API インターフェイス | MDN">URLSearchParams - Web API インターフェイス | MDN</a></li>
<li>実装されたバージョンごとの違いもでる</li>
</ul></li>
</ul>

<hr>

<h2 id="mixed-content-jxck">mixed content - jxck</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Cookpad緑だよ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/oeWnGMbQ7V">https://t.co/oeWnGMbQ7V</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499642016890880">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>CookpadもHTTPS化した</li>
<li>大きなサイトがhttps化するのは大変</li>
<li>mixed contentの問題が大きい

<ul>
<li>広告とか</li>
</ul></li>
<li>一つでもmixed contentがあるとURLバーがグリーンにならない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contentには二種類<br>active mixed content = DOMいじれる<br>passive mixed content = DOMいじれない <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499937564348416">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>外れAdガジャ問題<br></li>
<li>広告配信サービスはHTTPS対応していても、中身の雑な広告があるとmixed contentになってしまうことがある</li>
<li>HTTP_UPGRADE_INSECURE_REQUESTSについて</li>
<li>ブラウザに対するHTTPヘッダ</li>
<li><a href="http://d.hatena.ne.jp/ASnoKaze/20150423/1429758051" title="Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ">Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ</a></li>
<li><a href="https://w3c.github.io/webappsec-upgrade-insecure-requests/" title="Upgrade Insecure Requests">Upgrade Insecure Requests</a></li>
<li>ヘッダを受けて、ブラウザはサブリソースのhttp://へのリクエストを自動でhttps://のものに変更する

<ul>
<li>httpで書いてあってもhttpsとしてリクエストする</li>
<li>リクエスト先がhttpsがじゃない場合は見つからないので400になる</li>
<li>mixed contentにはならない(httpは400になるので混ざらない)</li>
</ul></li>
<li>mixed contentの問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contetntの問題はmixed contentが起きてるか分からないこと。<br> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823502009298882560">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content" title="CSP: block-all-mixed-content">CSP: block-all-mixed-content</a> + report-onlyで発見できる

<ul>
<li>CSP: block-all-mixed-contentでmixed contentはblockされる</li>
<li><code>Content-Security-Policy-Report-Only: policy</code></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" title="Content Security Policy (CSP) - HTTP | MDN">Content Security Policy (CSP) - HTTP | MDN</a></li>
<li><code>report-only</code> modeなら実際にはblockされないで、reportだけを遅れる</li>
</ul></li>
<li><a href="https://report-uri.io/" title="Welcome to report-uri.io">Welcome to report-uri.io</a>

<ul>
<li>UIがダメ、すぐダウンする</li>
<li>CSP reportの管理ツールでいいものがまだない</li>
</ul></li>
<li><a href="https://www.w3.org/TR/2016/WD-reporting-1-20160407/" title="Reporting API 1">Reporting API 1</a></li>
<li>クライアントのログ問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSがなくてもCSPのinline scriptのreportが来る。<br>Chrome拡張、ブックマークレットとかクライアントはノイズデータが多い <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823503391577866240">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>エラーログ、CSPログなどはノイズが多い</li>
</ul>

<hr>

<h2 id="firefoxのtime-travel-debugging-kyo_ago">FirefoxのTime-Travel Debugging - kyo_ago</h2>

<ul>
<li><a href="http://www.slideshare.net/dynamis/firefox-devtools/39" title="Firefox DevTools">Firefox DevTools</a></li>
<li>FirefoxのTime-Travelデバッグがくる?</li>
<li>ブレークポイント貼って戻して、再現するデバッグ</li>
</ul>

<h2 id="electron-kyo_ago">Electron - kyo_ago</h2>

<ul>
<li>Electronのアプリに対してJavaScriptなどをinjectしたい</li>
<li>ブラウザのウェブサイドはユーザ側からいじれる</li>
<li>Electronアプリはいじれなくて不便</li>
</ul>

<hr>

<h2 id="イベント用の名札シート印刷アプリのcss-yoshiko">イベント用の名札シート印刷アプリのCSS - yoshiko</h2>

<ul>
<li><a href="http://yoshiko.hatenablog.jp/entry/your-name">イベント用の名札シート印刷アプリ「参加者の名は。」を作った - エンジニアをリングする</a></li>
<li><a href="https://yoshiko-pg.github.io/your-name/">参加者の名は。- Name cards generator for events</a></li>
<li>CSSで微妙にはみ出る表現の話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">A4サイズにしつつ、少し常にはみ出すようなCSSを書いた話 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/zZocQrChZq">https://t.co/zZocQrChZq</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823508811914756096">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">CSSで固定比率のスライド <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/R8jEe0PBh8">https://t.co/R8jEe0PBh8</a></p>&mdash; よしこ (@yoshiko_pg) <a href="https://twitter.com/yoshiko_pg/status/823516169143365633">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">::beforeはその要素の中の先頭、::afterはその要素の中の最後。<br>つまり疑似要素は中にくる <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823510075260026882">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>疑似要素とmarginが親の横幅を元にする仕様を使った固定比率の話</li>
</ul>

<hr>

<h2 id="modern-javascript概観、そしてelectronへ-taichi"><a href="http://blog.satotaichi.info/modern-javascript_201701/" title="Modern JavaScript概観、そしてElectronへ">Modern JavaScript概観、そしてElectronへ</a> - taichi</h2>

<ul>
<li>皆がよくハマるところを防ぐコードを書いていくとフレームワークは汚くなる</li>
<li>Angular 2、Vue1, 2はコードがキレイ</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「食べられる泥」 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; Local Proxy (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/823518103015301121">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="その他">その他</h2>

<ul>
<li>Dart</li>
<li>rubyのsassは<a href="https://github.com/sass/dart-sass" title="dart-sass">dart-sass</a>になった

<ul>
<li><a href="http://blog.sass-lang.com/posts/1022316-announcing-dart-sass" title="Announcing Dart Sass « Sass Blog">Announcing Dart Sass « Sass Blog</a></li>
</ul></li>
<li>Google社内での再熱</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Google内部でDartはかなり人気があるし、今でも2か月に一回はリリースされている。確かに公式サイトを見ると、次世代のAdWordsはDartで作られたとある。 <a href="https://t.co/2bKYmskevO">https://t.co/2bKYmskevO</a> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; 太一 (@ryushi) <a href="https://twitter.com/ryushi/status/823541009749422082">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">DartはHaxeの立ち位置を目指している? <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823516011584331776">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>DartのStrongModeは極限まで型推論を頑張るモード

<ul>
<li>V8の<a href="https://github.com/v8/v8/wiki/Experiments%20with%20Strengthening%20JavaScript#strong-mode" title="Strong Mode">Strong Mode</a>とはまた異なるもの</li>
</ul></li>
<li>Dart Dev Compilerがでない

<ul>
<li><a href="http://qiita.com/laco0416/items/04314d034d335bc620ff" title="Dart SDK Roadmapの進捗状況を確認する - Qiita">Dart SDK Roadmapの進捗状況を確認する - Qiita</a></li>
<li><a href="https://github.com/dart-lang/sdk/tree/master/pkg/dev_compiler" title="sdk/pkg/dev_compiler at master · dart-lang/sdk">sdk/pkg/dev_compiler at master · dart-lang/sdk</a></li>
</ul></li>
</ul>

<hr>

<h2 id="最近やったこと-t_wada">最近やったこと - t_wada</h2>

<ul>
<li><a href="https://github.com/unassert-js" title="unassert-js">unassert-js</a></li>
<li>organizationになった</li>
<li>power-assertの :star: 200ぐらい増えた

<ul>
<li>中国の人達が見つけたため</li>
</ul></li>
<li>alibabaとか最近OSSでも活発

<ul>
<li><a href="https://github.com/alibaba/rax" title="alibaba/rax: A universal React-compatible render engine.">alibaba/rax: A universal React-compatible render engine.</a></li>
</ul></li>
<li>chai to assert</li>
<li><a href="https://github.com/twada/chai-to-assert" title="twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert">twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert</a></li>
<li>元は<a href="https://github.com/power-assert-js/power-assert/issues/74" title="any tool to migrate `should/expect` code to `power-assert`? · Issue #74 · power-assert-js/power-assert">any tool to migrate <code>should/expect</code> code to <code>power-assert</code>? · Issue #74 · power-assert-js/power-assert</a>のIssue</li>
<li>chatの構文を調べてる

<ul>
<li>結構凶悪</li>
</ul></li>
<li>ランタイムに型をチェックして分岐している部分がでてくる</li>
<li>静的にはわからないため変換が難しい</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// simple referencing</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>

<span class="c1">// deep referencing</span>
<span class="kd">var</span> <span class="nx">deepObj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">green</span><span class="o">:</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;matcha&#39;</span> <span class="p">}</span>
  <span class="p">,</span> <span class="nx">teas</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;chai&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;konacha&#39;</span> <span class="p">}</span> <span class="p">]</span>
<span class="p">};</span>

<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;green.tea&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[1]&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[2].tea&#39;</span><span class="p">,</span> <span class="s1">&#39;konacha&#39;</span><span class="p">);</span>
</code></pre></div>
<ul>
<li><a href="http://chaijs.com/api/bdd/#method_property">http://chaijs.com/api/bdd/#method_property</a></li>
<li>wow</li>
<li>変換には<a href="https://github.com/facebook/jscodeshift" title="facebook/jscodeshift: A JavaScript codemod toolkit.">facebook/jscodeshift: A JavaScript codemod toolkit.</a>を使ってる

<ul>
<li><a href="https://github.com/substack/node-falafel" title="substack/node-falafel: transform the ast on a recursive walk">substack/node-falafel: transform the ast on a recursive walk</a>に近いところもある</li>
</ul></li>
<li>Reactのマイグレーションツールなどでも使われてる

<ul>
<li>フレームワーク側がマイグレーションをするツールとして提供するケース</li>
</ul></li>
<li>Assertionツール同士の変換ツールが色々有る</li>
<li>2週ぐらいすると必要なものが残る</li>
</ul>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMAScriptの情報サイトを始めて1年経った</title>
   <link href="http://efcl.info/2016/12/31/ecmascript-daily/"/>
   <updated>2016-12-31T15:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/31/ecmascript-daily</id>
   <content type="html"><![CDATA[ <h2 id="ecmascript-daily"><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a></h2>

<p>そういえば、<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>というECMAScriptの情報サイトをやってます。</p>

<p><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/commit/ad9f0cc626ff7188733b36ed45f2acc355c937bd">2015年12月</a>ぐらいに始めたので、1年ぐらい経ってましたがそういえばブログ書いてないことに気づいたので書いています。</p>

<p>基本的には<a href="https://jser.info/" title="JSer.info">JSer.info</a>のECMAScript特化版という位置づけで、基本的な更新スタンスはJSer.infoとは変わらないです。</p>

<p>週一とかではなくて、新しい情報がでたら直接更新のスタイルなので、<a href="https://realtime.jser.info/" title="Realtime JSer.info">Realtime JSer.info</a>(JSer.infoのリアルタイム版)の方がより近いです。</p>

<p>記事自体もほぼリンクだけに近いので、Twitter(<a href="https://twitter.com/ecmascriptdaily" title="@EcmascriptDaily">@EcmascriptDaily</a>)で見たほうが分かりやすいかもしれません。</p>

<p><a href="https://twitter.com/EcmascriptDaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @EcmascriptDaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p>週1でまとめて見たい場合は<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>からメールマガジンに登録できるので、そっちで見るとかするといいと思います。</p>

<p>基本的にはリンクを投げっぱなしですが、新しい<a href="https://github.com/rwaldron/tc39-notes" title="ECMA, TC39 Meeting Notes">ECMA, TC39 Meeting Notes</a>が出たときは変更があったProposalをまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals">ECMAScript proposal updates @ 2016-11 | ECMAScript Daily</a></li>
<li><a href="https://ecmascript-daily.github.io/2016/10/02/proposals-updates">ECMAScript proposal updates @ 2016-10 | ECMAScript Daily</a></li>
</ul>

<p>後たまに、型の仕様提案の現状をまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">Status of Static Typing in ECMAScript | ECMAScript Daily</a></li>
</ul>

<p>基本的にはECMAScriptの仕様と各実装のステータスとか、仕様に関する記事を取り上げたりしてる感じです。</p>

<p>他に類似するサイトは<a href="http://esnextnews.com/" title="ES.next News">ES.next News</a>ぐらいですが、最近あんまり更新されてない感じがします…</p>

<ul>
<li><a href="http://esnextnews.com/" title="ES.next News">ES.next News</a></li>
</ul>

<p>ECMAScriptに興味がある人は見てみるといいと思います。</p>

<p>Jekyllで動かしてるのですが、けっこう適当に作ってそのままなので、Contribution募集しています！</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/issues/13" title="feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com">feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>

<p>また、取り上げたい記事をPRするでも良いです。</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com">ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>今年のOSS活動振り返り @ 2016</title>
   <link href="http://efcl.info/2016/12/31/oss-in-2016/"/>
   <updated>2016-12-31T11:47:00+09:00</updated>
   <id>http://efcl.info/2016/12/31/oss-in-2016</id>
   <content type="html"><![CDATA[ <p>2016年のOSS活動振り返りです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483174882.png" alt="Current Contributions"></p>

<p><a href="http://efcl.info/2015/12/31/oss-in-2015/">去年</a>との比較用に<a href="https://github.com/Naramsim/GithubOriginalStreak" title="GithubOriginalStreak">GithubOriginalStreak</a>を使って古い形でGitHubのContributionsを出してみた。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483152418.png" alt="Original Contributes Graph"></p>

<p>3年ぐらい毎日コミットが続いてる。けど、2016年の後半がだらけててコミット数が少なくなってる。</p>

<p>後、<a href="https://azu.github.io/github-longest-streak/" title="GitHub Full Longest Streak">GitHub Full Longest Streak</a>を使うと、GitHubのStreakを取ることができます。
(他のツールみたいに365日制限とかなく、GitHubにアカウントを作ってからの全データが見れます)</p>

<ul>
<li><a href="https://azu.github.io/github-longest-streak/?user=azu">https://azu.github.io/github-longest-streak/?user=azu</a></li>
</ul>

<p>以前のまとめ</p>

<ul>
<li><a href="http://efcl.info/2015/12/31/oss-in-2015/">今年のOSS活動振り返り @ 2015 | Web Scratch</a></li>
<li><a href="http://efcl.info/2014/12/31/oss-in-2014/">今年のOSS活動振り返り @ 2014 | Web Scratch</a></li>
</ul>

<h2 id="issue-pr">Issue/PR</h2>

<ul>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2016-01-01..2017-01-01+is%3Apr+&amp;type=Issues&amp;ref=searchresults">PRs</a>: 457</li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2016-01-01..2017-01-01+is%3Aissue&amp;type=Issues&amp;ref=searchresults">Issues</a>: 392</li>
</ul>

<h2 id="作ったもの"><a href="https://github.com/search?o=asc&amp;q=user%3Aazu+created%3A2016-01-01..2017-01-01&amp;ref=searchresults&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93">作ったもの</a></h2>

<h2 id="textlint"><a href="https://github.com/textlint/textlint" title="textlint">textlint</a></h2>

<p>自然言語をLintするtextlint関係のものは相変わらず大量に作ったものがある。</p>

<ul>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a>

<ul>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>とコードカバレッジについて考えていて色々カバレッジ周りを作ってた</li>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov: textlint formatter for lcov format</a></li>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov: textlint formatter for codecov json.</a></li>
<li><a href="https://github.com/azu/codecov-json-to-lcov">azu/codecov-json-to-lcov: Convert Codecov json format to lcov format.</a></li>
<li><a href="https://github.com/azu/lcov-summary">azu/lcov-summary: Cat lcov file and show summary of coverage to terminal.</a></li>
</ul></li>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a>

<ul>
<li><a href="http://efcl.info/2016/03/22/match-index/" title="正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ | Web Scratch">正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ | Web Scratch</a></li>
<li>正規表現でキャプチャした位置を配列で取得できるので便利</li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a> のために作った</li>
</ul></li>
<li><a href="http://efcl.info/2016/12/14/create-textlint-rule/">textlintのルールを簡単に作り始めることができるツールを作りました | Web Scratch</a>

<ul>
<li><a href="https://github.com/textlint/create-textlint-rule">textlint/create-textlint-rule: Create textlint rule project with no configuration.</a></li>
<li><a href="https://github.com/textlint/textlint-scripts">textlint/textlint-scripts: textlint npm-run-scripts CLI help to create textlint rule.</a></li>
<li>create-react-appのように一発でtextlintルールを作り始めることができるツールを書いた</li>
<li>Node.jsを普段触らない人にもルールを書きやすくするために作った</li>
</ul></li>
</ul>

<h3 id="作ったルール">作ったルール</h3>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット">textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-nfd">azu/textlint-rule-no-nfd: textlint rule that disallow to use NFD well-known as UTF8-MAC 濁点.</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-hankaku-kana">azu/textlint-rule-no-hankaku-kana: textlint rule that disallow to use 半角カタカナ.</a></li>
<li><a href="https://github.com/azu/textlint-rule-web-plus-db">azu/textlint-rule-web-plus-db: [unofficial] WEB+DB PRESS用語統一ルール for textlint</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-exclamation-question-mark">azu/textlint-rule-no-exclamation-question-mark: textlint rule that disallow exclamation and question mark.</a></li>
<li><a href="https://github.com/azu/textlint-rule-eslint" title="azu/textlint-rule-eslint: textlint rule integrate with ESLint.">azu/textlint-rule-eslint: textlint rule integrate with ESLint.</a></li>
<li><a href="https://github.com/azu/prh.yml" title="azu/prh.yml: A collection of prh.yml">azu/prh.yml: A collection of prh.yml</a>

<ul>
<li>辞書</li>
</ul></li>
<li><a href="https://github.com/azu/textlint-rule-date-weekday-mismatch" title="azu/textlint-rule-date-weekday-mismatch: textlint rule that found mismatch between date and weekday.">azu/textlint-rule-date-weekday-mismatch: textlint rule that found mismatch between date and weekday.</a>

<ul>
<li>日付と曜日の不一致を見つける</li>
</ul></li>
<li>...etc

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a>を見て</li>
</ul></li>
</ul>

<h2 id="アーキテクチャ周り">アーキテクチャ周り</h2>

<h3 id="javascriptプラグインアーキテクチャの本"><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScriptプラグインアーキテクチャの本">JavaScriptプラグインアーキテクチャの本</a></h3>

<ul>
<li><a href="https://www.gitbook.com/book/azu/javascript-plugin-architecture/details">JavaScript Plugin Architecture · GitBook</a></li>
<li><a href="http://efcl.info/2016/06/06/JavaScript-Plugin-Architecture/">JavaScript Plugin Architectureというプラグイン設計について学ぶ無料の電子書籍を書いた | Web Scratch</a>

<ul>
<li>JavaScriptライブラリやツールのアーキテクチャについて書いた薄い本</li>
<li>connect/ESLint/jQuery/gulpなどの仕組みについて書いた</li>
</ul></li>
</ul>

<h3 id="almin"><a href="https://github.com/almin/almin" title="Almin">Almin</a></h3>

<p><a href="https://github.com/almin/almin"><img src="https://almin.github.io/media/logo/logo.png" alt="Almin.js logo"></a></p>

<p>中規模(3.5万~10万LOC)以上のプロジェクトを想定して<a href="https://github.com/almin/almin" title="almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application">almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application</a>というライブラリを作った。
(中規模の定義は<a href="https://www.amazon.co.jp/dp/489100522X/" title="ソフトウェア見積り">ソフトウェア見積り</a>より)</p>

<p>いわゆるReduxとかそういう類のFluxライブラリみたいなものです。
実装自体は大したことないですが、思想的にDDD/CQRS/Fluxを適応することを前提としたドキュメントやサンプル構成になっている感じです。</p>

<p><a href="https://github.com/azu/e-commerce-DDD-CQRS">色々</a>な<a href="https://github.com/azu/svg-feeling">サンプル</a>を<a href="https://github.com/azu/CQRS-train" title="azu/CQRS-train: CQRS concept">作って</a>は捨ててまた<a href="https://github.com/azu/presentation-annotator">作ってを繰り返して</a>できたものです。</p>

<p>この一年ぐらいはこれについて色々やっていて、数千万回以上はブラウザで動いてると思いますが、Almin自体が原因のバグは見なかったのである程度安定はしてるのかなと思います。</p>

<p>複雑なJavaScriptアプリケーション作るに当たって考えることや実践したことについては以下のスライドやリポジトリにまとめてあります。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/" title="アーキテクチャをめぐるたび | Web Scratch">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul>

<p>後は<a href="https://github.com/almin/almin/pull/62" title="feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin">feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin</a>この辺のPRを処理できたら、1.0に向けてのリリース出していきたい感じ。</p>

<p>クライアントサイドのDDDとか色々考えて実践してたけど、ちゃんと考えればできるんだなーという印象。(イベントソーシングはちょっとまだ課題がある)</p>

<p>TypeScriptとかじゃなくてただのJavaScript(<a href="https://github.com/azu/jsdoc-to-assert">jsdoc-to-assert</a>とかは使ってる)でも、ちゃんと設計すれば中規模ぐらいのコードベースはちゃんと読めるように書けることが分かってよかった。(というかコードの読みやすさにおいては、型よりも設計の方が重要そう。両方あると便利だけど、ツールのコストが高くなる。)</p>

<h3 id="jsdoc-to-assert">jsdoc-to-assert</h3>

<p>JSDocをランタイムassertに変換するライブラリとBabelプラグイン。
入れるだけで、JSDocの型チェックが実行時に走るようになる。
productionビルド時は外してやるので、コスパいい感じで結構使ってる。</p>

<ul>
<li><a href="https://github.com/azu/babel-preset-jsdoc-to-assert">azu/babel-preset-jsdoc-to-assert: Babel preset for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>プロダクションや自分の書いてるライブラリとかには大体入れてドッグフーディングしたので、だいぶ安定したと思う。</p>

<p>チェックも<code>@param</code>だけではなく<code>@type</code>(デフォルトオフだけど)にも対応してたり、引数は大体チェックできる。</p>

<p>モチベーションとしてJSDocと実装の齟齬を見つけやすくすることがあるので、これを入れてJSDocを書いてると結構適当な書き方してると落とせて便利。</p>

<p>紹介記事</p>

<ul>
<li><a href="http://efcl.info/2016/03/25/jsdoc-to-assert/" title="JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch">JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch</a></li>
<li><a href="http://akabeko.me/blog/2016/08/jsdoc-to-assert/">jsdoc-to-assert を試す – アカベコマイリ</a></li>
<li><a href="http://www.d-wood.com/blog/2016/11/11_8536.html">babel-preset-jsdoc-to-assert で JSDoc から assertion を自動生成する | deadwood</a></li>
</ul>

<p>Babel使ってるなら入れるとメリットがあって、デメリット殆どないので、power-assertみたいな感じのツール。(ただしJSDoc書いてないとあんまり意味はない)</p>

<ul>
<li><a href="http://efcl.info/2016/04/14/espower-babel-is-deprecated/" title="power-assert + babel as a development tool | Web Scratch">power-assert + babel as a development tool | Web Scratch</a></li>
</ul>

<h3 id="documentation"><a href="https://github.com/documentationjs/documentation" title="documentation">documentation</a></h3>

<p><a href="https://github.com/documentationjs/documentation" title="documentation">documentation</a>というJSDocが書いてあるJavaScriptから、HTMLやMarkdownのリファレンスを吐くツールがある。</p>

<p>これのデフォルトのMarkdown出力がイケてないのでテーマを作った</p>

<ul>
<li><a href="https://github.com/azu/documentation-markdown-api-theme" title="azu/documentation-markdown-api-theme: markdown theme for documentation.js">azu/documentation-markdown-api-theme: markdown theme for documentation.js</a></li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483170405.png" alt="reference"></p>

<p>例) <a href="https://github.com/azu/ui-event-observer#usage" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a></p>

<p><a href="https://github.com/documentationjs/documentation/issues/550" title="--theme for Markdown · Issue #550 · documentationjs/documentation">--theme for Markdown · Issue #550 · documentationjs/documentation</a>のせいで、あんまり扱いやすくはないけど、結構いい感じの出力が出せる。</p>

<ul>
<li><a href="https://github.com/azu/add-text-to-markdown" title="azu/add-text-to-markdown: Add stdin text to exist markdown file.">azu/add-text-to-markdown: Add stdin text to exist markdown file.</a>

<ul>
<li>Markdownのテキストを指定したセクションに書き出すライブラリ</li>
<li>上のdocumentationと合わせて使うと、READMEの一部を更新することができる</li>
</ul></li>
</ul>

<h2 id="javascriptの入門本">JavaScriptの入門本</h2>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/">Introduction · JavaScriptの入門書 #jsprimer</a></li>
<li><a href="https://github.com/asciidwango/js-primer">asciidwango/js-primer: JavaScriptの入門書</a></li>
</ul>

<p>ES2015+を前提としてたJavaScriptの入門書を書いてる。</p>

<blockquote>
<p>この書籍はES2015以降をベースとしたJavaScript入門書となる予定です。
基本的なStableのECMAScriptのバージョンを扱います。</p>

<p>プログラミングをやったことがあるが、今のJavaScriptがよくわからないという人が、
今のJavaScriptアプリケーションを読み書きできるようになることを目標にする内容です。
(プログラミングが初めてという人が対象ではないです)
-- <a href="https://github.com/asciidwango/js-primer/issues/6" title="[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer">[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer</a></p>
</blockquote>

<p>ソースコードなども公開されてるオープンソースなプロジェクトです。
興味がある人はIssueなどで意見とかくれると嬉しいです。</p>

<p>去年の<a href="http://efcl.info/2015/12/31/oss-in-2015/" title="今年のOSS活動振り返り @ 2015 | Web Scratch">今年のOSS活動振り返り @ 2015</a>で次のような目標を書いてた。</p>

<blockquote>
<p>JavaScript/ECMAScriptを改めてどう学べばいいのか考える
<a href="https://github.com/azu/how-to-learn-es6" title="azu/how-to-learn-es6: How to learn ECMAScript2015 for Beginner?">azu/how-to-learn-es6: How to learn ECMAScript2015 for Beginner?</a></p>
</blockquote>

<p>この目標を行動に移したのが、この本です。
予想したどおり、大きなものを書く場合モチベーションの維持が一番の課題なので、小さく意見を聞きながら進められるようにしたいなー</p>

<p>今年中にはなんとかする。</p>

<h2 id="その他">その他</h2>

<ul>
<li><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>

<ul>
<li><a href="http://efcl.info/2016/12/31/ecmascript-daily/" title="ECMAScriptの情報サイトを始めて1年経った | Web Scratch">ECMAScriptの情報サイトを始めて1年経った | Web Scratch</a></li>
<li>ECMAScriptの情報サイト始めた</li>
<li>仕様に近い情報のメモ書きみたいな</li>
</ul></li>
<li>package.json編集系 CLI

<ul>
<li><a href="https://github.com/azu/rewrite-npm-run-build-production-env">azu/rewrite-npm-run-build-production-env: Add npm run build to NODE_ENV=production.</a></li>
<li><a href="https://github.com/azu/transfer-github-owner">azu/transfer-github-owner: Rewrite repository info on README/package.json for transferring GitHub repository.</a>

<ul>
<li>GitHubでTransferした後にpackage.jsonとかREADMEを書き換えるツール</li>
</ul></li>
</ul></li>
<li><a href="https://github.com/azu/bellows-logger" title="azu/bellows-logger: Flexible/Connectable logger library for JavaScript.">azu/bellows-logger: Flexible/Connectable logger library for JavaScript.</a>

<ul>
<li>プラガブルに拡張可能なロガーライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/strict-eval" title="azu/strict-eval: eval code in vm module, but always strict mode.">azu/strict-eval: eval code in vm module, but always strict mode.</a>

<ul>
<li>Node.jsのvmモジュールで常にstrict modeにしてevalするライブラリ</li>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>でサンプルコードのstrict modeを保証するテストに使ってる</li>
</ul></li>
<li><a href="https://azu.github.io/ecmascript-version-detector/">ECMAScript Version Detector</a>

<ul>
<li><a href="http://efcl.info/2016/08/04/ecmascript-version-detector/">そのコードが標準化されてるJavaScriptなのかを判定する方法 | Web Scratch</a></li>
<li>JavaScriptのコードをパースしてECMAScriptのバージョンを出すやつ</li>
</ul></li>
<li><a href="https://github.com/azu/github-to-twitter-lambda" title="azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.">azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.</a>

<ul>
<li><a href="http://efcl.info/2016/06/09/github-to-twitter-lambda/" title="AWS lambdaでGitHubのアクティビティをTwitterで読む用に投稿する | Web Scratch">AWS lambdaでGitHubのアクティビティをTwitterで読む用に投稿する | Web Scratch</a></li>
<li>GitHubのNotificationやActivityをTwitterに投げるlambda bot</li>
<li>同様のことやってる人: <a href="http://massa142.hatenablog.com/entry/2016/12/27/000430" title="情報収集方法まとめ 2016年12月版 - massa142&amp;#39;s blog">情報収集方法まとめ 2016年12月版 - massa142&#39;s blog</a></li>
<li>lambdaでずっと回してるけど大分安定してる</li>
<li>月に$1かからないのでお手軽</li>
</ul></li>
</ul>

<p><img src="https://monosnap.com/file/xQqM9kqLjL6fm6qUmdz2oyayeOGo7y.png" alt="コスト"></p>

<ul>
<li><a href="https://github.com/azu/performance-logger" title="azu/performance-logger: Simple Perf logger based on `performance.mark` API.">azu/performance-logger: Simple Perf logger based on <code>performance.mark</code> API.</a>

<ul>
<li><a href="http://efcl.info/2016/08/15/performance.mark/" title="performance.markでパフォーマンス計測する | Web Scratch">performance.markでパフォーマンス計測する | Web Scratch</a>の記事用に書いた</li>
</ul></li>
<li><a href="https://github.com/azu/file-cache-cli" title="azu/file-cache-cli: Command line tools that filter file paths by cached data.">azu/file-cache-cli: Command line tools that filter file paths by cached data.</a>

<ul>
<li>パイプで渡したファイルをキャッシュでフィルターするCLI</li>
</ul></li>
<li><a href="https://github.com/azu/add-deploy-key-to-github" title="azu/add-deploy-key-to-github: Add deploy to GitHub from command line.">azu/add-deploy-key-to-github: Add deploy to GitHub from command line.</a>

<ul>
<li>GitHubリポジトリにDeploy Keyを追加するCLI</li>
<li><a href="http://efcl.info/2016/09/27/deploy-from-travis-ci-to-gh-pages/" title="Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch">Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch</a> コレ用</li>
</ul></li>
<li><a href="https://github.com/azu/react-routing-resolver" title="azu/react-routing-resolver: Routing component, but It does&amp;#39;t mount component. It&amp;#39;s just resolver.">azu/react-routing-resolver: Routing component, but It does&#39;t mount component. It&#39;s just resolver.</a>

<ul>
<li>コンポーネントじゃなくてURLに対する処理を書くことができるRouter</li>
<li>Jestで始めてテスト書いた</li>
</ul></li>
<li><a href="https://github.com/azu/text-testing" title="azu/text-testing: Testing library for structured texts.">azu/text-testing: Testing library for structured texts.</a>

<ul>
<li><a href="http://efcl.info/2016/09/14/text-testing/" title="文章をTDDする | Web Scratch">文章をTDDする | Web Scratch</a></li>
<li>文章に対してBDD的にテストを書くライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/job-draft-draft" title="azu/job-draft-draft: ドラフトのドラフト">azu/job-draft-draft: ドラフトのドラフト</a>

<ul>
<li>Job Draftに投稿したやつ</li>
</ul></li>
<li><a href="https://github.com/azu/slug-command" title="azu/slug-command: A command line tool for slug">azu/slug-command: A command line tool for slug</a>

<ul>
<li>文字列からslug(パーマネントリンクに使う文字列)を作るやつ</li>
<li>jser.infoの記事で使ってる</li>
</ul></li>
<li>メールマガジンパース

<ul>
<li><a href="https://github.com/azu/extract-links-mail-magazine">azu/extract-links-mail-magazine: Extract link in mail magazine like JavaScript Weekly.</a></li>
<li><a href="https://github.com/azu/weekly-meta">azu/weekly-meta</a></li>
<li>JavaScript WeeklyとかをパースしてURLを取り出すやつ</li>
<li>それを処理するAPI gatewayのAPI</li>
</ul></li>
<li><a href="https://github.com/azu/react-toggle-pattern" title="azu/react-toggle-pattern: React Component that provide toggle pattern">azu/react-toggle-pattern: React Component that provide toggle pattern</a>

<ul>
<li>Reactのコンポーネントをトグルするパターンを提供するライブラリ</li>
<li><a href="http://efcl.info/2016/05/31/react-toggle-pattern/" title="Reactで条件によって出したり消したりするコンポーネントを書いた | Web Scratch">Reactで条件によって出したり消したりするコンポーネントを書いた | Web Scratch</a></li>
<li>トグルするボタンとかに使う用途で書いた</li>
<li>フォーカスの維持とか面倒な事をやった記憶がある</li>
</ul></li>
<li><a href="https://github.com/azu/babel-plugin-strip-function-call" title="azu/babel-plugin-strip-function-call: Babel plugin strip any function call.">azu/babel-plugin-strip-function-call: Babel plugin strip any function call.</a>

<ul>
<li>指定した関数コールを削除するBabelプラグイン</li>
<li>productionビルド時にログの呼び出し自体を消す目的</li>
</ul></li>
<li><a href="https://github.com/azu/pkg-to-readme" title="azu/pkg-to-readme: Generate README.md from pacakge.json">azu/pkg-to-readme: Generate README.md from pacakge.json</a>

<ul>
<li><code>pacakge.json</code>とテンプレートファイルからREADMEを作るツール</li>
</ul></li>
<li><a href="https://github.com/azu/map-like" title="azu/map-like: ES2015 Map like object">azu/map-like: ES2015 Map like object</a>

<ul>
<li>ES2015の<code>Map</code>のshim的なライブラリ</li>
<li>ファイルサイズが小さくてMapみたいなものは結構欲しいのでよく使ってる</li>
<li>オブジェクトをMapみたいに使うのは辞めたい</li>
</ul></li>
<li><a href="https://github.com/azu/lru-map-like" title="azu/lru-map-like: LRU cache top on Map-like. Support non-string key.">azu/lru-map-like: LRU cache top on Map-like. Support non-string key.</a>

<ul>
<li>LRUの実装。</li>
<li>ファイルサイズが小さいのが欲しかった</li>
</ul></li>
<li><a href="https://github.com/azu/mu-pdf-viewer" title="azu/mu-pdf-viewer: PDF viewer on electron.">azu/mu-pdf-viewer: PDF viewer on electron.</a>

<ul>
<li>PDFリーダアプリ</li>
<li>キーバインドやスクロール量が調整されてる感じ</li>
<li><a href="http://efcl.info/2016/10/12/mu-pdf-viewer/" title="pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch">pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch</a></li>
<li><a href="http://efcl.info/2016/11/07/mu-pdf-search/" title="mu-pdf-viewerに検索一覧をつけた | Web Scratch">mu-pdf-viewerに検索一覧をつけた | Web Scratch</a></li>
</ul></li>
<li><a href="https://azu.github.io/t_wada_generator/" title="t_wada generator">t_wada generator</a>

<ul>
<li>@t_wadaさん生成</li>
</ul></li>
<li><a href="https://github.com/azu/dayone-to-quiver" title="azu/dayone-to-quiver: Convert DayOne&amp;#39;s Journal.dayone to Quiver notebook file.">azu/dayone-to-quiver: Convert DayOne&#39;s Journal.dayone to Quiver notebook file.</a>

<ul>
<li>DayOneからQuiverに移行するツール</li>
<li><a href="http://efcl.info/2016/02/03/quiver/" title="メモアプリをDayOneからQuiverに移行した | Web Scratch">メモアプリをDayOneからQuiverに移行した | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a>

<ul>
<li><a href="http://efcl.info/2016/11/02/ui-event-observer/" title="同じイベントのaddEventListenerを1つにまとめるライブラリを書いた | Web Scratch">同じイベントのaddEventListenerを1つにまとめるライブラリを書いた | Web Scratch</a></li>
<li>DOMイベントを扱いやすくするライブラリ</li>
<li>これもMap like使ってる</li>
</ul></li>
<li><a href="https://github.com/azu/morpheme-match">azu/morpheme-match: match function that match token(形態素解析) with sentence.</a></li>
<li><a href="https://github.com/azu/morpheme-match-all">azu/morpheme-match-all: A wrapper of morpheme-match API. Match all kuromoji&#39;s tokens.</a>

<ul>
<li>kuromojiの形態素解析結果に対するマッチャーライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/gitbook-plugin-js-console" title="azu/gitbook-plugin-js-console: GitBook plugin that provide interactive JavaScript console">azu/gitbook-plugin-js-console: GitBook plugin that provide interactive JavaScript console</a>

<ul>
<li><a href="https://github.com/azu/codemirror-console-ui" title="azu/codemirror-console-ui: UI Components of codemirror-console.">azu/codemirror-console-ui: UI Components of codemirror-console.</a>のGitBook plugin</li>
<li>JavaScriptのコードをREPLにできる</li>
</ul></li>
<li><a href="https://github.com/azu/github-longest-streak" title="azu/github-longest-streak: Online Viewer for GitHub Full Longest Streak.">azu/github-longest-streak: Online Viewer for GitHub Full Longest Streak.</a>

<ul>
<li>GitHubのLongest Streakを取れるやつ</li>
<li>SVGをパースして全期間から取れるようになってる</li>
</ul></li>
<li><a href="https://github.com/azu/eslint-plugin-no-allow-react-context" title="azu/eslint-plugin-no-allow-react-context: Not allow to use React context without specific directory.">azu/eslint-plugin-no-allow-react-context: Not allow to use React context without specific directory.</a>

<ul>
<li>指定した場所以外でReact Contextを使えなくするESLintプラグイン</li>
</ul></li>
<li><a href="https://github.com/azu/stylelint-disallow-selector" title="azu/stylelint-disallow-selector: stylelint rule disallow specific selector">azu/stylelint-disallow-selector: stylelint rule disallow specific selector</a>

<ul>
<li>使ってはいけないセレクタを指定するstylelintプラグイン</li>
</ul></li>
</ul>

<h2 id="ゴミ箱行き">ゴミ箱行き</h2>

<p>作ってみたけど諦めたもの</p>

<ul>
<li><a href="https://github.com/azu/jscode-to-svg" title="azu/jscode-to-svg: Syntax Highlighted JavaScript code to SVG">azu/jscode-to-svg: Syntax Highlighted JavaScript code to SVG</a>

<ul>
<li>JavaScriptのコードからシンタックスハイライトをしたコードのSVGを吐くライブラリ</li>
</ul></li>
<li>Gitの履歴から自動的に正誤表を作ってチェックするツール

<ul>
<li><a href="https://github.com/azu/git-log-to-errata" title="azu/git-log-to-errata: Git log to errata list.">azu/git-log-to-errata: Git log to errata list.</a></li>
<li><a href="https://github.com/azu/textlint-rule-git-log-to-errata" title="azu/textlint-rule-git-log-to-errata: git log to eratta rule">azu/textlint-rule-git-log-to-errata: git log to eratta rule</a></li>
</ul></li>
<li>Asciidocのパーサ

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="azu/textlint-plugin-asciidoc-loose: AsciiDoc/Asciidoctor loose support for textlint.">azu/textlint-plugin-asciidoc-loose: AsciiDoc/Asciidoctor loose support for textlint.</a></li>
<li>tmbundleを元に正規表現でAsciidocをパースしてtextlintで動かすやつ</li>
<li>一応動いてていて、トークナイズはできてるけど、ASTに組み立てるのが難しくて断念気味</li>
</ul></li>
<li><a href="https://github.com/azu/react-defer-render" title="azu/react-defer-render: ReactDeferRender defer first rendering of specific component.">azu/react-defer-render: ReactDeferRender defer first rendering of specific component.</a>

<ul>
<li>クライアントでReactをrenderするとコンポーネントが多いほど初期化時間が長くなる</li>
<li>なのでレンダリングを段階的にすることを目的にしたライブラリ</li>
<li>一応動いているけど、もう少しアドホックな感じのもの書いて使ってる。</li>
</ul></li>
<li><a href="https://github.com/azu/weekly-snippets" title="azu/weekly-snippets: 週報 Issue">azu/weekly-snippets: 週報 Issue</a>

<ul>
<li>週報をやってみたけどモチベーションが続かなかった</li>
<li>良い方法と一緒にやる人が必要だなと思った</li>
<li>何かいい方法ないかな?</li>
</ul></li>
</ul>

<h2 id="来年">来年</h2>

<ul>
<li><a href="https://github.com/almin/almin" title="Almin">Almin</a>

<ul>
<li>もう少し使ってもらえるように何かをやるかもしれない</li>
<li>ステートソーシングについてはある程度やったのでイベントソーシングをクライアントでやるにはどうするかを考えたい</li>
</ul></li>
<li><a href="https://github.com/asciidwango/js-primer">asciidwango/js-primer: JavaScriptの入門書</a>

<ul>
<li>どうにか仕上げたい</li>
</ul></li>
<li><a href="https://github.com/azu/weekly-snippets" title="azu/weekly-snippets: 週報 Issue">週報 Issue</a>

<ul>
<li>何かいい方法で継続したいなー</li>
<li>基本的に場所と必要性があれば継続できる人なので、何かが足りなかった</li>
</ul></li>
<li>JSer.infoのような情報サイトについて

<ul>
<li><a href="https://github.com/jser/jser.info/issues/85" title="中期的なまとめ記事 · Issue #85 · jser/jser.info">中期的なまとめ記事 · Issue #85 · jser/jser.info</a></li>
<li>この辺について何か行動を起こしたい</li>
<li>未知の要素が強くて行動が出しにくいという部分が大きい(できるだけコスト取りたくない)</li>
<li>リスクとコストと効果のバランスを決定してから動かすのがいいのかな?</li>
</ul></li>
</ul>

<p>追記: <a href="https://gist.github.com/azu/143eda871afd3b52790767721c6865b3" title="2017-01-01 今年やりたいこと">2017-01-01 今年やりたいこと</a></p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint --cacheオプションでチェックを高速化した</title>
   <link href="http://efcl.info/2016/12/28/textlint-cache/"/>
   <updated>2016-12-28T09:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/28/textlint-cache</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> 7.2.0で <code>--cache</code> と <code>--cache-location</code> オプションをサポートしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/7.2.0" title="Release 7.2.0 · textlint/textlint">Release 7.2.0 · textlint/textlint</a></li>
</ul>

<p>基本的にはESLintのキャッシュオプションと同じです。
前回のLint結果のキャッシュから変化したファイルのみがチェックの対象になる仕組みです。</p>

<ul>
<li><a href="http://eslint.org/docs/user-guide/command-line-interface#caching" title="Command Line Interface - ESLint - Pluggable JavaScript linter">Command Line Interface - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><code>textlint</code>コマンドに <code>--cache</code> オプションを付けて実行するだけです。
後は、毎回このコマンドを付けて実行すれば変更したファイルのみがチェック対象になるので、実行時間が高速化されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">textlint --cache docs/
</code></pre></div>
<p><code>--cache</code>オプションを付けるとデフォルトでは、 <code>.textlintcache</code> という名前のファイルにキャッシュができます。</p>

<p>キャッシュファイルを任意の名前にしたい場合は <code>--cache-location</code> オプションで指定した場所にキャッシュファイルを作ることができます。</p>

<h2 id="実行例">実行例</h2>

<p>自分が知ってる中では一度にtextlintがやる処理が一番多い<a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>で試してみます。</p>

<p>このプロジェクトではファイル数やルール数が多いのもそうですが、textlintの中でESLintを動かしてJavaScriptのコードもチェックしてたりキャッシュの有無がかなり速度に影響がありました。</p>

<ul>
<li><a href="http://efcl.info/2016/07/06/eslint-with-textlint/" title="MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch">MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch</a></li>
</ul>

<h3 id="cacheなし">--cacheなし</h3>

<p>15秒ぐらいかかって遅い。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint:no-cached

&gt; js-primer@1.0.0 textlint:no-cached /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error

npm run textlint:no-cached  14.68s user 1.18s system 99% cpu 15.926 total
</code></pre></div>
<h3 id="cacheあり">--cacheあり</h3>

<p>3秒程度になった。
(1つファイルを変更した状態で実行)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint

&gt; js-primer@1.0.0 textlint /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error --cache

npm run textlint  2.17s user 0.41s system 85% cpu 3.022 total
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p><code>--cache</code> をつけるだけで結構実行時間が変わるので、大量のファイルをtextlintで繰り返しチェックしている場合は試してみてください。</p>

<p>また、エディタ連携系なら元々1つのファイルのみを対象に実行しているはずなので、キャッシュなくても普通な速度で動くと思います。</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする - Qiita</a></li>
<li><a href="http://post.simplie.jp/posts/51">textlintで日本語の文章を校正する方法とAtomへの導入手順 | Simplie Post</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintのルールを簡単に作り始めることができるツールを作りました</title>
   <link href="http://efcl.info/2016/12/14/create-textlint-rule/"/>
   <updated>2016-12-14T20:31:00+09:00</updated>
   <id>http://efcl.info/2016/12/14/create-textlint-rule</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a>はJavaScriptで自由にルールを追加することができる仕組みになっています。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/" title="textlintで日本語の文章をチェックする | Web Scratch">textlintで日本語の文章をチェックする | Web Scratch</a></li>
</ul>

<p>しかし、普段JavaScriptをあんまり使ってない人には<a href="https://babeljs.io/" title="Babel">Babel</a>を使ったコード変換や<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストの設定など、ルールを書き始めるまでの環境づくりの方が大変です。</p>

<p>そのような環境設定をコマンド一発で作れて、textlintルールを作り始めることができるツールを作りました。</p>

<ul>
<li><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>

<ul>
<li>Scaffolding Tool</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>

<ul>
<li>BabelやMochaなどのコマンドをラップしたもの</li>
</ul></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を <a href="https://www.npmjs.com/">npm</a>(Node.jsのパッケージマネージャ)でインストールするだけです。
Node.js(推奨はver6以上)をインストールすれば <code>npm</code> コマンドが自動で入っています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g create-textlint-rule
</code></pre></div>
<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>をインストールすると<code>create-textlint-rule</code>コマンドが利用できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule --help

  Create textlint rule with no configuration

  Usage
    <span class="nv">$ </span>create-textlint-rule rule-name

  Options
    --help  Show <span class="nb">help</span>
    --yarn  Use yarn <span class="k">for</span> installing
    --yes   Pass --yes all <span class="k">for</span> install process

  Examples
    <span class="nv">$ </span>create-textlint-rule awesome-rule
</code></pre></div>
<h3 id="textlintのルールプロジェクトを作る">textlintのルールプロジェクトを作る</h3>

<p><code>found-bug</code>という&quot;bug&quot;をテキストから見つけるルールプロジェクトを作ってみます。</p>

<p>次のように、引数にルール名を渡すだけで、<code>textlint-rule-found-bug</code>というディレクトリにtextlintのルールが作成されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
</code></pre></div>
<p>実際のログは次のような感じで、一部対話的にルールの簡単な<code>description</code>などを入力しますが、基本的にはEnterでいいはずです。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
Cloning into <span class="s1">&#39;textlint-rule-found-bug&#39;</span>...
remote: Counting objects: 9, <span class="k">done</span>.
remote: Compressing objects: 100% <span class="o">(</span>7/7<span class="o">)</span>, <span class="k">done</span>.
remote: Total <span class="m">9</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">4</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused 0
Unpacking objects: 100% <span class="o">(</span>9/9<span class="o">)</span>, <span class="k">done</span>.
<span class="nb">cd</span> /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug
Initialized empty Git repository in /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/.git/
Input information about your textlint rule
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See <span class="sb">`</span>npm <span class="nb">help </span>json<span class="sb">`</span> <span class="k">for</span> definitive documentation on these fields
and exactly what they <span class="k">do</span>.

Use <span class="sb">`</span>npm install &lt;pkg&gt; --save<span class="sb">`</span> afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any <span class="nb">time </span>to quit.
name: <span class="o">(</span>textlint-rule-found-bug<span class="o">)</span>
version: <span class="o">(</span>1.0.0<span class="o">)</span>
description: This textlint rule found bugs.
git repository:
license: <span class="o">(</span>MIT<span class="o">)</span>
About to write to /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/package.json:

<span class="o">{</span>
  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;1.0.0&quot;</span>,
  <span class="s2">&quot;keywords&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;textlint&quot;</span>,
    <span class="s2">&quot;rule&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;main&quot;</span>: <span class="s2">&quot;lib/index.js&quot;</span>,
  <span class="s2">&quot;files&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;lib/&quot;</span>,
    <span class="s2">&quot;src/&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;scripts&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;textlint-scripts test&quot;</span>,
    <span class="s2">&quot;build&quot;</span>: <span class="s2">&quot;textlint-scripts build&quot;</span>,
    <span class="s2">&quot;prepublish&quot;</span>: <span class="s2">&quot;npm run --if-present build&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;devDependencies&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;textlint-scripts&quot;</span>: <span class="s2">&quot;^1.2.2&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;textlint-rule-found-bug&quot;</span>,
  <span class="s2">&quot;description&quot;</span>: <span class="s2">&quot;This textlint rule found bugs.&quot;</span>,
  <span class="s2">&quot;directories&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;test&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;azu&quot;</span>,
  <span class="s2">&quot;license&quot;</span>: <span class="s2">&quot;MIT&quot;</span>
<span class="o">}</span>


Is this ok? <span class="o">(</span>yes<span class="o">)</span>
Wait... Installing npm packages <span class="k">for</span> development
Setup your README!
Generated README.md
✔ Complete: Let<span class="err">&#39;</span>s create textlint rule
</code></pre></div>
<p>作成した<code>textlint-rule-found-bug</code>ディレクトリには、次のようなファイルが作られています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint-rule-found-bug/
├── README.md
├── lib
│   ├── index.js
│   └── index.js.map
├── node_modules
├── package.json
├── src
│   └── index.js
└── test
    └── index-test.js
</code></pre></div>
<p>基本的には<code>src/index.js</code>にルールのコードを書いていき、<code>test/index-test.js</code>にルールのテストを書きます。</p>

<p><code>lib/</code>はnpmで公開するコードが置かれる場所なので、デフォルトでは<code>.gitignore</code>されているためいじる必要はありません。</p>

<h3 id="build">Build</h3>

<p>次のコマンドを叩くことで、<code>src/</code>以下にあるES2015+で書かれたコードを<a href="https://babeljs.io/" title="Babel">Babel</a>を使って変換し<code>lib/</code>以下においてくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run build
</code></pre></div>
<h3 id="test">Test</h3>

<p>次のコマンドを叩くことで、<code>test/</code>以下にある<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>と<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストを動かします。</p>

<p>テストコードの書き方は<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>を参照してください。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm test
</code></pre></div>
<h3 id="ルールの開発">ルールの開発</h3>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule-advanced.md" title="textlint/rule-advanced.md at master · textlint/textlint">textlint/rule-advanced.md at master · textlint/textlint</a></li>
</ul>

<p>などのドキュメントがあります。</p>

<p>また、textlintはASTを元にルールを書くため、次のASTビューアを見ながら構造を知ると書きやすくなります。</p>

<ul>
<li><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></li>
</ul>

<p>簡単な方法として既存のルールからやりたい事と近いものを見つけて、それをパクるのが近道だと思います。</p>

<p>100以上のルールがあり、自分が書いたものは<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>で作った構造とほぼ同じなので、コード部分に集中すれば問題ないはずです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="publish">publish</h3>

<p>ルールの公開は基本的には<a href="https://www.npmjs.com/">npm</a>に公開します。
<code>pacakge.json</code>の<code>version</code>を上げたり<code>git tag</code>を貼るなどは<a href="https://docs.npmjs.com/cli/version" title="npm-version">npm-version</a>を使うと簡単です。
<a href="http://semver.org/lang/ja/">semver</a>なバージョンを上げたら、<a href="https://docs.npmjs.com/cli/publish" title="npm-publish">npm-publish</a>コマンドで公開すれば完了です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm version patch
# npm version minor
# npm version major
npm publish
</code></pre></div>
<p>これで、npmに公開された<code>textlint-rule-found-bug</code>が、npmでインストールすることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-found-bug
</code></pre></div>
<p>後は、<code>.textlintrc</code>に設定して使えばいいだけです。</p>

<p>作ったルールの使い方も実は<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>が自動的にREADME.mdに書いてくれています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">## Usage

Via `.textlintrc`(Recommended)

```json
{
    &quot;rules&quot;: {
        &quot;found-bug&quot;: true
    }
}
```

Via CLI

```
textlint --rule found-bug README.md
```
</code></pre></div>
<p>作ったルールはWikiに追加してみましょう。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="tips">Tips</h3>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を使い、作ったプロジェクト内で、<code>textlint</code>にルールを読み込ませて確認する方法。</p>

<p>プロジェクトをビルドして、<code>textlint</code>の<code>--rulesdir</code>で直接ルールを読み込んで使えば、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm run build
$ $(npm bin)/textlint --rulesdir ./lib/ README.md
# $(npm bin) は ./node_modules/.bin と同じなので次でもOK
$ ./node_modules/.bin/textlint --rulesdir ./lib/ README.md
</code></pre></div>
<p>もしくは、ローカルで作ったプロジェクトを<code>npm install</code>することでも、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 試したいプロジェクトで、textlint-rule-found-bugへのローカルパスを指定
$ npm install /path/to/textlint-rule-found-bug
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>と<a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>を使うことで、面倒な環境はある程度簡単に作れるようになっています。</p>

<p>面白いtextlintのルールを自作して文章を改善の助けになればと思います。</p>
 ]]></content>
 </entry>
 

</feed>
