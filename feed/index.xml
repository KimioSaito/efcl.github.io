<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2017-02-26T18:59:58+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>Map-likeというES2015 Mapのようなライブラリを書いた</title>
   <link href="http://efcl.info/2017/02/26/map-like/"/>
   <updated>2017-02-26T18:42:00+09:00</updated>
   <id>http://efcl.info/2017/02/26/map-like</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/map-like" title="map-like">map-like</a>という小さな<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>オブジェクトのライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/map-like" title="azu/map-like: ES2015 Map like object">azu/map-like: ES2015 Map like object</a></li>
</ul>

<p>API的にはES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>と同じです。</p>

<h2 id="制限">制限</h2>

<ul>
<li><code>Symbol.Iterator</code>が実装されていません</li>
<li><code>toString</code>が実装されていません</li>
</ul>

<p>つまりIteratorは省いています。</p>

<h2 id="目的">目的</h2>

<p>Mapのpolyfillを書いたことがある人はわかるかもしれませんが、オブジェクトをkeyにできるMapがほしいだけなのに、結構でかくなります。
これはIteratorを実装する部分が大きく、<code>Symbol.Iterator</code>をどうするかとか色々あります。
正直Mapを<code>for...of</code>で回したいとかは殆ど必要なかったので、それ以外の部分はMapと互換を持つ<a href="https://github.com/azu/map-like" title="map-like">map-like</a>というライブラリを書きました。</p>

<p>ファイルサイズも1.5kBほどです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">✈ bundle-size map-like
map-like@1.0.3

env  bundle   minify   gzip
--   5.73 kB  3.08 kB  1.5 kB
</code></pre></div>
<p>「オブジェクトリテラルをマップのようなものとして使いたくない」や「オブジェクトをMapのキーとして使いたい」というケースで便利です。</p>

<p>派生としてLRU cacheライブラリの<a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>というものもあります。</p>

<ul>
<li><a href="https://github.com/azu/lru-map-like" title="azu/lru-map-like: LRU cache top on Map-like. Support non-string key.">azu/lru-map-like: LRU cache top on Map-like. Support non-string key.</a></li>
</ul>

<p>LRUライブラリは色々あるのですが、オブジェクトをキーとして使えるLRUは<a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>ぐらいしかありませんでした。</p>

<ul>
<li><a href="https://github.com/almin/almin/issues/56" title="Reduce file size · Issue #56 · almin/almin">Reduce file size · Issue #56 · almin/almin</a>

<ul>
<li>LRUキャッシュの調査メモ</li>
</ul></li>
</ul>

<p><a href="https://github.com/isaacs/node-lru-cache" title="node-lru-cache">node-lru-cache</a>は便利なのですが、やはりサイズが大きい(10kb gzip)です。</p>

<p><a href="https://github.com/azu/lru-map-like" title="lru-map-like">lru-map-like</a>は大体2kBです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">env  bundle   minify   gzip
--   13.8 kB  6.32 kB  2.34 kB
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p>オブジェクトリテラルでマップのようなことをやるよりは、
ES2015の<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="Map">Map</a>を使ったほうが明示的で良いです。
あと、キーにオブジェクトに使える便利な場面がキャッシュのようなものを実装する際にはよく出現します。
(Map &lt;-&gt; Objectの相互変換は難しいものでもないので、最近はマップっぽいものがでてきたら<code>Map</code>を使うようにしてます)</p>

<p>以下のライブラリやツールなどでりようしています。</p>

<ul>
<li><a href="https://github.com/almin/almin">almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application</a></li>
<li><a href="https://github.com/textlint/textlint">textlint/textlint: The pluggable natural language linter for text and markdown.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#t_wada_sushi でOpen Collectiveの話をしてきた</title>
   <link href="http://efcl.info/2017/01/23/t_wada_sushi/"/>
   <updated>2017-01-23T23:08:00+09:00</updated>
   <id>http://efcl.info/2017/01/23/t_wada_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?q=%23t_wada_sushi&amp;src=typd" title="#t_wada_sushi">#t_wada_sushi</a>で<a href="https://opencollective.com/" title="Open Source Collective is on Open Collective">Open Collective</a>の話をしてきました。</p>

<p><a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html"><img src="https://monosnap.com/file/JNTadjsjcWbTuHYcJY2Zdgd14R77Oe.png" alt="open"></a></p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a></li>
</ul>

<p>最近webpackなども利用し始めた<a href="http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html" title="Open Collective">Open Collective</a>というウェブサービスについての話をしてきました。
いわゆる寄付サービスや<a href="https://www.patreon.com/" title="Patreon">Patreon</a>に近いものです。
オープンソースプロジェクトなどの小さなコミュニティが法人格を持たないで、透明性を持ってお金をやり取り出来るような状況を作ることを目的にしたサービスです。</p>

<ul>
<li><a href="https://hackernoon.com/how-webpack-raised-15-000-in-3-months-and-the-future-of-open-source-cb2c9f68fffa#.pp5mjn2jy" title="How Webpack raised $15,000 in 3 months, and the future of open source">How Webpack raised $15,000 in 3 months, and the future of open source</a></li>
</ul>

<p>どういう目的をもって作られてたか、また最近利用するJavaScriptのOSSが増えてきたので簡単に調べた感じです。</p>

<ul>
<li><a href="https://github.com/jser/report/issues/4" title="Open Collective · Issue #4 · jser/report">Open Collective · Issue #4 · jser/report</a></li>
</ul>

<p>Twitterログ</p>

<ul>
<li><a href="https://togetter.com/li/1073636" title="#t_wada_sushi - Togetterまとめ">#t_wada_sushi - Togetterまとめ</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">いろいろとヤバいプレゼントを貰いました。ありがとうございました！ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/8ilgnGhEAq">pic.twitter.com/8ilgnGhEAq</a></p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/823545108695875584">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="webpack2-会長">webpack2 - 会長</h2>

<ul>
<li>Tree shakingについて</li>
<li>webpack2への移行でハマったのは

<ul>
<li>postcss</li>
<li><a href="https://github.com/webpack/extract-text-webpack-plugin" title="extract-text-webpack-plugin">extract-text-webpack-plugin</a></li>
</ul></li>
<li>webpack2のTree shakingのしくみについて</li>
<li>webpackは<code>// unused</code> なコメントをつけていく</li>
<li>これをuglifyJSが圧縮時に消し去る</li>
<li>という仕組み</li>
<li>Tree shakingした結果12kb減った</li>
<li>モジュールを元からきちんと分けてるとそこまで効果がない感じ</li>
<li>圧縮を書けないとコメントが増える分余計に増える</li>
</ul>

<hr>

<h2 id="whatwg-urlについての最近の動向-laco"><a href="http://slides.com/laco/201701-twada-sushi#/" title="whatwg/urlについての最近の動向">whatwg/urlについての最近の動向</a> - laco</h2>

<ul>
<li><a href="https://github.com/whatwg/url/graphs/contributors" title="Contributors to whatwg/url">Contributors to whatwg/url</a></li>
<li>コミットが最近活発化</li>
<li>URLSearchParamsについての変更がある</li>
<li>URLフラグメントのASCII文字列化 (373dbed)</li>
<li>URL passwordの仕様変更 (5e0b05e)</li>
<li>URLSearchParamsのコンストラクタ仕様変更 (31ddc5b)

<ul>
<li>mapを受け入れるようになった</li>
<li>tuple、map、文字列にURLSearchParamのコンストラクタに渡せるようになった</li>
<li>オーバーロード</li>
<li><a href="https://github.com/whatwg/url/pull/175" title="Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url">Simplify constructing URLSearchParams by annevk · Pull Request #175 · whatwg/url</a></li>
</ul></li>
<li>URLSearchParams#sort() (960f607)

<ul>
<li>Arrayと同じく破壊的なsort</li>
</ul></li>
<li>CanIuseだとバージョン毎の変更の対応が分からない</li>
<li>MDN

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/URLSearchParams" title="URLSearchParams - Web API インターフェイス | MDN">URLSearchParams - Web API インターフェイス | MDN</a></li>
<li>実装されたバージョンごとの違いもでる</li>
</ul></li>
</ul>

<hr>

<h2 id="mixed-content-jxck">mixed content - jxck</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Cookpad緑だよ <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/oeWnGMbQ7V">https://t.co/oeWnGMbQ7V</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499642016890880">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>CookpadもHTTPS化した</li>
<li>大きなサイトがhttps化するのは大変</li>
<li>mixed contentの問題が大きい

<ul>
<li>広告とか</li>
</ul></li>
<li>一つでもmixed contentがあるとURLバーがグリーンにならない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contentには二種類<br>active mixed content = DOMいじれる<br>passive mixed content = DOMいじれない <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823499937564348416">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>外れAdガジャ問題<br></li>
<li>広告配信サービスはHTTPS対応していても、中身の雑な広告があるとmixed contentになってしまうことがある</li>
<li>HTTP_UPGRADE_INSECURE_REQUESTSについて</li>
<li>ブラウザに対するHTTPヘッダ</li>
<li><a href="http://d.hatena.ne.jp/ASnoKaze/20150423/1429758051" title="Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ">Chrome 43でUpgrade Insecure Requestsに対応してた - あすのかぜ</a></li>
<li><a href="https://w3c.github.io/webappsec-upgrade-insecure-requests/" title="Upgrade Insecure Requests">Upgrade Insecure Requests</a></li>
<li>ヘッダを受けて、ブラウザはサブリソースのhttp://へのリクエストを自動でhttps://のものに変更する

<ul>
<li>httpで書いてあってもhttpsとしてリクエストする</li>
<li>リクエスト先がhttpsがじゃない場合は見つからないので400になる</li>
<li>mixed contentにはならない(httpは400になるので混ざらない)</li>
</ul></li>
<li>mixed contentの問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">mixed contetntの問題はmixed contentが起きてるか分からないこと。<br> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823502009298882560">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content" title="CSP: block-all-mixed-content">CSP: block-all-mixed-content</a> + report-onlyで発見できる

<ul>
<li>CSP: block-all-mixed-contentでmixed contentはblockされる</li>
<li><code>Content-Security-Policy-Report-Only: policy</code></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" title="Content Security Policy (CSP) - HTTP | MDN">Content Security Policy (CSP) - HTTP | MDN</a></li>
<li><code>report-only</code> modeなら実際にはblockされないで、reportだけを遅れる</li>
</ul></li>
<li><a href="https://report-uri.io/" title="Welcome to report-uri.io">Welcome to report-uri.io</a>

<ul>
<li>UIがダメ、すぐダウンする</li>
<li>CSP reportの管理ツールでいいものがまだない</li>
</ul></li>
<li><a href="https://www.w3.org/TR/2016/WD-reporting-1-20160407/" title="Reporting API 1">Reporting API 1</a></li>
<li>クライアントのログ問題</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSがなくてもCSPのinline scriptのreportが来る。<br>Chrome拡張、ブックマークレットとかクライアントはノイズデータが多い <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823503391577866240">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>エラーログ、CSPログなどはノイズが多い</li>
</ul>

<hr>

<h2 id="firefoxのtime-travel-debugging-kyo_ago">FirefoxのTime-Travel Debugging - kyo_ago</h2>

<ul>
<li><a href="http://www.slideshare.net/dynamis/firefox-devtools/39" title="Firefox DevTools">Firefox DevTools</a></li>
<li>FirefoxのTime-Travelデバッグがくる?</li>
<li>ブレークポイント貼って戻して、再現するデバッグ</li>
</ul>

<h2 id="electron-kyo_ago">Electron - kyo_ago</h2>

<ul>
<li>Electronのアプリに対してJavaScriptなどをinjectしたい</li>
<li>ブラウザのウェブサイドはユーザ側からいじれる</li>
<li>Electronアプリはいじれなくて不便</li>
</ul>

<hr>

<h2 id="イベント用の名札シート印刷アプリのcss-yoshiko">イベント用の名札シート印刷アプリのCSS - yoshiko</h2>

<ul>
<li><a href="http://yoshiko.hatenablog.jp/entry/your-name">イベント用の名札シート印刷アプリ「参加者の名は。」を作った - エンジニアをリングする</a></li>
<li><a href="https://yoshiko-pg.github.io/your-name/">参加者の名は。- Name cards generator for events</a></li>
<li>CSSで微妙にはみ出る表現の話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">A4サイズにしつつ、少し常にはみ出すようなCSSを書いた話 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/zZocQrChZq">https://t.co/zZocQrChZq</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823508811914756096">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">CSSで固定比率のスライド <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a> <a href="https://t.co/R8jEe0PBh8">https://t.co/R8jEe0PBh8</a></p>&mdash; よしこ (@yoshiko_pg) <a href="https://twitter.com/yoshiko_pg/status/823516169143365633">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">::beforeはその要素の中の先頭、::afterはその要素の中の最後。<br>つまり疑似要素は中にくる <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823510075260026882">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>疑似要素とmarginが親の横幅を元にする仕様を使った固定比率の話</li>
</ul>

<hr>

<h2 id="modern-javascript概観、そしてelectronへ-taichi"><a href="http://blog.satotaichi.info/modern-javascript_201701/" title="Modern JavaScript概観、そしてElectronへ">Modern JavaScript概観、そしてElectronへ</a> - taichi</h2>

<ul>
<li>皆がよくハマるところを防ぐコードを書いていくとフレームワークは汚くなる</li>
<li>Angular 2、Vue1, 2はコードがキレイ</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「食べられる泥」 <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; Local Proxy (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/823518103015301121">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<hr>

<h2 id="その他">その他</h2>

<ul>
<li>Dart</li>
<li>rubyのsassは<a href="https://github.com/sass/dart-sass" title="dart-sass">dart-sass</a>になった

<ul>
<li><a href="http://blog.sass-lang.com/posts/1022316-announcing-dart-sass" title="Announcing Dart Sass « Sass Blog">Announcing Dart Sass « Sass Blog</a></li>
</ul></li>
<li>Google社内での再熱</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Google内部でDartはかなり人気があるし、今でも2か月に一回はリリースされている。確かに公式サイトを見ると、次世代のAdWordsはDartで作られたとある。 <a href="https://t.co/2bKYmskevO">https://t.co/2bKYmskevO</a> <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; 太一 (@ryushi) <a href="https://twitter.com/ryushi/status/823541009749422082">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">DartはHaxeの立ち位置を目指している? <a href="https://twitter.com/hashtag/t_wada_sushi?src=hash">#t_wada_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/823516011584331776">January 23, 2017</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>DartのStrongModeは極限まで型推論を頑張るモード

<ul>
<li>V8の<a href="https://github.com/v8/v8/wiki/Experiments%20with%20Strengthening%20JavaScript#strong-mode" title="Strong Mode">Strong Mode</a>とはまた異なるもの</li>
</ul></li>
<li>Dart Dev Compilerがでない

<ul>
<li><a href="http://qiita.com/laco0416/items/04314d034d335bc620ff" title="Dart SDK Roadmapの進捗状況を確認する - Qiita">Dart SDK Roadmapの進捗状況を確認する - Qiita</a></li>
<li><a href="https://github.com/dart-lang/sdk/tree/master/pkg/dev_compiler" title="sdk/pkg/dev_compiler at master · dart-lang/sdk">sdk/pkg/dev_compiler at master · dart-lang/sdk</a></li>
</ul></li>
</ul>

<hr>

<h2 id="最近やったこと-t_wada">最近やったこと - t_wada</h2>

<ul>
<li><a href="https://github.com/unassert-js" title="unassert-js">unassert-js</a></li>
<li>organizationになった</li>
<li>power-assertの :star: 200ぐらい増えた

<ul>
<li>中国の人達が見つけたため</li>
</ul></li>
<li>alibabaとか最近OSSでも活発

<ul>
<li><a href="https://github.com/alibaba/rax" title="alibaba/rax: A universal React-compatible render engine.">alibaba/rax: A universal React-compatible render engine.</a></li>
</ul></li>
<li>chai to assert</li>
<li><a href="https://github.com/twada/chai-to-assert" title="twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert">twada/chai-to-assert: A jscodeshift codemod that transforms from chai to assert</a></li>
<li>元は<a href="https://github.com/power-assert-js/power-assert/issues/74" title="any tool to migrate `should/expect` code to `power-assert`? · Issue #74 · power-assert-js/power-assert">any tool to migrate <code>should/expect</code> code to <code>power-assert</code>? · Issue #74 · power-assert-js/power-assert</a>のIssue</li>
<li>chatの構文を調べてる

<ul>
<li>結構凶悪</li>
</ul></li>
<li>ランタイムに型をチェックして分岐している部分がでてくる</li>
<li>静的にはわからないため変換が難しい</li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// simple referencing</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>

<span class="c1">// deep referencing</span>
<span class="kd">var</span> <span class="nx">deepObj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">green</span><span class="o">:</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;matcha&#39;</span> <span class="p">}</span>
  <span class="p">,</span> <span class="nx">teas</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;chai&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">tea</span><span class="o">:</span> <span class="s1">&#39;konacha&#39;</span> <span class="p">}</span> <span class="p">]</span>
<span class="p">};</span>

<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;green.tea&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[1]&#39;</span><span class="p">,</span> <span class="s1">&#39;matcha&#39;</span><span class="p">);</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">deepObj</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;teas[2].tea&#39;</span><span class="p">,</span> <span class="s1">&#39;konacha&#39;</span><span class="p">);</span>
</code></pre></div>
<ul>
<li><a href="http://chaijs.com/api/bdd/#method_property">http://chaijs.com/api/bdd/#method_property</a></li>
<li>wow</li>
<li>変換には<a href="https://github.com/facebook/jscodeshift" title="facebook/jscodeshift: A JavaScript codemod toolkit.">facebook/jscodeshift: A JavaScript codemod toolkit.</a>を使ってる

<ul>
<li><a href="https://github.com/substack/node-falafel" title="substack/node-falafel: transform the ast on a recursive walk">substack/node-falafel: transform the ast on a recursive walk</a>に近いところもある</li>
</ul></li>
<li>Reactのマイグレーションツールなどでも使われてる

<ul>
<li>フレームワーク側がマイグレーションをするツールとして提供するケース</li>
</ul></li>
<li>Assertionツール同士の変換ツールが色々有る</li>
<li>2週ぐらいすると必要なものが残る</li>
</ul>

<hr>

<p>お疲れ様でした。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>ECMAScriptの情報サイトを始めて1年経った</title>
   <link href="http://efcl.info/2016/12/31/ecmascript-daily/"/>
   <updated>2016-12-31T15:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/31/ecmascript-daily</id>
   <content type="html"><![CDATA[ <h2 id="ecmascript-daily"><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a></h2>

<p>そういえば、<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>というECMAScriptの情報サイトをやってます。</p>

<p><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/commit/ad9f0cc626ff7188733b36ed45f2acc355c937bd">2015年12月</a>ぐらいに始めたので、1年ぐらい経ってましたがそういえばブログ書いてないことに気づいたので書いています。</p>

<p>基本的には<a href="https://jser.info/" title="JSer.info">JSer.info</a>のECMAScript特化版という位置づけで、基本的な更新スタンスはJSer.infoとは変わらないです。</p>

<p>週一とかではなくて、新しい情報がでたら直接更新のスタイルなので、<a href="https://realtime.jser.info/" title="Realtime JSer.info">Realtime JSer.info</a>(JSer.infoのリアルタイム版)の方がより近いです。</p>

<p>記事自体もほぼリンクだけに近いので、Twitter(<a href="https://twitter.com/ecmascriptdaily" title="@EcmascriptDaily">@EcmascriptDaily</a>)で見たほうが分かりやすいかもしれません。</p>

<p><a href="https://twitter.com/EcmascriptDaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @EcmascriptDaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p>週1でまとめて見たい場合は<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>からメールマガジンに登録できるので、そっちで見るとかするといいと思います。</p>

<p>基本的にはリンクを投げっぱなしですが、新しい<a href="https://github.com/rwaldron/tc39-notes" title="ECMA, TC39 Meeting Notes">ECMA, TC39 Meeting Notes</a>が出たときは変更があったProposalをまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals">ECMAScript proposal updates @ 2016-11 | ECMAScript Daily</a></li>
<li><a href="https://ecmascript-daily.github.io/2016/10/02/proposals-updates">ECMAScript proposal updates @ 2016-10 | ECMAScript Daily</a></li>
</ul>

<p>後たまに、型の仕様提案の現状をまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">Status of Static Typing in ECMAScript | ECMAScript Daily</a></li>
</ul>

<p>基本的にはECMAScriptの仕様と各実装のステータスとか、仕様に関する記事を取り上げたりしてる感じです。</p>

<p>他に類似するサイトは<a href="http://esnextnews.com/" title="ES.next News">ES.next News</a>ぐらいですが、最近あんまり更新されてない感じがします…</p>

<ul>
<li><a href="http://esnextnews.com/" title="ES.next News">ES.next News</a></li>
</ul>

<p>ECMAScriptに興味がある人は見てみるといいと思います。</p>

<p>Jekyllで動かしてるのですが、けっこう適当に作ってそのままなので、Contribution募集しています！</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/issues/13" title="feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com">feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>

<p>また、取り上げたい記事をPRするでも良いです。</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com">ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>今年のOSS活動振り返り @ 2016</title>
   <link href="http://efcl.info/2016/12/31/oss-in-2016/"/>
   <updated>2016-12-31T11:47:00+09:00</updated>
   <id>http://efcl.info/2016/12/31/oss-in-2016</id>
   <content type="html"><![CDATA[ <p>2016年のOSS活動振り返りです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483174882.png" alt="Current Contributions"></p>

<p><a href="http://efcl.info/2015/12/31/oss-in-2015/">去年</a>との比較用に<a href="https://github.com/Naramsim/GithubOriginalStreak" title="GithubOriginalStreak">GithubOriginalStreak</a>を使って古い形でGitHubのContributionsを出してみた。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483152418.png" alt="Original Contributes Graph"></p>

<p>3年ぐらい毎日コミットが続いてる。けど、2016年の後半がだらけててコミット数が少なくなってる。</p>

<p>後、<a href="https://azu.github.io/github-longest-streak/" title="GitHub Full Longest Streak">GitHub Full Longest Streak</a>を使うと、GitHubのStreakを取ることができます。
(他のツールみたいに365日制限とかなく、GitHubにアカウントを作ってからの全データが見れます)</p>

<ul>
<li><a href="https://azu.github.io/github-longest-streak/?user=azu">https://azu.github.io/github-longest-streak/?user=azu</a></li>
</ul>

<p>以前のまとめ</p>

<ul>
<li><a href="http://efcl.info/2015/12/31/oss-in-2015/">今年のOSS活動振り返り @ 2015 | Web Scratch</a></li>
<li><a href="http://efcl.info/2014/12/31/oss-in-2014/">今年のOSS活動振り返り @ 2014 | Web Scratch</a></li>
</ul>

<h2 id="issue-pr">Issue/PR</h2>

<ul>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2016-01-01..2017-01-01+is%3Apr+&amp;type=Issues&amp;ref=searchresults">PRs</a>: 457</li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2016-01-01..2017-01-01+is%3Aissue&amp;type=Issues&amp;ref=searchresults">Issues</a>: 392</li>
</ul>

<h2 id="作ったもの"><a href="https://github.com/search?o=asc&amp;q=user%3Aazu+created%3A2016-01-01..2017-01-01&amp;ref=searchresults&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93">作ったもの</a></h2>

<h2 id="textlint"><a href="https://github.com/textlint/textlint" title="textlint">textlint</a></h2>

<p>自然言語をLintするtextlint関係のものは相変わらず大量に作ったものがある。</p>

<ul>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a>

<ul>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>とコードカバレッジについて考えていて色々カバレッジ周りを作ってた</li>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov: textlint formatter for lcov format</a></li>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov: textlint formatter for codecov json.</a></li>
<li><a href="https://github.com/azu/codecov-json-to-lcov">azu/codecov-json-to-lcov: Convert Codecov json format to lcov format.</a></li>
<li><a href="https://github.com/azu/lcov-summary">azu/lcov-summary: Cat lcov file and show summary of coverage to terminal.</a></li>
</ul></li>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a>

<ul>
<li><a href="http://efcl.info/2016/03/22/match-index/" title="正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ | Web Scratch">正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ | Web Scratch</a></li>
<li>正規表現でキャプチャした位置を配列で取得できるので便利</li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a> のために作った</li>
</ul></li>
<li><a href="http://efcl.info/2016/12/14/create-textlint-rule/">textlintのルールを簡単に作り始めることができるツールを作りました | Web Scratch</a>

<ul>
<li><a href="https://github.com/textlint/create-textlint-rule">textlint/create-textlint-rule: Create textlint rule project with no configuration.</a></li>
<li><a href="https://github.com/textlint/textlint-scripts">textlint/textlint-scripts: textlint npm-run-scripts CLI help to create textlint rule.</a></li>
<li>create-react-appのように一発でtextlintルールを作り始めることができるツールを書いた</li>
<li>Node.jsを普段触らない人にもルールを書きやすくするために作った</li>
</ul></li>
</ul>

<h3 id="作ったルール">作ったルール</h3>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット">textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-nfd">azu/textlint-rule-no-nfd: textlint rule that disallow to use NFD well-known as UTF8-MAC 濁点.</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-hankaku-kana">azu/textlint-rule-no-hankaku-kana: textlint rule that disallow to use 半角カタカナ.</a></li>
<li><a href="https://github.com/azu/textlint-rule-web-plus-db">azu/textlint-rule-web-plus-db: [unofficial] WEB+DB PRESS用語統一ルール for textlint</a></li>
<li><a href="https://github.com/azu/textlint-rule-no-exclamation-question-mark">azu/textlint-rule-no-exclamation-question-mark: textlint rule that disallow exclamation and question mark.</a></li>
<li><a href="https://github.com/azu/textlint-rule-eslint" title="azu/textlint-rule-eslint: textlint rule integrate with ESLint.">azu/textlint-rule-eslint: textlint rule integrate with ESLint.</a></li>
<li><a href="https://github.com/azu/prh.yml" title="azu/prh.yml: A collection of prh.yml">azu/prh.yml: A collection of prh.yml</a>

<ul>
<li>辞書</li>
</ul></li>
<li><a href="https://github.com/azu/textlint-rule-date-weekday-mismatch" title="azu/textlint-rule-date-weekday-mismatch: textlint rule that found mismatch between date and weekday.">azu/textlint-rule-date-weekday-mismatch: textlint rule that found mismatch between date and weekday.</a>

<ul>
<li>日付と曜日の不一致を見つける</li>
</ul></li>
<li>...etc

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a>を見て</li>
</ul></li>
</ul>

<h2 id="アーキテクチャ周り">アーキテクチャ周り</h2>

<h3 id="javascriptプラグインアーキテクチャの本"><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScriptプラグインアーキテクチャの本">JavaScriptプラグインアーキテクチャの本</a></h3>

<ul>
<li><a href="https://www.gitbook.com/book/azu/javascript-plugin-architecture/details">JavaScript Plugin Architecture · GitBook</a></li>
<li><a href="http://efcl.info/2016/06/06/JavaScript-Plugin-Architecture/">JavaScript Plugin Architectureというプラグイン設計について学ぶ無料の電子書籍を書いた | Web Scratch</a>

<ul>
<li>JavaScriptライブラリやツールのアーキテクチャについて書いた薄い本</li>
<li>connect/ESLint/jQuery/gulpなどの仕組みについて書いた</li>
</ul></li>
</ul>

<h3 id="almin"><a href="https://github.com/almin/almin" title="Almin">Almin</a></h3>

<p><a href="https://github.com/almin/almin"><img src="https://almin.github.io/media/logo/logo.png" alt="Almin.js logo"></a></p>

<p>中規模(3.5万~10万LOC)以上のプロジェクトを想定して<a href="https://github.com/almin/almin" title="almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application">almin/almin: Almin.js provide Flux/CQRS patterns for JavaScript application</a>というライブラリを作った。
(中規模の定義は<a href="https://www.amazon.co.jp/dp/489100522X/" title="ソフトウェア見積り">ソフトウェア見積り</a>より)</p>

<p>いわゆるReduxとかそういう類のFluxライブラリみたいなものです。
実装自体は大したことないですが、思想的にDDD/CQRS/Fluxを適応することを前提としたドキュメントやサンプル構成になっている感じです。</p>

<p><a href="https://github.com/azu/e-commerce-DDD-CQRS">色々</a>な<a href="https://github.com/azu/svg-feeling">サンプル</a>を<a href="https://github.com/azu/CQRS-train" title="azu/CQRS-train: CQRS concept">作って</a>は捨ててまた<a href="https://github.com/azu/presentation-annotator">作ってを繰り返して</a>できたものです。</p>

<p>この一年ぐらいはこれについて色々やっていて、数千万回以上はブラウザで動いてると思いますが、Almin自体が原因のバグは見なかったのである程度安定はしてるのかなと思います。</p>

<p>複雑なJavaScriptアプリケーション作るに当たって考えることや実践したことについては以下のスライドやリポジトリにまとめてあります。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/react-meetup/large-scale-javascript.html" title="複雑なJavaScriptアプリケーションを考えながら作る話">複雑なJavaScriptアプリケーションを考えながら作る話</a></li>
<li><a href="https://github.com/azu/large-scale-javascript" title="azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></li>
<li><a href="http://efcl.info/2016/09/30/architecture-refs/" title="アーキテクチャをめぐるたび | Web Scratch">アーキテクチャをめぐるたび | Web Scratch</a></li>
</ul>

<p>後は<a href="https://github.com/almin/almin/pull/62" title="feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin">feat(Dispatcher): Introduce DispatcherPayloadMeta by azu · Pull Request #62 · almin/almin</a>この辺のPRを処理できたら、1.0に向けてのリリース出していきたい感じ。</p>

<p>クライアントサイドのDDDとか色々考えて実践してたけど、ちゃんと考えればできるんだなーという印象。(イベントソーシングはちょっとまだ課題がある)</p>

<p>TypeScriptとかじゃなくてただのJavaScript(<a href="https://github.com/azu/jsdoc-to-assert">jsdoc-to-assert</a>とかは使ってる)でも、ちゃんと設計すれば中規模ぐらいのコードベースはちゃんと読めるように書けることが分かってよかった。(というかコードの読みやすさにおいては、型よりも設計の方が重要そう。両方あると便利だけど、ツールのコストが高くなる。)</p>

<h3 id="jsdoc-to-assert">jsdoc-to-assert</h3>

<p>JSDocをランタイムassertに変換するライブラリとBabelプラグイン。
入れるだけで、JSDocの型チェックが実行時に走るようになる。
productionビルド時は外してやるので、コスパいい感じで結構使ってる。</p>

<ul>
<li><a href="https://github.com/azu/babel-preset-jsdoc-to-assert">azu/babel-preset-jsdoc-to-assert: Babel preset for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>プロダクションや自分の書いてるライブラリとかには大体入れてドッグフーディングしたので、だいぶ安定したと思う。</p>

<p>チェックも<code>@param</code>だけではなく<code>@type</code>(デフォルトオフだけど)にも対応してたり、引数は大体チェックできる。</p>

<p>モチベーションとしてJSDocと実装の齟齬を見つけやすくすることがあるので、これを入れてJSDocを書いてると結構適当な書き方してると落とせて便利。</p>

<p>紹介記事</p>

<ul>
<li><a href="http://efcl.info/2016/03/25/jsdoc-to-assert/" title="JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch">JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch</a></li>
<li><a href="http://akabeko.me/blog/2016/08/jsdoc-to-assert/">jsdoc-to-assert を試す – アカベコマイリ</a></li>
<li><a href="http://www.d-wood.com/blog/2016/11/11_8536.html">babel-preset-jsdoc-to-assert で JSDoc から assertion を自動生成する | deadwood</a></li>
</ul>

<p>Babel使ってるなら入れるとメリットがあって、デメリット殆どないので、power-assertみたいな感じのツール。(ただしJSDoc書いてないとあんまり意味はない)</p>

<ul>
<li><a href="http://efcl.info/2016/04/14/espower-babel-is-deprecated/" title="power-assert + babel as a development tool | Web Scratch">power-assert + babel as a development tool | Web Scratch</a></li>
</ul>

<h3 id="documentation"><a href="https://github.com/documentationjs/documentation" title="documentation">documentation</a></h3>

<p><a href="https://github.com/documentationjs/documentation" title="documentation">documentation</a>というJSDocが書いてあるJavaScriptから、HTMLやMarkdownのリファレンスを吐くツールがある。</p>

<p>これのデフォルトのMarkdown出力がイケてないのでテーマを作った</p>

<ul>
<li><a href="https://github.com/azu/documentation-markdown-api-theme" title="azu/documentation-markdown-api-theme: markdown theme for documentation.js">azu/documentation-markdown-api-theme: markdown theme for documentation.js</a></li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2016/12/31-1483170405.png" alt="reference"></p>

<p>例) <a href="https://github.com/azu/ui-event-observer#usage" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a></p>

<p><a href="https://github.com/documentationjs/documentation/issues/550" title="--theme for Markdown · Issue #550 · documentationjs/documentation">--theme for Markdown · Issue #550 · documentationjs/documentation</a>のせいで、あんまり扱いやすくはないけど、結構いい感じの出力が出せる。</p>

<ul>
<li><a href="https://github.com/azu/add-text-to-markdown" title="azu/add-text-to-markdown: Add stdin text to exist markdown file.">azu/add-text-to-markdown: Add stdin text to exist markdown file.</a>

<ul>
<li>Markdownのテキストを指定したセクションに書き出すライブラリ</li>
<li>上のdocumentationと合わせて使うと、READMEの一部を更新することができる</li>
</ul></li>
</ul>

<h2 id="javascriptの入門本">JavaScriptの入門本</h2>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/">Introduction · JavaScriptの入門書 #jsprimer</a></li>
<li><a href="https://github.com/asciidwango/js-primer">asciidwango/js-primer: JavaScriptの入門書</a></li>
</ul>

<p>ES2015+を前提としてたJavaScriptの入門書を書いてる。</p>

<blockquote>
<p>この書籍はES2015以降をベースとしたJavaScript入門書となる予定です。
基本的なStableのECMAScriptのバージョンを扱います。</p>

<p>プログラミングをやったことがあるが、今のJavaScriptがよくわからないという人が、
今のJavaScriptアプリケーションを読み書きできるようになることを目標にする内容です。
(プログラミングが初めてという人が対象ではないです)
-- <a href="https://github.com/asciidwango/js-primer/issues/6" title="[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer">[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer</a></p>
</blockquote>

<p>ソースコードなども公開されてるオープンソースなプロジェクトです。
興味がある人はIssueなどで意見とかくれると嬉しいです。</p>

<p>去年の<a href="http://efcl.info/2015/12/31/oss-in-2015/" title="今年のOSS活動振り返り @ 2015 | Web Scratch">今年のOSS活動振り返り @ 2015</a>で次のような目標を書いてた。</p>

<blockquote>
<p>JavaScript/ECMAScriptを改めてどう学べばいいのか考える
<a href="https://github.com/azu/how-to-learn-es6" title="azu/how-to-learn-es6: How to learn ECMAScript2015 for Beginner?">azu/how-to-learn-es6: How to learn ECMAScript2015 for Beginner?</a></p>
</blockquote>

<p>この目標を行動に移したのが、この本です。
予想したどおり、大きなものを書く場合モチベーションの維持が一番の課題なので、小さく意見を聞きながら進められるようにしたいなー</p>

<p>今年中にはなんとかする。</p>

<h2 id="その他">その他</h2>

<ul>
<li><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>

<ul>
<li><a href="http://efcl.info/2016/12/31/ecmascript-daily/" title="ECMAScriptの情報サイトを始めて1年経った | Web Scratch">ECMAScriptの情報サイトを始めて1年経った | Web Scratch</a></li>
<li>ECMAScriptの情報サイト始めた</li>
<li>仕様に近い情報のメモ書きみたいな</li>
</ul></li>
<li>package.json編集系 CLI

<ul>
<li><a href="https://github.com/azu/rewrite-npm-run-build-production-env">azu/rewrite-npm-run-build-production-env: Add npm run build to NODE_ENV=production.</a></li>
<li><a href="https://github.com/azu/transfer-github-owner">azu/transfer-github-owner: Rewrite repository info on README/package.json for transferring GitHub repository.</a>

<ul>
<li>GitHubでTransferした後にpackage.jsonとかREADMEを書き換えるツール</li>
</ul></li>
</ul></li>
<li><a href="https://github.com/azu/bellows-logger" title="azu/bellows-logger: Flexible/Connectable logger library for JavaScript.">azu/bellows-logger: Flexible/Connectable logger library for JavaScript.</a>

<ul>
<li>プラガブルに拡張可能なロガーライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/strict-eval" title="azu/strict-eval: eval code in vm module, but always strict mode.">azu/strict-eval: eval code in vm module, but always strict mode.</a>

<ul>
<li>Node.jsのvmモジュールで常にstrict modeにしてevalするライブラリ</li>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>でサンプルコードのstrict modeを保証するテストに使ってる</li>
</ul></li>
<li><a href="https://azu.github.io/ecmascript-version-detector/">ECMAScript Version Detector</a>

<ul>
<li><a href="http://efcl.info/2016/08/04/ecmascript-version-detector/">そのコードが標準化されてるJavaScriptなのかを判定する方法 | Web Scratch</a></li>
<li>JavaScriptのコードをパースしてECMAScriptのバージョンを出すやつ</li>
</ul></li>
<li><a href="https://github.com/azu/github-to-twitter-lambda" title="azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.">azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.</a>

<ul>
<li><a href="http://efcl.info/2016/06/09/github-to-twitter-lambda/" title="AWS lambdaでGitHubのアクティビティをTwitterで読む用に投稿する | Web Scratch">AWS lambdaでGitHubのアクティビティをTwitterで読む用に投稿する | Web Scratch</a></li>
<li>GitHubのNotificationやActivityをTwitterに投げるlambda bot</li>
<li>同様のことやってる人: <a href="http://massa142.hatenablog.com/entry/2016/12/27/000430" title="情報収集方法まとめ 2016年12月版 - massa142&amp;#39;s blog">情報収集方法まとめ 2016年12月版 - massa142&#39;s blog</a></li>
<li>lambdaでずっと回してるけど大分安定してる</li>
<li>月に$1かからないのでお手軽</li>
</ul></li>
</ul>

<p><img src="https://monosnap.com/file/xQqM9kqLjL6fm6qUmdz2oyayeOGo7y.png" alt="コスト"></p>

<ul>
<li><a href="https://github.com/azu/performance-logger" title="azu/performance-logger: Simple Perf logger based on `performance.mark` API.">azu/performance-logger: Simple Perf logger based on <code>performance.mark</code> API.</a>

<ul>
<li><a href="http://efcl.info/2016/08/15/performance.mark/" title="performance.markでパフォーマンス計測する | Web Scratch">performance.markでパフォーマンス計測する | Web Scratch</a>の記事用に書いた</li>
</ul></li>
<li><a href="https://github.com/azu/file-cache-cli" title="azu/file-cache-cli: Command line tools that filter file paths by cached data.">azu/file-cache-cli: Command line tools that filter file paths by cached data.</a>

<ul>
<li>パイプで渡したファイルをキャッシュでフィルターするCLI</li>
</ul></li>
<li><a href="https://github.com/azu/add-deploy-key-to-github" title="azu/add-deploy-key-to-github: Add deploy to GitHub from command line.">azu/add-deploy-key-to-github: Add deploy to GitHub from command line.</a>

<ul>
<li>GitHubリポジトリにDeploy Keyを追加するCLI</li>
<li><a href="http://efcl.info/2016/09/27/deploy-from-travis-ci-to-gh-pages/" title="Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch">Travis CIからgh-pagesへデプロイする設定 via SSH/git push | Web Scratch</a> コレ用</li>
</ul></li>
<li><a href="https://github.com/azu/react-routing-resolver" title="azu/react-routing-resolver: Routing component, but It does&amp;#39;t mount component. It&amp;#39;s just resolver.">azu/react-routing-resolver: Routing component, but It does&#39;t mount component. It&#39;s just resolver.</a>

<ul>
<li>コンポーネントじゃなくてURLに対する処理を書くことができるRouter</li>
<li>Jestで始めてテスト書いた</li>
</ul></li>
<li><a href="https://github.com/azu/text-testing" title="azu/text-testing: Testing library for structured texts.">azu/text-testing: Testing library for structured texts.</a>

<ul>
<li><a href="http://efcl.info/2016/09/14/text-testing/" title="文章をTDDする | Web Scratch">文章をTDDする | Web Scratch</a></li>
<li>文章に対してBDD的にテストを書くライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/job-draft-draft" title="azu/job-draft-draft: ドラフトのドラフト">azu/job-draft-draft: ドラフトのドラフト</a>

<ul>
<li>Job Draftに投稿したやつ</li>
</ul></li>
<li><a href="https://github.com/azu/slug-command" title="azu/slug-command: A command line tool for slug">azu/slug-command: A command line tool for slug</a>

<ul>
<li>文字列からslug(パーマネントリンクに使う文字列)を作るやつ</li>
<li>jser.infoの記事で使ってる</li>
</ul></li>
<li>メールマガジンパース

<ul>
<li><a href="https://github.com/azu/extract-links-mail-magazine">azu/extract-links-mail-magazine: Extract link in mail magazine like JavaScript Weekly.</a></li>
<li><a href="https://github.com/azu/weekly-meta">azu/weekly-meta</a></li>
<li>JavaScript WeeklyとかをパースしてURLを取り出すやつ</li>
<li>それを処理するAPI gatewayのAPI</li>
</ul></li>
<li><a href="https://github.com/azu/react-toggle-pattern" title="azu/react-toggle-pattern: React Component that provide toggle pattern">azu/react-toggle-pattern: React Component that provide toggle pattern</a>

<ul>
<li>Reactのコンポーネントをトグルするパターンを提供するライブラリ</li>
<li><a href="http://efcl.info/2016/05/31/react-toggle-pattern/" title="Reactで条件によって出したり消したりするコンポーネントを書いた | Web Scratch">Reactで条件によって出したり消したりするコンポーネントを書いた | Web Scratch</a></li>
<li>トグルするボタンとかに使う用途で書いた</li>
<li>フォーカスの維持とか面倒な事をやった記憶がある</li>
</ul></li>
<li><a href="https://github.com/azu/babel-plugin-strip-function-call" title="azu/babel-plugin-strip-function-call: Babel plugin strip any function call.">azu/babel-plugin-strip-function-call: Babel plugin strip any function call.</a>

<ul>
<li>指定した関数コールを削除するBabelプラグイン</li>
<li>productionビルド時にログの呼び出し自体を消す目的</li>
</ul></li>
<li><a href="https://github.com/azu/pkg-to-readme" title="azu/pkg-to-readme: Generate README.md from pacakge.json">azu/pkg-to-readme: Generate README.md from pacakge.json</a>

<ul>
<li><code>pacakge.json</code>とテンプレートファイルからREADMEを作るツール</li>
</ul></li>
<li><a href="https://github.com/azu/map-like" title="azu/map-like: ES2015 Map like object">azu/map-like: ES2015 Map like object</a>

<ul>
<li>ES2015の<code>Map</code>のshim的なライブラリ</li>
<li>ファイルサイズが小さくてMapみたいなものは結構欲しいのでよく使ってる</li>
<li>オブジェクトをMapみたいに使うのは辞めたい</li>
</ul></li>
<li><a href="https://github.com/azu/lru-map-like" title="azu/lru-map-like: LRU cache top on Map-like. Support non-string key.">azu/lru-map-like: LRU cache top on Map-like. Support non-string key.</a>

<ul>
<li>LRUの実装。</li>
<li>ファイルサイズが小さいのが欲しかった</li>
</ul></li>
<li><a href="https://github.com/azu/mu-pdf-viewer" title="azu/mu-pdf-viewer: PDF viewer on electron.">azu/mu-pdf-viewer: PDF viewer on electron.</a>

<ul>
<li>PDFリーダアプリ</li>
<li>キーバインドやスクロール量が調整されてる感じ</li>
<li><a href="http://efcl.info/2016/10/12/mu-pdf-viewer/" title="pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch">pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch</a></li>
<li><a href="http://efcl.info/2016/11/07/mu-pdf-search/" title="mu-pdf-viewerに検索一覧をつけた | Web Scratch">mu-pdf-viewerに検索一覧をつけた | Web Scratch</a></li>
</ul></li>
<li><a href="https://azu.github.io/t_wada_generator/" title="t_wada generator">t_wada generator</a>

<ul>
<li>@t_wadaさん生成</li>
</ul></li>
<li><a href="https://github.com/azu/dayone-to-quiver" title="azu/dayone-to-quiver: Convert DayOne&amp;#39;s Journal.dayone to Quiver notebook file.">azu/dayone-to-quiver: Convert DayOne&#39;s Journal.dayone to Quiver notebook file.</a>

<ul>
<li>DayOneからQuiverに移行するツール</li>
<li><a href="http://efcl.info/2016/02/03/quiver/" title="メモアプリをDayOneからQuiverに移行した | Web Scratch">メモアプリをDayOneからQuiverに移行した | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a>

<ul>
<li><a href="http://efcl.info/2016/11/02/ui-event-observer/" title="同じイベントのaddEventListenerを1つにまとめるライブラリを書いた | Web Scratch">同じイベントのaddEventListenerを1つにまとめるライブラリを書いた | Web Scratch</a></li>
<li>DOMイベントを扱いやすくするライブラリ</li>
<li>これもMap like使ってる</li>
</ul></li>
<li><a href="https://github.com/azu/morpheme-match">azu/morpheme-match: match function that match token(形態素解析) with sentence.</a></li>
<li><a href="https://github.com/azu/morpheme-match-all">azu/morpheme-match-all: A wrapper of morpheme-match API. Match all kuromoji&#39;s tokens.</a>

<ul>
<li>kuromojiの形態素解析結果に対するマッチャーライブラリ</li>
</ul></li>
<li><a href="https://github.com/azu/gitbook-plugin-js-console" title="azu/gitbook-plugin-js-console: GitBook plugin that provide interactive JavaScript console">azu/gitbook-plugin-js-console: GitBook plugin that provide interactive JavaScript console</a>

<ul>
<li><a href="https://github.com/azu/codemirror-console-ui" title="azu/codemirror-console-ui: UI Components of codemirror-console.">azu/codemirror-console-ui: UI Components of codemirror-console.</a>のGitBook plugin</li>
<li>JavaScriptのコードをREPLにできる</li>
</ul></li>
<li><a href="https://github.com/azu/github-longest-streak" title="azu/github-longest-streak: Online Viewer for GitHub Full Longest Streak.">azu/github-longest-streak: Online Viewer for GitHub Full Longest Streak.</a>

<ul>
<li>GitHubのLongest Streakを取れるやつ</li>
<li>SVGをパースして全期間から取れるようになってる</li>
</ul></li>
<li><a href="https://github.com/azu/eslint-plugin-no-allow-react-context" title="azu/eslint-plugin-no-allow-react-context: Not allow to use React context without specific directory.">azu/eslint-plugin-no-allow-react-context: Not allow to use React context without specific directory.</a>

<ul>
<li>指定した場所以外でReact Contextを使えなくするESLintプラグイン</li>
</ul></li>
<li><a href="https://github.com/azu/stylelint-disallow-selector" title="azu/stylelint-disallow-selector: stylelint rule disallow specific selector">azu/stylelint-disallow-selector: stylelint rule disallow specific selector</a>

<ul>
<li>使ってはいけないセレクタを指定するstylelintプラグイン</li>
</ul></li>
</ul>

<h2 id="ゴミ箱行き">ゴミ箱行き</h2>

<p>作ってみたけど諦めたもの</p>

<ul>
<li><a href="https://github.com/azu/jscode-to-svg" title="azu/jscode-to-svg: Syntax Highlighted JavaScript code to SVG">azu/jscode-to-svg: Syntax Highlighted JavaScript code to SVG</a>

<ul>
<li>JavaScriptのコードからシンタックスハイライトをしたコードのSVGを吐くライブラリ</li>
</ul></li>
<li>Gitの履歴から自動的に正誤表を作ってチェックするツール

<ul>
<li><a href="https://github.com/azu/git-log-to-errata" title="azu/git-log-to-errata: Git log to errata list.">azu/git-log-to-errata: Git log to errata list.</a></li>
<li><a href="https://github.com/azu/textlint-rule-git-log-to-errata" title="azu/textlint-rule-git-log-to-errata: git log to eratta rule">azu/textlint-rule-git-log-to-errata: git log to eratta rule</a></li>
</ul></li>
<li>Asciidocのパーサ

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="azu/textlint-plugin-asciidoc-loose: AsciiDoc/Asciidoctor loose support for textlint.">azu/textlint-plugin-asciidoc-loose: AsciiDoc/Asciidoctor loose support for textlint.</a></li>
<li>tmbundleを元に正規表現でAsciidocをパースしてtextlintで動かすやつ</li>
<li>一応動いてていて、トークナイズはできてるけど、ASTに組み立てるのが難しくて断念気味</li>
</ul></li>
<li><a href="https://github.com/azu/react-defer-render" title="azu/react-defer-render: ReactDeferRender defer first rendering of specific component.">azu/react-defer-render: ReactDeferRender defer first rendering of specific component.</a>

<ul>
<li>クライアントでReactをrenderするとコンポーネントが多いほど初期化時間が長くなる</li>
<li>なのでレンダリングを段階的にすることを目的にしたライブラリ</li>
<li>一応動いているけど、もう少しアドホックな感じのもの書いて使ってる。</li>
</ul></li>
<li><a href="https://github.com/azu/weekly-snippets" title="azu/weekly-snippets: 週報 Issue">azu/weekly-snippets: 週報 Issue</a>

<ul>
<li>週報をやってみたけどモチベーションが続かなかった</li>
<li>良い方法と一緒にやる人が必要だなと思った</li>
<li>何かいい方法ないかな?</li>
</ul></li>
</ul>

<h2 id="来年">来年</h2>

<ul>
<li><a href="https://github.com/almin/almin" title="Almin">Almin</a>

<ul>
<li>もう少し使ってもらえるように何かをやるかもしれない</li>
<li>ステートソーシングについてはある程度やったのでイベントソーシングをクライアントでやるにはどうするかを考えたい</li>
</ul></li>
<li><a href="https://github.com/asciidwango/js-primer">asciidwango/js-primer: JavaScriptの入門書</a>

<ul>
<li>どうにか仕上げたい</li>
</ul></li>
<li><a href="https://github.com/azu/weekly-snippets" title="azu/weekly-snippets: 週報 Issue">週報 Issue</a>

<ul>
<li>何かいい方法で継続したいなー</li>
<li>基本的に場所と必要性があれば継続できる人なので、何かが足りなかった</li>
</ul></li>
<li>JSer.infoのような情報サイトについて

<ul>
<li><a href="https://github.com/jser/jser.info/issues/85" title="中期的なまとめ記事 · Issue #85 · jser/jser.info">中期的なまとめ記事 · Issue #85 · jser/jser.info</a></li>
<li>この辺について何か行動を起こしたい</li>
<li>未知の要素が強くて行動が出しにくいという部分が大きい(できるだけコスト取りたくない)</li>
<li>リスクとコストと効果のバランスを決定してから動かすのがいいのかな?</li>
</ul></li>
</ul>

<p>追記: <a href="https://gist.github.com/azu/143eda871afd3b52790767721c6865b3" title="2017-01-01 今年やりたいこと">2017-01-01 今年やりたいこと</a></p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint --cacheオプションでチェックを高速化した</title>
   <link href="http://efcl.info/2016/12/28/textlint-cache/"/>
   <updated>2016-12-28T09:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/28/textlint-cache</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> 7.2.0で <code>--cache</code> と <code>--cache-location</code> オプションをサポートしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/7.2.0" title="Release 7.2.0 · textlint/textlint">Release 7.2.0 · textlint/textlint</a></li>
</ul>

<p>基本的にはESLintのキャッシュオプションと同じです。
前回のLint結果のキャッシュから変化したファイルのみがチェックの対象になる仕組みです。</p>

<ul>
<li><a href="http://eslint.org/docs/user-guide/command-line-interface#caching" title="Command Line Interface - ESLint - Pluggable JavaScript linter">Command Line Interface - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><code>textlint</code>コマンドに <code>--cache</code> オプションを付けて実行するだけです。
後は、毎回このコマンドを付けて実行すれば変更したファイルのみがチェック対象になるので、実行時間が高速化されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">textlint --cache docs/
</code></pre></div>
<p><code>--cache</code>オプションを付けるとデフォルトでは、 <code>.textlintcache</code> という名前のファイルにキャッシュができます。</p>

<p>キャッシュファイルを任意の名前にしたい場合は <code>--cache-location</code> オプションで指定した場所にキャッシュファイルを作ることができます。</p>

<h2 id="実行例">実行例</h2>

<p>自分が知ってる中では一度にtextlintがやる処理が一番多い<a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>で試してみます。</p>

<p>このプロジェクトではファイル数やルール数が多いのもそうですが、textlintの中でESLintを動かしてJavaScriptのコードもチェックしてたりキャッシュの有無がかなり速度に影響がありました。</p>

<ul>
<li><a href="http://efcl.info/2016/07/06/eslint-with-textlint/" title="MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch">MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch</a></li>
</ul>

<h3 id="cacheなし">--cacheなし</h3>

<p>15秒ぐらいかかって遅い。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint:no-cached

&gt; js-primer@1.0.0 textlint:no-cached /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error

npm run textlint:no-cached  14.68s user 1.18s system 99% cpu 15.926 total
</code></pre></div>
<h3 id="cacheあり">--cacheあり</h3>

<p>3秒程度になった。
(1つファイルを変更した状態で実行)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint

&gt; js-primer@1.0.0 textlint /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error --cache

npm run textlint  2.17s user 0.41s system 85% cpu 3.022 total
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p><code>--cache</code> をつけるだけで結構実行時間が変わるので、大量のファイルをtextlintで繰り返しチェックしている場合は試してみてください。</p>

<p>また、エディタ連携系なら元々1つのファイルのみを対象に実行しているはずなので、キャッシュなくても普通な速度で動くと思います。</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする - Qiita</a></li>
<li><a href="http://post.simplie.jp/posts/51">textlintで日本語の文章を校正する方法とAtomへの導入手順 | Simplie Post</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintのルールを簡単に作り始めることができるツールを作りました</title>
   <link href="http://efcl.info/2016/12/14/create-textlint-rule/"/>
   <updated>2016-12-14T20:31:00+09:00</updated>
   <id>http://efcl.info/2016/12/14/create-textlint-rule</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a>はJavaScriptで自由にルールを追加することができる仕組みになっています。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/" title="textlintで日本語の文章をチェックする | Web Scratch">textlintで日本語の文章をチェックする | Web Scratch</a></li>
</ul>

<p>しかし、普段JavaScriptをあんまり使ってない人には<a href="https://babeljs.io/" title="Babel">Babel</a>を使ったコード変換や<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストの設定など、ルールを書き始めるまでの環境づくりの方が大変です。</p>

<p>そのような環境設定をコマンド一発で作れて、textlintルールを作り始めることができるツールを作りました。</p>

<ul>
<li><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>

<ul>
<li>Scaffolding Tool</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>

<ul>
<li>BabelやMochaなどのコマンドをラップしたもの</li>
</ul></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を <a href="https://www.npmjs.com/">npm</a>(Node.jsのパッケージマネージャ)でインストールするだけです。
Node.js(推奨はver6以上)をインストールすれば <code>npm</code> コマンドが自動で入っています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g create-textlint-rule
</code></pre></div>
<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>をインストールすると<code>create-textlint-rule</code>コマンドが利用できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule --help

  Create textlint rule with no configuration

  Usage
    <span class="nv">$ </span>create-textlint-rule rule-name

  Options
    --help  Show <span class="nb">help</span>
    --yarn  Use yarn <span class="k">for</span> installing
    --yes   Pass --yes all <span class="k">for</span> install process

  Examples
    <span class="nv">$ </span>create-textlint-rule awesome-rule
</code></pre></div>
<h3 id="textlintのルールプロジェクトを作る">textlintのルールプロジェクトを作る</h3>

<p><code>found-bug</code>という&quot;bug&quot;をテキストから見つけるルールプロジェクトを作ってみます。</p>

<p>次のように、引数にルール名を渡すだけで、<code>textlint-rule-found-bug</code>というディレクトリにtextlintのルールが作成されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
</code></pre></div>
<p>実際のログは次のような感じで、一部対話的にルールの簡単な<code>description</code>などを入力しますが、基本的にはEnterでいいはずです。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
Cloning into <span class="s1">&#39;textlint-rule-found-bug&#39;</span>...
remote: Counting objects: 9, <span class="k">done</span>.
remote: Compressing objects: 100% <span class="o">(</span>7/7<span class="o">)</span>, <span class="k">done</span>.
remote: Total <span class="m">9</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">4</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused 0
Unpacking objects: 100% <span class="o">(</span>9/9<span class="o">)</span>, <span class="k">done</span>.
<span class="nb">cd</span> /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug
Initialized empty Git repository in /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/.git/
Input information about your textlint rule
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See <span class="sb">`</span>npm <span class="nb">help </span>json<span class="sb">`</span> <span class="k">for</span> definitive documentation on these fields
and exactly what they <span class="k">do</span>.

Use <span class="sb">`</span>npm install &lt;pkg&gt; --save<span class="sb">`</span> afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any <span class="nb">time </span>to quit.
name: <span class="o">(</span>textlint-rule-found-bug<span class="o">)</span>
version: <span class="o">(</span>1.0.0<span class="o">)</span>
description: This textlint rule found bugs.
git repository:
license: <span class="o">(</span>MIT<span class="o">)</span>
About to write to /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/package.json:

<span class="o">{</span>
  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;1.0.0&quot;</span>,
  <span class="s2">&quot;keywords&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;textlint&quot;</span>,
    <span class="s2">&quot;rule&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;main&quot;</span>: <span class="s2">&quot;lib/index.js&quot;</span>,
  <span class="s2">&quot;files&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;lib/&quot;</span>,
    <span class="s2">&quot;src/&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;scripts&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;textlint-scripts test&quot;</span>,
    <span class="s2">&quot;build&quot;</span>: <span class="s2">&quot;textlint-scripts build&quot;</span>,
    <span class="s2">&quot;prepublish&quot;</span>: <span class="s2">&quot;npm run --if-present build&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;devDependencies&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;textlint-scripts&quot;</span>: <span class="s2">&quot;^1.2.2&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;textlint-rule-found-bug&quot;</span>,
  <span class="s2">&quot;description&quot;</span>: <span class="s2">&quot;This textlint rule found bugs.&quot;</span>,
  <span class="s2">&quot;directories&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;test&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;azu&quot;</span>,
  <span class="s2">&quot;license&quot;</span>: <span class="s2">&quot;MIT&quot;</span>
<span class="o">}</span>


Is this ok? <span class="o">(</span>yes<span class="o">)</span>
Wait... Installing npm packages <span class="k">for</span> development
Setup your README!
Generated README.md
✔ Complete: Let<span class="err">&#39;</span>s create textlint rule
</code></pre></div>
<p>作成した<code>textlint-rule-found-bug</code>ディレクトリには、次のようなファイルが作られています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint-rule-found-bug/
├── README.md
├── lib
│   ├── index.js
│   └── index.js.map
├── node_modules
├── package.json
├── src
│   └── index.js
└── test
    └── index-test.js
</code></pre></div>
<p>基本的には<code>src/index.js</code>にルールのコードを書いていき、<code>test/index-test.js</code>にルールのテストを書きます。</p>

<p><code>lib/</code>はnpmで公開するコードが置かれる場所なので、デフォルトでは<code>.gitignore</code>されているためいじる必要はありません。</p>

<h3 id="build">Build</h3>

<p>次のコマンドを叩くことで、<code>src/</code>以下にあるES2015+で書かれたコードを<a href="https://babeljs.io/" title="Babel">Babel</a>を使って変換し<code>lib/</code>以下においてくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run build
</code></pre></div>
<h3 id="test">Test</h3>

<p>次のコマンドを叩くことで、<code>test/</code>以下にある<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>と<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストを動かします。</p>

<p>テストコードの書き方は<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>を参照してください。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm test
</code></pre></div>
<h3 id="ルールの開発">ルールの開発</h3>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule-advanced.md" title="textlint/rule-advanced.md at master · textlint/textlint">textlint/rule-advanced.md at master · textlint/textlint</a></li>
</ul>

<p>などのドキュメントがあります。</p>

<p>また、textlintはASTを元にルールを書くため、次のASTビューアを見ながら構造を知ると書きやすくなります。</p>

<ul>
<li><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></li>
</ul>

<p>簡単な方法として既存のルールからやりたい事と近いものを見つけて、それをパクるのが近道だと思います。</p>

<p>100以上のルールがあり、自分が書いたものは<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>で作った構造とほぼ同じなので、コード部分に集中すれば問題ないはずです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="publish">publish</h3>

<p>ルールの公開は基本的には<a href="https://www.npmjs.com/">npm</a>に公開します。
<code>pacakge.json</code>の<code>version</code>を上げたり<code>git tag</code>を貼るなどは<a href="https://docs.npmjs.com/cli/version" title="npm-version">npm-version</a>を使うと簡単です。
<a href="http://semver.org/lang/ja/">semver</a>なバージョンを上げたら、<a href="https://docs.npmjs.com/cli/publish" title="npm-publish">npm-publish</a>コマンドで公開すれば完了です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm version patch
# npm version minor
# npm version major
npm publish
</code></pre></div>
<p>これで、npmに公開された<code>textlint-rule-found-bug</code>が、npmでインストールすることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-found-bug
</code></pre></div>
<p>後は、<code>.textlintrc</code>に設定して使えばいいだけです。</p>

<p>作ったルールの使い方も実は<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>が自動的にREADME.mdに書いてくれています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">## Usage

Via `.textlintrc`(Recommended)

```json
{
    &quot;rules&quot;: {
        &quot;found-bug&quot;: true
    }
}
```

Via CLI

```
textlint --rule found-bug README.md
```
</code></pre></div>
<p>作ったルールはWikiに追加してみましょう。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="tips">Tips</h3>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を使い、作ったプロジェクト内で、<code>textlint</code>にルールを読み込ませて確認する方法。</p>

<p>プロジェクトをビルドして、<code>textlint</code>の<code>--rulesdir</code>で直接ルールを読み込んで使えば、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm run build
$ $(npm bin)/textlint --rulesdir ./lib/ README.md
# $(npm bin) は ./node_modules/.bin と同じなので次でもOK
$ ./node_modules/.bin/textlint --rulesdir ./lib/ README.md
</code></pre></div>
<p>もしくは、ローカルで作ったプロジェクトを<code>npm install</code>することでも、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 試したいプロジェクトで、textlint-rule-found-bugへのローカルパスを指定
$ npm install /path/to/textlint-rule-found-bug
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>と<a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>を使うことで、面倒な環境はある程度簡単に作れるようになっています。</p>

<p>面白いtextlintのルールを自作して文章を改善の助けになればと思います。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>class extends構文を使わずにArrayを継承する</title>
   <link href="http://efcl.info/2016/11/23/array-subclass-by-reflect/"/>
   <updated>2016-11-23T17:19:00+09:00</updated>
   <id>http://efcl.info/2016/11/23/array-subclass-by-reflect</id>
   <content type="html"><![CDATA[ <p>ES2015から<code>class extends</code>を使うことでクラスを継承することができます。
これにより今まで継承するのが難しかったビルトインの<code>Array</code>や<code>Error</code>の継承ができるようになってます。</p>

<ul>
<li><a href="http://speakingjs.com/es5/ch28.html" title="Chapter 28. Subclassing Built-ins">Chapter 28. Subclassing Built-ins</a></li>
<li><a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/" title="How ECMAScript 5 still does not allow to subclass array — Perfection Kills">How ECMAScript 5 still does not allow to subclass array — Perfection Kills</a></li>
</ul>

<p><code>class</code>を使うと次のように普通に<code>extends</code>できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">SubArray</span> <span class="kr">extends</span> <span class="nb">Array</span> <span class="p">{</span>
  <span class="nx">last</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">last</span><span class="p">());</span> <span class="c1">// =&gt; &quot;x&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// =&gt; &quot;1,2,3,x&quot;</span>
<span class="nx">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;no such item&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 11</span>
</code></pre></div>
<p>内部的にはprototypeであることには変わらないので、<code>class</code>という新しい構文を使わなくても同じ表現をすることがES2015からは可能です。(新しい構文じゃなくて関数的な書き方でできるという話)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">SubArray</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">construct</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">,</span> <span class="nx">SubArray</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">SubArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">last</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
<span class="nx">Reflect</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">SubArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
<span class="nx">Reflect</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">SubArray</span><span class="p">,</span> <span class="nb">Array</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">last</span><span class="p">());</span> <span class="c1">// =&gt; &quot;x&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// =&gt; &quot;1,2,3,x&quot;</span>
<span class="nx">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;no such item&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 11</span>
</code></pre></div>
<p><code>Reflect.construct</code>を使うことで<code>length</code>プロパティの特殊な動きもちゃんと継承できています。</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct">Reflect.construct() - JavaScript | MDN</a></li>
<li><a href="https://esdiscuss.org/topic/extending-an-es6-class-using-es5-syntax">extending an ES6 class using ES5 syntax?</a></li>
<li><a href="http://nazomikan.hateblo.jp/entry/2015/05/17/000755" title="exotic objectがhost objectの呼び名が変わったものという風潮 - ぶれすとつーる">exotic objectがhost objectの呼び名が変わったものという風潮 - ぶれすとつーる</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>東京Node学園祭2016 アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/13/nodefest2016/"/>
   <updated>2016-11-13T18:25:00+09:00</updated>
   <id>http://efcl.info/2016/11/13/nodefest2016</id>
   <content type="html"><![CDATA[ <p><a href="http://nodefest.jp/2016/" title="東京Node学園祭2016 | 11月12日,13日開催！">東京Node学園祭2016</a>に参加してきたのでメモ</p>

<hr>

<h2 id="demystifying-javascript-engines-alejandro-oviedo">Demystifying JavaScript Engines - Alejandro Oviedo</h2>

<ul>
<li><a href="https://github.com/a0viedo/demystifying-js-engines" title="a0viedo/demystifying-js-engines: A list of resources about JavaScript engines">a0viedo/demystifying-js-engines: A list of resources about JavaScript engines</a></li>
<li>2006年のJavaScriptエンジン

<ul>
<li>インタプリタ</li>
<li>遅い</li>
<li>最適化しても遅い</li>
</ul></li>
<li>Fortran、Self、Smalltalkの人がより良い方法を考えた

<ul>
<li>(Source) -&gt; Parse -&gt; (bytecode) -&gt; executionPhase &lt;-&gt; JIT Compiler</li>
<li>何度も実行するコードはJITコンパイラを通すようにした</li>
<li>プロパティのアクセスの最適化、Hidden Classなど色々な最適化

<ul>
<li><a href="https://github.com/v8/v8/wiki/Design%20Elements" title="Design Elements · v8/v8 Wiki">Design Elements · v8/v8 Wiki</a></li>
</ul></li>
<li><code>eval</code>と<code>try-catch</code>が最適化の邪魔になってることがある</li>
</ul></li>
<li>さらに変化して

<ul>
<li>execution phase

<ul>
<li>&lt;-&gt; unoptimiging compiler (インラインキャッシュとか)</li>
<li>&lt;-&gt; optimiging compiler</li>
</ul></li>
<li>何回か実行して、optimizeできるコードとそうでないコードを分別する</li>
</ul></li>
<li>SpiderMonkey

<ul>
<li>Interpreter(ParseとExecution) -&gt; JIT &lt;-&gt; Ionmonkey

<ul>
<li>Baseline compiler + Ionmonkey</li>
</ul></li>
<li>数百回動かして super optimize フラグがついたものはIonmonkeyで動く</li>
<li>bailoutした場合は、FallbackとしてInterpreterじゃなくてJITのコードを使ってる</li>
</ul></li>
<li>Chakra

<ul>
<li>FallbackとしてInterpreterが動く</li>
</ul></li>
<li>V8

<ul>
<li>Sourcecode

<ul>
<li>-&gt; Ignition</li>
<li>-&gt; Fullcodegen &lt;- (AST) -&gt; Crankshaft(+ TurboFan)</li>
</ul></li>
<li><a href="http://v8project.blogspot.jp/2016/08/firing-up-ignition-interpreter.html" title="V8 JavaScript Engine: Firing up the Ignition Interpreter">V8 JavaScript Engine: Firing up the Ignition Interpreter</a></li>
</ul></li>
<li>JavaScriptCode

<ul>
<li>SourceCode

<ul>
<li>-&gt; LLInt</li>
<li>-&gt; Baseline Compiler</li>
<li>-&gt; DFG Compiler</li>
<li>-&gt; FTL Compiler</li>
</ul></li>
<li>今はFTLじゃなくなってる - <a href="https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/" title="Introducing the B3 JIT Compiler | WebKit">Introducing the B3 JIT Compiler | WebKit</a></li>
</ul></li>
<li>最適化について

<ul>
<li>ループ内で動かない変数はループの外に出す <a href="https://en.wikipedia.org/wiki/Loop_optimization" title="Loop optimization">Loop optimization</a></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>関数のインライン化

<ul>
<li>関数を呼び出すとコンテキストスイッチが起きる</li>
<li>なので、関数をインライン化できるとコンテキストスイッチが減って早くなる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">fn</span><span class="p">();</span> <span class="c1">// &lt;= インライン化される</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>Dead code elimination 

<ul>
<li>ループの中にあっても、外で使ってないものは削除されてしまう</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &lt;= 使ってない</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>GCについて

<ul>
<li>Incremental GC

<ul>
<li>ちょっとづつやる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="debugging-node-js-performance-issues-in-production-thomas-watson">Debugging Node.js Performance Issues in Production - Thomas Watson</h2>

<ul>
<li>Thomas watson</li>
<li><a href="https://opbeat.com/" title="Opbeat">Opbeat</a>

<ul>
<li>パフォーマンスモニタリング</li>
</ul></li>
<li>Node.jsアプリのパフォーマンスモニタリングをしてなぜ遅くなったのかを見つける</li>
<li>プロダクションのアプリをどうやってデバッグするか</li>
<li>何が重要か(why production?)</li>
<li>productionで起きるエラーを見つけるのは難しい</li>
<li>開発時と違ってローカルじゃなくてリモートでデバッグするから難しい</li>
<li>Premature Optimization

<ul>
<li>productionに入る前に最適化仕様として間違った部分を最適化してしまうのは危険なところ</li>
</ul></li>
<li>計測

<ul>
<li>パフォーマンスの計測はどうやるか</li>
<li><code>JSON.parse(req.body)</code>

<ul>
<li>大きなリクエストがきたらJSON parseが遅くなる</li>
</ul></li>
<li><code>console.time</code>を使うことでシンプルな計測はできる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="c1">// json-parse: 154.12ms</span>
</code></pre></div>
<ul>
<li>けど、なぜ遅いのかは色々な要因がある

<ul>
<li>(Single Threaded)</li>
<li>CPUをよくつかうコード</li>
<li>Slow I/O</li>
<li>Event loopにイベントを突っ込みすぎ</li>
<li>メモリの使いすぎ</li>
<li>GC

<ul>
<li>Stop the world</li>
</ul></li>
</ul></li>
<li>CPU Intensive Code

<ul>
<li>Sync I/O</li>
<li>JSON parase</li>
<li>RegExp</li>
<li>Crypto</li>
<li>Templates</li>
</ul></li>
<li>Demo

<ul>
<li><code>$ node --perf_basic_prof_only_functions cpu.js</code></li>
<li><code>perf</code> コマンド</li>
<li><a href="http://int.main.jp/txt/perf/" title="perfの使いかた">perfの使いかた</a></li>
<li><code>perf</code>で<code>perf.data</code>を使ってそれを見ていく</li>
<li>JavaScriptとLinuxのカーネルの関数のマッピングしているデータをみてデバッグ</li>
<li><a href="https://www.npmjs.com/package/0x" title="0x">0x</a>でflamechartを作って見る

<ul>
<li>JavaScriptとカーネルの関数の呼び出しをflamechartで見る</li>
</ul></li>
<li>flamechartを見るとcpu.js:13が重たい</li>
<li><code>cpu.js</code>を見てみると crypto 部分が重たい</li>
<li>syncな処理をやってたのをasyncにすればいい感じになりそう</li>
</ul></li>
<li>mdb

<ul>
<li>何で動かないのはよくわからないときのデバッグ</li>
<li><a href="https://github.com/joyent/mdb_v8" title="joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs">joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs</a></li>
<li><a href="https://www.joyent.com/blog/mdb-and-node-js" title="Joyent | MDB and Node.js">Joyent | MDB and Node.js</a></li>
<li><code>--abort_on_uncaught_exception</code> V8のダンプを出せる</li>
<li><a href="https://www.npmjs.com/package/autopsy" title="autopsy">autopsy</a>をつかつと  SolarisのVMを動かせるので、そこでmdbをやるのが簡単</li>
</ul></li>
</ul>

<hr>

<h2 id="サイボウズの開発を支えるkaizen文化-teppeis">サイボウズの開発を支えるKAIZEN文化 - teppeis</h2>

<blockquote>
<p><a href="http://www.slideshare.net/teppeis/kaizen-68803503" title="サイボウズの開発を支えるKAIZEN文化">サイボウズの開発を支えるKAIZEN文化</a></p>
</blockquote>

<ul>
<li>技術的負債を貯めるデータベースを作った</li>
<li>貯めていって時間があるときにやろう

<ul>
<li>貯まるだけでいつまでも減らない</li>
</ul></li>
<li>KAIZEN DAY

<ul>
<li>技術的負債 -&gt; KAIZEN</li>
<li>リファクタリングだけじゃなくて開発プロセスについても改善</li>
</ul></li>
<li>一日に終わらないタイプのKAIZENが進まない

<ul>
<li>KAIZEN DAYでも割り込みがある</li>
</ul></li>
<li>KAIZEN合宿

<ul>
<li>泊りがけでやる</li>
<li>一日で終わらないものもやる</li>
<li>終了後にプログラマ以外も呼んで発表会をやった</li>
</ul></li>
<li>KAIZEN

<ul>
<li><a href="http://pepabo-ceo.jugem.jp/?eid=40" title="スーパーリセット | ペパボ社長ブログ">スーパーリセット | ペパボ社長ブログ</a></li>
</ul></li>
<li>メインプロダクトで遊びづらい

<ul>
<li>B2Bサービス

<ul>
<li>サービス停止 = ユーザーの仕事も止まる</li>
</ul></li>
<li>大規模</li>
<li>新しいものを入れにくい</li>
<li>短期要件に振り回されることは少ないけど、新規ものが少ない</li>
</ul></li>
<li>技術的な変遷

<ul>
<li><a href="http://stateofjs.com/" title="Home">フロントエンドのアンケート</a></li>
<li>3年ぐらいで変化はある</li>
<li>けど、結果論なので途中ではもっと色々変化ある</li>
<li>そういう技術的な変化を試す場所が必要</li>
</ul></li>
<li>サイドプロジェクトで試す

<ul>
<li><a href="http://blog.cybozu.io/entry/2015/11/04/080000" title="cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ">cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ</a></li>
<li>サイドでやってメインにも適応</li>
</ul></li>
<li>リモートワーク

<ul>
<li>テレビ会議をどこでもできるような仕組みが必要</li>
</ul></li>
<li>振り返り

<ul>
<li>振り返りの振り返り</li>
</ul></li>
</ul>

<h2 id="keynote">Keynote</h2>

<blockquote>
<p><a href="http://www.theserverside.com/news/4500279472/Seif-project-makes-Web-security-a-priority" title="Seif project makes Web security a priority">Seif project makes Web security a priority</a></p>
</blockquote>

<ul>
<li>MS、Apple、Adobe、Oracle

<ul>
<li>Webをリプレイスしようとしたけど、失敗</li>
<li>すべてのソリューションはオープンじゃなかった</li>
<li>Webはオープン</li>
</ul></li>
<li>Self Project

<ul>
<li>architectureはWebとは違うけど、ウェブブラウザで動く</li>
<li>Public key cryptは使われてる</li>
<li>CAは信用できないので</li>
</ul></li>
<li><code>seifnode</code>

<ul>
<li>cryptographic </li>
<li><a href="https://github.com/paypal/seifnode" title="paypal/seifnode">paypal/seifnode</a></li>
<li>random(RNG) - 一番大切</li>
<li>Entropy

<ul>
<li>OS、Microphone(音)、Camera</li>
<li>強いランダムを作る</li>
</ul></li>
</ul></li>
<li>Seif Protocol

<ul>
<li>Secure JSON Over TCP</li>
<li><a href="https://github.com/paypal/seif-protocol" title="paypal/seif-protocol: Node.js Implementation of the Seif protocol">paypal/seif-protocol: Node.js Implementation of the Seif protocol</a></li>
<li>ECC521 as unique = パスワードの代わり</li>
</ul></li>
<li>Seif Handshake</li>
<li><a href="http://www.seif.place/" title="The Seif Project">The Seif Project</a></li>
</ul>

<hr>

<h2 id="why-to-standardize-your-readmes-richard-littauer">Why to Standardize your READMEs - Richard Littauer</h2>

<blockquote>
<p><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></p>
</blockquote>

<ul>
<li>README

<ul>
<li>READMEはユーザーへのprotocol</li>
<li>READMEは一番最初に読む</li>
<li>ドキュメントよりも大事かも</li>
</ul></li>
<li>READMEを見たときに

<ul>
<li>なんて呼ぶの?</li>
<li>なぜ使うべきなの?</li>
<li>インストールの仕方</li>
<li>コントリビューター</li>
<li>ライセンス</li>
</ul></li>
<li>READMEに必要に必要なもの

<ul>
<li>タイトル</li>
<li>説明</li>
<li>インストール</li>
<li>ロゴ</li>
<li>バックグランド</li>
<li>セキュリティ</li>
<li>API</li>
<li>などなど</li>
</ul></li>
<li>ドキュメント

<ul>
<li>コード見なくても使えるのが100%</li>
</ul></li>
<li>問題

<ul>
<li>いろんなパッケージマネージャー</li>
<li>npmはパッケージが多い</li>
</ul></li>
<li>READEMEは難しい

<ul>
<li>書くのも難しい</li>
<li>パースするのも難しい</li>
</ul></li>
<li>Standard

<ul>
<li>READMEにもStandard(JS)みたいなものを作ろう</li>
<li>考えずに扱えるもの</li>
</ul></li>
<li>Standard README

<ul>
<li>A Specification</li>
<li>A Generator</li>
<li>A Linter</li>
<li>A badge </li>
<li>Example Templete</li>
</ul></li>
<li><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></li>
<li>Require

<ul>
<li>Title</li>
<li>Short Description</li>
<li>ToC</li>
<li>Install</li>
<li>Usage</li>
<li>Contribute</li>
<li>License</li>
</ul></li>
<li>Optional

<ul>
<li>Badge</li>
</ul></li>
<li>Generator

<ul>
<li><a href="https://github.com/RichardLitt/generator-standard-readme" title="RichardLitt/generator-standard-readme: Scaffold out a Standard Readme">RichardLitt/generator-standard-readme: Scaffold out a Standard Readme</a></li>
<li>Uses yeoman</li>
</ul></li>
<li>Linter

<ul>
<li>まだ</li>
</ul></li>
<li>UPTAKE

<ul>
<li>Standards.js とかでも使ってる</li>
</ul></li>
<li>Future

<ul>
<li>Linter</li>
<li>ExampleをREPLで試せるようにする</li>
<li>NLP

<ul>
<li>検索がもっとしやすくなる</li>
</ul></li>
</ul></li>
<li>FAQ

<ul>
<li>i18n README

<ul>
<li>Specなしより簡単にはなる</li>
</ul></li>
<li>Requirementsはどこに?

<ul>
<li>Install</li>
<li><a href="https://github.com/RichardLitt/standard-readme/blob/master/spec.md#install" title="standard-readme/spec.md at master · RichardLitt/standard-readme">standard-readme/spec.md at master · RichardLitt/standard-readme</a></li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="vue-js-サーバーサイドレンダリング">Vue.js サーバーサイドレンダリング</h2>

<blockquote>
<p><a href="https://speakerdeck.com/kazupon/vue-dot-js-2-dot-0-server-side-rendering" title="Vue.js 2.0 Server Side Rendering // Speaker Deck">Vue.js 2.0 Server Side Rendering // Speaker Deck</a></p>
</blockquote>

<ul>
<li>Vue.js 2.0

<ul>
<li>Progressive Framework</li>
</ul></li>
<li>Virtual DOM

<ul>
<li><a href="https://github.com/snabbdom/snabbdom" title="snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.">snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.</a>が元</li>
</ul></li>
<li>レンダリングシステム

<ul>
<li>ライフサイクル</li>
</ul></li>
<li>テンプレート

<ul>
<li>-&gt; AST</li>
<li>テンプレート言語の部分 = 動的</li>
<li>テンプレート言語じゃない部分 = 静的なNode</li>
<li>静的なNodeを静的なノードツリーを検出する</li>
</ul></li>
<li>レンダリング

<ul>
<li>Watcherというものが<code>render</code>関数を呼ぶ</li>
<li>render結果をvDOMにしてdiff+patchする</li>
</ul></li>
<li>仮想ノードツリー

<ul>
<li>ダイナミックと静的なノードツリー</li>
<li>ノードツリーをマージして期待するDOMを生成する</li>
</ul></li>
<li>サーバーサイドレンダリング

<ul>
<li>v1は独自のサーバ実装が必要だった</li>
<li>hydrogenの仕組みとかもなかった</li>
<li>v2ではvDOMとかあるのでできるようになった</li>
</ul></li>
<li>クライアントとサーバ</li>
<li>...</li>
</ul>

<hr>

<h2 id="react-reduxを使った大規模商用サービスの開発">React + Reduxを使った大規模商用サービスの開発</h2>

<ul>
<li>bookingtable.jp</li>
<li>ウェブ版

<ul>
<li>BFF(Backend for Frontend)を用意してやってる</li>
<li>アプリ版もあるのでそれぞれBFFがある</li>
</ul></li>
<li>React/Reduxのハマりどころ

<ul>
<li><code>mapToState</code></li>
</ul></li>
<li>ハマりどころ</li>
<li>画面遷移

<ul>
<li>ログインしてない -&gt; ログイン -&gt; replaceState/replaceしないと戻ったときにおかしくなる</li>
<li>POPならスクロール位置を戻す、PUSHならTOP 0にする</li>
</ul></li>
<li>Stateが集まるまでComonentをレンダリングしない

<ul>
<li>loading = true/false をstate管理して</li>
<li>loading = trueになったときにレンダリングする</li>
<li><a href="https://github.com/recruit-tech/redux-async-loader" title="recruit-tech/redux-async-loader: Async data loader for Redux apps.">recruit-tech/redux-async-loader: Async data loader for Redux apps.</a></li>
</ul></li>
<li>iPhoneの画面スワイプでのもどる/すすむ

<ul>
<li>画面スワイプして戻ると一瞬戻る前の画面でてしまう</li>
<li>戻って一瞬でてから、表示が更新される</li>
</ul></li>
<li>Monolithic JavaScript

<ul>
<li>ビルドすると毎回ファイル変わって再ダウンロードになってしまうのを避けたい</li>
<li>Before: 一個のjs</li>
<li>After: webpackJsomp、appX.js、vendor.js</li>
<li><code>require.ensure</code>(webpack)とRouterで動的ロード</li>
<li>Hotな画面は scriptタグで事前ロード</li>
<li>そうでない画面は <code>require.ensure</code> で動的ロード</li>
<li>Script Load Error

<ul>
<li>webpack 1.xだと<code>require.ensure</code>でのエラーが拾えない</li>
<li>表示 =&gt; デプロイ =&gt; 遷移仕様とするとエラーになってしまう</li>
<li><a href="https://github.com/webpack/webpack/issues/758" title="require.ensure error handling · Issue #758 · webpack/webpack">require.ensure error handling · Issue #758 · webpack/webpack</a></li>
</ul></li>
</ul></li>
<li>webpackのモジュールID問題

<ul>
<li>webpackでmodule一つ一つ idが振られてる</li>
<li>applyModuleIdsでidを振られてる</li>
<li>コレの前にidをsortしてあげればidが決まる</li>
</ul></li>
<li>SSR

<ul>
<li>checksumで比較して、合ってるならサーバのレンダリング結果を使う</li>
<li>一致しない場合は、一度捨ててクライアントでレンダリングする</li>
<li>サーバサイドの<code>renderToString</code>で数百msかかる</li>
</ul></li>
<li>Partial Reandering

<ul>
<li>見えるところだけサーバ、他はクライアントで</li>
<li>SEOは?

<ul>
<li>Google Botsはクライアントサイドレンダリングでもちゃんと認識する</li>
</ul></li>
</ul></li>
<li>SSR Cache

<ul>
<li>サーバサイドでキャッシュする</li>
<li>ユーザーの情報を含んでいるとレンダリングできない</li>
</ul></li>
<li>Composite Rendering

<ul>
<li>レンダリング方式を動的に切り替える</li>
<li>高負荷時はキャッシュを活用するなど</li>
</ul></li>
<li>まとめ

<ul>
<li>サーバサイドレンダリングはターンアラウンドタイム的にやらない方がよい</li>
</ul></li>
</ul>

<hr>

<h2 id="introducing-now-and-next-js-nkzawa">Introducing Now and Next.js - nkzawa</h2>

<blockquote>
<p><a href="https://speakerdeck.com/nkzawa/introducing-now-and-next-dot-js" title="Introducing Now and Next.js // Speaker Deck">Introducing Now and Next.js // Speaker Deck</a></p>
</blockquote>

<ul>
<li><a href="https://zeit.co/now">Now: realtime global deployments</a></li>
<li><a href="https://zeit.co/blog/next">ZEIT – Next.js</a>

<ul>
<li>の話</li>
</ul></li>
<li>Next.js</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D next.js
$(npm bin)/next
# pages/ にコンポーネントを書いていく
</code></pre></div>
<ul>
<li>Next.jsは設定必要なし

<ul>
<li>Hot ReloadingとかBabelとかそういうのは自動的にやる</li>
</ul></li>
<li>SPA

<ul>
<li>初期表示が遅い</li>
<li>ページが増えると重くなる</li>
</ul></li>
<li>解決方法

<ul>
<li>サーバサイドレンダリング

<ul>
<li>ファイル置くだけでできる</li>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415" title="【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch">【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch</a></li>
</ul></li>
<li>コード分割 + 遅延ロード

<ul>
<li>ページごとに結合ファイルを生成して分割する</li>
</ul></li>
</ul></li>
<li>CSS

<ul>
<li><a href="https://github.com/threepointone/glamor" title="threepointone/glamor: inline css for react et al">threepointone/glamor: inline css for react et al</a>を使ってる</li>
</ul></li>
<li><code>&lt;Link /&gt;</code>

<ul>
<li>遅延読み込み + history.pushState</li>
</ul></li>
<li><code>&lt;Head /&gt;</code>

<ul>
<li><code>&lt;head /&gt;</code> の中身を書ける</li>
<li><a href="https://github.com/zeit/next.js/blob/master/lib/head.js" title="next.js/head.js at master · zeit/next.js">next.js/head.js at master · zeit/next.js</a></li>
</ul></li>
<li><a href="https://zeit.co/now" title="now">now</a>

<ul>
<li>Next.jsをどうやってデプロする</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm i -g now
$ now
</code></pre></div>
<ul>
<li>nowでの設定

<ul>
<li><code>npm start</code> を定義する</li>
</ul></li>
<li>特徴

<ul>
<li>デプロイするたびに新しいURLを作る

<ul>
<li>古いURLはそのまま残る</li>
<li>エイリアスを差し替えることで切り替わる</li>
<li>URLが常に同じアプリの状態表す</li>
</ul></li>
<li>オートスケール

<ul>
<li>自動的にスケールする</li>
<li>アクセスがない場合は 0 になる</li>
</ul></li>
<li>データの永続化

<ul>
<li>オートスケールでインスタンスが消えるのでデータは外部に保存する</li>
</ul></li>
</ul></li>
<li>now + micro

<ul>
<li>基本的にHTTPでやり取りするのでlambdaのようにロックインがない</li>
</ul></li>
</ul>

<hr>

<h2 id="the-evolution-of-electron-cheng-zhao">The Evolution of Electron - Cheng Zhao</h2>

<ul>
<li>3つの名前を持っている</li>
<li>ElectronはAtomのために作った</li>
<li>5年前

<ul>
<li>GitHub CEOが元でCocoaのアプリケーションだった</li>
</ul></li>
<li>AtomのChromium Embbed Frameworkをつかうようになった</li>
<li>これによりクロスプラットフォームになった

<ul>
<li>Atom: Cocoa -&gt; Chromium Embedded Framework -&gt; Atom Shell -&gt; Electron</li>
</ul></li>
<li>Chromium Embedded Framework -&gt; Node-Webkitに移行しようとした

<ul>
<li>Atomは結構でかいコードベースだったので、Node.jsのバインでィングに書き換える作業が難航</li>
<li>失敗</li>
</ul></li>
<li>node-webkitの改善を続ける -&gt; node-webkitの開発者を雇う = Cheng Zhao</li>
<li>node-webkitは複数ウィンドウのアプリケーションを扱えなかった</li>
<li>node-webkitを書き直すこと決意

<ul>
<li>Atom-Shellを作ることにした</li>
</ul></li>
<li>node-webkit と atom-shellの違い

<ul>
<li>エントリポイントがhtmlとjsが違う</li>
<li>Chromiumのビルドの問題など</li>
</ul></li>
<li>AtomとAtom-shellはOSSになった

<ul>
<li>Atom-Shell -&gt; Electronにリネームされた</li>
<li>Electron: 37000</li>
</ul></li>
<li>Electron製のアプリは毎日毎日新しいものが公開され、あなたのPCのディスクを食べます</li>
<li>Electronは個人プロジェクトとして始まったけど、今は外部Contributorが多くなった

<ul>
<li>Contributorがいなくなるとプロジェクトが終わる</li>
</ul></li>
<li>Contributorをちゃんとキープするには

<ul>
<li>IssueやPull Requestに対してちゃんと反応する</li>
<li>開発環境を簡単にセットアップできるようにする</li>
<li>よりよいコードレビューをできるようにしたり</li>
<li>リファクタリングをちゃんとやる

<ul>
<li>Contributorはそのプロジェクトをちゃんと理解してるわけではないので</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="browser-is-the-new-server-gleb-bahmutov">Browser is the new server - Gleb Bahmutov</h2>

<ul>
<li>KENSHO</li>
<li>Quickly

<ul>
<li>CDN</li>
<li>paralled downloads</li>
<li>caching</li>
<li>small image</li>
<li>などなどできてたけどまだ遅い</li>
</ul></li>
<li>Pivotal Tracker

<ul>
<li>リロードしただけなのに数秒かかる</li>
</ul></li>
<li>開発者ツールを開いて見ると

<ul>
<li>5秒ぐらいJavaScriptの処理に使ってた</li>
<li><code>HTML = App(DATA)</code></li>
<li><code>HTML</code>と<code>DATA</code>をキャッシュする</li>
</ul></li>
<li>リロード

<ul>
<li><a href="https://glebbahmutov.com/hydrate-vue-todo/" title="Hydrate Vue Todo">Hydrate Vue Todo</a></li>
<li>タイトルはすぐでるけど、内容は一瞬ちらっとする</li>
</ul></li>
<li>ServiceWorker

<ul>
<li>そこでServiceWorker</li>
<li>ブラウザの上で動くProxy</li>
<li>リクエストをProxyして処理できる</li>
<li><code>navigator.serviceWorker.register</code></li>
<li>Firefox/Chrome/Opera</li>
<li><code>https</code>が必須</li>
<li>Androidのモバイルでも既に使える</li>
</ul></li>
<li>ServiceWorkerの中

<ul>
<li><code>fetch</code> のhook</li>
<li><a href="https://github.com/bahmutov/bottle-service" title="bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache">bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache</a></li>
</ul></li>
<li>オフライン

<ul>
<li>ブラウザのアプリはサーバがないと何もできない</li>
<li>ServiceWorkerの中にサーバを入れる</li>
</ul></li>
<li>サーバをブラウザで

<ul>
<li>express.js + middleware を browserifyで変換して、ServiceWorkerの中で動かす</li>
<li>express service</li>
<li><a href="https://github.com/bahmutov/express-service" title="bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker">bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker</a></li>
<li>オフラインでも動く</li>
<li>SWのコードはDevToolsのJavaScript無効でも動く</li>
<li>クライアントサイドのサーバサイドのJavaScript(ServiceWorkerの中のJS)でサーバサイドレンダリングしてる

<ul>
<li>最新のChromeはlinkタグでもServiceWorkerを登録できる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<p>メモ</p>

<ul>
<li>人数が増えたので人口密度高かった</li>
<li>会場的に廊下とかで話すスペース場所とかあるとよかったのではと思った</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>mu-pdf-viewerに検索一覧をつけた</title>
   <link href="http://efcl.info/2016/11/07/mu-pdf-search/"/>
   <updated>2016-11-07T10:02:00+09:00</updated>
   <id>http://efcl.info/2016/11/07/mu-pdf-search</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/mu-pdf-viewer" title="mu-pdf-viewer">mu-pdf-viewer</a>は上から下へ読むように作ったので、検索など移動して読むパターンはイマイチでした。</p>

<ul>
<li><a href="http://efcl.info/2016/10/12/mu-pdf-viewer/" title="pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch">pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch</a></li>
</ul>

<p>タイトルのように、Cmd+Fで検索したら同時に検索結果の一覧を表示できるようにしました。
クリックすると移動もできるので、これでリファレンス的に探すのも少しは便利になりそうです。</p>

<p><iframe src="//giphy.com/embed/l0HlNxuHU8SmqmYus" width="480" height="242" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/l0HlNxuHU8SmqmYus">via GIPHY</a></p></p>

<p>自動でGitHub Releaseにアップロードしてるバイナリバグってる気がするので、動かない場合はローカルでビルドした方が良さそうです。(イマイチ原因分かってない…)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run electron:build:osx
</code></pre></div>
<p>ECMAScriptの仕様書をオフラインで検索し易い形で読む方法を探してたらこうなりました。
(<a href="https://github.com/cho45/Chemrtron">Chemrtron</a>が求めてるようなものな気がするので、あとでもう一度挑戦したい。検索結果はでるけど、クリックも何もできなくてよくわからなかった。)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>W3C TAG デベロッパー・サミット アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/02/w3ctagdevmeetup/"/>
   <updated>2016-11-02T20:50:00+09:00</updated>
   <id>http://efcl.info/2016/11/02/w3ctagdevmeetup</id>
   <content type="html"><![CDATA[ <p><a href="http://frontend.connpass.com/event/42323/" title="W3C TAG デベロッパー・サミット">W3C TAG デベロッパー・サミット</a>に参加してきたのでメモ。</p>

<h2 id="web-payment-api-eiji">Web Payment API - eiji</h2>

<ul>
<li>Payment APIはUXを改善するためのAPI</li>
<li>購入するためのAPIじゃない</li>
<li>デモ

<ul>
<li>Polymer Shop</li>
</ul></li>
</ul>

<h2 id="webrtc-と-sfu-sakkuru">WebRTC と SFU - sakkuru</h2>

<ul>
<li>WebRTCてきななにか</li>
<li>P2Pでリアルタイムにやり取り</li>
<li>SkyWay

<ul>
<li>WebRTCを使うためのプラットフォーム</li>
</ul></li>
<li>つらいことが多い WebRTC</li>
<li>WebRTCの通信が始まるまで

<ul>
<li>ブラウザ同士でコネクションを結ぶ</li>
<li>やりとりはSDPというテキストデータ</li>
<li>ブラウザによってSDPが違う

<ul>
<li>Chrome PlanB SDP</li>
<li>Firefox Unified Plan SDP</li>
</ul></li>
</ul></li>
<li>SFU

<ul>
<li>P2Pでやる場合はフルメッシュでやる必要がある

<ul>
<li>自分以外全てに通信しないといけない</li>
<li>負荷が高い</li>
</ul></li>
<li>SFU

<ul>
<li>中央にサーバを置く</li>
<li>クライアントはSFUに向かって通信する</li>
<li>クライアントの負荷が減る</li>
</ul></li>
<li>SkyWay

<ul>
<li>SFUサーバの無償提供</li>
</ul></li>
</ul></li>
<li>最近 SFU

<ul>
<li>まだChromeのみ</li>
<li>Firefoxも実装始まった</li>
</ul></li>
</ul>

<h2 id="https-migration-in-local-network-w3c-trac">HTTPS migration in local network @  W3C Trac</h2>

<blockquote>
<p><a href="http://www.slideshare.net/sakkuru/webrtcsfu" title="WebRTCとSFU">WebRTCとSFU</a></p>
</blockquote>

<ul>
<li>ローカルネットでHTTPSを使いたいという話</li>
<li>HTTPとHTTPSのやり取りの問題

<ul>
<li>Secure Context</li>
<li>mixed contextの問題</li>
</ul></li>
<li>Video Stream

<ul>
<li>ローカルキャッシュサーバ</li>
</ul></li>
<li>この話の問題

<ul>
<li>ローカルの機器にどんなドメインを付けるのかなどの問題</li>
</ul></li>
<li>A) Public DNS + Public Certificate

<ul>
<li>機器の提供側がPublicなDNSと証明書認証局を運営</li>
<li>ローカルIPに対するものをちゃんと返す</li>
</ul></li>
<li>B) mDNS + Private &quot;.local&quot; Certificate

<ul>
<li>Let&#39;s Encryptのローカル版みたいな</li>
<li>ブラウザ側に新しいAPIがいる</li>
</ul></li>
</ul>

<hr>

<h1 id="breakout-session-css-houdini">Breakout Session: CSS Houdini</h1>

<p>1時間ぐらいTOPICに対してDiscussion</p>

<ul>
<li>CSSのレイアウトの部分をSecureとPeformantな方法で持ってくるAPI</li>
<li>JavaScriptからそういったものを扱う方法</li>
<li>●として扱うとか(Paint)</li>
<li>レイアウトだけじゃなくて、テキストだったり、エフェクト(影)とかを及ぶ影響を与えることができるAPI群に総称</li>
<li>CSSのリグレッションテスト</li>
<li>これまでのCSSの表現にJavaScriptで介入することができる</li>
<li>カスタムプロパティとかを持っと簡単に追加できるように

<ul>
<li>仕様を追加するまであまりに大きなこと</li>
<li>Boxtree API</li>
<li>CSS自体の拡張とAPIとして拡張ポイント</li>
<li>CSSは影響範囲が大きすぎるので、新しい機能を提供するのが難しい</li>
</ul></li>
<li>Custom Elementなら

<ul>
<li><code>-</code>を含めろとかがある。 </li>
<li>Custom Propertyは<code>--</code>で開始するというルールなので、既存のものとはぶつからない</li>
<li>新しいものについてはまだ検討されてない</li>
</ul></li>
<li>マイルストーン

<ul>
<li>足並み揃えるの難しいのでないよ</li>
</ul></li>
<li>HoudiniはCSSの補完的な機能

<ul>
<li>CSSに新しい機能を追加するときに待つ必要があった</li>
<li>これを開発者的にJavaScriptで追加できるようなAPIを提供する仕様</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Incubation WG

<ul>
<li>ウェブの機能に関する問題をどう解決するかという議論している</li>
<li>Fast Track的な早いパスでウェブ標準を作っていく</li>
<li>いいアイデアを集めたりする</li>
</ul></li>
<li>2つの方向

<ul>
<li>新しい機能を追加する</li>
<li>既にある機能を拡張する</li>
</ul></li>
<li>Incubationの意味

<ul>
<li>色々議論して議論を進めていくという意味</li>
</ul></li>
<li><a href="https://discourse.wicg.io/" title="WICG">WICG</a>

<ul>
<li>誰でも気軽にコミュニティ</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Web Payment Request API

<ul>
<li>UIは大きくは変更できない</li>
<li>ロゴを入れるとかはできる</li>
</ul></li>
<li>セキュリティ

<ul>
<li>今より悪くなることはない</li>
<li>今はフォームで送るのでハックされる可能性がある</li>
<li>Web Payment Request APIはtokenでやり取り</li>
</ul></li>
<li>月額課金

<ul>
<li>なんとかなる?</li>
</ul></li>
<li>Custom Field

<ul>
<li>今のところはない</li>
<li>検討される余地がある</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Security

<ul>
<li>TAG</li>
<li>HTTPSを広く使われるようにする</li>
<li>Static ContentのサーバでもHTTPS使う必要があるのか?

<ul>
<li>Privacyのprotectionが一つのニーズ</li>
<li>Mixed Contentの問題

<ul>
<li>サードパーティコンテンツの問題</li>
</ul></li>
</ul></li>
<li>Let&#39;s Encryptの証明書 EVに対して信頼性

<ul>
<li>セキュリティのTrustは数を組み合わせて実現する</li>
<li>EV/DV証明書はTrustを組み合わせてやってる</li>
<li>なので信頼性がほしいならEVとかの方がー</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="memo">memo</h2>

<p>ahomuさんとパフォーマンス計測について話してたメモ</p>

<ul>
<li>小さな改善はやはりブレに吸収される</li>
<li>のでコツコツ改善していくしかない</li>
<li>早いうち定常的に計測して視覚化してないと、どこでおそくなったか分からないので、早い段階から値を記録してた方が良い</li>
<li>マシンでperfの値が違う問題は sitespeed.io とかspeedcurveとか外から見るやつを回し続ける</li>
<li>speedcurve使ってるけど、完璧なソリューションというわけでもない</li>
<li>けど、どこで問題になったかが分かりやすくなる</li>
<li>mousemoveとかインタラクションに対するパフォーマンスは、機械的に計測しにくいので、手動で…</li>
<li>:money_with_wings: で人を動かした方が安くて質が高い</li>
</ul>
 ]]></content>
 </entry>
 

</feed>
