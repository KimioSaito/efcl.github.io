<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-04-14T20:21:46+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>Bikeshed.js アウトラインメモ</title>
   <link href="http://efcl.info/2016/04/13/bikeshedjs/"/>
   <updated>2016-04-13T23:11:00+09:00</updated>
   <id>http://efcl.info/2016/04/13/bikeshedjs</id>
   <content type="html"><![CDATA[ <p><a href="http://connpass.com/event/29019/" title="Bikeshed.js - connpass">Bikeshed.js - connpass</a>に参加したメモ</p>

<hr>

<h2 id="『let-vs-const』-yosuke_furukawa">『let vs. const』 @yosuke_furukawa</h2>

<ul>
<li>Effective Java</li>
<li>気持ちはImmutable</li>
<li>スレッドがないJavaScriptだと微妙</li>
<li><code>const</code> だけで防げるのか

<ul>
<li>const + <code>Object.freeze</code></li>
<li>Map+SetとかもImmutableではないのでimmutable.jsなどを使う必要がある</li>
</ul></li>
<li>やる意味

<ul>
<li><code>prefer-const</code></li>
<li>let使うときはforでぶん回す時ぐらい</li>
<li>逆にletつかているところを見ると注意して見るようになった</li>
<li>やりたいことはconst 強制 =&gt; 初学者のミスを減らせる</li>
</ul></li>
<li>基本的には <code>const</code> を使う</li>
</ul>

<hr>

<h2 id="セミコロン付けるつけない-yoshiko_pg">セミコロン付けるつけない - @yoshiko_pg</h2>

<ul>
<li>付ける人が殆ど</li>
</ul>

<hr>

<p><a href="https://app.sli.do/event/rewvfpmz/ask" title="Bikeshed.js">Bikeshed.js</a>のボードを見ながら自転車置場の議論をした。</p>

<p>インデントとか改行位置とかスタイルの話が殆どだった。</p>

<p>自分は設計においてこういうどっちでもいいような議論が多くあると思ってるので、JavaScriptとCSSの設計についてのスライドを用意したけど使わなかったので忘れる。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/bikeshedjs/javascript-read-write-stack.html">Read/Write Stack | JavaScriptアーキテクチャ</a></li>
<li><a href="http://azu.github.io/slide/2016/bikeshedjs/component-css-architecture.html">コンポーネントとCSSのアーキテクチャ</a></li>
</ul>

<hr>

<h2 id="power-assertがツールになった話-twada">power-assertがツールになった話 - twada</h2>

<ul>
<li><a href="https://github.com/power-assert-js/power-assert/issues/43" title="power-assert make `assert()` of assert module silent · Issue #43 · power-assert-js/power-assert">power-assert make <code>assert()</code> of assert module silent · Issue #43 · power-assert-js/power-assert</a></li>
</ul>

<p>のissueでは、</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>のようなコードをプロダクション側(テストではない)に書いてた時に、<code>assert()</code>の中身がpower-assert化(位置情報などを含んだオブジェクトを返す)されてしまい、常に<code>assert(object)</code>をパスしてしまうという問題。</p>

<p>これは、次のように<code>power-assert</code>が使われていれば解決すること。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;power-assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>そのため、<code>require(&quot;assert&quot;)</code>　を <code>require(&quot;power-assert&quot;)</code> するものが同時に行われればいいということで、<a href="https://www.npmjs.com/package/babel-plugin-empower-assert" title="babel-plugin-empower-assert">babel-plugin-empower-assert</a>というプラグインができた。</p>

<p>しかし、このプラグインはあくまでオプトインなので、既存の<code>babel-plugin-espower</code>だけを使ってる人は自分で以下のように追加する必要がある。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
  <span class="p">],</span>
  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;plugins&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;babel-plugin-empower-assert&quot;</span><span class="p">,</span>
        <span class="s2">&quot;babel-plugin-espower&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>毎回2つのプラグインをいれるのは面倒だということで、<a href="https://github.com/twada/babel-preset-power-assert" title="babel-preset-power-assert">babel-preset-power-assert</a>という2つのプラグインをまとめたpresetsが追加された。</p>

<p>これにより、<code>require(&quot;power-assert&quot;)</code>ではなく、ただの<code>require(&quot;assert&quot;)</code>もpower-assert化された状態でassertionが行えるようになった。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;babel-preset-power-assert&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>コード上からはNode.jsのassertモジュールに見えるけど、Babelによってpower-assertモジュールに差し替えられるため、power-assertはライブラリではなくツールになったという話。</p>

<hr>

<p>おわり</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintの設定をnpmにあげて使い回す</title>
   <link href="http://efcl.info/2016/04/08/textlint-sharable-config/"/>
   <updated>2016-04-08T21:51:00+09:00</updated>
   <id>http://efcl.info/2016/04/08/textlint-sharable-config</id>
   <content type="html"><![CDATA[ <p>textlint <a href="https://github.com/textlint/textlint/releases/tag/6.2.0" title="6.2.0">6.2.0</a>でSharable Configの機能を追加しました。</p>

<p>これは<code>.textlintrc</code>の中身をnpmパッケージとして公開して、使うときは<code>textlint --config @azu/textlint-config</code> のようにパッケージを指定して使えるという機能です。</p>

<p>簡単にいうと設定を共有する機能です。</p>

<p>ESLintのやつと基本的に同じですが、ESLintと違って<code>&quot;extend&quot;</code>での設定ファイルの継承は対応してません。
多分JavaScriptとしてやった方が良さそうな気がしていて実装してないです。(いい案があればIssueに下さい)</p>

<p><code>.textlintrc</code>はJavaScriptとして以下のような感じで書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="nx">rules</span> <span class="o">:</span> <span class="p">{</span>
    <span class="p">}</span>
 <span class="p">};</span>
</code></pre></div>
<ul>
<li><a href="http://qiita.com/hokaccha/items/6a132af7a28ffd4e9690">ESLintの設定をscoped packageでnpmにあげて使い回す - Qiita</a></li>
<li><a href="http://qiita.com/mysticatea/items/dc35ced6bd5e782f50cd">共有設定でらくらく ESLint - Qiita</a></li>
</ul>

<p>設定ファイルを公開する場合は<code>main</code>のスクリプトに<code>.textlintrc</code>の設定をJavaScriptで書いてexportするだけです。</p>

<p>例えば、<a href="https://github.com/azu/textlint-config-readme">azu/textlint-config-readme: Sharable config for textlint</a>は以下のファイルをpackage.jsonの&quot;main&quot;に指定しているだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">rules</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-todo&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;no-dead-link&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;alex&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;write-good&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;rousseau&quot;</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>
<p><code>pacakge.json</code>は次の通り</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;@azu/textlint-config-readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git+https://github.com/azu/textlint-config-readme.git&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;azu&quot;</span><span class="p">,</span>
  <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;azuciao@gmail.com&quot;</span><span class="p">,</span>
  <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/azu/textlint-config-readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
  <span class="nt">&quot;files&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
    <span class="s2">&quot;lib/&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;bugs&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/azu/textlint-config-readme/issues&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.2&quot;</span><span class="p">,</span>
  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint config module for writing readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint-config.js&quot;</span><span class="p">,</span>
  <span class="nt">&quot;directories&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;test&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint -c ./textlint-config.js ./*.md&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;textlint&quot;</span><span class="p">,</span>
    <span class="s2">&quot;config&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;textlint-rule-alex&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-common-misspellings&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-no-dead-link&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-no-todo&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.0.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-rousseau&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.4.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-write-good&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.1.4&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;textlint&quot;</span><span class="p">:</span> <span class="s2">&quot;^6.2.0&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>使うときは</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D @azu/textlint-config-readme textlint
</code></pre></div>
<p>でインストールして</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint --config @azu/textlint-config-readme README.md
</code></pre></div>
<p><code>--config</code>にパッケージ名を指定するだけです。</p>

<p>具体的には以下を見てみてください。</p>

<ul>
<li><a href="https://github.com/azu/textlint-config-readme">azu/textlint-config-readme: Sharable config for textlint</a>

<ul>
<li>README.mdのチェック用のルールを適当にまとめた</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/configuring.md#sharable-configuration">textlint/configuring.md at master · textlint/textlint</a></li>
</ul>

<p>Scoped module(<code>@azu/abc</code>のような形式)も対応してるので、自分の名前空間なら気軽に公開できて便利です。</p>

<ul>
<li><a href="http://efcl.info/2015/04/30/npm-namespace/" title="npmで名前空間を持ったモジュールを公開する方法(scoped modules) | Web Scratch">npmで名前空間を持ったモジュールを公開する方法(scoped modules) | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 20時限目 アウトラインメモ</title>
   <link href="http://efcl.info/2016/04/05/tng20/"/>
   <updated>2016-04-05T23:43:00+09:00</updated>
   <id>http://efcl.info/2016/04/05/tng20</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/29235/" title="Node学園 20時限目">Node学園 20時限目</a>に参加したきたのメモ。</p>

<h2 id="「eslintの話」-by-mysticatea">「eslintの話」 by @mysticatea</h2>

<p>スライド: <a href="https://docs.google.com/presentation/d/1OeKTQieBBTp4dQz8irIM-DxXS-0gUixC1hlOZbfIkqs/edit?usp=sharing" title="ESLint Past and Future - Google スライド">ESLint Past and Future - Google スライド</a></p>

<ul>
<li>ESLint 12-3% ぐらいのルールを書いた</li>
<li>JSHintにプラグイン機能が追加するという話はあったけどならなかった</li>
<li>ESLintの特徴

<ul>
<li>ASTベースでプラグインという特性</li>
<li>(以前書いたプラグインの仕組み: <a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/index.html" title="ESLint | JavaScript Plugin Architecture">ESLint | JavaScript Plugin Architecture</a>)</li>
<li>開発者が貢献するのが簡単

<ul>
<li>コントリビューションガイド</li>
</ul></li>
</ul></li>
<li>開発体制

<ul>
<li>機能に関しては Reviewer以上</li>
<li>バグに関しては Committer 以上が確認してマージ</li>
<li>隔週の金曜日にリリース</li>
</ul></li>
<li>ESLint 3.0.0

<ul>
<li>Stage 4に到達した構文</li>
<li>Auto FixはIDEと連携して選択式の適応へ

<ul>
<li>アグレッシブなFixは同時に適応できない問題</li>
</ul></li>
<li>Globベースの設定ファイル

<ul>
<li>RootにGlob的なファイルを置いてカスケードする</li>
</ul></li>
<li>より良いカスタムパーサーAPI

<ul>
<li>babel-eslintがしょっちゅう壊れる</li>
<li>patchアップデートで壊れる</li>
</ul></li>
<li>より良いスタイルルール

<ul>
<li>indentルールをどうかする</li>
<li>スタイルルールセットみたいな統一感がない</li>
</ul></li>
<li>TypeScriptサポート

<ul>
<li>ESLintがTypeScriptを扱えるようにする</li>
<li><a href="https://github.com/eslint/typescript-eslint-parser" title="eslint/typescript-eslint-parser: A TypeScript parser that produces output compatible with ESLint">eslint/typescript-eslint-parser: A TypeScript parser that produces output compatible with ESLint</a></li>
</ul></li>
</ul></li>
</ul>

<h2 id="「amebafresh-tvの話」-by-ahomu">「amebafresh.tvの話」 by @ahomu</h2>

<p>スライド: <a href="http://s.aho.mu/160405-node_school/#" title="Client Side of なんちゃらfresh.tv">Client Side of なんちゃらfresh.tv</a></p>

<ul>
<li>■■■■fresh.tv</li>
<li>クライアントサイドの話</li>
<li>SSRについて

<ul>
<li>Socket.IO</li>
<li>HLS</li>
</ul></li>
<li>ウェブクライアント

<ul>
<li>React + Fluxible</li>
</ul></li>
<li>サーバ

<ul>
<li>nignx -&gt; node(クライアントサーバ) -&gt; golang(APIサーバ)</li>
</ul></li>
<li>サーバサイドレンダリング

<ul>
<li>コンポーネント</li>
<li>サーバサイドレンダリング</li>
<li>テンプレをクライアント/サーバで共有するのがメイン</li>
<li>JavaScriptのみでレンダリングだと、クリティカルレンダリングパスが長くなる

<ul>
<li>初期表示を短くするためのサーバーサイドレンダリング</li>
</ul></li>
<li>Fluxible

<ul>
<li>Flux : fluxible</li>
</ul></li>
<li>Rendering

<ul>
<li>react</li>
</ul></li>
<li>Routing

<ul>
<li>Fluxible</li>
</ul></li>
<li>Data Loading

<ul>
<li>fetchrはサーバ用のService Middlewareとクライント用のProxy Requestを使ってやる</li>
<li>クライアントとサーバでそれぞれ同じコードだけど、リクエストはProxyで実体は異なる</li>
</ul></li>
</ul></li>
<li>Flux

<ul>
<li>コンポーネントはスマートUI気味</li>
<li>必要に応じてStoreに移していく</li>
<li>他のコンポーネントと共有しないUIの状態はStateを使う</li>
<li>開発速度を優先した感じ</li>
<li><code>Context</code>を注入してバケツリレーを回避</li>
</ul></li>
<li>SPAについて

<ul>
<li>メリット

<ul>
<li>画面遷移が早くなる</li>
</ul></li>
<li>デメリット

<ul>
<li>ブラザナビゲーションを破壊してしまう</li>
</ul></li>
</ul></li>
<li>ウェブサイトは本当にSPAにするべきか

<ul>
<li>ユーザー操作がリンクをクリックする感じなら、SPAにする意味はそこまでないのでは?</li>
<li>ウェブアプリ的な(一ページに滞在する必要があるもの)はSPAが良い</li>
<li>ブラウザのナビゲーションは自分で色々で責任を持つ必要があるので大変</li>
</ul></li>
<li>PinP(Picture in Picture)が要件にあったから

<ul>
<li>この要件があったのでSPAにした</li>
</ul></li>
<li>SPAの注意

<ul>
<li>ルーティング後の画面遷移

<ul>
<li>読み終わったら、データを画面に反映するべき</li>
</ul></li>
<li>スクロール(0,0)もルーティングが終わってから移動する</li>
<li>ブラウザバックは即座に表示

<ul>
<li>ブラウザバックなら情報は既知 = キャッシュを使う</li>
<li>Routing処理が発生してもfetchはスキップ

<ul>
<li>ここはルーティングで</li>
</ul></li>
</ul></li>
<li>7gogo</li>
<li>某巨大サービス</li>
</ul></li>
<li>ディレクトリ

<ul>
<li>コンポーネント毎にディレクトリを切ってる </li>
</ul></li>
<li>Componentについて

<ul>
<li>プロジェクト固有のレイヤーで、ここはCSSで上書きOKという感じになってる</li>
<li>日々デザインは変わるのでゆるめな感じの作り</li>
</ul></li>
<li>CSS

<ul>
<li>SUIT CSS + BEM</li>
</ul></li>
<li>コンポーネントはガンガン切る

<ul>
<li>shouldComponentUpdateを信じて細分化した</li>
</ul></li>
<li>CSSの今後

<ul>
<li><a href="http://bradfrost.com/blog/post/atomic-web-design/" title="Atomic Design | Brad Frost">Atomic Design | Brad Frost</a></li>
</ul></li>
</ul>

<hr>

<h2 id="「vue-jsの最近の話」-by-kazupon">「vue.jsの最近の話」 by @kazupon</h2>

<p>スライド: <a href="https://speakerdeck.com/kazupon/vue-dot-js-recent-trends" title="Vue.js Recent Trends // Speaker Deck">Vue.js Recent Trends // Speaker Deck</a></p>

<p>(雑談をしていたのでメモできてない)</p>

<h2 id="「nodebotsの話」-by-n0bisuke">「Nodebotsの話」 by @n0bisuke</h2>

<p>スライド: <a href="https://speakerdeck.com/n0bisuke/nodebotsfalsehua-nodexue-yuan-20shi-xian-mu-number-tng20-20fen" title="NodeBotsの話 (Node学園20時限目 #tng20 : 20分) // Speaker Deck">NodeBotsの話 (Node学園20時限目 #tng20 : 20分) // Speaker Deck</a></p>

<ul>
<li>JavaScriptでハードウェアを操作</li>
<li>konashi</li>
<li>mesh</li>
<li>ハードウェアの機能をNode.jsで制御する

<ul>
<li>noble</li>
<li>BT</li>
</ul></li>
<li>GPIO

<ul>
<li>npmにもライブラリがある</li>
</ul></li>
<li>NodeBots

<ul>
<li>JavaScriptでハードウェアを制御するコミュニティ</li>
</ul></li>
<li>Node.jsでハードウェアを制御する方法

<ul>
<li>Cylon.js

<ul>
<li>Arduinoを制御する</li>
</ul></li>
<li>johnny-five

<ul>
<li>Arduinoなどのハードウェア制御</li>
<li>こっちを使って始めるのがいいという話</li>
</ul></li>
</ul></li>
<li>始め方

<ul>
<li>NodeSchool</li>
<li>workshoperの中にNodeBot Workshopがある</li>
<li>これを使ってjohnny-fiveの基礎を学ぶことができる</li>
<li>ハードウェアがなくても始めることができるよという話</li>
<li>回路図とかも書かれてる</li>
<li>日本語訳を書いてる最中

<ul>
<li>ハードウェアも選定したWorkShopの準備中</li>
</ul></li>
<li>Arduino Uno R3を使うのが安心</li>
<li>Genuino 101というもIntellからでてきた

<ul>
<li>Arduino互換</li>
</ul></li>
<li>Tessel 2

<ul>
<li>Node.jsからの利用を最初から想定しているボード</li>
<li>no ぎてき</li>
</ul></li>
</ul></li>
<li>PR</li>
</ul>

<hr>

<h2 id="「option-tでエラーハンドリング」-by-saneyuki">「option-tでエラーハンドリング」 by @saneyuki</h2>

<p>スライド: <a href="http://www.slideshare.net/saneyuki/dont-use-try-catch-in-javascript" title="Don’t use try catch in JavaScript">Don’t use try catch in JavaScript</a></p>

<ul>
<li>try-catch</li>
<li>エラーの種類(2種類)

<ul>
<li>バグが起こすエラー</li>
<li>回復できるエラー</li>
</ul></li>
<li>バグは回復できるのか?

<ul>
<li>できるわけない</li>
<li>バグは回復してはいけない</li>
<li>開発者に通知するべき</li>
<li>これをtry-catchをがんばっては行けない</li>
<li>プログラムの整合性が壊れてしまう</li>
<li>さっさとクラッシュさせて通知する</li>
</ul></li>
<li>Type

<ul>
<li>TypeScriptの型を見るとerrorは<code>any</code>型になってしまう</li>
</ul></li>
<li>回復可能なエラー

<ul>
<li>DOMのエラーとか回復可能なエラーはある</li>
<li><code>throw-abilty</code> JSDocとかにある</li>
<li>けどツールはちゃんとそこをチェック出来るものは少ない</li>
</ul></li>
<li><a href="http://joeduffyblog.com/2016/02/07/the-error-model/" title="Joe Duffy - The Error Model">Joe Duffy - The Error Model</a>

<ul>
<li>シグネチャで縛らないと開発者はスルーしてしまう</li>
<li>エラーを投げうるかはどうやって表現するか</li>
</ul></li>
<li>Iteratorを拡張したエラー型

<ul>
<li>エラーを投げうる(返しうる)という型</li>
<li>Optional</li>
<li>GoLangのようなエラーハンドリング</li>
</ul></li>
<li>エラーをとりあえず全てキャッチになげる

<ul>
<li>キャッチでクラッシュさせる</li>
</ul></li>
<li>Obsevable on ES.next

<ul>
<li>正常系 =&gt; onNext</li>
<li>エラー =&gt; error = Observableも止まる

<ul>
<li>エラーですぐとめる</li>
</ul></li>
</ul></li>
<li><code>uncughException</code>

<ul>
<li>エラーをダンプしてプロセスをちゃんと落とす(回復しようと努力しない)</li>
<li><code>process.exit()</code></li>
</ul></li>
<li><a href="https://www.npmjs.com/package/option-t" title="option-t">option-t</a>

<ul>
<li><a href="http://saneyukis.hatenablog.com/entry/2016/03/14/223518" title="option-tにResult&amp;lt;T, E&amp;gt;型を実装した（簡易報告版） - snyk_s log">option-tにResult<T, E>型を実装した（簡易報告版） - snyk_s log</a></li>
<li><code>Either&lt;A, B&gt;</code></li>
<li>RustのResultを持ってきたnpmモジュール</li>
</ul></li>
<li>関数型パッピーなライブラリ

<ul>
<li>Rustのドキュメントを読め</li>
</ul></li>
<li>まとめ

<ul>
<li>try-catchを基本的に使うな 

<ul>
<li>例外はあるけど、自分の制御内ではできるだけ使わない</li>
</ul></li>
<li>関数にtry-catchをおし込めてちゃんと型を書いて制御する</li>
<li>バグを回復させてはいけない</li>
<li><code>throwable</code>かどうかはシグネチャとして担保する

<ul>
<li>関数がエラーを投げるかどうかという事を書くべき</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="「oracleがnode-jsをやり始めたというのだが！」-by-charlier_shoe">「OracleがNode.jsをやり始めたというのだが！」 by @charlier_shoe</h2>

<ul>
<li>Old IT

<ul>
<li>一枚岩アーキテクチャの上にJava EEを載せるみたいな</li>
<li>簡単に止めることができない</li>
</ul></li>
<li>New IT

<ul>
<li>軽量なサービス軍で構成</li>
<li>サービスごとに自主的にやってる</li>
</ul></li>
<li>Node Cloud

<ul>
<li>Cloud上のNode.jsのランタイム</li>
<li>アプリケーションコンテナクラウド</li>
</ul></li>
<li>JET

<ul>
<li><a href="http://www.oracle.com/webfolder/technetwork/jet/index.html" title="Home">Home</a></li>
<li>JQuery</li>
<li>JQuery UI</li>
<li>Knockout</li>
<li>RequireJS</li>
<li>Hammer</li>
</ul></li>
<li>Oracle初のOSS！

<ul>
<li><a href="https://github.com/oracle/oraclejet/blob/master/CONTRIBUTING.md" title="oraclejet/CONTRIBUTING.md at master · oracle/oraclejet">oraclejet/CONTRIBUTING.md at master · oracle/oraclejet</a></li>
</ul></li>
</ul>

<hr>

<h2 id="ひたすら楽してディープラーニング-yujiosaka">ひたすら楽してディープラーニング -yujiosaka</h2>

<p>スライド: <a href="https://speakerdeck.com/yujiosaka/hitasurale-sitedeipuraningu" title="ひたすら楽してディープラーニング // Speaker Deck">ひたすら楽してディープラーニング // Speaker Deck</a></p>

<ul>
<li>機械学習</li>
<li>はじめてのパターン認識

<ul>
<li>ニューラルネットワークに壁</li>
</ul></li>
<li>kaggle

<ul>
<li>minstの分類</li>
<li>新しいalgorithmがでると大体これで試される</li>
</ul></li>
<li><a href="http://neuralnetworksanddeeplearning.com/" title="Neural networks and deep learning">Neural networks and deep learning</a>

<ul>
<li>Python -&gt; CoffeeScript -&gt; ES6</li>
</ul></li>
<li>パーセプトロンモデル

<ul>
<li>滑らかになる</li>
</ul></li>
<li>数式

<ul>
<li>普段使ってるプログラミング言語に落としてみるとわかりやすくなる</li>
</ul></li>
<li>教科書にない問題

<ul>
<li>桁あふれの問題</li>
</ul></li>
<li>ライブラリ高機能

<ul>
<li>Pythonのライブラリが高機能過ぎて、JavaScriptで再実装するのが難しい</li>
<li>自動微分</li>
<li>Pythonに詳しくなってきた</li>
</ul></li>
<li>リポジトリ

<ul>
<li><a href="https://github.com/yujiosaka/js-mind" title="yujiosaka/js-mind: Deep Learning Library Written in ES2015.">yujiosaka/js-mind: Deep Learning Library Written in ES2015.</a></li>
</ul></li>
</ul>

<hr>

<h2 id="node-jsでble機器を制御">Node.jsでBLE機器を制御</h2>

<ul>
<li>BLE</li>
<li>振らないと止まらない目覚まし</li>
</ul>

<hr>

<h2 id="雑談">雑談</h2>

<p>@t_wada さんと<a href="http://efcl.info/2016/03/25/jsdoc-to-assert/" title="JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch">JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch</a>についての話をした。</p>

<p><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使うとテストの時に例外を投げるケースが出てきてしまうけど、そういう時はどうするのが正しいの?という話</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div>
<p>をテストするコードとして以下のようなものを書くと、<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使っているときは例外を投げる。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">it(&quot;should x&quot;, function(){
    myFunc(&quot;string&quot;);// {number}を受取るはずなので例外を投げる
});
</code></pre></div>
<p>この時のテストコードとしてはどうするのが正解なのかという話をした。</p>

<p>t_wada 「これは型違反例外なので、キャッチして処理するのが正解」</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should x&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">try</span><span class="p">{</span>
        <span class="nx">myFunc</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">);</span>
        <span class="nx">fail</span><span class="p">(</span><span class="s2">&quot;ここにきたらおかしいので例外を投げる __ いわゆるunreachable&quot;</span><span class="p">);</span>
    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;AssertionError&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>という感じにやるのが良いという話だった。</p>

<p>Nodeの<a href="https://nodejs.org/api/assert.html#assert_assert_fail_actual_expected_message_operator" title="assert.fail(actual, expected, message, operator)">assert.fail(actual, expected, message, operator)</a>は普通のfailじゃないので使えないという話や<code>assert.throws</code>のAPIも何か使いにくいという話をした。</p>

<p>後、今は<code>console.assert</code>使ってるけどブラウザ、Nodeで挙動違うから<a href="https://github.com/codemix/babel-plugin-typecheck" title="babel-plugin-typecheck">babel-plugin-typecheck</a>みたいにif throwするとかになるよなー的な話(ライブラリなしとする場合)</p>

<hr>

<p>@ahomu @pocotan001 さんと</p>

<blockquote>
<p>Component/index.sg.js : コンポーネントのスタイルガイド<br>
<a href="http://s.aho.mu/160405-node_school/#33">http://s.aho.mu/160405-node_school/#33</a></p>
</blockquote>

<p>の話とCSSの設計の話をした。</p>

<p>CSSのスタイルガイドをプロダクトにいれて動かしてる話はあんまり見たことないのでもっと読みたいです！</p>

<p>CSSはcssnext(PostCSS)な感じ。</p>

<p>CSSの原則的な規約とそこを破った方が楽な部分のバランスの話。</p>

<p>(SUIT CSSの考えなどでいくと)親が孫の要素(コンポーネントをまたいだ要素)に対してスタイルを当てるのは原則に反するが、そこは多少破っても問題が起きた時にどこが問題なのかが特定できればいいという話(少なくても親は一定となるという話だと思う)。</p>

<p>後は何にCSSの(グローバル)変数を使ってるかという話をした</p>

<ul>
<li>色</li>
<li>フォント</li>
<li>コンポーネント間の幅</li>
<li>高さ</li>
</ul>

<p>自分の今の考えをそのまま書き出してるのを以下のリポジトリでやってる。
React + CSSのコンポーネント志向とドメイン的なJavaScriptの設計的な題材でやってる。</p>

<ul>
<li><a href="https://github.com/azu/presentation-annotator" title="azu/presentation-annotator: viewing presentation and annotate.">azu/presentation-annotator: viewing presentation and annotate.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Shibuya.XSS techtalk #7 アウトラインメモ</title>
   <link href="http://efcl.info/2016/03/28/shibuyaxss/"/>
   <updated>2016-03-28T21:41:00+09:00</updated>
   <id>http://efcl.info/2016/03/28/shibuyaxss</id>
   <content type="html"><![CDATA[ <p><a href="http://shibuyaxss.connpass.com/event/28232/" title="Shibuya.XSS techtalk #7">Shibuya.XSS techtalk #7</a>に参加してきたのでメモ</p>

<hr>

<h2 id="超絶技巧-csrf-mala">超絶技巧 CSRF - mala</h2>

<p>スライド: <a href="https://speakerdeck.com/mala/shibuya-dot-xss-techtalk-number-7" title="超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck">超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck</a></p>

<ul>
<li>CSRFについて</li>
<li>クロスサイトでリクエストを強制する脆弱性

<ul>
<li>書き込み</li>
<li>パスワードの削除</li>
</ul></li>
<li>未だによくある

<ul>
<li>XSSは正しく書いていれば防げる</li>
<li>CSRFは未だによくある</li>
</ul></li>
<li>CSRFは事後対処になりやすい

<ul>
<li>投票とか掲示板とか事後対処になりやすい</li>
<li>リスクの高いCSRFの紹介</li>
</ul></li>
<li>アカウント乗っ取り

<ul>
<li>危険なCSRF</li>
<li>パスワードの変更</li>
<li>メールアドレスの変更</li>
</ul></li>
<li>連携アカウント追加

<ul>
<li>OAuth2.0 + stateパラメータで防げる</li>
</ul></li>
<li>いろんなものにCSRFする

<ul>
<li>JSONやXMLを送る</li>
<li>form enctype=text/plainを使う</li>
<li>CSRFでmemcached protocolとして解釈可能なものをCSRFで送れる</li>
</ul></li>
<li>HTML Form protocol attach

<ul>
<li>Cross-Protocl スクリプトアタック</li>
<li>よくあるportはブロックされる</li>
<li>NoSQLサーバとかはブロックされてないので、攻撃出来ることがある</li>
</ul></li>
<li>昔との違い

<ul>
<li>バイナリをアップロード出来るようになってる</li>
<li>multipart/form-dataをCSRF =&gt; 可能</li>
<li>CORSのプリフライト対象外</li>
</ul></li>
<li>デモ

<ul>
<li>Memcachedにform経由で書き込むデモ</li>
<li>アプロケーションに任意のデータを書き込んだ任意のコード実行みたいなことができてしまう</li>
</ul></li>
<li>認証を突破するCSRF

<ul>
<li>Redisだとパスワードをかけられる</li>
<li>Redisのパスワード認証

<ul>
<li>パスワードが既知だと同じ</li>
</ul></li>
</ul></li>
<li>CSRFで突破できる認証

<ul>
<li>CSRFはレスポンスが取れない</li>
<li>チャレンジ&amp;レスポンス系は突破できない</li>
</ul></li>
<li>ミドルウェアへのCSRF対策

<ul>
<li>隔離するものはちゃんと隔離する</li>
<li>退職者向けバックドアは残さない</li>
</ul></li>
<li>Well-known port

<ul>
<li><a href="https://fetch.spec.whatwg.org/#port-blocking" title="3.5 Port blocking">3.5 Port blocking</a></li>
<li>Fetch APIで定義されてる</li>
<li>コレ以外はブロックされないので、CSRF経由での攻撃ができる</li>
</ul></li>
<li>プロセス間でやり取りする場合は相互認証をちゃんとやる</li>
<li>Cross protocolなCSRF + xhr.send(blob)でバイナリを送れる :new:

<ul>
<li>新しい脆弱性は生まれるかも</li>
</ul></li>
</ul>

<hr>

<h2 id="pathでxssする技術-masato-kinugawa">PATHでXSSする技術 - Masato Kinugawa</h2>

<p>スライド: <a href="https://speakerdeck.com/masatokinugawa/shibuya-dot-xss-techtalk-number-7" title="明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck">明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck</a></p>

<ul>
<li><code>https://host/path?key=a#b</code></li>
<li>クエリとかハッシュ以外もXSSに使える</li>
<li><code>$_SERVER</code> 

<ul>
<li>PHP</li>
<li><code>REQUEST_URI</code>

<ul>
<li>Firefox, Chrome</li>
<li>IEはリダイレクトするとなぜがPATHの部分がエスケープされない</li>
</ul></li>
</ul></li>
<li>その他のパスでのXSS

<ul>
<li>RPO(Relative Path Overwrite)

<ul>
<li>相対パスを上書きを引き起こすXSS</li>
</ul></li>
</ul></li>
<li><code>location.pathname</code>

<ul>
<li>パスを取得するためのプロパティ

<ul>
<li><code>&#39;=()</code>などはエスケープされない</li>
</ul></li>
</ul></li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a>

<ul>
<li>解説</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;img class=&quot;log&quot; src=&quot;/payloadLogger?url=&#39;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s2">&quot;//&quot;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">)</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<ul>
<li><code>aaa/..%2F</code></li>
<li>IE

<ul>
<li>iframe経由でドキュメントモードを古い動作をあえて呼び出す</li>
<li>親のドキュメントモードがiframeにも継承される

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/gg622935(v=vs.85).aspx" title="Understanding the Compatibility view list (Windows)">Understanding the Compatibility view list (Windows)</a></li>
<li>互換性</li>
</ul></li>
<li>AllowEncodeedSlashedの動作を利用してパス先頭に<code>javascript:</code>を書く</li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a></li>
</ul></li>
<li>IE

<ul>
<li><code>http</code>から<code>mshtml</code>へreplaceStateができる</li>
<li>SafariもBlob+replaceStateができる</li>
</ul></li>
</ul>

<p>事前課題</p>

<ul>
<li><a href="https://twitter.com/kinugawamasato/status/713307732628021248" title="Masato Kinugawa on Twitter: &amp;#34;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&amp;#34;">Masato Kinugawa on Twitter: &quot;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&quot;</a></li>
</ul>

<hr>

<h2 id="electronのセキュリティの話-hasegawa">Electronのセキュリティの話 - hasegawa</h2>

<p>スライド: <a href="http://utf-8.jp/public/2016/0328/shibuyaxss.pdf" title="shibuyaxss.pdf">Electronのはなし</a></p>

<ul>
<li>Electron vs. CSP

<ul>
<li>レンダラにCSPを適用しても</li>
<li><code>webview</code>タグ内で任意コード実行ができる</li>
<li>CSPでは(Electronの)XSSを防げない</li>
</ul></li>
<li>WebViewタグを使わないでXSSするパターン

<ul>
<li>レンダラ内は同一オリジン以外のリソースは禁止</li>
<li>外部リソースを<code>innerHTML</code>で読ませれも発火しない</li>
<li>表示されるページと同じオリジンなら可能</li>
<li><code>innerHTML = &lt;iframe src=&quot;&lt;同じオリジン&gt;&quot;&gt;</code>はいける</li>
<li><code>file://</code>で悪意があるものがあれば、任意コード実行できそう</li>
</ul></li>
<li>同一オリジン

<ul>
<li>ディレクトリと関係なく全てが同一オリジン in <code>file://</code></li>
<li>Chrome 45では修正が入ってる: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=455882" title="Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail">Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail</a></li>
<li>Electronもそのうち直る?</li>
</ul></li>
<li>悪意のあるファイル in <code>file://</code>

<ul>
<li>事前にダウンロード</li>
<li>ファイルサーバを立ち上げて、<code>file://</code>なものを用意しておくと同一オリジンとして認識される</li>
</ul></li>
<li>実行できてもNodeの機能が実行できない

<ul>
<li><code>window.open</code>でNodeを有効にしたウィンドウを開ける</li>
<li>XSSがあると何でも実行できる</li>
</ul></li>
<li>Electronのnodeモジュール探索パス

<ul>
<li>アプリ外のパスも探索パスとなる</li>
</ul></li>
</ul>

<hr>

<h2 id="http-こいつの-話-shibuya-xss-moe-yagihashoo">http://こいつの:話@shibuya.xss.moe/ - yagihashoo</h2>

<ul>
<li>パスワード認証の話</li>
<li>URI

<ul>
<li>RFC2396で定義、RFC3986で改定される</li>
<li>RFC1738 URL</li>
</ul></li>
<li>各ブラウザの対応状況

<ul>
<li>IE/Edge以外は大体何か動く</li>
<li>FirefoxとSafariとかは警告がでて確認される</li>
<li>Opera PWがマスクされるパターン</li>
</ul></li>
<li>Firefox

<ul>
<li>URLの履歴がそのまま表示される</li>
</ul></li>
<li>ベーシック認証をしてるサイトからログアウトできない

<ul>
<li>ブラウザを終了するしかない</li>
<li>もう一度同じURLでアクセスするとダイアログはでない</li>
</ul></li>
<li>各種ルータの管理画面ハック

<ul>
<li>管理画面はXSSとかCSRFがよくある</li>
<li>XSSの条件

<ul>
<li>ログイン済み</li>
<li>XSSが発言するURLが既知</li>
<li>ユーザがわなページを踏む</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="firefoxの話-llamakko_cafe">Firefoxの話 - llamakko_cafe</h2>

<p>関連: <a href="http://blog.vuln.jp/2016/01/firefox5000.html" title="晴れのちバグ( ꒪⌓꒪): Firefoxのバグを見つけて5000ドルの報奨金をもらった話">晴れのちバグ( ꒪⌓꒪): Firefoxのバグを見つけて5000ドルの報奨金をもらった話</a></p>

<ul>
<li>脆弱性を探す前に

<ul>
<li>ブラウザの脆弱性探しはハードル高そう</li>
<li>どんなものが脆弱性</li>
<li>どんなところに脆弱性</li>
</ul></li>
<li>ブラウザの脆弱性?

<ul>
<li>パッと浮かぶものがあまりない</li>
<li>引き出しが少ないと脆弱性結びつけるのが難しい</li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006323.html" title="JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース</a></li>
</ul></li>
<li>脆弱性を探す前に

<ul>
<li>Firefoxセキュリティアドバイザリ</li>
<li>脆弱性の一覧があって、ソースも見える</li>
</ul></li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006413.html" title="JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース</a>

<ul>
<li>data および view-source URIを通じたクロスサイト読み取り攻撃</li>
</ul></li>
<li>Firefoxの脆弱性を見つけたきっかけ

<ul>
<li>「戻るボタンを押すのがめんどうくさくてhistory.backしてた」</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JSDocをランタイムassertに変換するBabelプラグインを書いた</title>
   <link href="http://efcl.info/2016/03/25/jsdoc-to-assert/"/>
   <updated>2016-03-25T10:37:00+09:00</updated>
   <id>http://efcl.info/2016/03/25/jsdoc-to-assert</id>
   <content type="html"><![CDATA[ <p>JSDocをassertに変換するライブラリとそれを使ったBabelプラグインを書きました。</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>ライブラリの<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>の方は、JavaScript ASTのコメントから<code>assert</code>の文字列を作り出すだけのシンプルなものです。</p>

<p>実際に使う場合は、Babelのプラグインとして<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使い、コードを変換してランタイムassertを追加させます。</p>

<p>やっていることとしては、FlowTypeをランタイムチェックする<a href="https://github.com/codemix/babel-plugin-typecheck" title="babel-plugin-typecheck">babel-plugin-typecheck</a>のJSDoc版とも言えます。</p>

<ul>
<li><a href="http://qiita.com/mizchi/items/30a5f9560e86e0d5ab31">babel-plugin-typecheck を使って flowtype 文法で書かれたJSをランタイムチェックする - Qiita</a></li>
<li><a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
</ul>

<p>すごく難しい仕組みではないので、既にやって人がいるのではと思ったのですがいなかったので作りました。</p>

<ul>
<li><a href="https://github.com/azu/azu/issues/73" title="JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu">JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu</a></li>
</ul>

<h2 id="変換例">変換例</h2>

<p>例えば次のような関数とJSDocがあったとします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div>
<p>これを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>では次のように変換してassert処理を追加しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">param</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p>みて分かるようにかなりシンプルな変換がされます。(実際はもう少しメッセージを追加しますが、最小限です)</p>

<p><code>assert</code>ライブラリの依存を解決するのが面倒だったので、<code>console.assert</code>を使っていますが一部ブラウザは例外を投げずにログを出すだけらしいです。(Nodeは例外を投げてくれる)</p>

<p><code>d</code>はオプショナルな引数なので、今のところチェックしていません。
また、<code>string[]</code>のチェックが配列かどうかぐらいとなっていたり、まだまだ色々チェック不足な部分はあります。</p>

<p>Pull request 待ってます！</p>

<ul>
<li><a href="https://github.com/azu/jsdoc-to-assert/issues/1" title="Optional arguments support · Issue #1 · azu/jsdoc-to-assert">Optional arguments support · Issue #1 · azu/jsdoc-to-assert</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install babel-plugin-jsdoc-to-assert
</code></pre></div>
<h3 id="設定">設定</h3>

<p>Babelプラグインなので、Babelと共に利用するために<code>.babelrc</code>を設定します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;plugins&quot;: [
    &quot;jsdoc-to-assert&quot;
  ]
}
</code></pre></div>
<p>とシンプルに設定できますが、実際には開発中のみ変換して欲しいと思うので、<code>env</code>オプションを使うことで開発中のみ変換できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;presets&quot;: [
    &quot;es2015&quot;
  ],
  &quot;env&quot;: {
    &quot;development&quot;: {
      &quot;plugins&quot;: [
        &quot;jsdoc-to-assert&quot;
      ]
    }
  }
}
</code></pre></div>
<p><code>jsdoc-to-assert</code>の変換は含めずにビルドする場合は<code>production</code>を設定してビルドすれば、適応されずにすみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">NODE_ENV=production babel src --out-dir lib --source-maps
</code></pre></div>
<h2 id="仕組み">仕組み</h2>

<p><a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>はコメント(leadingComments Node)を<code>assert</code>などのコード片に変換するだけです。</p>

<p><code>function a(){}</code> や <code>const a = function(){}</code>、 <code>class A{ method(){} }</code> などJSDocを書ける場所は沢山あります。</p>

<p>これらどの関数宣言に対してコード変換をするかは<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>側に実装しています。</p>

<ul>
<li><a href="http://efcl.info/2016/03/06/ast-first-step/" title="JavaScript ASTを始める最初の一歩 | Web Scratch">JavaScript ASTを始める最初の一歩 | Web Scratch</a></li>
</ul>

<p>で書いていますが、BabelのASTはあんまり互換性がないので、<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>の部分は複数実装が存在してもおかしくない領域です。</p>

<p>以前、似たようなツールで<code>a; // =&gt; &quot;string&quot;</code> のようなコメントをassertに変換するライブラリも書いていましたが、この場合も<a href="https://github.com/azu/comment-to-assert">コメントをassertに変換する部分</a>と<a href="https://github.com/azu/power-doctest">変換したassertをコードに追加する部分</a>は分けて実装していました。</p>

<ul>
<li><a href="https://github.com/azu/comment-to-assert">azu/comment-to-assert: convert single line comment to assert.</a></li>
<li><a href="http://efcl.info/2015/08/10/power-doctest1.0/">power-assertを使ったDoctestツール power-doctestを書き直した | Web Scratch</a></li>
</ul>

<p>話を戻して、JSDoc自体の型定義が結構曖昧(nullableとか定義みたいな部分が曖昧)なので、<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>も実装見ると分かるようにかなり簡略化しています。</p>

<p>ESLintで静的にJSDocのコメントをチェックできる<a href="http://eslint.org/docs/rules/valid-jsdoc" title="valid-jsdoc">valid-jsdoc</a>と<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を合わせて使うようなイメージで書いています。</p>

<p>JSDoc単体の型定義はValidだけど、実際の利用方法と合ってるかどうかを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>でチェックするイメージです。</p>

<ul>
<li><a href="http://eslint.org/docs/rules/valid-jsdoc" title="Rule valid-jsdoc - ESLint - Pluggable JavaScript linter">Rule valid-jsdoc - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<p>また、<a href="https://ja.wikipedia.org/wiki/%E5%A5%91%E7%B4%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" title="契約プログラミング">契約プログラミング</a>に言えば<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>は事前条件、つまり<code>@param</code>のみのチェックをしています。
<code>@returns</code>のチェックはユニットテストで保証するのがいいと思います。</p>

<p>正直まだエラーメッセージも全然わかりやすくないし、中途半端なチェックしかできません。
この辺を改善したい人のContributionsを待ってます！</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>結局はキレイなJSDocが残ればいいだけなので、
<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>はいつでも外しても問題ない作りです。
なので、Babelを使ってるプロジェクトにひっそりいれて色々エラーを見つけると面白いのかもしれません。</p>

<p>類似</p>

<ul>
<li>FlowType: <a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
<li>TypeScript: <a href="https://github.com/Microsoft/TypeScript/issues/7607" title="Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript">Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>正規表現でマッチしたキャプチャの内容と位置を取得するライブラリ</title>
   <link href="http://efcl.info/2016/03/22/match-index/"/>
   <updated>2016-03-22T20:05:00+09:00</updated>
   <id>http://efcl.info/2016/03/22/match-index</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/match-index" title="match-index">match-index</a>という正規表現の補助JavaScriptライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>

<p>例えば、</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&quot;ABC ABC&quot;
</code></pre></div>
<p>という文字列から&quot;ABC&quot;という文字列とその位置(index)を取ろうとすると、非常に面倒な書き方をする必要があります。</p>

<p><code>&quot;ABC ABC&quot;.match(/(ABC)/g)</code> では文字列は取れますが、<code>index</code>を取ることができません。
これをやるには<code>match</code>ではなく、<code>g</code>フラグ付き正規表現と<code>exec</code>や<code>replace</code>を使ってやる必要があります。</p>

<p>これを直感的に行う<code>String.prototype.matchAll</code>というProposalも存在しています。</p>

<ul>
<li><a href="https://github.com/tc39/String.prototype.matchAll#rationale" title="String.prototype.matchAll">String.prototype.matchAll</a></li>
</ul>

<p>今回はこの<code>matchAll</code>的なものと、キャプチャした内容と位置を取得出来る<code>matchCaptureGroupAll</code>をもった<a href="https://github.com/azu/match-index" title="match-index">match-index</a>というライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchCaptureGroupAll</span><span class="p">(</span><span class="s2">&quot;ABC ABC&quot;</span><span class="p">,</span> <span class="sr">/(ABC)/</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install match-index
</code></pre></div>
<p>でインストールできます。</p>

<h2 id="usage">Usage</h2>

<p><code>match-index</code> は２つの関数を持ってます。</p>

<h3 id="matchcapturegroupall-text-regexp-matchcapturegroup"><code>matchCaptureGroupAll(text, regExp): MatchCaptureGroup</code></h3>

<p><code>(</code>と<code>)</code>で囲まれた内容を配列で返してくれます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[{</span>
  <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;strgin&quot;</span><span class="p">,</span>
  <span class="nx">index</span><span class="o">:</span> <span class="mi">5</span> <span class="c1">// 開始位置</span>
<span class="p">}]</span>
</code></pre></div>
<p>配列の中身は<code>text</code>と<code>index</code>という感じになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// get &quot;ABC&quot; and &quot;EFC that are captured by ( and )</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchCaptureGroupAll</span><span class="p">(</span><span class="s2">&quot;ABC EFG&quot;</span><span class="p">,</span> <span class="sr">/(ABC).*?(EFG)/</span><span class="p">);</span>
<span class="c1">// captureGroups is array of MatchAllGroup</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;ABC&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="s2">&quot;EFG&quot;</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div>
<p><code>matchCaptureGroupAll</code> は内部的に次に紹介する <code>matchAll</code> を使っています。</p>

<h3 id="matchall-text-regexp-matchallgroup"><code>matchAll(text, regExp): MatchAllGroup</code></h3>

<p>一方、<code>matchAll()</code>は<a href="https://github.com/tc39/String.prototype.matchAll#rationale" title="String.prototype.matchAll">String.prototype.matchAll</a>と似たような感じですが、キャプチャに関する内容を<code>captureGroups</code>に保持する拡張をしています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;test1test2&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/t(e)(st\d?)/g</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchAll</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">regexp</span><span class="p">);</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>
</code></pre></div>
<p><strong>問題点</strong></p>

<p>これは実装上の問題で、多分正規表現ではなく<a href="http://blog.anatoo.jp/entry/2015/04/26/220026" title="パーサコンビネータ">パーサコンビネータ</a>とかで実装すればどうにかできると思いますが、<a href="https://github.com/azu/match-index" title="match-index">match-index</a>はネストしたキャプチャを正確に扱えないバグがあります。</p>

<p>例えば、次の例は<code>(st(\d?))</code>がネストしているため、<code>index</code>の値がおかしくなっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;test1test2&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/t(e)(st(\d?))/g</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">captureGroups</span> <span class="o">=</span> <span class="nx">matchAll</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">regexp</span><span class="p">);</span>
<span class="cm">/**</span>
<span class="cm"> * @typedef {Object} MatchAllGroup</span>
<span class="cm"> * @property {Array} all</span>
<span class="cm"> * @property {string} input</span>
<span class="cm"> * @property {number} index</span>
<span class="cm"> * @property {MatchCaptureGroup[]} captureGroups</span>
<span class="cm"> */</span>

<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">captureGroups</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">[</span><span class="nx">test1</span><span class="p">,</span> <span class="nx">test2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">captureGroups</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">input</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">all</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;st1&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">]);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">test1</span><span class="p">.</span><span class="nx">captureGroups</span><span class="p">,</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;e&#39;</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;st1&#39;</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="nx">index</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="c1">// Limitation of capture nest</span>
        <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span>
    <span class="p">}</span>
<span class="p">]);</span>
</code></pre></div>
<p>制限として受け止めれば使えますが、いい案が思いつかないので修正するPull Requestを募集しています…</p>

<ul>
<li><a href="https://github.com/azu/match-index" title="azu/match-index: Get index of each capture.">azu/match-index: Get index of each capture.</a></li>
</ul>

<p>このライブラリは<a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="textlint-rule-preset-JTF-style">textlint-rule-preset-JTF-style</a>を<a href="http://efcl.info/2016/03/15/textlint--fix/" title="--fixでの自動修正に対応">--fixでの自動修正に対応</a>に対応するときに、もっと直感的にマッチしてその位置を取得する方法が欲しくて作りました。</p>

<p>これにより書く効率は上がって、つねに<code>g</code>フラグで扱われるので、一度マッチしても最後までちゃんと繰り返しマッチするようになって、全てのエラーを出せるようになったので書いてよかったと思います。(<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>のようなLintの特性上、その行にある全部のエラーを出せた方がよいため)</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
</ul>

<p>小さなライブラリですが、先ほど書いたようなバグができたりするので正規表現は扱うのが結構難しいです…</p>

<ul>
<li><a href="http://blog.anatoo.jp/entry/2015/04/26/220026" title="JavaScriptでパーサコンビネータのコンセプトを理解する(「正規表現だけに頼ってはいけない」の続き) - id:anatooのブログ">JavaScriptでパーサコンビネータのコンセプトを理解する(「正規表現だけに頼ってはいけない」の続き) - id:anatooのブログ</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint 6.0リリース。--fixでの自動修正に対応</title>
   <link href="http://efcl.info/2016/03/15/textlint--fix/"/>
   <updated>2016-03-15T20:33:00+09:00</updated>
   <id>http://efcl.info/2016/03/15/textlint--fix</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a> 6.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/6.0.1" title="Release 6.0: --fix to be stable · textlint/textlint">Release 6.0: --fix to be stable · textlint/textlint</a></li>
</ul>

<p>モジュールとして使っている場合に、細かな破壊的な変更があります。
ツールとして使っている人は単純に<code>npm install textlint@6 -D</code>などでアップデートすれば動くと思います。</p>

<p>textlint自体については以下を見てください。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/">textlintで日本語の文章をチェックする | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h2 id="fixによる自動修正の対応"><code>--fix</code>による自動修正の対応</h2>

<p><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3: --fix &amp;amp; --experimental support">5.5.3: --fix &amp; --experimental support</a>で<code>--fix</code>による自動修正機能を実験的にサポートしていました。</p>

<p>6.0では<code>--fix</code>を<code>--experimental</code>フラグなしで利用できるようになりました。</p>

<p>自動修正はルール側で対応が必要 かつ 原理的に自動修正が難しいルールもあると思うので、あくまで補助的な機能です。</p>

<p><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule">Wiki</a>にまとめてあるルールのうち、✔ fixableマークが付いてるものは対応しています。</p>

<p>対応しているルールをfixableルールと呼んでいて、以下のバッジをつけています。</p>

<p><a href="https://textlint.github.io/"><img src="https://img.shields.io/badge/textlint-fixable-green.svg?style=social" alt="textlint rule"></a></p>

<p>現状では以下のようなルールが<code>--fix</code>に対応しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-prh" title="azu/textlint-rule-prh: textlint rule for prh.">azu/textlint-rule-prh: textlint rule for prh.</a></li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">azu/textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-general-novel-style-ja">io-monad/textlint-rule-general-novel-style-ja: textlint rule to follow general style of Japanese novels</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-spellchecker">nodaguti/textlint-rule-spellchecker: textlint rule to check spellings with native spellchecker</a></li>
<li><a href="https://github.com/nodaguti/textlint-rule-ginger">nodaguti/textlint-rule-ginger: textlint rule to check your English grammar with Ginger Proofreading</a></li>
</ul>

<p>fixableルールは<a href="http://efcl.info/2015/09/14/textlint-rule-prh/">prhと辞書を使った表記揺れの統一</a>や<a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/">JTF日本語標準スタイルガイドを使った表記の統一</a>など、辞書ベースやスタイルの統一を簡単になるのが利点です。</p>

<p>逆に表現的なものをチェックするルールは自動修正が難しく、頑張ってもサジェストのような推敲支援になると思います。</p>

<ul>
<li><a href="http://efcl.info/2015/11/07/nodefest-2015/" title="東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch">東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch</a></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/90.html" title="校正と推敲 | 技術文書をソフトウェア開発する話">校正と推敲 | 技術文書をソフトウェア開発する話</a></li>
<li><a href="http://editor.hatenastaff.com/entry/2016/03/17/113000" title="編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」">編集は「自動化」されていく仕事なのか　編集者のためのイベント「編む庭 」レポ【前編】 - はてな編集部ブログ「編む庭」</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>は校正支援として始めたツールなので、まだ推敲支援のような要素は入っていません。
以下のIssueでそのようなサジェストをどう扱うかについて話し合ってるので興味がある人は見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/158" title="Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint">Feature Request: Multiple fix results and interactive fix · Issue #158 · textlint/textlint</a></li>
</ul>

<p>また<code>--fix</code>はread onlyなlintと違ってwrite処理であるため、バグを作りやすいです。
自分もリリースしてからあるルールでバグがあることに気づいたので、そういうのをテストする方法については以下で話し合っています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/136" title="Document: add &amp;#34;How to test your rule?&amp;#34; · Issue #136 · textlint/textlint">Document: add &quot;How to test your rule?&quot; · Issue #136 · textlint/textlint</a></li>
</ul>

<p>使用してバグを見つけたら、</p>

<ul>
<li>それが特定のルールのバグであるならルールのリポジトリへ</li>
<li>そうでなくて<code>textlint</code>のバグであるなら<a href="https://textlint.github.io/" title="textlint">textlint</a>へ</li>
</ul>

<p>報告してください。</p>

<p>バグ報告の仕方については以下を参考にしてください。</p>

<ul>
<li><a href="https://gist.github.com/azu/913454a54ea8ef59ba30" title="textlint Bug Reporting">textlint Bug Reporting</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/CONTRIBUTING.md#bug-reporting" title="textlint/CONTRIBUTING.md at master · textlint/textlint">textlint/CONTRIBUTING.md at master · textlint/textlint</a></li>
</ul>

<h2 id="fixableルール">Fixableルール</h2>

<p>実際に<code>--fix</code>による自動修正の例を見てみます。</p>

<p>このブログのリポジトリ対象にしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/efcl/efcl.github.io
cd efcl.github.io
</code></pre></div>
<p>次に<code>textlint</code>とfixableに対応してる3つのルール/プリセットをインストールします。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a></li>
<li><a href="https://github.com/io-monad/textlint-rule-common-misspellings">io-monad/textlint-rule-common-misspellings: textlint rule to check common misspellings</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D textlint textlint-rule-preset-jtf-style textlint-rule-spellcheck-tech-word textlint-rule-common-misspellings
</code></pre></div>
<p>インストールし終わったら、<code>.textlintrc</code>にインストールしたルールを使うように設定します。
(<code>--rule</code>や<code>--preset</code>オプションでも指定できますが毎回やるのは面倒なので)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="k">$(</span>npm bin<span class="k">)</span>/textlnt --init
</code></pre></div>
<p>というコマンドを叩くと、空の<code>.textlintrc</code>設定ファイルが作成されるので、編集して次のような設定をします。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;preset-jtf-style&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;spellcheck-tech-word&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;common-misspellings&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>この状態でチェックしたいファイルを指定すれば<code>textlint</code>でLintすることができます。</p>

<p>自分の今まで書いてきた全記事のうちMarkdownをこのルールでLintしてみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts/

...
✖ 6091 problems (6091 errors, 0 warnings)
✓ 5639 fixable problems.
Try to run: $ textlint --fix [file]
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133066.png" alt="result of linting"></p>

<p>絶望的な数のエラーが表示されました…</p>

<p>デフォルトのformatterである<code>-f stylish</code> または <code>-f pretty-error</code>では、
Lintの結果にそのうち自動修正できるエラーの数を表示してくれます。</p>

<p>この数値は実際に修正できる数とは必ずしも一致しません。ルール間は独立しているので、重複や衝突が存在しているためです。基本的には衝突しないように修正を逐次的に処理していく形になります。</p>

<p>このエラーを実際に<code>--fix</code>で修正してみたいと思います。</p>

<p>修正する前に、対象のファイルは必ず復元できるように、バックアップを取るかGitにコミットしておくなどしてください。
また、<code>--dry-run</code>オプションを使うことで、実際にファイルの上書きはしないでどのような変更が行われるかを見ることができます。</p>

<p>変更を比較する場合は <code>-f diff</code> でdiff表示をするformatterを利用すると分かりやすいです。
(<code>--fix</code>は本当に逐次的に処理するので、ルールやファイルが多いと掛け算的に処理時間が増えます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix --dry-run -f diff
# 実際に変更は反映しないでdiffだけをみる

....
✔ Fixed 5713 problems
✖ Remaining 73 problems
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458133752.png" alt="result of fixing"></p>

<p>✖ 6091 problemsのうち✔ Fixed 5713 problemsが自動で修正することができます。
<code>--dry-run</code>で問題ないのが確認できたら、<code>--fix</code>のみにして上書き保存できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint _posts --fix
</code></pre></div>
<p><img src="http://efcl.info/wp-content/uploads/2016/03/16-1458134174.png" alt="fix error"></p>

<h2 id="textlint-v5からv6の変更点">textlint v5からv6の変更点</h2>

<p><a href="http://efcl.info/2015/11/20/textlint5.0.0/" title="textlint 5.0.0">textlint 5.0.0までの変更点</a>については以前書いたので、5.0から6.0までにあった変更点を列挙してみます。</p>

<h3 id="5-1-0"><a href="https://github.com/textlint/textlint/releases/tag/5.1.0" title="5.1.0">5.1.0</a></h3>

<p><code>textlint-rule-preset</code>をサポートしました。
ルールプリセットは個別のルールをまとめたモジュールという位置づけです。</p>

<p>もちろん内蔵しているルール個別に設定を<code>.textlintrc</code>に書くことができるので、
一つのルールに沢山のチェック機能を設けるよりも、個別のルールに分けてルールプリセットとして公開することを推奨しています。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<h3 id="5-2-0"><a href="https://github.com/textlint/textlint/releases/tag/5.2.0" title="5.2.0">5.2.0</a></h3>

<p><code>textlint-formatter-&lt;name&gt;</code>のようなモジュールを<code>--formatter &lt;name&gt;</code>という形で指定できるようになりました。</p>

<p>これを利用したカバレッジを出力するformatterを公開しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-formatter-lcov">azu/textlint-formatter-lcov: textlint formatter for lcov format</a></li>
<li><a href="https://github.com/azu/textlint-formatter-codecov">azu/textlint-formatter-codecov: textlint formatter for codecov json.</a></li>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a></li>
</ul>

<p>formatterの作り方はドキュメントを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/formatter.md" title="textlint/formatter.md at master · textlint/textlint">textlint/formatter.md at master · textlint/textlint</a></li>
</ul>

<h3 id="5-3-0"><a href="https://github.com/textlint/textlint/releases/tag/5.3.0" title="5.3.0">5.3.0</a></h3>

<p><code>--stdin-filename</code> をサポートしました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cat readme.md | textlint --format compact --stdin --stdin-filename readme.md
</code></pre></div>
<p>という感じで標準入力のテキストに対して擬似的な名前を付けることができます。
(拡張子に対応した種類のファイルとしてtextlintが処理するため)</p>

<p>この仕組はSublimeプラグインを作るのに使われています</p>

<ul>
<li><a href="https://github.com/joeybaker/sublimelinter-textlint" title="SublimeLinter-textlint">SublimeLinter-textlint</a></li>
</ul>

<h3 id="5-4-0"><a href="https://github.com/textlint/textlint/releases/tag/5.4.0" title="5.4.0">5.4.0</a></h3>

<p><code>.textlintrc</code>ファイルを作成する<code>--init</code>オプションが追加されました。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint --init
</code></pre></div>
<p>で空の<code>.textlintrc</code>ファイルを作成してくれます。</p>

<p>まだ色々改良の余地があるので興味がある人は以下のIssueを見てください。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/129" title="--init options: Create .textlintrc file · Issue #129 · textlint/textlint">--init options: Create .textlintrc file · Issue #129 · textlint/textlint</a></li>
</ul>

<h3 id="5-5-3"><a href="https://github.com/textlint/textlint/releases/tag/5.5.3" title="5.5.3">5.5.3</a></h3>

<p><code>--fix</code>と<code>--experimental</code>を実験的にサポートしました。
ここで実験的に追加した<code>--fix</code>は6.0.0で正式サポートとなります。</p>

<h3 id="5-6-0"><a href="https://github.com/textlint/textlint/releases/tag/5.6.0" title="5.6.0">5.6.0</a></h3>

<p>ルール開発者向けに<code>RuleError</code>が<code>index</code>プロパティをサポートしました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ruleError</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">context</span><span class="p">.</span><span class="nx">RuleError</span><span class="p">(</span><span class="s2">&quot;Found rule error&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">paddingIndex</span> <span class="p">});</span>
</code></pre></div>
<p>正確なエラーの位置を簡単に指定できます。
今まで通り、<code>column</code>と<code>line</code>の組み合わせでも問題ないですが、<code>column</code>単独の指定は<code>index</code>に書き換える事を推奨しています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md#ruleerror" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md" title="textlint/failed-to-load-textlints-module.md at master · textlint/textlint">textlint/failed-to-load-textlints-module.md at master · textlint/textlint</a></li>
</ul>

<p><a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>でテストしている場合は、<code>column</code>単独の場合には警告を出してくれます。</p>

<h2 id="5-7-0"><a href="https://github.com/textlint/textlint/releases/tag/5.7.0" title="5.7.0">5.7.0</a></h2>

<p>5.7.0では一部formatterがエラーとそのエラーが自動修正できるかを出すようになりました。</p>

<h2 id="6-0"><a href="https://github.com/textlint/textlint/releases/tag/6.0.1" title="6.0">6.0</a></h2>

<p>6.0では</p>

<ul>
<li><code>--dry-run</code>のサポート(<code>--fix</code>と組み合わせて使います)</li>
<li><code>--fix</code>からexperimentalフラグが外れました</li>
<li><code>--fix</code>向けのformatterとして<code>-f diff</code>を追加しました</li>
</ul>

<p>モジュールとして使う場合に関連するものとして</p>

<ul>
<li><code>TextLintEngine#setRulesBaseDirectory</code> が削除されました</li>
<li><code>TextFixEngine</code>が追加されました

<ul>
<li><code>--fix</code>における処理を扱うEngineです</li>
</ul></li>
<li><code>TextLintCore#setupProcessors</code>が追加されました

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/plugin.md" title="Processor">Processor</a>を設定するAPIです</li>
</ul></li>
</ul>

<p>また内部をかなりリファクタリングして、</p>

<ul>
<li>CLI</li>
<li>Engine</li>
<li>Core</li>
</ul>

<p>の役割と関心を分離してディレクトリなどを切るようになりました。
詳しくは以下のドキュメントに書かれています。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/src/README.md" title="textlint/README.md at master · textlint/textlint">textlint/README.md at master · textlint/textlint</a></li>
</ul>

<p>結構長くなりましたが、5.0.0〜6.0.0の変更点は以上です。
Breaking Changeはほとんどのユーザには関係ないものだと思います(実際使ってるコードはGitHub上にはなかった)</p>

<h2 id="その他">その他</h2>

<ul>
<li><a href="http://io-monad.hatenablog.com/entry/2016/03/14/225800" title="文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく">文書校正ツール textlint の Chrome 拡張を作った - もなでぃっく</a></li>
<li><a href="https://chrome.google.com/webstore/detail/textlint-proofreader/hdongmdneapmhfblomidbafplpanpdmm?hl=ja&amp;gl=JP" title="textlint: 文章チェッカー - Chrome ウェブストア">textlint: 文章チェッカー - Chrome ウェブストア</a></li>
</ul>

<p><img src="https://monosnap.com/file/LTo4HPrWD0k8fzfC8J9PRf0dNSJerG.png" alt="textlint on chrome"></p>

<p>Chrome拡張として動くので、Node.jsを入れなくてもブラウザにインストールしてGUIで設定できるので簡単に使うことができます。</p>

<ul>
<li><a href="https://github.com/Nkzn/textlint-prh-template" title="Nkzn/textlint-prh-template: A writing environment watched by textlint &amp;amp; prh">Nkzn/textlint-prh-template: A writing environment watched by textlint &amp; prh</a></li>
</ul>

<p>Atomプラグインとして<a href="https://github.com/1000ch/linter-textlint" title="linter-textlint">linter-textlint</a>を使う場合は上記のリポジトリが参考になるかもしれません。</p>

<h2 id="開発メモ">開発メモ</h2>

<p><code>--fix</code>は5.5から使えたのですが、色々APIデザインを変更する可能性があったのでexperimentalフラグを付けてリリースしました。</p>

<p>浅いイテレーションをするには</p>

<ul>
<li>本体機能をテストしてもらいたいならbetaをとにかく出す</li>
<li>プラグインに関係するエコシステム的な機能を試したいならexperimentalフラグ付きで出す</li>
<li>プラグイン側は最新の本体でしか動かない変更を入れるならメジャーアップデート

<ul>
<li>本体バージョンとプラグインの参照するバージョンがズレているとユーザーはハマります</li>
<li>なのでメジャーアップデートとするのが無難です</li>
</ul></li>
<li>プラグイン側が特定バージョン以降に依存するならpeerDependenciesを付ける</li>
<li>npmのbetaとGitHubのprereleaseを使う

<ul>
<li><code>npm publish --tag beta</code>するalisを使っています</li>
<li><a href="https://gist.github.com/azu/fb3ec88231235511858a">npm version publish alias - http://efcl.info/2015/04/08/npm-publish-pattern/</a></li>
<li><a href="http://efcl.info/2015/04/08/npm-publish-pattern/">npm publishのパターン | Web Scratch</a></li>
</ul></li>
<li>フラグつき機能は、次のメジャーアップデートで外す</li>
<li>testライブラリを作りdeprecatedはプラグイン作者に通知

<ul>
<li>テスト中はガンガン例外を投げて伝える</li>
<li>textlintは<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>経由の実行時のみ例外を投げるUtilを持っています。</li>
<li><a href="https://github.com/textlint/textlint/blob/master/src/util/throw-log.js" title="throw-log.js">throw-log.js</a></li>
</ul></li>
<li>本体とプラグインが同時にnpmのbetaになると辛い

<ul>
<li>βはsemverで<code>&gt;=</code>のような指定ができなくて、直書きする事になって辛いです</li>
</ul></li>
<li>experimentalフラグ付きで本体はstableリリースして、プラグインはstableな本体に依存させたbetaを出す</li>
<li>プラグインがstableリリースする際はメジャーアップデート+peerDependenciesにする

<ul>
<li>この辺が<code>--experimental</code>フラグを作った理由です</li>
</ul></li>
</ul>

<p>課題としては</p>

<ul>
<li>本体のBreaking Changeに依存したプラグインの変更をうまく扱う方法がない</li>
<li>なので本体のBreaking Changeはなるべく小さく、単独でリリースする

<ul>
<li>プラグインがすぐに追従できるような変更の粒度を考える</li>
</ul></li>
</ul>

<p>という感じになっています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScript ASTを始める最初の一歩</title>
   <link href="http://efcl.info/2016/03/06/ast-first-step/"/>
   <updated>2016-03-06T12:39:00+09:00</updated>
   <id>http://efcl.info/2016/03/06/ast-first-step</id>
   <content type="html"><![CDATA[ <p>何かJavaScriptのソースコードを機械的にチェックするためのツールを作りたいという場合に、JavaScriptのASTというものを触る必要が出てくると思います。</p>

<p>この記事では、その取っ掛かりとなる案内を簡単にまとめたものです。</p>

<h2 id="astとは">ASTとは</h2>

<p><a href="http://azu.github.io/slide/JSojisan/#8"><img src="http://efcl.info/wp-content/uploads/2016/03/06-1457240557.png" alt="AST"></a></p>

<p>AST(Abstract Syntax Tree)はコードをパースした抽象構文木のこと。
JavaScriptの場合はJavaScriptオブジェクト(JSON)として表現されます。</p>

<p>コード:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>
<p>AST:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="mi">0</span><span class="p">,</span>
    <span class="mi">10</span>
  <span class="p">],</span>
  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Program&quot;</span><span class="p">,</span>
  <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="mi">10</span>
      <span class="p">],</span>
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclaration&quot;</span><span class="p">,</span>
      <span class="nt">&quot;declarations&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
            <span class="mi">4</span><span class="p">,</span>
            <span class="mi">9</span>
          <span class="p">],</span>
          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;VariableDeclarator&quot;</span><span class="p">,</span>
          <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">4</span><span class="p">,</span>
              <span class="mi">5</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Identifier&quot;</span><span class="p">,</span>
            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span>
          <span class="p">},</span>
          <span class="nt">&quot;init&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;range&quot;</span><span class="p">:</span> <span class="p">[</span>
              <span class="mi">8</span><span class="p">,</span>
              <span class="mi">9</span>
            <span class="p">],</span>
            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Literal&quot;</span><span class="p">,</span>
            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="nt">&quot;raw&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="nt">&quot;kind&quot;</span><span class="p">:</span> <span class="s2">&quot;var&quot;</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&quot;sourceType&quot;</span><span class="p">:</span> <span class="s2">&quot;module&quot;</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="http://azu.github.io/slide/JSojisan/">カジュアルJavaScript AST</a></li>
<li><a href="http://azu.github.io/slide/tkbjs/js-ast-walker.html">JavaScript AST Walker</a></li>
</ul>

<h2 id="astのコミュニティ標準">ASTのコミュニティ標準</h2>

<p>ESTreeというデファクトスタンダードがあります(ES6までは定義されている)</p>

<ul>
<li><a href="https://github.com/estree/estree" title="estree/estree: The ESTree Spec">estree/estree: The ESTree Spec</a></li>
</ul>

<p>経緯: <a href="http://efcl.info/2015/02/26/recent-js-ast/" title="[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch">[2015-02] 最近のJavaScript AST標準化の動き | Web Scratch</a></p>

<ul>
<li><code>token</code>、<code>range</code>、コメントのいち情報周りの扱いがパーサによって異なる</li>
<li>ESTreeで定義されているASTの範囲内ならどのパーサでも殆ど同じ

<ul>
<li>注意: <code>Literal</code>やGeneratorに関してパーサ間で解釈が異なるため議論中です</li>
<li><a href="https://github.com/estree/estree/issues/120" title="Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree">Proposal to potentially incorporate changes to existing nodes · Issue #120 · estree/estree</a></li>
<li>ポータブルな実装をしようとした時にハマるかもしれないので注意</li>
</ul></li>
</ul>

<h2 id="パーサ">パーサ</h2>

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">Babylon</a>

<ul>
<li>Babelで使われてるAcorn派生のパーサ</li>
<li>まだ<a href="http://azu.github.io/slide-what-is-ecmascript/slide/12.html" title="TC39 Process: Stage | ECMAScriptとは何か？">仕様として入るか分からないStage</a>の構文も対応している</li>
<li>注意: 逆にESTree仕様外の拡張もしているため、ESTree互換ではないです。</li>
</ul></li>
<li><a href="http://esprima.org/" title="Esprima">Esprima</a>

<ul>
<li><a href="https://github.com/benjamn/ast-types" title="ast-types">ast-types</a></li>
</ul></li>
<li><a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a></li>
<li><a href="https://github.com/eslint/espree" title="espree">espree</a>

<ul>
<li><a href="http://eslint.org/" title="ESLint">ESLint</a>で使われてるパーサ</li>
<li>AcornベースでEsprimaのtokenとの互換性を持っているパーサ</li>
</ul></li>
</ul>

<p>どのパーサもいろんなツールで使われてる実績があります。
Esprimaで試して、何か足りないならAcorn -&gt; Babylonという感じでやるのが良いと思います。</p>

<p>大きく分けると以下の2系統になっています。</p>

<ul>
<li>Esprima</li>
<li>Acorn</li>
</ul>

<p>BabylonはEStreeの仕様外について積極的にサポートしているため、
それらが必要な場合はBabylonを使うが、そうでないなら他のパーサの方が安定しています。</p>

<h2 id="関連ツール">関連ツール</h2>

<ul>
<li><a href="http://astexplorer.net/" title="AST explorer">AST explorer</a>

<ul>
<li>AST見るのに便利</li>
</ul></li>
</ul>

<h2 id="よくある流れ">よくある流れ</h2>

<ul>
<li>パーサでコードをパースしてASTにする

<ul>
<li><a href="https://github.com/babel/babylon" title="babylon">babylon</a>、<a href="http://esprima.org/" title="Esprima">Esprima</a>、<a href="https://github.com/ternjs/acorn" title="Acorn">Acorn</a>、<a href="https://github.com/eslint/espree" title="espree">espree</a></li>
</ul></li>
<li>ASTをtraverseして処理(変換、チェック)する

<ul>
<li><a href="https://github.com/estools/estraverse" title="estraverse">estraverse</a>、<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>、<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" title="babel-traverse">babel-traverse</a></li>
<li><a href="https://github.com/Rich-Harris/estree-walker" title="estree-walker">estree-walker</a>、<a href="https://github.com/estools/esrecurse" title="esrecurse">esrecurse</a></li>
<li>どのライブラリもほぼおなじものを持っている</li>
</ul></li>
<li>ASTからJSのコードを生成する(チェックのみの場合は不要)

<ul>
<li><a href="https://github.com/estools/escodegen" title="escodegen">escodegen</a>、<a href="https://www.npmjs.com/package/babel-generator" title="babel-generator">babel-generator</a>を使う</li>
<li>ジェネレータはパーサと合わせたツールが必要</li>
<li>Esprimaならescodegen、babelならbabel-generator</li>
</ul></li>
</ul>

<p>Parser、Traverser、Generatorは基本的にセットで同じ系統のツールを使う形になります。</p>

<p>そういうのを考えるのが面倒なので、そこを抽象化するライブラリを作ったりしていました。
コンセプトの証明的なものなので、実用的に使う場合は未対応の部分があると思います。(維持コストが高い)
コントリビュートは歓迎です。</p>

<ul>
<li><a href="https://github.com/azu/ast-source" title="azu/ast-source: AST helper to transform source code.">azu/ast-source: AST helper to transform source code.</a></li>
</ul>

<h2 id="例-evalの中身を解析したい">例) evalの中身を解析したい</h2>

<p>evalの中を取り出して安全に評価したいというケース</p>

<h3 id="evalの中身">evalの中身</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">eval(&quot;var a = 20&quot;)
</code></pre></div>
<ul>
<li><a href="http://kitak.hatenablog.jp/entry/2014/11/15/233649" title="JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog">JSのASTを扱うライブラリをつかって、不要なeval呼び出しを除くコードを書いてみた - kitak.blog</a></li>
</ul>

<p>のようにパースして、evalの中身を取り出すことが可能。</p>

<ul>
<li>何かを防ぐという仕組みから連想できるものはホワイトリスト</li>
<li>ホワイトリストでevalの中で使えるプロパティの名前などを制限する</li>
<li>未知のプロパティを見つけらたらその弾く?</li>
<li>ブラックリストだと何を防止すればいいのかが難しい</li>
</ul>

<h3 id="解析のフェーズ">解析のフェーズ</h3>

<p>適当な考え方(正しいのかは自信ないけど)</p>

<ol>
<li>evalのなかを取り出す</li>
<li>evalのなかのコードをパースする</li>
<li><strong>安全な部分</strong>だけを取り出す</li>
<li>安全な部分で評価する</li>
</ol>

<p><strong>安全な部分</strong> が何かを決める必要がありそう。
安全でないことが分かったら実行は諦める。</p>

<p>というような考え方でやるのがよくあるケースだと思います。</p>

<h2 id="おわりに">おわりに</h2>

<p>上記のようなチェックツールを書くには、まず<a href="http://eslint.org/" title="ESLint">ESLint</a>のルールを見てみるのが参考になるはずです。</p>

<p>書き換えをしたい場合はそのまま書き換えるとASTのTree内で不整合が起きて大変になります。
<a href="https://github.com/facebook/jscodeshift" title="jscodeshift">jscodeshift</a>や<a href="https://github.com/benjamn/ast-types#ast-traversal" title="ast-types">ast-types</a>などのライブラリが使えないか検討してみてください。</p>

<p>また、同様の機能を持つツールがどういうライブラリを使っているかを調べてみるのが近道になるはずです。
例えば、モジュールbundleツールの<a href="https://github.com/rollup/rollup" title="rollup">rollup</a>は<a href="https://github.com/Rich-Harris/magic-string" title="magic-string">magic-string</a>というライブラリで文字列の操作をしていることが分かります。</p>

<p>現在のASTの状況はESTreeより先のデファクトがないため新しい構文を扱おうとすると色々考えることが出てきます。
そういった時には<a href="https://github.com/azu/ast-source" title="ast-source">ast-source</a>のような抽象層が必要になってくるかもしれません。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>#uruu_sushi アウトラインメモ</title>
   <link href="http://efcl.info/2016/02/29/uruu_sushi/"/>
   <updated>2016-02-29T23:10:00+09:00</updated>
   <id>http://efcl.info/2016/02/29/uruu_sushi</id>
   <content type="html"><![CDATA[ <p>うるう年なので<a href="https://twitter.com/hashtag/uruu_sushi?src=hash" title="#uruu_sushi">#uruu_sushi</a>を食べてきた。</p>

<ul>
<li><a href="http://togetter.com/li/944473" title="#uruu_sushi - Togetterまとめ">#uruu_sushi - Togetterまとめ</a></li>
</ul>

<p>脆弱性報告</p>

<ul>
<li>バグハンター</li>
<li><a href="https://hackerone.com/" title="HackerOne: Vulnerability Coordination and Bug Bounty Platform">HackerOne: Vulnerability Coordination and Bug Bounty Platform</a></li>
<li>Bug Bountyのプラットフォームなども最近できてきた

<ul>
<li>報告者/企業のレーティングなどができる</li>
<li>特定のレーティング向けの案件なども存在する</li>
</ul></li>
<li>脆弱性報告はやり取りのコストがある</li>
<li>そのため単純にBug bounty programが増えるだけだと嬉しくない</li>
<li>報告したことに対して即時レスポンスがあると報告者として安心できる</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「報告者としては新規報告先とのやりとりは結構負担になるので、報告先が増えてもそんなに嬉しくない」<br> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; サスケ (@kyo_ago) <a href="https://twitter.com/kyo_ago/status/704269476515041280">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>報奨金制度</p>

<ul>
<li>バグハンター同士、企業間同士の脆弱性に関する情報共有する場所がない</li>
<li>報告を受け付ける側も脆弱性報告により新しい攻撃方法を知ることがある

<ul>
<li>関連サービスに同様の問題があり、そちらを直すことができる</li>
</ul></li>
<li><a href="https://www.ipa.go.jp/security/vuln/CVSS.html" title="共通脆弱性評価システムCVSS">共通脆弱性評価システムCVSS</a>

<ul>
<li>ドメインに依存しないので、指標として扱いやすい</li>
<li>逆にオープンリダイレクターの扱いが高いなど、現実の扱いと異なるケースもある</li>
</ul></li>
</ul>

<p>Case</p>

<ul>
<li>安全にファイルダウンロードを実装するのは難しい</li>
<li>ServiceWorkerは本当に安全?</li>
<li>HTMLをHTTPSでホスティングするサービスで何か悪さができてしまわないか</li>
<li>普通にウェブサイトで普通のXSSというような問題は少なくなってきてる</li>
<li>Railsのようなフレームワークに普通に乗っていればそういう問題はおこりにくい</li>
<li>ブラウザというサンドボックスはある程度安全

<ul>
<li>そこから外れたものを作った場合に問題が起こりやすい</li>
<li>Electron, Firefox OS</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a> これの話  &quot;Firefox OS is not helping the web — Anne’s Blog&quot;  <a href="https://t.co/XhdnAdaDTX">https://t.co/XhdnAdaDTX</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704275123025477632">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">XSSとかSQLiとかはどんどん減ってきてる。今はアクセス権問題が割合として増えてきている <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/704290564158525440">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="仕様とセキュリティ-azu">仕様とセキュリティ - azu</h2>

<p>セキュリティな問題のある仕様の変更や、
現実の実装に合わせた仕様の定義とうような変更があったよ的な話をしました。</p>

<ul>
<li><code>Object.prototype.</code> hijack</li>
<li><a href="http://ecmascript-daily.github.io/2015/12/26/how-should-browsers-mitigate-proxy-related-security-issues-issue-272-tc39-ecma262" title="How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily">How should browsers mitigate Proxy-related security issues? · Issue #272 · tc39/ecma262 | ECMAScript Daily</a></li>
</ul>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;data=&quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://victim/test.csv&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<ul>
<li>POC on Chrome(<code>chrome://flags/#enable-javascript-harmony</code>)</li>
<li>Changed in ES2016 Draft 2016-02-15</li>
</ul>

<blockquote>
<p><code>Object.prototype</code> is an immutable prototype exotic object.<br>
-- <a href="https://github.com/tc39/ecma262/releases/tag/es2016-draft-20160215" title="Release ES2016 Draft 2016-02-15 · tc39/ecma262">Release ES2016 Draft 2016-02-15 · tc39/ecma262</a></p>
</blockquote>

<ul>
<li>WHATWG HTML define Window</li>
<li><a href="https://github.com/whatwg/html/commit/acae3df652b382e9f4f1d1b4dc7e08e2b00df821" title="Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df">Define security around Window, WindowProxy, and Location properly · whatwg/html@acae3df</a></li>
</ul>

<h2 id="node-js-と-es6-modules">Node.js と ES6 modules</h2>

<ul>
<li><a href="https://github.com/nodejs/node-eps/pull/3" title="002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps">002: ES6 module interop by bmeck · Pull Request #3 · nodejs/node-eps</a></li>
<li>interoperabilityに関するIssue</li>
<li>interoperability優先 vs 原則</li>
<li>interoperabilityは大事だが、何のためにES6モジュールを使うのかを見失っている可能性

<ul>
<li>静的に解析出来る</li>
<li>ブラウザ/Nodeどちらでも動く</li>
<li>本来はこの2つが目的だったはず。interoperabilityのためにこれが犠牲になってしまうのでは。</li>
</ul></li>
<li>npmというエコシステムの互換性</li>
<li>互換性という魔法のコトバがある限り意見の一致が難しい</li>
<li>Python 3になってはいけない</li>
<li>意見が割れてる、議論になってない</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Python3ifyじゃなくて、Python3ishだった <a href="https://t.co/fwE7PBbIkQ">https://t.co/fwE7PBbIkQ</a> <a href="https://twitter.com/hashtag/uruu_sushi?src=hash">#uruu_sushi</a></p>&mdash; teppeis (@teppeis) <a href="https://twitter.com/teppeis/status/704327441595019265">February 29, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="どうやって脆弱性の探し方を学ぶのか">どうやって脆弱性の探し方を学ぶのか</h2>

<ul>
<li>脆弱性の探し方はどうやって学ぶのか</li>
<li>コード書くときにコード書くパターンがあるように、脆弱性を探す人も脆弱性を探すパターンがあるはず</li>
<li>検査的な文字列パターンを持ってる</li>
<li>特殊なツールは使ってない</li>
<li>逆に普通の開発者がどうやってセキュリティ的な問題を見つけたり、どういうツールを使ってるのかを知らない</li>
</ul>

<p>セキュリティ診断</p>

<ul>
<li>バグハンターのような特殊な人達に調査を頼むのと、脆弱性診断サービスの違い</li>
<li>セキュリティ業界とウェブ開発者の意識の違い

<ul>
<li>セキュリティ業界が最新のウェブに疎く見える問題</li>
<li>ウェブ側もセキュリティをよくわからない問題</li>
</ul></li>
<li>間に繋ぐような人が重要という話</li>
</ul>

<h2 id="おわり">おわり</h2>

<p>セキュリティ寿司は久々な気がする。</p>

<ul>
<li><a href="http://efcl.info/2014/0415/res3844/" title="テストとセキュリティの葉桜JSに参加してきた | Web Scratch">テストとセキュリティの葉桜JSに参加してきた | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintの公式サイト(オンラインデモ)を作りました</title>
   <link href="http://efcl.info/2016/02/24/textlint-online-demo/"/>
   <updated>2016-02-24T19:49:00+09:00</updated>
   <id>http://efcl.info/2016/02/24/textlint-online-demo</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/"><img src="http://azu.github.io/slide/2016/reject-sushi/img/textlint.png" alt="textlint"></a></p>

<p><a href="http://textlint.github.io/" title="textlint - pluggable linting tool for text and markdown">textlint - pluggable linting tool for text and markdown</a></p>

<p>textlintの公式サイトというがオンラインデモページを作成しました。</p>

<ul>
<li><a href="http://textlint.github.io/#demo">textlint.github.io/#demo</a></li>
</ul>

<p>上記にページにアクセスするとブラウザ上でtextlintを動かして試すことができます。</p>

<p>デフォルトだと<a href="https://github.com/azu/textlint-rule-rousseau" title="textlint-rule-rousseau">textlint-rule-rousseau</a>や<a href="https://github.com/azu/textlint-rule-alex" title="textlint-rule-alex">textlint-rule-alex</a>といった英語向けのルールが設定されていますが、npmモジュール名を指定すれば任意のルールも読み込めます。</p>

<p>例えば、<a href="https://github.com/azu/textlint-rule-spellcheck-tech-word" title="textlint-rule-spellcheck-tech-word">textlint-rule-spellcheck-tech-word</a>と入れて&quot;Add rule&quot;するとこのルールが動的に追加できて試せます
<a href="https://www.brcdn.org/" title="Browserify CDN">Browserify CDN</a>で動的にビルドして読み込んでいるので、Browserifyでビルドできないルールは流石にブラウザ上では動かないです。
(後、形態素解析とかやってるルールはそもそものファイルサイズが大きいです)</p>

<p>このサイトは<a href="https://github.com/dekujs/deku" title="Deku">Deku</a> v2互換の<a href="https://github.com/rstacruz/decca" title="decca">decca</a>と<a href="https://github.com/reactjs/redux" title="Redux">Redux</a>で作りました。</p>

<p>Deku v2は最小限のAPIでReduxと合わせて使いやすい作りなので、初めてReduxを触るときはReact(<a href="https://github.com/reactjs/react-redux" title="react-redux">react-redux</a>)と合わせて使うよりもシンプルで理解しやすいかもしれません。</p>

<p>最近のtextlintを3分で把握できるスライドも書いたので、どんな感じのものをかをぱっと知りたい方は見ると面白いかもしれません。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/reject-sushi/textlint.html" title="3分でわかるtextlint">3分でわかるtextlint</a></li>
</ul>

<h2 id="デザイン">デザイン</h2>

<p><img src="https://textlint.github.io/media/logo/textlint-logo.png" alt="logo"></p>

<p>textlintのロゴやアイコンを<a href="https://github.com/uetchy" title="uetchy">@uetchy</a>さんに作っていただきました。</p>

<p>ロゴやアイコンやバナーはCC0ライセンスで利用できるので自由にご利用ください。</p>

<ul>
<li><a href="https://github.com/textlint/media" title="textlint/media: Official logo and icon.">textlint/media: Official logo and icon.</a></li>
</ul>

<p>このロゴやアイコンは<a href="https://github.com/textlint/media/pull/1#issuecomment-174872043">Issueで話し合いながら作って頂いた</a>のですが、その中の<a href="https://github.com/textlint/textlint.github.io/issues/1#issuecomment-176210780">デザイン見本にウェブサイト</a>があったのでそれを元に実装した感じになっています。</p>

<p>サイトは説明文とオンラインデモしかないので、ドキュメントはあいかわらずリポジトリの中に入ったままです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/tree/master/docs" title="textlint/docs at master · textlint/textlint">textlint/docs at master · textlint/textlint</a></li>
</ul>

<p>最近、<a href="https://github.com/textlint/textlint/blob/master/docs/getting-started.md" title="Getting Started with textlint">Getting Started with textlint</a>という最初にとりあえず動かすまでのチュートリアルを書いたので、textlintを使ってみたい人はこの辺から読むといいかもしれません。</p>

<p>またサクッとプロジェクトに導入したい場合はルールがある程度まとまったルールプリセットを使うと、手軽に日本語のLintを始めることができます。</p>

<ul>
<li><a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch">ルールプリセットを使ってお手軽にtextlint入門 | Web Scratch</a></li>
</ul>

<p>他のtextlint関連記事は以下から探すことができます。</p>

<ul>
<li><a href="http://efcl.info/tags/?q=textlint" title="タグ一覧 | Web Scratch">textlint - タグ一覧 | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 

</feed>
