<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-12-31T18:04:21+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>ECMAScriptの情報サイトを始めて1年経った</title>
   <link href="http://efcl.info/2016/12/31/ecmascript-daily/"/>
   <updated>2016-12-31T15:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/31/ecmascript-daily</id>
   <content type="html"><![CDATA[ <h2 id="ecmascript-daily"><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a></h2>

<p>そういえば、<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>というECMAScriptの情報サイトをやってます。</p>

<p><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/commit/ad9f0cc626ff7188733b36ed45f2acc355c937bd">2015年12月</a>ぐらいに始めたので、1年ぐらい経ってましたがそういえばブログ書いてないことに気づいたので書いています。</p>

<p>基本的には<a href="https://jser.info/" title="JSer.info">JSer.info</a>のECMAScript特化版という位置づけで、基本的な更新スタンスはJSer.infoとは変わらないです。</p>

<p>週一とかではなくて、新しい情報がでたら直接更新のスタイルなので、<a href="https://realtime.jser.info/" title="Realtime JSer.info">Realtime JSer.info</a>(JSer.infoのリアルタイム版)の方がより近いです。</p>

<p>記事自体もほぼリンクだけに近いので、Twitter(<a href="https://twitter.com/ecmascriptdaily" title="@EcmascriptDaily">@EcmascriptDaily</a>)で見たほうが分かりやすいかもしれません。</p>

<p><a href="https://twitter.com/EcmascriptDaily" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @EcmascriptDaily</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);</script></p>

<p>週1でまとめて見たい場合は<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>からメールマガジンに登録できるので、そっちで見るとかするといいと思います。</p>

<p>基本的にはリンクを投げっぱなしですが、新しい<a href="https://github.com/rwaldron/tc39-notes" title="ECMA, TC39 Meeting Notes">ECMA, TC39 Meeting Notes</a>が出たときは変更があったProposalをまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals">ECMAScript proposal updates @ 2016-11 | ECMAScript Daily</a></li>
<li><a href="https://ecmascript-daily.github.io/2016/10/02/proposals-updates">ECMAScript proposal updates @ 2016-10 | ECMAScript Daily</a></li>
</ul>

<p>後たまに、型の仕様提案の現状をまとめたりしてます。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/pages/status-of-static-typing-in-ecmascript/">Status of Static Typing in ECMAScript | ECMAScript Daily</a></li>
</ul>

<p>基本的にはECMAScriptの仕様と各実装のステータスとか、仕様に関する記事を取り上げたりしてる感じです。</p>

<p>他に類似するサイトは<a href="http://esnextnews.com/" title="ES.next News">ES.next News</a>ぐらいですが、最近あんまり更新されてない感じがします…</p>

<ul>
<li><a href="http://esnextnews.com/" title="ES.next News">ES.next News</a></li>
</ul>

<p>ECMAScriptに興味がある人は見てみるといいと思います。</p>

<p>Jekyllで動かしてるのですが、けっこう適当に作ってそのままなので、Contribution募集しています！</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/issues/13" title="feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com">feature: support paging · Issue #13 · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>

<p>また、取り上げたい記事をPRするでも良いです。</p>

<ul>
<li><a href="https://github.com/ecmascript-daily/ecmascript-daily.github.com/blob/master/CONTRIBUTING.md" title="ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com">ecmascript-daily.github.com/CONTRIBUTING.md at master · ecmascript-daily/ecmascript-daily.github.com</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint --cacheオプションでチェックを高速化した</title>
   <link href="http://efcl.info/2016/12/28/textlint-cache/"/>
   <updated>2016-12-28T09:33:00+09:00</updated>
   <id>http://efcl.info/2016/12/28/textlint-cache</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> 7.2.0で <code>--cache</code> と <code>--cache-location</code> オプションをサポートしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/7.2.0" title="Release 7.2.0 · textlint/textlint">Release 7.2.0 · textlint/textlint</a></li>
</ul>

<p>基本的にはESLintのキャッシュオプションと同じです。
前回のLint結果のキャッシュから変化したファイルのみがチェックの対象になる仕組みです。</p>

<ul>
<li><a href="http://eslint.org/docs/user-guide/command-line-interface#caching" title="Command Line Interface - ESLint - Pluggable JavaScript linter">Command Line Interface - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><code>textlint</code>コマンドに <code>--cache</code> オプションを付けて実行するだけです。
後は、毎回このコマンドを付けて実行すれば変更したファイルのみがチェック対象になるので、実行時間が高速化されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">textlint --cache docs/
</code></pre></div>
<p><code>--cache</code>オプションを付けるとデフォルトでは、 <code>.textlintcache</code> という名前のファイルにキャッシュができます。</p>

<p>キャッシュファイルを任意の名前にしたい場合は <code>--cache-location</code> オプションで指定した場所にキャッシュファイルを作ることができます。</p>

<h2 id="実行例">実行例</h2>

<p>自分が知ってる中では一度にtextlintがやる処理が一番多い<a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>で試してみます。</p>

<p>このプロジェクトではファイル数やルール数が多いのもそうですが、textlintの中でESLintを動かしてJavaScriptのコードもチェックしてたりキャッシュの有無がかなり速度に影響がありました。</p>

<ul>
<li><a href="http://efcl.info/2016/07/06/eslint-with-textlint/" title="MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch">MarkdownのコードブロックをESLintでチェックするtextlintルール | Web Scratch</a></li>
</ul>

<h3 id="cacheなし">--cacheなし</h3>

<p>15秒ぐらいかかって遅い。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint:no-cached

&gt; js-primer@1.0.0 textlint:no-cached /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error

npm run textlint:no-cached  14.68s user 1.18s system 99% cpu 15.926 total
</code></pre></div>
<h3 id="cacheあり">--cacheあり</h3>

<p>3秒程度になった。
(1つファイルを変更した状態で実行)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">time </span>npm run textlint

&gt; js-primer@1.0.0 textlint /Users/azu/.ghq/github.com/asciidwango/js-primer
&gt; summary-to-path ./source/README.md <span class="p">|</span> xargs textlint -f pretty-error --cache

npm run textlint  2.17s user 0.41s system 85% cpu 3.022 total
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p><code>--cache</code> をつけるだけで結構実行時間が変わるので、大量のファイルをtextlintで繰り返しチェックしている場合は試してみてください。</p>

<p>また、エディタ連携系なら元々1つのファイルのみを対象に実行しているはずなので、キャッシュなくても普通な速度で動くと思います。</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする - Qiita</a></li>
<li><a href="http://post.simplie.jp/posts/51">textlintで日本語の文章を校正する方法とAtomへの導入手順 | Simplie Post</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintのルールを簡単に作り始めることができるツールを作りました</title>
   <link href="http://efcl.info/2016/12/14/create-textlint-rule/"/>
   <updated>2016-12-14T20:31:00+09:00</updated>
   <id>http://efcl.info/2016/12/14/create-textlint-rule</id>
   <content type="html"><![CDATA[ <p><a href="https://textlint.github.io/" title="textlint">textlint</a>はJavaScriptで自由にルールを追加することができる仕組みになっています。</p>

<ul>
<li><a href="http://efcl.info/2015/09/10/introduce-textlint/" title="textlintで日本語の文章をチェックする | Web Scratch">textlintで日本語の文章をチェックする | Web Scratch</a></li>
</ul>

<p>しかし、普段JavaScriptをあんまり使ってない人には<a href="https://babeljs.io/" title="Babel">Babel</a>を使ったコード変換や<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストの設定など、ルールを書き始めるまでの環境づくりの方が大変です。</p>

<p>そのような環境設定をコマンド一発で作れて、textlintルールを作り始めることができるツールを作りました。</p>

<ul>
<li><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>

<ul>
<li>Scaffolding Tool</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>

<ul>
<li>BabelやMochaなどのコマンドをラップしたもの</li>
</ul></li>
</ul>

<h2 id="使い方">使い方</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を <a href="https://www.npmjs.com/">npm</a>(Node.jsのパッケージマネージャ)でインストールするだけです。
Node.js(推奨はver6以上)をインストールすれば <code>npm</code> コマンドが自動で入っています。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>npm install -g create-textlint-rule
</code></pre></div>
<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>をインストールすると<code>create-textlint-rule</code>コマンドが利用できます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule --help

  Create textlint rule with no configuration

  Usage
    <span class="nv">$ </span>create-textlint-rule rule-name

  Options
    --help  Show <span class="nb">help</span>
    --yarn  Use yarn <span class="k">for</span> installing
    --yes   Pass --yes all <span class="k">for</span> install process

  Examples
    <span class="nv">$ </span>create-textlint-rule awesome-rule
</code></pre></div>
<h3 id="textlintのルールプロジェクトを作る">textlintのルールプロジェクトを作る</h3>

<p><code>found-bug</code>という&quot;bug&quot;をテキストから見つけるルールプロジェクトを作ってみます。</p>

<p>次のように、引数にルール名を渡すだけで、<code>textlint-rule-found-bug</code>というディレクトリにtextlintのルールが作成されます。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
</code></pre></div>
<p>実際のログは次のような感じで、一部対話的にルールの簡単な<code>description</code>などを入力しますが、基本的にはEnterでいいはずです。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>create-textlint-rule found-bug
Cloning into <span class="s1">&#39;textlint-rule-found-bug&#39;</span>...
remote: Counting objects: 9, <span class="k">done</span>.
remote: Compressing objects: 100% <span class="o">(</span>7/7<span class="o">)</span>, <span class="k">done</span>.
remote: Total <span class="m">9</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">4</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused 0
Unpacking objects: 100% <span class="o">(</span>9/9<span class="o">)</span>, <span class="k">done</span>.
<span class="nb">cd</span> /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug
Initialized empty Git repository in /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/.git/
Input information about your textlint rule
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See <span class="sb">`</span>npm <span class="nb">help </span>json<span class="sb">`</span> <span class="k">for</span> definitive documentation on these fields
and exactly what they <span class="k">do</span>.

Use <span class="sb">`</span>npm install &lt;pkg&gt; --save<span class="sb">`</span> afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any <span class="nb">time </span>to quit.
name: <span class="o">(</span>textlint-rule-found-bug<span class="o">)</span>
version: <span class="o">(</span>1.0.0<span class="o">)</span>
description: This textlint rule found bugs.
git repository:
license: <span class="o">(</span>MIT<span class="o">)</span>
About to write to /Users/azu/.ghq/github.com/azu/own/textlint-rule-found-bug/package.json:

<span class="o">{</span>
  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;1.0.0&quot;</span>,
  <span class="s2">&quot;keywords&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;textlint&quot;</span>,
    <span class="s2">&quot;rule&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;main&quot;</span>: <span class="s2">&quot;lib/index.js&quot;</span>,
  <span class="s2">&quot;files&quot;</span>: <span class="o">[</span>
    <span class="s2">&quot;lib/&quot;</span>,
    <span class="s2">&quot;src/&quot;</span>
  <span class="o">]</span>,
  <span class="s2">&quot;scripts&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;textlint-scripts test&quot;</span>,
    <span class="s2">&quot;build&quot;</span>: <span class="s2">&quot;textlint-scripts build&quot;</span>,
    <span class="s2">&quot;prepublish&quot;</span>: <span class="s2">&quot;npm run --if-present build&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;devDependencies&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;textlint-scripts&quot;</span>: <span class="s2">&quot;^1.2.2&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;textlint-rule-found-bug&quot;</span>,
  <span class="s2">&quot;description&quot;</span>: <span class="s2">&quot;This textlint rule found bugs.&quot;</span>,
  <span class="s2">&quot;directories&quot;</span>: <span class="o">{</span>
    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;test&quot;</span>
  <span class="o">}</span>,
  <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;azu&quot;</span>,
  <span class="s2">&quot;license&quot;</span>: <span class="s2">&quot;MIT&quot;</span>
<span class="o">}</span>


Is this ok? <span class="o">(</span>yes<span class="o">)</span>
Wait... Installing npm packages <span class="k">for</span> development
Setup your README!
Generated README.md
✔ Complete: Let<span class="err">&#39;</span>s create textlint rule
</code></pre></div>
<p>作成した<code>textlint-rule-found-bug</code>ディレクトリには、次のようなファイルが作られています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint-rule-found-bug/
├── README.md
├── lib
│   ├── index.js
│   └── index.js.map
├── node_modules
├── package.json
├── src
│   └── index.js
└── test
    └── index-test.js
</code></pre></div>
<p>基本的には<code>src/index.js</code>にルールのコードを書いていき、<code>test/index-test.js</code>にルールのテストを書きます。</p>

<p><code>lib/</code>はnpmで公開するコードが置かれる場所なので、デフォルトでは<code>.gitignore</code>されているためいじる必要はありません。</p>

<h3 id="build">Build</h3>

<p>次のコマンドを叩くことで、<code>src/</code>以下にあるES2015+で書かれたコードを<a href="https://babeljs.io/" title="Babel">Babel</a>を使って変換し<code>lib/</code>以下においてくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run build
</code></pre></div>
<h3 id="test">Test</h3>

<p>次のコマンドを叩くことで、<code>test/</code>以下にある<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>と<a href="http://mochajs.org/" title="Mocha">Mocha</a>を使ったテストを動かします。</p>

<p>テストコードの書き方は<a href="https://github.com/textlint/textlint-tester" title="textlint-tester">textlint-tester</a>を参照してください。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm test
</code></pre></div>
<h3 id="ルールの開発">ルールの開発</h3>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule.md" title="textlint/rule.md at master · textlint/textlint">textlint/rule.md at master · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/rule-advanced.md" title="textlint/rule-advanced.md at master · textlint/textlint">textlint/rule-advanced.md at master · textlint/textlint</a></li>
</ul>

<p>などのドキュメントがあります。</p>

<p>また、textlintはASTを元にルールを書くため、次のASTビューアを見ながら構造を知ると書きやすくなります。</p>

<ul>
<li><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></li>
</ul>

<p>簡単な方法として既存のルールからやりたい事と近いものを見つけて、それをパクるのが近道だと思います。</p>

<p>100以上のルールがあり、自分が書いたものは<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>で作った構造とほぼ同じなので、コード部分に集中すれば問題ないはずです。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="publish">publish</h3>

<p>ルールの公開は基本的には<a href="https://www.npmjs.com/">npm</a>に公開します。
<code>pacakge.json</code>の<code>version</code>を上げたり<code>git tag</code>を貼るなどは<a href="https://docs.npmjs.com/cli/version" title="npm-version">npm-version</a>を使うと簡単です。
<a href="http://semver.org/lang/ja/">semver</a>なバージョンを上げたら、<a href="https://docs.npmjs.com/cli/publish" title="npm-publish">npm-publish</a>コマンドで公開すれば完了です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm version patch
# npm version minor
# npm version major
npm publish
</code></pre></div>
<p>これで、npmに公開された<code>textlint-rule-found-bug</code>が、npmでインストールすることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-found-bug
</code></pre></div>
<p>後は、<code>.textlintrc</code>に設定して使えばいいだけです。</p>

<p>作ったルールの使い方も実は<a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>が自動的にREADME.mdに書いてくれています。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">## Usage

Via `.textlintrc`(Recommended)

```json
{
    &quot;rules&quot;: {
        &quot;found-bug&quot;: true
    }
}
```

Via CLI

```
textlint --rule found-bug README.md
```
</code></pre></div>
<p>作ったルールはWikiに追加してみましょう。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<h3 id="tips">Tips</h3>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>を使い、作ったプロジェクト内で、<code>textlint</code>にルールを読み込ませて確認する方法。</p>

<p>プロジェクトをビルドして、<code>textlint</code>の<code>--rulesdir</code>で直接ルールを読み込んで使えば、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm run build
$ $(npm bin)/textlint --rulesdir ./lib/ README.md
# $(npm bin) は ./node_modules/.bin と同じなので次でもOK
$ ./node_modules/.bin/textlint --rulesdir ./lib/ README.md
</code></pre></div>
<p>もしくは、ローカルで作ったプロジェクトを<code>npm install</code>することでも、publishせずに確認できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 試したいプロジェクトで、textlint-rule-found-bugへのローカルパスを指定
$ npm install /path/to/textlint-rule-found-bug
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/textlint/create-textlint-rule" title="create-textlint-rule">create-textlint-rule</a>と<a href="https://github.com/textlint/textlint-scripts" title="textlint-scripts">textlint-scripts</a>を使うことで、面倒な環境はある程度簡単に作れるようになっています。</p>

<p>面白いtextlintのルールを自作して文章を改善の助けになればと思います。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>class extends構文を使わずにArrayを継承する</title>
   <link href="http://efcl.info/2016/11/23/array-subclass-by-reflect/"/>
   <updated>2016-11-23T17:19:00+09:00</updated>
   <id>http://efcl.info/2016/11/23/array-subclass-by-reflect</id>
   <content type="html"><![CDATA[ <p>ES2015から<code>class extends</code>を使うことでクラスを継承することができます。
これにより今まで継承するのが難しかったビルトインの<code>Array</code>や<code>Error</code>の継承ができるようになってます。</p>

<ul>
<li><a href="http://speakingjs.com/es5/ch28.html" title="Chapter 28. Subclassing Built-ins">Chapter 28. Subclassing Built-ins</a></li>
<li><a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/" title="How ECMAScript 5 still does not allow to subclass array — Perfection Kills">How ECMAScript 5 still does not allow to subclass array — Perfection Kills</a></li>
</ul>

<p><code>class</code>を使うと次のように普通に<code>extends</code>できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">SubArray</span> <span class="kr">extends</span> <span class="nb">Array</span> <span class="p">{</span>
  <span class="nx">last</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">last</span><span class="p">());</span> <span class="c1">// =&gt; &quot;x&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// =&gt; &quot;1,2,3,x&quot;</span>
<span class="nx">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;no such item&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 11</span>
</code></pre></div>
<p>内部的にはprototypeであることには変わらないので、<code>class</code>という新しい構文を使わなくても同じ表現をすることがES2015からは可能です。(新しい構文じゃなくて関数的な書き方でできるという話)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">SubArray</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">construct</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">,</span> <span class="nx">SubArray</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">SubArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">last</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
<span class="nx">Reflect</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">SubArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
<span class="nx">Reflect</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">SubArray</span><span class="p">,</span> <span class="nb">Array</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">last</span><span class="p">());</span> <span class="c1">// =&gt; &quot;x&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// =&gt; &quot;1,2,3,x&quot;</span>
<span class="nx">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;no such item&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 11</span>
</code></pre></div>
<p><code>Reflect.construct</code>を使うことで<code>length</code>プロパティの特殊な動きもちゃんと継承できています。</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct">Reflect.construct() - JavaScript | MDN</a></li>
<li><a href="https://esdiscuss.org/topic/extending-an-es6-class-using-es5-syntax">extending an ES6 class using ES5 syntax?</a></li>
<li><a href="http://nazomikan.hateblo.jp/entry/2015/05/17/000755" title="exotic objectがhost objectの呼び名が変わったものという風潮 - ぶれすとつーる">exotic objectがhost objectの呼び名が変わったものという風潮 - ぶれすとつーる</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>東京Node学園祭2016 アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/13/nodefest2016/"/>
   <updated>2016-11-13T18:25:00+09:00</updated>
   <id>http://efcl.info/2016/11/13/nodefest2016</id>
   <content type="html"><![CDATA[ <p><a href="http://nodefest.jp/2016/" title="東京Node学園祭2016 | 11月12日,13日開催！">東京Node学園祭2016</a>に参加してきたのでメモ</p>

<hr>

<h2 id="demystifying-javascript-engines-alejandro-oviedo">Demystifying JavaScript Engines - Alejandro Oviedo</h2>

<ul>
<li><a href="https://github.com/a0viedo/demystifying-js-engines" title="a0viedo/demystifying-js-engines: A list of resources about JavaScript engines">a0viedo/demystifying-js-engines: A list of resources about JavaScript engines</a></li>
<li>2006年のJavaScriptエンジン

<ul>
<li>インタプリタ</li>
<li>遅い</li>
<li>最適化しても遅い</li>
</ul></li>
<li>Fortran、Self、Smalltalkの人がより良い方法を考えた

<ul>
<li>(Source) -&gt; Parse -&gt; (bytecode) -&gt; executionPhase &lt;-&gt; JIT Compiler</li>
<li>何度も実行するコードはJITコンパイラを通すようにした</li>
<li>プロパティのアクセスの最適化、Hidden Classなど色々な最適化

<ul>
<li><a href="https://github.com/v8/v8/wiki/Design%20Elements" title="Design Elements · v8/v8 Wiki">Design Elements · v8/v8 Wiki</a></li>
</ul></li>
<li><code>eval</code>と<code>try-catch</code>が最適化の邪魔になってることがある</li>
</ul></li>
<li>さらに変化して

<ul>
<li>execution phase

<ul>
<li>&lt;-&gt; unoptimiging compiler (インラインキャッシュとか)</li>
<li>&lt;-&gt; optimiging compiler</li>
</ul></li>
<li>何回か実行して、optimizeできるコードとそうでないコードを分別する</li>
</ul></li>
<li>SpiderMonkey

<ul>
<li>Interpreter(ParseとExecution) -&gt; JIT &lt;-&gt; Ionmonkey

<ul>
<li>Baseline compiler + Ionmonkey</li>
</ul></li>
<li>数百回動かして super optimize フラグがついたものはIonmonkeyで動く</li>
<li>bailoutした場合は、FallbackとしてInterpreterじゃなくてJITのコードを使ってる</li>
</ul></li>
<li>Chakra

<ul>
<li>FallbackとしてInterpreterが動く</li>
</ul></li>
<li>V8

<ul>
<li>Sourcecode

<ul>
<li>-&gt; Ignition</li>
<li>-&gt; Fullcodegen &lt;- (AST) -&gt; Crankshaft(+ TurboFan)</li>
</ul></li>
<li><a href="http://v8project.blogspot.jp/2016/08/firing-up-ignition-interpreter.html" title="V8 JavaScript Engine: Firing up the Ignition Interpreter">V8 JavaScript Engine: Firing up the Ignition Interpreter</a></li>
</ul></li>
<li>JavaScriptCode

<ul>
<li>SourceCode

<ul>
<li>-&gt; LLInt</li>
<li>-&gt; Baseline Compiler</li>
<li>-&gt; DFG Compiler</li>
<li>-&gt; FTL Compiler</li>
</ul></li>
<li>今はFTLじゃなくなってる - <a href="https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/" title="Introducing the B3 JIT Compiler | WebKit">Introducing the B3 JIT Compiler | WebKit</a></li>
</ul></li>
<li>最適化について

<ul>
<li>ループ内で動かない変数はループの外に出す <a href="https://en.wikipedia.org/wiki/Loop_optimization" title="Loop optimization">Loop optimization</a></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>関数のインライン化

<ul>
<li>関数を呼び出すとコンテキストスイッチが起きる</li>
<li>なので、関数をインライン化できるとコンテキストスイッチが減って早くなる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">fn</span><span class="p">();</span> <span class="c1">// &lt;= インライン化される</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>Dead code elimination 

<ul>
<li>ループの中にあっても、外で使ってないものは削除されてしまう</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &lt;= 使ってない</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>GCについて

<ul>
<li>Incremental GC

<ul>
<li>ちょっとづつやる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="debugging-node-js-performance-issues-in-production-thomas-watson">Debugging Node.js Performance Issues in Production - Thomas Watson</h2>

<ul>
<li>Thomas watson</li>
<li><a href="https://opbeat.com/" title="Opbeat">Opbeat</a>

<ul>
<li>パフォーマンスモニタリング</li>
</ul></li>
<li>Node.jsアプリのパフォーマンスモニタリングをしてなぜ遅くなったのかを見つける</li>
<li>プロダクションのアプリをどうやってデバッグするか</li>
<li>何が重要か(why production?)</li>
<li>productionで起きるエラーを見つけるのは難しい</li>
<li>開発時と違ってローカルじゃなくてリモートでデバッグするから難しい</li>
<li>Premature Optimization

<ul>
<li>productionに入る前に最適化仕様として間違った部分を最適化してしまうのは危険なところ</li>
</ul></li>
<li>計測

<ul>
<li>パフォーマンスの計測はどうやるか</li>
<li><code>JSON.parse(req.body)</code>

<ul>
<li>大きなリクエストがきたらJSON parseが遅くなる</li>
</ul></li>
<li><code>console.time</code>を使うことでシンプルな計測はできる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="c1">// json-parse: 154.12ms</span>
</code></pre></div>
<ul>
<li>けど、なぜ遅いのかは色々な要因がある

<ul>
<li>(Single Threaded)</li>
<li>CPUをよくつかうコード</li>
<li>Slow I/O</li>
<li>Event loopにイベントを突っ込みすぎ</li>
<li>メモリの使いすぎ</li>
<li>GC

<ul>
<li>Stop the world</li>
</ul></li>
</ul></li>
<li>CPU Intensive Code

<ul>
<li>Sync I/O</li>
<li>JSON parase</li>
<li>RegExp</li>
<li>Crypto</li>
<li>Templates</li>
</ul></li>
<li>Demo

<ul>
<li><code>$ node --perf_basic_prof_only_functions cpu.js</code></li>
<li><code>perf</code> コマンド</li>
<li><a href="http://int.main.jp/txt/perf/" title="perfの使いかた">perfの使いかた</a></li>
<li><code>perf</code>で<code>perf.data</code>を使ってそれを見ていく</li>
<li>JavaScriptとLinuxのカーネルの関数のマッピングしているデータをみてデバッグ</li>
<li><a href="https://www.npmjs.com/package/0x" title="0x">0x</a>でflamechartを作って見る

<ul>
<li>JavaScriptとカーネルの関数の呼び出しをflamechartで見る</li>
</ul></li>
<li>flamechartを見るとcpu.js:13が重たい</li>
<li><code>cpu.js</code>を見てみると crypto 部分が重たい</li>
<li>syncな処理をやってたのをasyncにすればいい感じになりそう</li>
</ul></li>
<li>mdb

<ul>
<li>何で動かないのはよくわからないときのデバッグ</li>
<li><a href="https://github.com/joyent/mdb_v8" title="joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs">joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs</a></li>
<li><a href="https://www.joyent.com/blog/mdb-and-node-js" title="Joyent | MDB and Node.js">Joyent | MDB and Node.js</a></li>
<li><code>--abort_on_uncaught_exception</code> V8のダンプを出せる</li>
<li><a href="https://www.npmjs.com/package/autopsy" title="autopsy">autopsy</a>をつかつと  SolarisのVMを動かせるので、そこでmdbをやるのが簡単</li>
</ul></li>
</ul>

<hr>

<h2 id="サイボウズの開発を支えるkaizen文化-teppeis">サイボウズの開発を支えるKAIZEN文化 - teppeis</h2>

<blockquote>
<p><a href="http://www.slideshare.net/teppeis/kaizen-68803503" title="サイボウズの開発を支えるKAIZEN文化">サイボウズの開発を支えるKAIZEN文化</a></p>
</blockquote>

<ul>
<li>技術的負債を貯めるデータベースを作った</li>
<li>貯めていって時間があるときにやろう

<ul>
<li>貯まるだけでいつまでも減らない</li>
</ul></li>
<li>KAIZEN DAY

<ul>
<li>技術的負債 -&gt; KAIZEN</li>
<li>リファクタリングだけじゃなくて開発プロセスについても改善</li>
</ul></li>
<li>一日に終わらないタイプのKAIZENが進まない

<ul>
<li>KAIZEN DAYでも割り込みがある</li>
</ul></li>
<li>KAIZEN合宿

<ul>
<li>泊りがけでやる</li>
<li>一日で終わらないものもやる</li>
<li>終了後にプログラマ以外も呼んで発表会をやった</li>
</ul></li>
<li>KAIZEN

<ul>
<li><a href="http://pepabo-ceo.jugem.jp/?eid=40" title="スーパーリセット | ペパボ社長ブログ">スーパーリセット | ペパボ社長ブログ</a></li>
</ul></li>
<li>メインプロダクトで遊びづらい

<ul>
<li>B2Bサービス

<ul>
<li>サービス停止 = ユーザーの仕事も止まる</li>
</ul></li>
<li>大規模</li>
<li>新しいものを入れにくい</li>
<li>短期要件に振り回されることは少ないけど、新規ものが少ない</li>
</ul></li>
<li>技術的な変遷

<ul>
<li><a href="http://stateofjs.com/" title="Home">フロントエンドのアンケート</a></li>
<li>3年ぐらいで変化はある</li>
<li>けど、結果論なので途中ではもっと色々変化ある</li>
<li>そういう技術的な変化を試す場所が必要</li>
</ul></li>
<li>サイドプロジェクトで試す

<ul>
<li><a href="http://blog.cybozu.io/entry/2015/11/04/080000" title="cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ">cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ</a></li>
<li>サイドでやってメインにも適応</li>
</ul></li>
<li>リモートワーク

<ul>
<li>テレビ会議をどこでもできるような仕組みが必要</li>
</ul></li>
<li>振り返り

<ul>
<li>振り返りの振り返り</li>
</ul></li>
</ul>

<h2 id="keynote">Keynote</h2>

<blockquote>
<p><a href="http://www.theserverside.com/news/4500279472/Seif-project-makes-Web-security-a-priority" title="Seif project makes Web security a priority">Seif project makes Web security a priority</a></p>
</blockquote>

<ul>
<li>MS、Apple、Adobe、Oracle

<ul>
<li>Webをリプレイスしようとしたけど、失敗</li>
<li>すべてのソリューションはオープンじゃなかった</li>
<li>Webはオープン</li>
</ul></li>
<li>Self Project

<ul>
<li>architectureはWebとは違うけど、ウェブブラウザで動く</li>
<li>Public key cryptは使われてる</li>
<li>CAは信用できないので</li>
</ul></li>
<li><code>seifnode</code>

<ul>
<li>cryptographic </li>
<li><a href="https://github.com/paypal/seifnode" title="paypal/seifnode">paypal/seifnode</a></li>
<li>random(RNG) - 一番大切</li>
<li>Entropy

<ul>
<li>OS、Microphone(音)、Camera</li>
<li>強いランダムを作る</li>
</ul></li>
</ul></li>
<li>Seif Protocol

<ul>
<li>Secure JSON Over TCP</li>
<li><a href="https://github.com/paypal/seif-protocol" title="paypal/seif-protocol: Node.js Implementation of the Seif protocol">paypal/seif-protocol: Node.js Implementation of the Seif protocol</a></li>
<li>ECC521 as unique = パスワードの代わり</li>
</ul></li>
<li>Seif Handshake</li>
<li><a href="http://www.seif.place/" title="The Seif Project">The Seif Project</a></li>
</ul>

<hr>

<h2 id="why-to-standardize-your-readmes-richard-littauer">Why to Standardize your READMEs - Richard Littauer</h2>

<blockquote>
<p><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></p>
</blockquote>

<ul>
<li>README

<ul>
<li>READMEはユーザーへのprotocol</li>
<li>READMEは一番最初に読む</li>
<li>ドキュメントよりも大事かも</li>
</ul></li>
<li>READMEを見たときに

<ul>
<li>なんて呼ぶの?</li>
<li>なぜ使うべきなの?</li>
<li>インストールの仕方</li>
<li>コントリビューター</li>
<li>ライセンス</li>
</ul></li>
<li>READMEに必要に必要なもの

<ul>
<li>タイトル</li>
<li>説明</li>
<li>インストール</li>
<li>ロゴ</li>
<li>バックグランド</li>
<li>セキュリティ</li>
<li>API</li>
<li>などなど</li>
</ul></li>
<li>ドキュメント

<ul>
<li>コード見なくても使えるのが100%</li>
</ul></li>
<li>問題

<ul>
<li>いろんなパッケージマネージャー</li>
<li>npmはパッケージが多い</li>
</ul></li>
<li>READEMEは難しい

<ul>
<li>書くのも難しい</li>
<li>パースするのも難しい</li>
</ul></li>
<li>Standard

<ul>
<li>READMEにもStandard(JS)みたいなものを作ろう</li>
<li>考えずに扱えるもの</li>
</ul></li>
<li>Standard README

<ul>
<li>A Specification</li>
<li>A Generator</li>
<li>A Linter</li>
<li>A badge </li>
<li>Example Templete</li>
</ul></li>
<li><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></li>
<li>Require

<ul>
<li>Title</li>
<li>Short Description</li>
<li>ToC</li>
<li>Install</li>
<li>Usage</li>
<li>Contribute</li>
<li>License</li>
</ul></li>
<li>Optional

<ul>
<li>Badge</li>
</ul></li>
<li>Generator

<ul>
<li><a href="https://github.com/RichardLitt/generator-standard-readme" title="RichardLitt/generator-standard-readme: Scaffold out a Standard Readme">RichardLitt/generator-standard-readme: Scaffold out a Standard Readme</a></li>
<li>Uses yeoman</li>
</ul></li>
<li>Linter

<ul>
<li>まだ</li>
</ul></li>
<li>UPTAKE

<ul>
<li>Standards.js とかでも使ってる</li>
</ul></li>
<li>Future

<ul>
<li>Linter</li>
<li>ExampleをREPLで試せるようにする</li>
<li>NLP

<ul>
<li>検索がもっとしやすくなる</li>
</ul></li>
</ul></li>
<li>FAQ

<ul>
<li>i18n README

<ul>
<li>Specなしより簡単にはなる</li>
</ul></li>
<li>Requirementsはどこに?

<ul>
<li>Install</li>
<li><a href="https://github.com/RichardLitt/standard-readme/blob/master/spec.md#install" title="standard-readme/spec.md at master · RichardLitt/standard-readme">standard-readme/spec.md at master · RichardLitt/standard-readme</a></li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="vue-js-サーバーサイドレンダリング">Vue.js サーバーサイドレンダリング</h2>

<blockquote>
<p><a href="https://speakerdeck.com/kazupon/vue-dot-js-2-dot-0-server-side-rendering" title="Vue.js 2.0 Server Side Rendering // Speaker Deck">Vue.js 2.0 Server Side Rendering // Speaker Deck</a></p>
</blockquote>

<ul>
<li>Vue.js 2.0

<ul>
<li>Progressive Framework</li>
</ul></li>
<li>Virtual DOM

<ul>
<li><a href="https://github.com/snabbdom/snabbdom" title="snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.">snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.</a>が元</li>
</ul></li>
<li>レンダリングシステム

<ul>
<li>ライフサイクル</li>
</ul></li>
<li>テンプレート

<ul>
<li>-&gt; AST</li>
<li>テンプレート言語の部分 = 動的</li>
<li>テンプレート言語じゃない部分 = 静的なNode</li>
<li>静的なNodeを静的なノードツリーを検出する</li>
</ul></li>
<li>レンダリング

<ul>
<li>Watcherというものが<code>render</code>関数を呼ぶ</li>
<li>render結果をvDOMにしてdiff+patchする</li>
</ul></li>
<li>仮想ノードツリー

<ul>
<li>ダイナミックと静的なノードツリー</li>
<li>ノードツリーをマージして期待するDOMを生成する</li>
</ul></li>
<li>サーバーサイドレンダリング

<ul>
<li>v1は独自のサーバ実装が必要だった</li>
<li>hydrogenの仕組みとかもなかった</li>
<li>v2ではvDOMとかあるのでできるようになった</li>
</ul></li>
<li>クライアントとサーバ</li>
<li>...</li>
</ul>

<hr>

<h2 id="react-reduxを使った大規模商用サービスの開発">React + Reduxを使った大規模商用サービスの開発</h2>

<ul>
<li>bookingtable.jp</li>
<li>ウェブ版

<ul>
<li>BFF(Backend for Frontend)を用意してやってる</li>
<li>アプリ版もあるのでそれぞれBFFがある</li>
</ul></li>
<li>React/Reduxのハマりどころ

<ul>
<li><code>mapToState</code></li>
</ul></li>
<li>ハマりどころ</li>
<li>画面遷移

<ul>
<li>ログインしてない -&gt; ログイン -&gt; replaceState/replaceしないと戻ったときにおかしくなる</li>
<li>POPならスクロール位置を戻す、PUSHならTOP 0にする</li>
</ul></li>
<li>Stateが集まるまでComonentをレンダリングしない

<ul>
<li>loading = true/false をstate管理して</li>
<li>loading = trueになったときにレンダリングする</li>
<li><a href="https://github.com/recruit-tech/redux-async-loader" title="recruit-tech/redux-async-loader: Async data loader for Redux apps.">recruit-tech/redux-async-loader: Async data loader for Redux apps.</a></li>
</ul></li>
<li>iPhoneの画面スワイプでのもどる/すすむ

<ul>
<li>画面スワイプして戻ると一瞬戻る前の画面でてしまう</li>
<li>戻って一瞬でてから、表示が更新される</li>
</ul></li>
<li>Monolithic JavaScript

<ul>
<li>ビルドすると毎回ファイル変わって再ダウンロードになってしまうのを避けたい</li>
<li>Before: 一個のjs</li>
<li>After: webpackJsomp、appX.js、vendor.js</li>
<li><code>require.ensure</code>(webpack)とRouterで動的ロード</li>
<li>Hotな画面は scriptタグで事前ロード</li>
<li>そうでない画面は <code>require.ensure</code> で動的ロード</li>
<li>Script Load Error

<ul>
<li>webpack 1.xだと<code>require.ensure</code>でのエラーが拾えない</li>
<li>表示 =&gt; デプロイ =&gt; 遷移仕様とするとエラーになってしまう</li>
<li><a href="https://github.com/webpack/webpack/issues/758" title="require.ensure error handling · Issue #758 · webpack/webpack">require.ensure error handling · Issue #758 · webpack/webpack</a></li>
</ul></li>
</ul></li>
<li>webpackのモジュールID問題

<ul>
<li>webpackでmodule一つ一つ idが振られてる</li>
<li>applyModuleIdsでidを振られてる</li>
<li>コレの前にidをsortしてあげればidが決まる</li>
</ul></li>
<li>SSR

<ul>
<li>checksumで比較して、合ってるならサーバのレンダリング結果を使う</li>
<li>一致しない場合は、一度捨ててクライアントでレンダリングする</li>
<li>サーバサイドの<code>renderToString</code>で数百msかかる</li>
</ul></li>
<li>Partial Reandering

<ul>
<li>見えるところだけサーバ、他はクライアントで</li>
<li>SEOは?

<ul>
<li>Google Botsはクライアントサイドレンダリングでもちゃんと認識する</li>
</ul></li>
</ul></li>
<li>SSR Cache

<ul>
<li>サーバサイドでキャッシュする</li>
<li>ユーザーの情報を含んでいるとレンダリングできない</li>
</ul></li>
<li>Composite Rendering

<ul>
<li>レンダリング方式を動的に切り替える</li>
<li>高負荷時はキャッシュを活用するなど</li>
</ul></li>
<li>まとめ

<ul>
<li>サーバサイドレンダリングはターンアラウンドタイム的にやらない方がよい</li>
</ul></li>
</ul>

<hr>

<h2 id="introducing-now-and-next-js-nkzawa">Introducing Now and Next.js - nkzawa</h2>

<blockquote>
<p><a href="https://speakerdeck.com/nkzawa/introducing-now-and-next-dot-js" title="Introducing Now and Next.js // Speaker Deck">Introducing Now and Next.js // Speaker Deck</a></p>
</blockquote>

<ul>
<li><a href="https://zeit.co/now">Now: realtime global deployments</a></li>
<li><a href="https://zeit.co/blog/next">ZEIT – Next.js</a>

<ul>
<li>の話</li>
</ul></li>
<li>Next.js</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D next.js
$(npm bin)/next
# pages/ にコンポーネントを書いていく
</code></pre></div>
<ul>
<li>Next.jsは設定必要なし

<ul>
<li>Hot ReloadingとかBabelとかそういうのは自動的にやる</li>
</ul></li>
<li>SPA

<ul>
<li>初期表示が遅い</li>
<li>ページが増えると重くなる</li>
</ul></li>
<li>解決方法

<ul>
<li>サーバサイドレンダリング

<ul>
<li>ファイル置くだけでできる</li>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415" title="【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch">【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch</a></li>
</ul></li>
<li>コード分割 + 遅延ロード

<ul>
<li>ページごとに結合ファイルを生成して分割する</li>
</ul></li>
</ul></li>
<li>CSS

<ul>
<li><a href="https://github.com/threepointone/glamor" title="threepointone/glamor: inline css for react et al">threepointone/glamor: inline css for react et al</a>を使ってる</li>
</ul></li>
<li><code>&lt;Link /&gt;</code>

<ul>
<li>遅延読み込み + history.pushState</li>
</ul></li>
<li><code>&lt;Head /&gt;</code>

<ul>
<li><code>&lt;head /&gt;</code> の中身を書ける</li>
<li><a href="https://github.com/zeit/next.js/blob/master/lib/head.js" title="next.js/head.js at master · zeit/next.js">next.js/head.js at master · zeit/next.js</a></li>
</ul></li>
<li><a href="https://zeit.co/now" title="now">now</a>

<ul>
<li>Next.jsをどうやってデプロする</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm i -g now
$ now
</code></pre></div>
<ul>
<li>nowでの設定

<ul>
<li><code>npm start</code> を定義する</li>
</ul></li>
<li>特徴

<ul>
<li>デプロイするたびに新しいURLを作る

<ul>
<li>古いURLはそのまま残る</li>
<li>エイリアスを差し替えることで切り替わる</li>
<li>URLが常に同じアプリの状態表す</li>
</ul></li>
<li>オートスケール

<ul>
<li>自動的にスケールする</li>
<li>アクセスがない場合は 0 になる</li>
</ul></li>
<li>データの永続化

<ul>
<li>オートスケールでインスタンスが消えるのでデータは外部に保存する</li>
</ul></li>
</ul></li>
<li>now + micro

<ul>
<li>基本的にHTTPでやり取りするのでlambdaのようにロックインがない</li>
</ul></li>
</ul>

<hr>

<h2 id="the-evolution-of-electron-cheng-zhao">The Evolution of Electron - Cheng Zhao</h2>

<ul>
<li>3つの名前を持っている</li>
<li>ElectronはAtomのために作った</li>
<li>5年前

<ul>
<li>GitHub CEOが元でCocoaのアプリケーションだった</li>
</ul></li>
<li>AtomのChromium Embbed Frameworkをつかうようになった</li>
<li>これによりクロスプラットフォームになった

<ul>
<li>Atom: Cocoa -&gt; Chromium Embedded Framework -&gt; Atom Shell -&gt; Electron</li>
</ul></li>
<li>Chromium Embedded Framework -&gt; Node-Webkitに移行しようとした

<ul>
<li>Atomは結構でかいコードベースだったので、Node.jsのバインでィングに書き換える作業が難航</li>
<li>失敗</li>
</ul></li>
<li>node-webkitの改善を続ける -&gt; node-webkitの開発者を雇う = Cheng Zhao</li>
<li>node-webkitは複数ウィンドウのアプリケーションを扱えなかった</li>
<li>node-webkitを書き直すこと決意

<ul>
<li>Atom-Shellを作ることにした</li>
</ul></li>
<li>node-webkit と atom-shellの違い

<ul>
<li>エントリポイントがhtmlとjsが違う</li>
<li>Chromiumのビルドの問題など</li>
</ul></li>
<li>AtomとAtom-shellはOSSになった

<ul>
<li>Atom-Shell -&gt; Electronにリネームされた</li>
<li>Electron: 37000</li>
</ul></li>
<li>Electron製のアプリは毎日毎日新しいものが公開され、あなたのPCのディスクを食べます</li>
<li>Electronは個人プロジェクトとして始まったけど、今は外部Contributorが多くなった

<ul>
<li>Contributorがいなくなるとプロジェクトが終わる</li>
</ul></li>
<li>Contributorをちゃんとキープするには

<ul>
<li>IssueやPull Requestに対してちゃんと反応する</li>
<li>開発環境を簡単にセットアップできるようにする</li>
<li>よりよいコードレビューをできるようにしたり</li>
<li>リファクタリングをちゃんとやる

<ul>
<li>Contributorはそのプロジェクトをちゃんと理解してるわけではないので</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="browser-is-the-new-server-gleb-bahmutov">Browser is the new server - Gleb Bahmutov</h2>

<ul>
<li>KENSHO</li>
<li>Quickly

<ul>
<li>CDN</li>
<li>paralled downloads</li>
<li>caching</li>
<li>small image</li>
<li>などなどできてたけどまだ遅い</li>
</ul></li>
<li>Pivotal Tracker

<ul>
<li>リロードしただけなのに数秒かかる</li>
</ul></li>
<li>開発者ツールを開いて見ると

<ul>
<li>5秒ぐらいJavaScriptの処理に使ってた</li>
<li><code>HTML = App(DATA)</code></li>
<li><code>HTML</code>と<code>DATA</code>をキャッシュする</li>
</ul></li>
<li>リロード

<ul>
<li><a href="https://glebbahmutov.com/hydrate-vue-todo/" title="Hydrate Vue Todo">Hydrate Vue Todo</a></li>
<li>タイトルはすぐでるけど、内容は一瞬ちらっとする</li>
</ul></li>
<li>ServiceWorker

<ul>
<li>そこでServiceWorker</li>
<li>ブラウザの上で動くProxy</li>
<li>リクエストをProxyして処理できる</li>
<li><code>navigator.serviceWorker.register</code></li>
<li>Firefox/Chrome/Opera</li>
<li><code>https</code>が必須</li>
<li>Androidのモバイルでも既に使える</li>
</ul></li>
<li>ServiceWorkerの中

<ul>
<li><code>fetch</code> のhook</li>
<li><a href="https://github.com/bahmutov/bottle-service" title="bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache">bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache</a></li>
</ul></li>
<li>オフライン

<ul>
<li>ブラウザのアプリはサーバがないと何もできない</li>
<li>ServiceWorkerの中にサーバを入れる</li>
</ul></li>
<li>サーバをブラウザで

<ul>
<li>express.js + middleware を browserifyで変換して、ServiceWorkerの中で動かす</li>
<li>express service</li>
<li><a href="https://github.com/bahmutov/express-service" title="bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker">bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker</a></li>
<li>オフラインでも動く</li>
<li>SWのコードはDevToolsのJavaScript無効でも動く</li>
<li>クライアントサイドのサーバサイドのJavaScript(ServiceWorkerの中のJS)でサーバサイドレンダリングしてる

<ul>
<li>最新のChromeはlinkタグでもServiceWorkerを登録できる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<p>メモ</p>

<ul>
<li>人数が増えたので人口密度高かった</li>
<li>会場的に廊下とかで話すスペース場所とかあるとよかったのではと思った</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>mu-pdf-viewerに検索一覧をつけた</title>
   <link href="http://efcl.info/2016/11/07/mu-pdf-search/"/>
   <updated>2016-11-07T10:02:00+09:00</updated>
   <id>http://efcl.info/2016/11/07/mu-pdf-search</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/mu-pdf-viewer" title="mu-pdf-viewer">mu-pdf-viewer</a>は上から下へ読むように作ったので、検索など移動して読むパターンはイマイチでした。</p>

<ul>
<li><a href="http://efcl.info/2016/10/12/mu-pdf-viewer/" title="pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch">pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch</a></li>
</ul>

<p>タイトルのように、Cmd+Fで検索したら同時に検索結果の一覧を表示できるようにしました。
クリックすると移動もできるので、これでリファレンス的に探すのも少しは便利になりそうです。</p>

<p><iframe src="//giphy.com/embed/l0HlNxuHU8SmqmYus" width="480" height="242" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/l0HlNxuHU8SmqmYus">via GIPHY</a></p></p>

<p>自動でGitHub Releaseにアップロードしてるバイナリバグってる気がするので、動かない場合はローカルでビルドした方が良さそうです。(イマイチ原因分かってない…)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run electron:build:osx
</code></pre></div>
<p>ECMAScriptの仕様書をオフラインで検索し易い形で読む方法を探してたらこうなりました。
(<a href="https://github.com/cho45/Chemrtron">Chemrtron</a>が求めてるようなものな気がするので、あとでもう一度挑戦したい。検索結果はでるけど、クリックも何もできなくてよくわからなかった。)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>W3C TAG デベロッパー・サミット アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/02/w3ctagdevmeetup/"/>
   <updated>2016-11-02T20:50:00+09:00</updated>
   <id>http://efcl.info/2016/11/02/w3ctagdevmeetup</id>
   <content type="html"><![CDATA[ <p><a href="http://frontend.connpass.com/event/42323/" title="W3C TAG デベロッパー・サミット">W3C TAG デベロッパー・サミット</a>に参加してきたのでメモ。</p>

<h2 id="web-payment-api-eiji">Web Payment API - eiji</h2>

<ul>
<li>Payment APIはUXを改善するためのAPI</li>
<li>購入するためのAPIじゃない</li>
<li>デモ

<ul>
<li>Polymer Shop</li>
</ul></li>
</ul>

<h2 id="webrtc-と-sfu-sakkuru">WebRTC と SFU - sakkuru</h2>

<ul>
<li>WebRTCてきななにか</li>
<li>P2Pでリアルタイムにやり取り</li>
<li>SkyWay

<ul>
<li>WebRTCを使うためのプラットフォーム</li>
</ul></li>
<li>つらいことが多い WebRTC</li>
<li>WebRTCの通信が始まるまで

<ul>
<li>ブラウザ同士でコネクションを結ぶ</li>
<li>やりとりはSDPというテキストデータ</li>
<li>ブラウザによってSDPが違う

<ul>
<li>Chrome PlanB SDP</li>
<li>Firefox Unified Plan SDP</li>
</ul></li>
</ul></li>
<li>SFU

<ul>
<li>P2Pでやる場合はフルメッシュでやる必要がある

<ul>
<li>自分以外全てに通信しないといけない</li>
<li>負荷が高い</li>
</ul></li>
<li>SFU

<ul>
<li>中央にサーバを置く</li>
<li>クライアントはSFUに向かって通信する</li>
<li>クライアントの負荷が減る</li>
</ul></li>
<li>SkyWay

<ul>
<li>SFUサーバの無償提供</li>
</ul></li>
</ul></li>
<li>最近 SFU

<ul>
<li>まだChromeのみ</li>
<li>Firefoxも実装始まった</li>
</ul></li>
</ul>

<h2 id="https-migration-in-local-network-w3c-trac">HTTPS migration in local network @  W3C Trac</h2>

<blockquote>
<p><a href="http://www.slideshare.net/sakkuru/webrtcsfu" title="WebRTCとSFU">WebRTCとSFU</a></p>
</blockquote>

<ul>
<li>ローカルネットでHTTPSを使いたいという話</li>
<li>HTTPとHTTPSのやり取りの問題

<ul>
<li>Secure Context</li>
<li>mixed contextの問題</li>
</ul></li>
<li>Video Stream

<ul>
<li>ローカルキャッシュサーバ</li>
</ul></li>
<li>この話の問題

<ul>
<li>ローカルの機器にどんなドメインを付けるのかなどの問題</li>
</ul></li>
<li>A) Public DNS + Public Certificate

<ul>
<li>機器の提供側がPublicなDNSと証明書認証局を運営</li>
<li>ローカルIPに対するものをちゃんと返す</li>
</ul></li>
<li>B) mDNS + Private &quot;.local&quot; Certificate

<ul>
<li>Let&#39;s Encryptのローカル版みたいな</li>
<li>ブラウザ側に新しいAPIがいる</li>
</ul></li>
</ul>

<hr>

<h1 id="breakout-session-css-houdini">Breakout Session: CSS Houdini</h1>

<p>1時間ぐらいTOPICに対してDiscussion</p>

<ul>
<li>CSSのレイアウトの部分をSecureとPeformantな方法で持ってくるAPI</li>
<li>JavaScriptからそういったものを扱う方法</li>
<li>●として扱うとか(Paint)</li>
<li>レイアウトだけじゃなくて、テキストだったり、エフェクト(影)とかを及ぶ影響を与えることができるAPI群に総称</li>
<li>CSSのリグレッションテスト</li>
<li>これまでのCSSの表現にJavaScriptで介入することができる</li>
<li>カスタムプロパティとかを持っと簡単に追加できるように

<ul>
<li>仕様を追加するまであまりに大きなこと</li>
<li>Boxtree API</li>
<li>CSS自体の拡張とAPIとして拡張ポイント</li>
<li>CSSは影響範囲が大きすぎるので、新しい機能を提供するのが難しい</li>
</ul></li>
<li>Custom Elementなら

<ul>
<li><code>-</code>を含めろとかがある。 </li>
<li>Custom Propertyは<code>--</code>で開始するというルールなので、既存のものとはぶつからない</li>
<li>新しいものについてはまだ検討されてない</li>
</ul></li>
<li>マイルストーン

<ul>
<li>足並み揃えるの難しいのでないよ</li>
</ul></li>
<li>HoudiniはCSSの補完的な機能

<ul>
<li>CSSに新しい機能を追加するときに待つ必要があった</li>
<li>これを開発者的にJavaScriptで追加できるようなAPIを提供する仕様</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Incubation WG

<ul>
<li>ウェブの機能に関する問題をどう解決するかという議論している</li>
<li>Fast Track的な早いパスでウェブ標準を作っていく</li>
<li>いいアイデアを集めたりする</li>
</ul></li>
<li>2つの方向

<ul>
<li>新しい機能を追加する</li>
<li>既にある機能を拡張する</li>
</ul></li>
<li>Incubationの意味

<ul>
<li>色々議論して議論を進めていくという意味</li>
</ul></li>
<li><a href="https://discourse.wicg.io/" title="WICG">WICG</a>

<ul>
<li>誰でも気軽にコミュニティ</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Web Payment Request API

<ul>
<li>UIは大きくは変更できない</li>
<li>ロゴを入れるとかはできる</li>
</ul></li>
<li>セキュリティ

<ul>
<li>今より悪くなることはない</li>
<li>今はフォームで送るのでハックされる可能性がある</li>
<li>Web Payment Request APIはtokenでやり取り</li>
</ul></li>
<li>月額課金

<ul>
<li>なんとかなる?</li>
</ul></li>
<li>Custom Field

<ul>
<li>今のところはない</li>
<li>検討される余地がある</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Security

<ul>
<li>TAG</li>
<li>HTTPSを広く使われるようにする</li>
<li>Static ContentのサーバでもHTTPS使う必要があるのか?

<ul>
<li>Privacyのprotectionが一つのニーズ</li>
<li>Mixed Contentの問題

<ul>
<li>サードパーティコンテンツの問題</li>
</ul></li>
</ul></li>
<li>Let&#39;s Encryptの証明書 EVに対して信頼性

<ul>
<li>セキュリティのTrustは数を組み合わせて実現する</li>
<li>EV/DV証明書はTrustを組み合わせてやってる</li>
<li>なので信頼性がほしいならEVとかの方がー</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="memo">memo</h2>

<p>ahomuさんとパフォーマンス計測について話してたメモ</p>

<ul>
<li>小さな改善はやはりブレに吸収される</li>
<li>のでコツコツ改善していくしかない</li>
<li>早いうち定常的に計測して視覚化してないと、どこでおそくなったか分からないので、早い段階から値を記録してた方が良い</li>
<li>マシンでperfの値が違う問題は sitespeed.io とかspeedcurveとか外から見るやつを回し続ける</li>
<li>speedcurve使ってるけど、完璧なソリューションというわけでもない</li>
<li>けど、どこで問題になったかが分かりやすくなる</li>
<li>mousemoveとかインタラクションに対するパフォーマンスは、機械的に計測しにくいので、手動で…</li>
<li>:money_with_wings: で人を動かした方が安くて質が高い</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>同じイベントのaddEventListenerを1つにまとめるライブラリを書いた</title>
   <link href="http://efcl.info/2016/11/02/ui-event-observer/"/>
   <updated>2016-11-02T09:48:00+09:00</updated>
   <id>http://efcl.info/2016/11/02/ui-event-observer</id>
   <content type="html"><![CDATA[ <p><code>UIEventObserver</code>という同じ要素への同じイベントを貼る <code>addEventListener</code> を1つにまとめるライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a></li>
</ul>

<h2 id="インストール">インストール</h2>

<p>npmで入ります。     </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install ui-event-observer
</code></pre></div>
<h2 id="1つにまとめる">1つにまとめる?</h2>

<p>Reactなどのコンポーネント志向のライブラリを使っていると、各コンポーネントで同じ要素へ同じイベントを貼っていることがあります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Component A</span>
<span class="kr">const</span> <span class="nx">handlerA</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span> 
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">,</span> <span class="nx">handlerA</span><span class="p">);</span>
<span class="c1">// Component B</span>
<span class="kr">const</span> <span class="nx">handlerB</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">,</span> <span class="nx">handlerB</span><span class="p">);</span>
</code></pre></div>
<p><a href="https://github.com/azu/ui-event-observer" title="UIEventObserver">UIEventObserver</a>では同じ事が、内部的に一つの<code>window.addEventListener(&#39;scroll&#39;, ...)</code>にまとめてられます。
(Pub/SubはEventEmitterが代わりにやる感じです)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// singleton</span>
<span class="kr">const</span> <span class="nx">eventObserver</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ui-event-observer&quot;</span><span class="p">);</span>
<span class="c1">// シングルトンじゃない方法</span>
<span class="c1">// require(&quot;ui-event-observer&quot;).UIEventObserver</span>
<span class="c1">// Component A</span>
<span class="kr">const</span> <span class="nx">handlerA</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span> 
<span class="nx">eventObserver</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">&quot;scroll&quot;</span><span class="p">,</span> <span class="nx">handlerA</span><span class="p">);</span>
<span class="c1">// Component B</span>
<span class="kr">const</span> <span class="nx">handlerB</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="nx">eventObserver</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">&quot;scroll&quot;</span><span class="p">,</span> <span class="nx">handlerB</span><span class="p">);</span>
</code></pre></div>
<p><a href="https://github.com/azu/ui-event-observer/tree/master/example/">Example project</a>では100個の&quot;scroll&quot;イベントを<code>window</code>に貼っています。</p>

<p><img src="https://monosnap.com/file/0L7z5AvZcuLKbCHxqB4sTU8TjRK0pk.png" alt="addEventListener vs, UIEventObserver"></p>

<ul>
<li>Left: 100x <code>addEventListener</code></li>
<li>Right: 1 <code>UIEventObserver</code></li>
</ul>

<p>とlistenしてるイベントの数が100個以上から10個程度に減っていることが分かります。</p>

<p><a href="https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener" title="EventTarget.addEventListener">EventTarget.addEventListener</a>はbubblingやcapturing、それらを止められる<code>preventDefault()</code>や<code>stopPropagation()</code>などEventEmitterに比べると高機能です。
<a href="https://blog.jxck.io/entries/2016-06-09/passive-event-listeners.html" title="Passive Event Listeners">Passive Event Listeners</a>とかもその辺を制限することでパフォーマンスを改善すために導入されています。</p>

<p>同じ目的のライブラリとして<a href="https://github.com/yahoo/subscribe-ui-event" title="yahoo/subscribe-ui-event">yahoo/subscribe-ui-event</a>がありますが、スロットリングなどがデフォルトにあったり色々高機能でした。
なので、単純にイベントを1つにまとめるだけの<a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer</a>を作ったという話でした。</p>

<p>他の機能的な要素はプラグインで書けるようにするのがいいんじゃないかなと思っています。</p>

<ul>
<li><a href="https://github.com/azu/ui-event-observer/issues/1" title="Proposal: plugin system · Issue #1 · azu/ui-event-observer">Proposal: plugin system · Issue #1 · azu/ui-event-observer</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>TestCafeでブラウザの自動テスト(E2Eテスト)</title>
   <link href="http://efcl.info/2016/10/23/testcafe/"/>
   <updated>2016-10-23T21:57:00+09:00</updated>
   <id>http://efcl.info/2016/10/23/testcafe</id>
   <content type="html"><![CDATA[ <p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>という自動テストフレームワーク(いわゆるE2Eテストフレームワークジャンルとしておきます)を試してみました。</p>

<p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>の特徴としては、Seleniumを使っていないこと、設定ファイルなしで利用できる点です。</p>

<p>Seleniumを使ったテストフレームワークとしては、<a href="http://www.protractortest.org/" title="Protractor">Protractor</a>、<a href="https://github.com/groupon/testium" title="testium">testium</a>、<a href="http://webdriver.io/" title="WebdriverIO">WebdriverIO</a>などがあります。
(Seleniumを使わない他のテストフレームワークだと<a href="http://www.nightmarejs.org/" title="Nightmare">Nightmare</a>など)</p>

<p>Seleniumを使わずにどうやって自動的にブラウザを操作するかというと、中継サーバーを起動してそこにテストコードなどを追加して動かすことができるSelenium RC(1)方式に近いものだと思います。</p>

<p>同名の<a href="https://testcafe.devexpress.com/" title="TestCafe: Web Testing Framework | DevExpress">ウェブサービス/クライアントアプリ</a>も出していて、こちらはSelenium IDEのようにGUIで操作して記録したものを再生などができます。</p>

<p>なぜ、Seleniumを使っていないかという点については、以下で回答されています。</p>

<ul>
<li><a href="https://testcafe-discuss.devexpress.com/t/why-not-use-selenium/47/2" title="Why not use Selenium? - Questions - TestCafe Discussion Board">Why not use Selenium? - Questions - TestCafe Discussion Board</a></li>
</ul>

<p>簡単にまとめると次のような点をどうにかしたいので、Seleniumを使わずに動く自動テストフレームワークを作ったようです。</p>

<ul>
<li>Remoteの端末でも動かせるようにしたい</li>
<li>とにかく設定なしでうごかせるようにしたい</li>
<li>WebDriverの互換性がブラウザ依存で、それが解決されるまでに時間かかる</li>
</ul>

<p>実際に動かしながら見ていきましょう。</p>

<h2 id="最小のデモ">最小のデモ</h2>

<p>以下に最小のデモプロジェクトを作りました</p>

<ul>
<li><a href="https://github.com/azu/demo-test-cafe" title="azu/demo-test-cafe: TestCafe">azu/demo-test-cafe: TestCafe</a></li>
</ul>

<p>これをインストールから動かすまでは次のコマンドを叩くだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/azu/demo-test-cafe.git
cd demo-test-cafe
npm install
npm test
</code></pre></div>
<p>これだけでChromeが立ち上がり、自動テストが実行できます。</p>

<p><iframe src="//giphy.com/embed/3o7TKFdaymhVNZ6XZe" width="480" height="322" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3o7TKFdaymhVNZ6XZe">via GIPHY</a></p></p>

<p>テストコードは<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>にBabelが内蔵されているため、ES2016+async/awaitなどがそのまま書けるようになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">Selector</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;testcafe&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">getElementById</span> <span class="o">=</span> <span class="nx">Selector</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="err">`#</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
<span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;Example page&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://devexpress.github.io/testcafe/example&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Type the developer name, obtain the header text and check it&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">t</span>
        <span class="p">.</span><span class="nx">typeText</span><span class="p">(</span><span class="s1">&#39;#developer-name&#39;</span><span class="p">,</span> <span class="s1">&#39;John Smith&#39;</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#submit-button&#39;</span><span class="p">);</span>

    <span class="kr">const</span> <span class="nx">articleHeader</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;article-header&#39;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">headerText</span> <span class="o">=</span> <span class="nx">articleHeader</span><span class="p">.</span><span class="nx">innerText</span><span class="p">;</span>

    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">headerText</span><span class="p">,</span> <span class="s1">&#39;Thank you, John!&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>テストコードの実装はブラウザとディレクトリを指定するだけで、他に設定しなくても動きます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ testcafe chrome test/
</code></pre></div>
<p>テストの失敗結果が分かりやすいのも結構いいところです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/10/23-1477228880.png" alt="result of testcafe"></p>

<h3 id="selector">Selector</h3>

<p>先ほどのテストコードでも出てきていますが、TestCafeは<a href="http://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html" title="Selectors">Selectors</a>という仕組みでDOMを指定します。</p>

<p>DOMのとり方はブラウザで使う<code>document.querySelector</code>などそのままのAPIです。
注意点として取ってきた値はsnapshotであるため、あとで値が変わったときに自動的にsnapshotのnodeの値は代わりません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Selector</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;testcafe&#39;</span><span class="p">;</span>

<span class="c1">// A selector is created from a regular function.</span>
<span class="c1">// This selector will take the &#39;id&#39; parameter and return</span>
<span class="c1">// a DOM element that has this ID.</span>
<span class="kr">const</span> <span class="nx">getElementById</span> <span class="o">=</span> <span class="nx">Selector</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">));</span>
<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;My Test&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">snapShotNode</span> <span class="o">=</span> <span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>ClickやTypeなどの操作のエミュレータは<a href="http://devexpress.github.io/testcafe/documentation/test-api/actions/" title="Actions">Actions</a>という特殊なメソッドを使いますが、DOMの取得については<a href="http://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html" title="Selectors">Selectors</a>でラップすれば基本的にそのまま使えるような感じになっています。</p>

<p>この辺も覚えることをできるだけ減らそうとしてる感じに見えます。</p>

<h3 id="リモートで実行">リモートで実行</h3>

<p>先ほどのテストは、ローカルにあるブラウザじゃなくても動かす事ができます。</p>

<p>次のように<code>remote:数</code>をブラウザの欄に指定すると、connect用のURLが表示されます。
このURLにアクセスすると、そのブラウザ上で先ほどの自動テストが実行されます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">✈ $(npm bin)/testcafe remote:1 test
Connecting 1 remote browser(s)...
Navigate to the appropriate URL from each of the remote browsers.
Browser #1: http://192.168.10.3:51822/browser/connect/SJuk2E9kg
</code></pre></div>
<p>これがWebDriverではない理由の一つとして挙げられていたものですね。</p>

<ul>
<li><a href="http://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browser-support.html#browsers-on-remote-devices" title="Browsers on Remote Devices #">Browsers on Remote Devices #</a></li>
</ul>

<p>また、実行できるブラウザは<a href="http://devexpress.github.io/testcafe/documentation/extending-testcafe/browser-provider-plugin/" title="Browser Provider Plugin">Browser Provider Plugin</a>で拡張できるようになっていて、PhantomJSとかはデフォルトでは入っていないようです。</p>

<p>プラグインの中身を見るとSelenium/WebDriverではないことがよくわかります。</p>

<ul>
<li><a href="https://github.com/DevExpress/testcafe-browser-provider-phantomjs/blob/master/src/index.js">https://github.com/DevExpress/testcafe-browser-provider-phantomjs/blob/master/src/index.js</a></li>
</ul>

<h2 id="もう少し複雑なケース">もう少し複雑なケース</h2>

<p>もう少し実際のテストに近いもので試してみます。</p>

<p>以前、Reduxの<a href="http://redux.js.org/docs/basics/ExampleTodoList.html" title="Example: Todo List · Redux">Example: Todo List</a>を写経したプロジェクトにE2Eテストを追加してみます。</p>

<ul>
<li><a href="https://github.com/coding-kata/redux-basic-tutorial" title="coding-kata/redux-basic-tutorial">coding-kata/redux-basic-tutorial</a></li>
</ul>

<p>追加したPRは以下にあります。</p>

<ul>
<li><a href="https://github.com/coding-kata/redux-basic-tutorial/pull/5" title="Add E2E Test with TestCafe by azu · Pull Request #5 · coding-kata/redux-basic-tutorial">Add E2E Test with TestCafe by azu · Pull Request #5 · coding-kata/redux-basic-tutorial</a></li>
</ul>

<h3 id="test-controller">test controller</h3>

<p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>のテスト構造については<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html" title="Test Code Structure | TestCafe">Test Code Structure | TestCafe</a>で簡単に解説されています。</p>

<p><code>fixture</code>と<code>page</code>はテスト名とテストするURLなので特に説明は入らない感じです。
テストケースは<code>test</code>という関数に書いていく感じになります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;MyFixture&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Test1&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/* Test 1 Code */</span>
<span class="p">});</span>
</code></pre></div>
<p>基本的に非同期になるのでAsync functionとして書くようになっています。
自動テストで必要になるのは、ある要素をクリックしたり、あるinput要素にテキストを入れたりするエミュレート関数が必要です。</p>

<p>TestCafeでは<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller" title="Test Controller">Test Controller</a>と呼ばれているものがそれで、上記の<code>async t</code>の<code>t</code>がTest Controllerのオブジェクトです。</p>

<p>Test Controllerにあるメソッドは以下にまとめられています。</p>

<ul>
<li><a href="http://devexpress.github.io/testcafe/documentation/test-api/actions/" title="Actions | TestCafe">Actions | TestCafe</a></li>
</ul>

<h3 id="テスト">テスト</h3>

<p><a href="https://github.com/coding-kata/redux-basic-tutorial" title="coding-kata/redux-basic-tutorial">coding-kata/redux-basic-tutorial</a>はTodoリストを作るサンプルプロジェクトなので、
Todoを追加するE2Eテストを書いてみます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/10/23-1477230356.png" alt="Image of redux-basic tutorial"></p>

<p>Page Objectパターンっぽく書いて次のような感じで書けました。</p>

<p>Test Controllerの操作は基本非同期で、<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>は自動で色々な操作待つ仕組みを持っています。</p>

<blockquote>
<p>TestCafe automatically waits for page loads and XHRs to complete, as well as for DOM elements to become visible. You do not need to write custom code for that.
-- <a href="https://github.com/DevExpress/testcafe#no-extra-coding">https://github.com/DevExpress/testcafe#no-extra-coding</a></p>
</blockquote>

<p>(<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>のサイトを見てるといたるところにAutomatic*という単語が出て来る)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="nx">TodoPage</span> <span class="nx">from</span> <span class="s2">&quot;./pages/index&quot;</span>
<span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;TodoList&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://127.0.0.1:8080/&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Add TodoItem&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;NEW TODO&quot;</span><span class="p">;</span>
    <span class="kr">const</span> <span class="nx">todoPage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TodoPage</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
    <span class="c1">// add item</span>
    <span class="nx">await</span> <span class="nx">todoPage</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">({</span><span class="nx">title</span><span class="p">});</span>
    <span class="kr">const</span> <span class="nx">currentItems</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">todoPage</span><span class="p">.</span><span class="nx">getItems</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">currentItems</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
    <span class="kr">const</span> <span class="p">[</span><span class="nx">firstItem</span><span class="p">]</span> <span class="o">=</span> <span class="nx">currentItems</span><span class="p">;</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">firstItem</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">title</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p><img src="https://cloud.githubusercontent.com/assets/19714/19626295/03b76978-9969-11e6-84b3-c5f973f7957e.gif" alt="10 -23-2016 21-37-53"></p>

<p><code>await</code>をちょこちょこ忘れたりしましたが、<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller" title="Test Controller">Test Controller</a>のメソッドの<code>await</code>忘れは検知できるようです。
(自分で書いてる非同期はそうでもないので、Page Obejctに操作メソッドを持たせると良くないかも)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"> TodoList
 ✖ Add TodoItem

   1) A call to an async function is not awaited. Use the &quot;await&quot; keyword
      before actions, assertions or chains of them to ensure that they run
      in the right sequence.

      Browser: Chrome 56.0.2899 / Mac OS X 10.11.6

          8 |        this.t = t;
          9 |    }
         10 |
         11 |    async addTodo({title}) {
         12 |        const input = await this.getInput();
       &gt; 13 |        this.t.typeText(input, title);
         14 |        const button = await this.getButton();
         15 |        await this.t.click(button);
         16 |    }
         17 |
         18 |    async getInput() {

         at &lt;anonymous&gt;
</code></pre></div>
<p>E2Eテストでよくハマる表示されてるかどうかのタイミング問題も、基本的にTestCafeは表示に関するものは自動で一定時間待つようになっているみたいです。
(詳しい仕組みは調べてないけど、表示されてないことをテストすると時間がかかる気がする…)</p>

<p>デフォルトの自動待ち時間は結構長いですが、<code>--selector-timeout ms</code>で待ち時間を指定できるようです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/testcafe chrome e2e --selector-timeout 100
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p>ものすごく簡単に<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>について紹介?しました。</p>

<p><a href="http://devexpress.github.io/testcafe/documentation/using-testcafe/programming-interface/" title="Programming Interface">Programming Interface</a>もあったりするので、テストフレームワークというよりも、これを使ったブラウザ自動操作ツールとして使ったりすると面白いのかもしれないなーと思いました。</p>

<p>TestCafe自体も結構よくできていて、エラー表示や操作の要素を表示していて分かりやすいです。
また、Seleniumの設定が不要にしたいという気持ちはよく分かるので、ほんとに設定なしで動かせるのはすごいなと思いました。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 23時限目 アウトラインメモ</title>
   <link href="http://efcl.info/2016/10/21/node23/"/>
   <updated>2016-10-21T21:25:00+09:00</updated>
   <id>http://efcl.info/2016/10/21/node23</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/42200/" title="Node学園 23時限目 (今回はリクルート（東京駅）でやります！) - connpass">Node学園 23時限目 (今回はリクルート（東京駅）でやります！) - connpass</a>に参加してきたのメモ</p>

<h2 id="npm-4、npm-5">npm@4、npm@5</h2>

<blockquote>
<p><a href="https://gist.github.com/othiym23/c98bd4ef5d9fb3f496835bd481ef40ae" title="node-gakuen-201610.md">node-gakuen-201610.md</a></p>
</blockquote>

<ul>
<li>npmは後方互換性を重んじている

<ul>
<li>Node.jsにbundleされているので</li>
</ul></li>
<li>npm@2のbreaking changeについて

<ul>
<li>&gt; backwards-incompatible change to the way npm run-script handled its arguments</li>
</ul></li>
<li>npm@3

<ul>
<li>flat directory</li>
<li>npm@2そのまま使い続ける人もいる</li>
<li>大きな変更は移行の壁になるという話</li>
</ul></li>
<li>npm@4

<ul>
<li><a href="https://github.com/npm/npm/releases/tag/v4.0.0" title="Release v4.0.0 · npm/npm">Release v4.0.0 · npm/npm</a></li>
<li>npm 4は小さな変更にした</li>
<li><code>prepublish</code> が <code>npm install</code> 時に実行されるのは Deprecated

<ul>
<li><code>prepublishOnly</code> と <code>prepare</code> というライフサイクルに分解された</li>
</ul></li>
<li>outdated

<ul>
<li><a href="https://github.com/npm/npm/pull/14013" title="outdated: exitcode != 0 on outdated dependencies by watilde · Pull Request #14013 · npm/npm">outdated: exitcode != 0 on outdated dependencies by watilde · Pull Request #14013 · npm/npm</a></li>
</ul></li>
<li><code>npm search</code>

<ul>
<li>big jsonからストリーミングに</li>
<li>やっと高速な検索ができるように</li>
</ul></li>
<li><code>npm tag</code>は <code>npm dist-tag</code>に</li>
</ul></li>
<li>npm@5

<ul>
<li>bundlerとCargoインスパイアな<a href="https://gist.github.com/othiym23/c98bd4ef5d9fb3f496835bd481ef40ae#lock-files" title="lock files">lock files</a></li>
<li>Bundler

<ul>
<li><code>Gemfile</code>と<code>Gemfile.lock</code></li>
<li>Flatな依存(no nest)</li>
<li><code>Gemfile</code>は常にgit管理下</li>
</ul></li>
<li>Cargo

<ul>
<li><code>Cargo.toml</code> と <code>Cargo.lock</code></li>
<li>依存はnestできる</li>
</ul></li>
</ul></li>
<li><code>yarn</code>

<ul>
<li><code>packagejson</code>と<code>yarn.lock</code></li>
<li>yarn&#39;s lock file is meant to be checked in to Git, but isn&#39;t published to the npm registry.</li>
<li>flatとnestどっちも行ける</li>
<li>アプリ用っぽい</li>
<li><a href="https://github.com/yarnpkg/yarn/issues/570" title="make `--pure-lockfile` default for `install` · Issue #570 · yarnpkg/yarn">make <code>--pure-lockfile</code> default for <code>install</code> · Issue #570 · yarnpkg/yarn</a></li>
</ul></li>
<li>Different

<ul>
<li>Library</li>
<li>Command</li>
<li>Application</li>
<li>とそれぞれ役割が違うので、ロックファイルがいるのかも違う</li>
</ul></li>
<li>shrinkwrap 

<ul>
<li>ライブラリ向けに設計されてなかった(production application向けだった)</li>
<li>問題がある</li>
</ul></li>
<li>source of truth 

<ul>
<li><code>npm-shrinkwrap.json</code> is a single source of truth.</li>
</ul></li>
<li>npm LTS

<ul>
<li>Node.jsにbundleされるとLTSはどうなるという話</li>
</ul></li>
<li>npm@5 2017年4月リリース目標

<ul>
<li>Node.js 8がnpm@5を含むかは知らないよ</li>
</ul></li>
</ul>

<hr>

<h2 id="api-for-front-end-graphqlの話">API for Front-end - GraphQLの話</h2>

<ul>
<li>RESTful API再考</li>
<li>RESTful API

<ul>
<li>貧弱なSQLをAPIを目指しているわけではない</li>
</ul></li>
<li>SPAなフロントエンドはつらい?

<ul>
<li>ただのViewではないから</li>
<li>サーバサイド、クライアントサイドそれぞれにMVCがいる</li>
<li>最近のサーバサイドはMicroServiceになってきている</li>
<li>クライアントサイドもMicroservicesの一つなのでは</li>
</ul></li>
<li>フロントエンド

<ul>
<li>サーバ &lt;-&gt; フロントエンド</li>
<li>物理的に遠いので、時間がかかる</li>
<li>他のMicroservicesと違ってやり取りに時間がかかる</li>
<li>先頭から3件だけ欲しいとか細かい指定をしてリクエストしたい</li>
</ul></li>
<li>オーケストレーション層のパターン

<ul>
<li>サーバに手を入れる必要がある</li>
<li>ドキュメントは別途必要</li>
</ul></li>
<li>GraphSQL

<ul>
<li>表じゃなくてネストしたJSONが欲しいのではという話</li>
<li><a href="https://github.com/graphql/graphiql" title="graphql/graphiql: An in-browser IDE for exploring GraphQL.">graphql/graphiql: An in-browser IDE for exploring GraphQL.</a>

<ul>
<li>GraphQLには型があるので、自動的に補完とかを作れる</li>
</ul></li>
<li>並列にデータを取得できる。</li>
</ul></li>
<li>N + 1問題

<ul>
<li>DataLoaderみたいな工夫が必要</li>
<li><a href="https://quramy.github.io/graph-api-note/#/" title="Graph API: GraphQL and Falcor">Graph API: GraphQL and Falcor</a></li>
<li>それ用のものを作った</li>
</ul></li>
<li>GraphQLの仕様

<ul>
<li><a href="https://facebook.github.io/graphql/" title="GraphQL">GraphQLの仕様</a></li>
<li>でかい</li>
</ul></li>
</ul>

<hr>

<h2 id="client-side-js-for-infeed-layout-native-ad-at-fluct-ssp">Client-side JS for infeed layout native ad at fluct SSP</h2>

<blockquote>
<p><a href="https://speakerdeck.com/saneyuki/client-side-js-for-infeed-layout-native-ad-at-fluct-ssp" title="Client-side JS for infeed layout native ad at fluct SSP // Speaker Deck">Client-side JS for infeed layout native ad at fluct SSP // Speaker Deck</a></p>
</blockquote>

<ul>
<li>fluct in VOYAGE</li>
<li><code>document.write()</code></li>
<li>広告業界

<ul>
<li>SSP

<ul>
<li>問屋業</li>
<li>枠を売買</li>
<li>Adのリクエストを管理する</li>
<li>タグマネージャー的に動く</li>
</ul></li>
<li>DSP

<ul>
<li>広告枠を買って広告案件を流したい</li>
<li>Real Time Bidding (RTB)というオークションを介してSSPから枠を買う</li>
</ul></li>
<li>Adnetwork

<ul>
<li>広告枠を買って広告案件を流したい</li>
<li>RTBに参加するか否かが概ねDSPとの違い</li>
</ul></li>
</ul></li>
<li>Infeed Layout web ad

<ul>
<li>いわゆるネイティブ広告</li>
<li>従来の広告はimgとかで貼ってたりした</li>
<li>ネイティブアドはデザインテンプレートと広告コンテンツを合わせてる</li>
</ul></li>
<li>ネイティブ広告

<ul>
<li>SDKスタイル

<ul>
<li>SDKを開発者に配って実装してもらう</li>
</ul></li>
<li>コンサルティングスタイル

<ul>
<li>開発者がいないとデザインできないので、代わりにやるスタイル</li>
<li>タグを貼ってくれれば広告がでる</li>
</ul></li>
</ul></li>
<li>OpenRTB protocol

<ul>
<li>デファクトの仕様</li>
<li>最近のW3CやIETFに比べてザルな仕様</li>
</ul></li>
<li>iABという業界団体

<ul>
<li>リクエストとレスポンスのフォーマットを決めた</li>
<li>多くの会社はサブセットとかスーパーセットを定義してる</li>
</ul></li>
<li>OpenRTB - js-tracker

<ul>
<li>DSPが任意のJavaScriptを埋め込める素敵な仕様

<ul>
<li>悪意があればマルウェアも仕込める</li>
</ul></li>
<li><code>document.write()</code>とかも仕込めてしまう

<ul>
<li>非同期読み込みの障害なので自社用の拡張仕様を作って縛る</li>
</ul></li>
</ul></li>
<li>SSPのサポートする範囲

<ul>
<li>網羅できるものが多いほど強い</li>
<li>RTB一回やAd network一社だけでは売れない場合があるので色々なAd networkに多段する</li>
</ul></li>
<li>Data flow overview

<ul>
<li>Web Page -&gt; リクエスト -&gt; SSP &lt;-&gt; DSP

<ul>
<li>SSP &lt;-&gt; DSP</li>
<li>広告オークションを行う</li>
</ul></li>
<li>Web Page &lt;- レスポンス &lt;- SSP</li>
<li>オークションが成功したらこれでOK</li>
<li>失敗した場合は、Ad networkへクライアントからリクエスト投げる

<ul>
<li>クッキーとかクレデンシャルがあるのでクライアントから</li>
</ul></li>
</ul></li>
<li>Construct JavaScript in ad server

<ul>
<li>JavaScriptを文字列で組み立てるのは危険</li>
<li>一端 <code>JSON.stringify</code> で文字列リテラルとして評価できるようにする</li>
</ul></li>
<li>非同期処理をサポートする広告

<ul>
<li><a href="https://www.iab.com/news/lean/" title="Getting LEAN with Digital Ad UX">Getting LEAN with Digital Ad UX</a></li>
<li><code>document.write()</code>も使えない</li>
</ul></li>
<li>一つの画面に複数の広告

<ul>
<li>非同期だと問題が

<ul>
<li>今まではdocument.writeばかりなのでparser blockingして同期的に動いてた</li>
<li>deferもasyncもない普通のscript要素も同期的に動いてくれた</li>
</ul></li>
<li><code>document.currentScript</code>が使えない環境で問題がある</li>
<li>自分がどのAd Scriptタグなのかわからない問題</li>
<li>最後のscriptタグ !== 自分

<ul>
<li><code>async</code>属性などがあるため</li>
</ul></li>
<li>リクエスト時にuniqueなidを振って、レスポンスでそれを使うことで解決する</li>
</ul></li>
<li>優先度付きのリトライ

<ul>
<li>並列にリクエストを投げて最初に返ってきたものを取るというのを上手くやる仕組み</li>
</ul></li>
<li>Construct DOM

<ul>
<li>テンプレートな文字列を安全にやるのは難しい(XSS)</li>
<li>クライアントのDOM APIを使ったほうが安全</li>
</ul></li>
<li>Implementation Style</li>
<li>Limitation

<ul>
<li>ファイルサイズ</li>
<li>サードパーティのライブラリを含めるとファイルサイズがネックになる</li>
<li>Promiseのpolyfillが使えない</li>
</ul></li>
<li>自前で実装

<ul>
<li>10kb~ / response ぐらい</li>
</ul></li>
<li>他の問題

<ul>
<li><code>navigator.sendBeacon()</code> はクリティカルパス中など大量のリクエストがあるとき？にリクエストが飛ばないときがある

<ul>
<li>仕様としては有り得る挙動

<ul>
<li><a href="https://www.w3.org/TR/beacon/#return-values">https://www.w3.org/TR/beacon/#return-values</a></li>
<li><a href="https://www.w3.org/TR/beacon/#sec-processing-model">https://www.w3.org/TR/beacon/#sec-processing-model</a></li>
</ul></li>
<li>仕方がないのでXHRで代替すると上手くいく</li>
</ul></li>
</ul></li>
<li>Telemetry Reporter

<ul>
<li>広告タグはいろんな環境で動かす必要がある</li>
<li>動かない環境とかもあるのか調べる方法が必要</li>
<li>ログを上手く取る方法が必要</li>
<li>またサイズを気にする必要がある</li>
</ul></li>
<li>Open Source

<ul>
<li>JavaScriptのコードは重要だけど、SSPは問屋業がコアバリュー</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 

</feed>
