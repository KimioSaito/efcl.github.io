<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-05-22T08:16:18+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>textlintでAsciidoc/Asciidoctorをサポートするプラグイン</title>
   <link href="http://efcl.info/2016/05/08/textlint-support-asciidoc-loose/"/>
   <updated>2016-05-08T20:24:00+09:00</updated>
   <id>http://efcl.info/2016/05/08/textlint-support-asciidoc-loose</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/" title="textlint">textlint</a>で<a href="http://www.methods.co.nz/asciidoc/" title="AsciiDoc">AsciiDoc</a>/<a href="http://asciidoctor.org/" title="Asciidoctor">Asciidoctor</a>を限定的にサポートするプラグインを書きました。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="textlint-plugin-asciidoc-loose">textlint-plugin-asciidoc-loose</a></li>
</ul>

<h2 id="制限">制限</h2>

<p>今のところ<code>Paragarph</code>と<code>Str</code>しかサポートしていません。
他のNodeは単純に無視されるので、<code>Header</code>や<code>List</code>、<code>Link</code>などはないものと同じ扱いになっています。</p>

<p>簡単にいうと本文の文章をチェックするルールしか上手く動かないという感じです。</p>

<p>textlintのルールの大体は本文を対象としているので、<a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule</a>に書かれてるルールの8割ぐらいは動くような気がします。</p>

<p><code>Header</code>や<code>List</code>のサポートぐらいできたら結構良さそうな気がするので、Pull Request募集中です。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose/issues" title="Issues · azu/textlint-plugin-asciidoc-loose">Issues · azu/textlint-plugin-asciidoc-loose</a></li>
</ul>

<p>現状は<a href="http://motemen.hatenablog.com/entry/2016/04/textlint-asciidoc" title="AsciiDoc（Asciidoctor）の文書をtextlintで校正する - 詩と創作・思索のひろば">AsciiDoc（Asciidoctor）の文書をtextlintで校正する - 詩と創作・思索のひろば</a> と似ているかもしれません。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-plugin-asciidoc-loose
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>の<code>&quot;plugins&quot;</code>に<code>&quot;asciidoc-loose&quot;</code>を追加すると有効になります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;plugins&quot;: [
        &quot;asciidoc-loose&quot;
    ]
}
</code></pre></div>
<p>以下の拡張子をAsciidocのファイルとして認識しています。</p>

<ul>
<li>&quot;.asciidoc&quot;,</li>
<li>&quot;.adoc&quot;,</li>
<li>&quot;.asc&quot;</li>
</ul>

<h2 id="例">例</h2>

<p><a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>は<a href="https://github.com/azu/promises-book/search?l=asciidoc&amp;q=&amp;type=Code&amp;utf8=%E2%9C%93">Asciidoctorで書かれてる</a>で試しに<a href="http://textlint.github.io/" title="textlint">textlint</a>でLintしてみたら、エラー位置も正しく普通に動きました。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/05/08-1462706748.png" alt="textlint with asciidoc"></p>

<h2 id="注意">注意</h2>

<p>最初に書いた制限にあるように<code>Paragarph</code>と<code>Str</code>のみなので、<code>List</code>の中の<code>Str</code>は例外的に無視するみたいなルールが意図と異なる結果になったりする場合もあります。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="textlint-plugin-asciidoc-loose">textlint-plugin-asciidoc-loose</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>敬体(ですます調)と常体(である調)の表記を統一するtextlintルール</title>
   <link href="http://efcl.info/2016/05/06/no-mixed-dearu-desumasu-2.0/"/>
   <updated>2016-05-06T15:21:00+09:00</updated>
   <id>http://efcl.info/2016/05/06/no-mixed-dearu-desumasu-2.0</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/" title="textlint">textlint</a>向けのルールとして敬体(ですます調)と常体(である調)を一つの文書内でどちらを使うか統一する<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu" title="textlint-rule-no-mix-dearu-desumasu">textlint-rule-no-mix-dearu-desumasu</a>というルールを書きました。</p>

<p>初期からあったのですが、<a href="https://github.com/takuyaa/kuromoji.js" title="kuromoji.js">kuromoji.js</a>で<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/releases/tag/2.0.0">形態素解析した結果</a>をベースとしたり、明示的にどちらを<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/releases/tag/2.2.0">優先するかのオプション</a>を追加したので改めて紹介します。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-no-mix-dearu-desumasu
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>(Recommended)に設定するのを推奨しています。
後述するオプション設定もできるのでこちらの方が便利です。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;no-mix-dearu-desumasu&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>CLIの<code>--rule</code>オプションだとデフォルト設定のみになります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint --rule no-mix-dearu-desumasu README.md
</code></pre></div>
<h2 id="オプション">オプション</h2>

<p>このルールでは、本文、見出し、箇条書きをそれぞれ独立してチェックし、その項目内で表記が混在していないかを見つけます。
なので、本文と見出しの間で表記が混在するのは問題ありません。</p>

<ul>
<li>本文(Markdownなら通常の文章部分)</li>
<li>見出し(Markdownなら<code>#</code>)</li>
<li>箇条書き(Markdownなら<code>* item</code>や<code>- item</code>)</li>
</ul>

<p>それぞれの項目ごとに優先する表記をオプションで設定できます。</p>

<ul>
<li>本文(Body)</li>
<li>見出し(Header)</li>
<li>箇条書き(List)</li>
</ul>

<p>デフォルトは &quot;&quot;(空)で、多く使われている表記を自動的に優先します。
優先したい表記を &quot;である&quot; または &quot;ですます&quot; で指定します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-mix-dearu-desumasu&quot;</span><span class="o">:</span> <span class="p">{</span>
             <span class="s2">&quot;preferInHeader&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInBody&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>   <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInList&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>    <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>例えば、以下の例だと</p>

<ul>
<li>見出しは&quot;自動&quot;(多く使われてる表記に統一を促す</li>
<li>本文は&quot;ですます&quot;</li>
<li>箇条書きは&quot;である&quot;</li>
</ul>

<p>というルールでチェックします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-mix-dearu-desumasu&quot;</span><span class="o">:</span> <span class="p">{</span>
             <span class="s2">&quot;preferInHeader&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInBody&quot;</span><span class="o">:</span> <span class="s2">&quot;ですます&quot;</span><span class="p">,</span><span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInList&quot;</span><span class="o">:</span> <span class="s2">&quot;である&quot;</span>    <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>これは、本文と箇条書きで表記が異なるのは一般的によくあることなので、それぞれの項目ごとに設定できるようになっています。</p>

<h2 id="リファクタリング例">リファクタリング例</h2>

<p>このルールを使ってリファクタリングしてみた例です。</p>

<ul>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/pull/94" title="refactor(textlint): 敬体(ですます調)と常体(である調)の使い分けを厳密に by azu · Pull Request #94 · azu/JavaScript-Plugin-Architecture">refactor(textlint): 敬体(ですます調)と常体(である調)の使い分けを厳密に by azu · Pull Request #94 · azu/JavaScript-Plugin-Architecture</a> </li>
</ul>
<div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-先ほどのgulpタスクの例では、既にモジュール化された処理を`pipe`で繋げただけであるため、</span>
<span class="gi">+先ほどのgulpタスクの例では、既にモジュール化された処理を`pipe`で繋げただけで、</span>
 それぞれの処理がどのように実装されているかはよく分かりませんでした。
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-BufferはStringと相互変換が可能であるため、多くのgulpプラグインと呼ばれるものは、`gulpPrefixer`と`prefixBuffer`にあたる部分だけを実装しています。</span>
<span class="gi">+BufferはStringと相互変換が可能なので、多くのgulpプラグインと呼ばれるものは、`gulpPrefixer`と`prefixBuffer`にあたる部分だけを実装しています。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-gulpではプラグインが持つ機能は1つ(単機能)であること推奨しています。</span>
<span class="gi">+gulpではプラグインが持つ機能は1つ(単機能)とすることを推奨しています。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-`jQuery.fn`の実装を見てみると、実態は`jQuery.prototype`であるため実際にprototype拡張していることがわかります。</span>
<span class="gi">+`jQuery.fn`の実装を見てみると、実態は`jQuery.prototype`なので、prototype拡張していることがわかります。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-単純なprototype拡張であると言えるので、利点はJavaScriptのprototypeと同様です。</span>
<span class="gi">+単純なprototype拡張なので、利点はJavaScriptのprototypeと同様です。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-まだNode.jsで使われているCommonJSやES6 Modulesといったものがなかった時代に作られた仕組みであるため、</span>
<span class="gi">+まだNode.jsで使われているCommonJSやES6 Modulesなどがなかった時代に作られた仕組みなので、</span>
</code></pre></div>
<p>他にいい代替表現など書き方の指摘を募集しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/issues/11" title="Docs: リファクタリング例を募集 · Issue #11 · azu/textlint-rule-no-mix-dearu-desumasu">Docs: リファクタリング例を募集 · Issue #11 · azu/textlint-rule-no-mix-dearu-desumasu</a></li>
</ul>

<p>また、テキストから解析する部分を別途ライブラリとして切り出しているので、これはそもそも&quot;である調&quot;なのか?という問題などがありましたらIssueを立ててください。</p>

<p>イマイチ明確な基準がわかっていないため、false positiveにならないように限定しています。</p>

<ul>
<li><a href="https://github.com/azu/analyze-desumasu-dearu" title="azu/analyze-desumasu-dearu: 文の敬体(ですます調)、常体(である調)を解析するJavaScriptライブラリ">azu/analyze-desumasu-dearu: 文の敬体(ですます調)、常体(である調)を解析するJavaScriptライブラリ</a></li>
</ul>

<p>(本当は<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/issues/4" title="textlint-rule-no-mix*ed*-dearu-desumasu">textlint-rule-no-mix*ed*-dearu-desumasu</a>の方がESLint的なルール名として正しい…)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>npmで同じライブラリの複数バージョンをインストールして使う方法</title>
   <link href="http://efcl.info/2016/05/02/npm-package-mixed-multiple-versions-demo/"/>
   <updated>2016-05-02T14:12:00+09:00</updated>
   <id>http://efcl.info/2016/05/02/npm-package-mixed-multiple-versions-demo</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/fkling/astexplorer/pull/107/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R52" title="Add support for ESLint v2 by Daniel15 · Pull Request #107 · fkling/astexplorer">Add support for ESLint v2 by Daniel15 · Pull Request #107 · fkling/astexplorer</a>を見ていて、一つのプロジェクト内で複数のバージョンの同じライブラリを使う面白い方法が使われてたのでメモです。</p>

<p>前述した<a href="https://astexplorer.net/" title="AST explorer">AST explorer</a>の場合だと、ESLint@1とESLint@2の両方に対応したPlaygroundを作りたいため、一つのプロジェクトに両方のバージョンをインストールする必要があるという話です。</p>

<p>他にも、同じライブラリでもβ版は別の名前空間(<code>require(&quot;other-name-space&quot;)</code>)で使って試したいというケースもあると思います。</p>

<ul>
<li><a href="http://ja.stackoverflow.com/questions/9191/%E5%90%8C%E4%B8%80npm%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%90%8D%E3%81%AE%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%96%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B" title="javascript - 同一npmパッケージ名の複数のバージョンをサブディレクトリにインストールすることはできますか? - スタック・オーバーフロー">javascript - 同一npmパッケージ名の複数のバージョンをサブディレクトリにインストールすることはできますか? - スタック・オーバーフロー</a></li>
</ul>

<p>ブラウザだとちょっとファイルサイズ的に避けたい気がしますが、<code>jQuery@1</code>と<code>jquery@3</code>を混在させて使うプロジェクトとかにも応用できそうな気がします。</p>

<h2 id="やり方">やり方</h2>

<p>サンプルプロジェクトは以下においてあります。</p>

<ul>
<li><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo" title="azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.">azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.</a></li>
</ul>

<p>このプロジェクトのゴールは<code>lodash@3</code>と<code>lodash@4</code>を同時にひとつのプロジェクトで使うことです(実用性は置いておきます)</p>

<h2 id="1-それぞれのバージョンのローカルパッケージを作る">1. それぞれのバージョンのローカルパッケージを作る</h2>

<p>npm@2 からは<a href="https://docs.npmjs.com/files/package.json#local-paths" title="Local Paths">Local Paths</a>を依存関係として定義することができます。</p>

<p>簡単にいうと、相対パスで指定したディレクトリをモジュールとして<code>dependencies</code>に追加できる機能です。</p>

<ul>
<li><a href="http://efcl.info/2014/10/04/npm2-local-module/" title="npm 2.0.0でローカルパッケージを使ってrequire(&amp;#39;../../../&amp;#39;)を回避する | Web Scratch">npm 2.0.0でローカルパッケージを使ってrequire(&#39;../../../&#39;)を回避する | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/07/29/example-test-on-npm/" title="npmパッケージをExampleテストしよう | Web Scratch">npmパッケージをExampleテストしよう | Web Scratch</a></li>
</ul>

<p>これを使って、<code>lodash@3</code>と<code>lodash@4</code>のローカルパッケージを作ります。</p>

<p><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo">サンプルプロジェクト</a>を見るのが分かりやすいですが、<code>lodash3</code>と<code>lodash4</code>というディレクトリを手動で作って、それぞれ<code>npm init</code>して<code>main</code>に<code>index.js</code>を指定しただけのモジュールです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">packages
├── lodash3
│   ├── index.js
│   └── package.json
└── lodash4
    ├── index.js
    └── package.json
</code></pre></div>
<p><code>index.js</code>には以下のようにlodashをexportしているだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// lodash@3
module.exports = require(&quot;lodash&quot;);
</code></pre></div>
<ul>
<li><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo/blob/master/packages/lodash3/index.js" title="packages/lodash3/index.js">packages/lodash3/index.js</a></li>
</ul>

<p>lodash3のモジュールで<code>require(&quot;lodash&quot;)</code>したのは<a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo/blob/62745c4ee969da1672a6c4c84b929e6946da0e21/packages/lodash3/package.json#L9" title="packages/lodash3/package.json">packages/lodash3/package.json</a>で依存関係に定義されている<code>lodash</code>なので、<code>lodash@3</code>がexportされているという事になります。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;lodash3&quot;</span><span class="p">,</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;lodash@3&quot;</span><span class="p">,</span>
  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;azu&quot;</span><span class="p">,</span>
  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;lodash&quot;</span><span class="p">:</span> <span class="s2">&quot;^3.0.0&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="2-ローカルパッケージをインストールする">2. ローカルパッケージをインストールする</h2>

<p>後は、プロジェクトにローカルパッケージとして作った<code>lodash3</code>と<code>lodash4</code>への依存を定義するだけです。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm i -S packages/lodash3 packages/lodash4
</code></pre></div>
<p>でインストールできます。
npmのバージョンによって<code>npm i -S</code>でちゃんと相対パスにならないバグがありますが、直接以下のように書けば同じ結果が得られます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json">  <span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&quot;lodash3&quot;</span><span class="p">:</span> <span class="s2">&quot;file:packages/lodash3&quot;</span><span class="p">,</span>
    <span class="nt">&quot;lodash4&quot;</span><span class="p">:</span> <span class="s2">&quot;file:packages/lodash4&quot;</span>
  <span class="p">}</span>
</code></pre></div>
<h2 id="3-それぞれのバージョンを使う">3. それぞれのバージョンを使う</h2>

<p>後は、プロジェクトから<code>require(&quot;lodash3&quot;)</code>のような感じで<code>require</code>して使うだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lodash3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lodash3&quot;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lodash4</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lodash4&quot;</span><span class="p">);</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">lodash3</span><span class="p">.</span><span class="nx">VERSION</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">));</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">lodash4</span><span class="p">.</span><span class="nx">VERSION</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;4&quot;</span><span class="p">));</span>
</code></pre></div>
<p>lodashには<code>.VERSION</code>にバージョン番号が入ってるので、それぞれ@3と@4のバージョンが読み込めてることが確認できます。</p>

<h2 id="おわり">おわり</h2>

<p>ローカルパッケージを使って、一つのプロジェクト内で複数バージョンのnpmパッケージを使い分ける方法を紹介しました。</p>

<p><a href="https://github.com/fkling/astexplorer" title="astexplorer">astexplorer</a>みたいなツール系だと結構実用的なユースケースだと思います。
普通のウェブサイトとかプロダクトなら、最新のバージョン使おうねって感じです。
(ワークアラウンドとして覚えておくと便利なことがあるかもしれないという感じです)</p>

<p>他にも過去のバージョンとのパフォーマンス比較ポイントを作ったりなどの色々使い道があるかもしれません。</p>

<ul>
<li>サンプル: <a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo" title="azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.">azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#child_process_sushi でJavaScriptアーキテクチャについて話してきた</title>
   <link href="http://efcl.info/2016/04/27/child_process_sushi/"/>
   <updated>2016-04-27T23:40:00+09:00</updated>
   <id>http://efcl.info/2016/04/27/child_process_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=%20%23child_process_sushi" title="#child_process_sushi">#child_process_sushi</a>で最近やってたJavaScriptの設計の話をしてきた。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/child_process_sushi/almin-javascript-architecture.html" title="Almin.js | JavaScriptアーキテクチャ">Almin.js | JavaScriptアーキテクチャ</a></li>
</ul>

<p>Fluxとかで上半分は皆やるようになったけど、ドメインモデルとかFluxの場合にビジネスロジックとかをどこに書くとかはまだ未成熟な気がしているので、そのパターンを考えてて<a href="https://github.com/almin/almin" title="Almin.js">Almin.js</a>というのを書いたという話をした。</p>

<p>Almin自体は大した実装ではないので、サンプルとかドキュメントとしてパターンについて学べるものを書いていきたいイメージ。(このアーキテクチャ話自体は、色々な言語で繰り返しやっては言語が廃れて、パターンがちょっと違う形で残るというのを繰り返している by @t_wada)</p>

<p><img src="http://azu.github.io/slide/2016/child_process_sushi/img/almin-architecture-flux.png" alt="almin"></p>

<p>JavaScriptでもウェブアプリやElectronでのアプリのような、APIを叩いて表示して終わりじゃなくて、ドメインモデルの生存期間が長いものが増えてきているのでその辺を考えていこうという話でした。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr">🍣 <a href="https://twitter.com/hashtag/child_process_sushi?src=hash">#child_process_sushi</a> <a href="https://t.co/CSuqQoDrWj">pic.twitter.com/CSuqQoDrWj</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/725281910373511172">April 27, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ログ</p>

<ul>
<li><a href="http://togetter.com/li/968216" title="#child_process_sushi - Togetterまとめ">#child_process_sushi - Togetterまとめ</a></li>
</ul>

<h2 id="pathでのxss-kyo_ago">PathでのXSS - kyo_ago</h2>

<blockquote>
<p><a href="https://speakerdeck.com/masatokinugawa/shibuya-dot-xss-techtalk-number-7" title="明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck">明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck</a></p>
</blockquote>

<p>の話</p>

<ul>
<li>外部からIEのドキュメントモードを落として表示できるという話</li>
<li>iframe以外でIEのドキュメントモードをダウングレードする方法があったらすごい</li>
</ul>

<h2 id="angular2でニッチなやつ-83">Angular2でニッチなやつ - 83</h2>

<ul>
<li>Upgrading from 1.x</li>
<li>実際にこれをやってる話</li>
<li>Angular 1から2に上げていくパターン</li>
<li>2にあげたものが1のコンポーネントを使うことができる

<ul>
<li>実際にやると死ぬので大変</li>
</ul></li>
<li>npmとして名前が違うので2と1は両方パッケージとして入る</li>
<li>upgrade adaptorというものがあり、これからBootStrapをよぶ必要がある</li>
<li>Angular 1

<ul>
<li>Service

<ul>
<li>いろんな機能を持ってる</li>
</ul></li>
<li>Directive

<ul>
<li>コンポーネント</li>
</ul></li>
</ul></li>
<li>Angular 2

<ul>
<li>コンポーネントの方は移行完了した</li>
</ul></li>
<li>進捗80%で止まりそうな要因はuirouterの移行。</li>
<li>1.xで動いてるrouterなので、2.xに移行するときのボトルネックになる

<ul>
<li>1.x -&gt; 2.x -- 2.xのルーターの世界になる</li>
</ul></li>
</ul>

<hr>

<h1 id="広告の話-jxck">広告の話 - Jxck</h1>

<ul>
<li>HTTP2はRFCが出た</li>
<li>実装 から 使う話になってきた</li>
<li>現状の問題

<ul>
<li>AD問題</li>
<li>TLSの問題</li>
<li>ロードバランスの話</li>
</ul></li>
<li>ADの問題

<ul>
<li><a href="https://speakerdeck.com/suzuken/deisupureiguang-gao-falseji-chu-tosekiyuritei" title="ディスプレイ広告の基礎とセキュリティ // Speaker Deck">ディスプレイ広告の基礎とセキュリティ // Speaker Deck</a></li>
<li>mixed contentの問題</li>
<li>たまに　HTTP で出してくる</li>
<li>コレがおきる業界図</li>
<li>広告主 -&gt; メディア</li>
<li>iframeの入れ子の問題</li>
<li>一番外はHTTPSは保証</li>
<li>中の広告がmixed contentになってることが多い</li>
<li>mixed contentをreportする方法がない</li>
<li>中の広告まで全部制御できてないと全部HTTPSにならない</li>
<li><a href="https://hacks.mozilla.org/2015/09/subresource-integrity-in-firefox-43/">https://hacks.mozilla.org/2015/09/subresource-integrity-in-firefox-43/</a></li>
<li>CORSが必要</li>
<li>入れ子になった中のドメインの内容も推測出来てしまうので、CORSが必要

<ul>
<li>仕様的にはそっちは許可されてない</li>
</ul></li>
</ul></li>
<li>次回はCAの話</li>
</ul>

<hr>

<h1 id="almin-js-javascriptアーキテクチャ-azu"><a href="http://azu.github.io/slide/2016/child_process_sushi/almin-javascript-architecture.html" title="Almin.js | JavaScriptアーキテクチャ">Almin.js | JavaScriptアーキテクチャ</a> - azu</h1>

<ul>
<li>Fluxとかで上半分は皆できるようになったけどドメインモデルについてはまだ未成熟</li>
</ul>

<p><img src="http://azu.github.io/slide/2016/child_process_sushi/img/almin-architecture-flux.png" alt="almin"></p>

<ul>
<li><a href="https://github.com/almin/almin" title="Almin.js">Almin.js</a>はその辺を考える土台とパターンとサンプルを用意するプロジェクト

<ul>
<li>実装自体はFluxと大体同じ</li>
<li>DDDとかその辺をちゃんと実装してオープンソースで読めるものがまだ少ない(JavaScriptだと特に)</li>
</ul></li>
<li>考えて設計して、考えるコードを書く状況をクライアントサイドJavaScriptでも作っていきたい</li>
<li>アーキテクチャは毒

<ul>
<li>この話も何週目 - 世界は繰り返す</li>
</ul></li>
<li>フロントエンド/クライアントサイドでは、バックエンド/サーバサイドよりもオブジェクトの生存期間が長い

<ul>
<li>Gmailのメモリリークの話</li>
<li>クライアントサイドではモデルの生存する時間が数日単位とかある</li>
</ul></li>
<li>この辺の知見はC#がやっぱり多い(クライアントサイドであるため)</li>
<li>言語は死んでもパターンは残るのがパターンは強い</li>
<li>JavaScriptの影響を受けてiOS/Androidでも似たような話がでてたり面白い。</li>
<li>Repositoryと言ってた部分はrelayとかが代わりになったり(サーバサイドとの透過的な扱い)しそう</li>
<li>初期化時にRepositoryとか全部のシングルトンを集めたものを作ってそれを扱うフレームワーク的にすれば、依存関係とかは常に逆になるので気にしなくてよくなりそう

<ul>
<li>Alminはフレームワークにはしたくなかったのでアプリ側でLocatorとかで似たような事を書いてたり</li>
</ul></li>
</ul>

<hr>

<h1 id="node-js-v6-会長">Node.js v6 - 会長</h1>

<ul>
<li><a href="https://speakerdeck.com/yosuke_furukawa/eater" title="eater // Speaker Deck">eater // Speaker Deck</a></li>
<li>テスト = プロセス分離</li>
<li>mockを始末しなくてもプロセスが死んだら死ぬ</li>
<li>テストの時にmockの解放忘れでテストが落ちるのが死ぬ</li>
<li>Async/Syncが混ざって</li>
<li>node test.js で動く</li>
<li>TJ氏

<ul>
<li><a href="https://github.com/visionmedia/expresso">https://github.com/visionmedia/expresso</a></li>
<li>ファイルシステムとかテスト間で依存してるやつがいると死ぬ</li>
<li>RSpecとかみたいのは並列で実行するために、データベースとかも</li>
</ul></li>
<li>ブラウザ</li>
<li>eater

<ul>
<li>モック前提</li>
<li>基本は1ファイル1モック</li>
<li>サブテスト</li>
</ul></li>
<li>deprecatedメッセージでもテスト落ちる</li>
<li>Node.jsにはログの共通インターフェースがない問題</li>
<li>「immutableとか言ってるそうやったらmockできなくなるんじゃないの」</li>
</ul>

<h2 id="testのassertをastで数えるのやつ-teppis">testのassertをASTで数えるのやつ - teppis</h2>

<ul>
<li><a href="http://teppeis.hatenablog.com/entry/2014/12/esplan-new-testing-utility-counting-assertoins-statically" title="おまえは今まで実行したassertの回数を覚えているのか？あるいは新しいアサーションユーティリティのご提案 - teppeis blog">おまえは今まで実行したassertの回数を覚えているのか？あるいは新しいアサーションユーティリティのご提案 - teppeis blog</a>

<ul>
<li>変換しないと意味が分からないコードを書くのはなんか違うのでは</li>
</ul></li>
<li><a href="https://www.jfrog.com/video/artifactory-npm-support/" title="JFrog - Artifactory NPM Support">JFrog - Artifactory NPM Support</a>

<ul>
<li>月 98$ で SaaS</li>
<li>Mavenとかのホスティングとかいろんなパッケージのホステイングできる</li>
<li>npmのregistryとして登録するProxyとして</li>
</ul></li>
<li>社内のキャッシュになかったらpublicへ

<ul>
<li>npmの別registryの登録方法</li>
<li>scoped moduleでregistryの名前空間を分けるといい</li>
</ul></li>
</ul>

<h2 id="ビルド職人を減らしたいという話-vvakame">ビルド職人を減らしたいという話 -- vvakame</h2>

<blockquote>
<p>スライド: <a href="https://gist.github.com/vvakame/45ca8f051e54702071eb88bb1dd8b46e" title="ビルド職人.md">ビルド職人.md</a></p>
</blockquote>

<ul>
<li>設定を共有したい</li>
<li><a href="https://github.com/rocjs/roc" title="rocjs/roc: Modern Application Development Ecosystem">rocjs/roc: Modern Application Development Ecosystem</a></li>
</ul>

<hr>

<h2 id="intersectionobserver-koba04">InterSectionObserver -- koba04</h2>

<ul>
<li><a href="https://github.com/WICG/IntersectionObserver" title="WICG/IntersectionObserver: API Sketch for Intersection Observers">WICG/IntersectionObserver: API Sketch for Intersection Observers</a></li>
<li>画面から離れたら発火するイベント</li>
<li>下まで来たら再読み込みする</li>
<li>今のFirefoxは同期のスクロール処理は警告でるので、似たような事をする</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects" title="Scroll-linked effects - Mozilla | MDN">Scroll-linked effects - Mozilla | MDN</a></li>
</ul>

<h2 id="最近の辛いこと-t_wada">最近の辛いこと - t_wada</h2>

<ul>
<li><code>deepStrictEqual</code> がブラウザでは動かない</li>
<li>commmonjs assertはdeepEqualまでしかない</li>
<li><a href="https://github.com/sindresorhus/core-assert" title="sindresorhus/core-assert: Node.js `assert` as a standalone module">sindresorhus/core-assert: Node.js <code>assert</code> as a standalone module</a></li>
<li>暗礁に乗り上げた <code>assert.deepStrictEqual</code></li>
<li>ES6時代に対応したdeepEqualが必要</li>
<li>無限Iteratorとかどうするの?</li>
<li>ESLintでキャキャやってるのすごいね</li>
<li>npm3+dedupe+依存モジュールのバージョン違い競合(estraverseとか?)+Browserifyの辛い話

<ul>
<li>ESLintとpower-assertでdudupeの問題が起こることもある</li>
<li>バージョン違いが存在するとネストしてインストールされる</li>
<li>ネストしてインストールされたモジュールをBrowserifyに食べさせるとなぜか絶対パスがビルドファイル内にでてくる、2つ分のファイルが読み込まれたり、dedupeできなかった問題がおきる</li>
<li>後ろ向きな理由でJSHintを使ってる話</li>
</ul></li>
</ul>

<hr>

<h2 id="バッチ処理の依存関係定義が辛い-joker1007">バッチ処理の依存関係定義が辛い - joker1007</h2>

<ul>
<li>簡単なものだったらRakeでもいいけど</li>
<li>複雑になるとRubyでジョブフローを上手くやるものがない

<ul>
<li>オープンソースのいいものがない(Ruby)</li>
<li>rukawa</li>
<li><a href="http://qiita.com/joker1007/items/02b334d1cca76fadaf2c" title="Ruby製のシンプルなワークフローエンジンRukawaの紹介 - Qiita">Ruby製のシンプルなワークフローエンジンRukawaの紹介 - Qiita</a></li>
</ul></li>
<li>Ruby製のワークフローエンジンを作った</li>
</ul>

<hr>

<p>Child Processおめでとうございます。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>power-assert + babel as a development tool</title>
   <link href="http://efcl.info/2016/04/14/espower-babel-is-deprecated/"/>
   <updated>2016-04-14T19:55:00+09:00</updated>
   <id>http://efcl.info/2016/04/14/espower-babel-is-deprecated</id>
   <content type="html"><![CDATA[ <h2 id="3行まとめ">3行まとめ</h2>

<ul>
<li><a href="https://github.com/power-assert-js/espower-babel" title="espower-babel">espower-babel</a>は役目を終えたので、Deprecated</li>
<li>Babel + power-assertは<a href="https://github.com/power-assert-js/babel-preset-power-assert" title="babel-preset-power-assert">babel-preset-power-assert</a>を使う</li>
<li>コード上は<code>require(&quot;power-assert&quot;)</code>と<code>require(&quot;assert&quot;)</code> どちらでもpower-assert化できるようになった</li>
</ul>

<h2 id="espower-babelは非推奨へ"><a href="https://github.com/power-assert-js/espower-babel" title="espower-babel">espower-babel</a>は非推奨へ</h2>

<p>Babel + Mocha + power-assertの組み合わせを出来るだけ設定ファイルなどを作らずに使える<a href="https://github.com/power-assert-js/espower-babel" title="espower-babel">espower-babel</a>というモジュールを書いていましたが、役目を終えたので非推奨(deprecated)にしました。</p>

<ul>
<li><a href="http://efcl.info/2015/05/10/espower-babel3.0.0/" title="テストコードをES6+power-assertで書けるespower-babel 3.0.0リリース | Web Scratch">テストコードをES6+power-assertで書けるespower-babel 3.0.0リリース | Web Scratch</a></li>
</ul>

<p>理由としては、Babel@6からは設定(ファイル)を必ず必要とするので、<a href="https://github.com/power-assert-js/espower-babel" title="espower-babel">espower-babel</a>をかませる分、柔軟性がなくなったり余計な処理が起きて遅くなるためです。</p>

<p>代わりに<a href="https://www.npmjs.com/package/babel-register" title="babel-register">babel-register</a>と<a href="https://github.com/power-assert-js/babel-preset-power-assert" title="babel-preset-power-assert">babel-preset-power-assert</a>を直接使って、開発時のBabelのビルド設定としてpower-assertを導入する方法を推奨しています。</p>

<p>以下は、power-assert + Mocha + Babel環境を新規インストールする場合の手順ですが、espower-babelからの移行は<a href="https://github.com/power-assert-js/migrate-espower-babel-to-babel-preset-power-assert" title="migrate-espower-babel-to-babel-preset-power-assert">migrate-espower-babel-to-babel-preset-power-assert</a>を使うことで同様のことができるようにしてあります。</p>

<ul>
<li><a href="https://github.com/power-assert-js/migrate-espower-babel-to-babel-preset-power-assert" title="migrate-espower-babel-to-babel-preset-power-assert">migrate-espower-babel-to-babel-preset-power-assert</a></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm i -g migrate-espower-babel-to-babel-preset-power-assert
$ cd &lt;該当プロジェクトrootへ&gt;
$ migrate-espower-babel-to-babel-preset-power-assert
</code></pre></div>
<p>でマイグレーションしてくれます。
(自分のプロジェクトをespower-babelから移行するのに書いたので、人により構成が違うため動かないかもしれません。その場合はPull Requestをいただけると助かります。)</p>

<hr>

<p>新規で、power-assert + Mocha + Babel環境(ランタイム変換)を導入する手順です。</p>

<p>サンプルプロジェクト</p>

<ul>
<li><a href="https://github.com/azu/power-assert-as-tool-demo" title="azu/power-assert-as-tool-demo">azu/power-assert-as-tool-demo</a></li>
</ul>

<h2 id="設定方法">設定方法</h2>

<h3 id="必要なモジュールをインストール">必要なモジュールをインストール</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm i -D power-assert mocha babel-register babel-preset-power-assert babel-preset-es2015
</code></pre></div>
<p>mochaからテストを実行する際にBabelの変換をするので、<code>babel-register</code>と以下の2つのpresetをインストールします。</p>

<ul>
<li>babel-preset-es2015

<ul>
<li>ES2015の変換を行うpreset</li>
</ul></li>
<li>babel-preset-power-assert

<ul>
<li>power-assert関連のpreset</li>
</ul></li>
</ul>

<h3 id="babelrcを作成"><code>.babelrc</code>を作成</h3>

<p>Babelの設定をするために、<code>.babelrc</code>を次のように作成します。
power-assertは開発ビルド(テスト中)にしか必要ないので、<code>env</code>で振り分けしておきます。
<code>env</code>は<code>NODE_ENV</code>によって振り分けされます。 <code>NODE_ENV=production &lt;コマンド&gt;</code>のような感じで環境変数を指定し、必要なプラグインを分けることができます。
何も指定していない場合は<code>NODE_ENV=development</code>と同じになります。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;es2015&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;env&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;development&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&quot;power-assert&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="mocha-optsを作成"><code>mocha.opts</code>を作成</h3>

<p>Mochaの設定をする<code>mocha.opts</code>を作成します。</p>

<p><code>test/mocha.opts</code> に以下のように書くだけです。設定ファイルとして作らないで、引数に渡すだけでいいかもしれません。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">--compilers js:babel-register
</code></pre></div>
<p>こうすることで、Mochaのテスト実行時はBabelによる変換がランタイムで行われます。</p>

<h2 id="テストを書く">テストを書く</h2>

<p>次のような足し算をするコードを書いてみます。</p>

<p><code>add.js</code>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">y</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>これをテストするコードを<code>assert</code>モジュールを使って書いてみます。</p>

<p><code>add-test.js</code></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// require(&quot;power-assert&quot;) じゃなくて assert でもいい</span>
<span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="nx">add</span> <span class="nx">from</span> <span class="s2">&quot;../src/add&quot;</span><span class="p">;</span>
<span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return x + y&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span><span class="c1">// &lt;= Wrong</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p><code>$ mocha</code>という感じでテストを実行してみると、このテストは<code>3 == 5</code>となっているので失敗します。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/04/14-1460632719.png" alt="power-assert result"></p>

<p>テストを失敗すると、power-assertにより構造的な結果が表示されています。
<code>.babelrc</code>の設定にもとづいて変換する際に<code>babel-preset-power-assert</code>が次の2つのことをやっています。</p>

<ol>
<li><code>require(&quot;assert&quot;)</code>を<code>require(&quot;power-assert&quot;)</code>に書き換える</li>
<li><code>assert</code>関数などに仕込みをして、失敗した時に情報をいっぱい表示できるようにする

<ul>
<li>こちらは今までもやっていたこと</li>
</ul></li>
</ol>

<p>これにより、<code>require(&quot;power-assert&quot;)</code>ではなく、ただの<code>require(&quot;assert&quot;)</code>もpower-assert化された状態でassertionが行えるようになっています。</p>

<p>通常今までは、テストコードのみ<code>require(&quot;power-assert&quot;)</code>をして、アプリケーションコード側では<code>require(&quot;assert&quot;)</code>をしていたと思います。</p>

<p>例えば、この<code>add.js</code>の例では引数のチェックに<code>assert</code>を使っています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">y</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>なので、次のようなコードを書くと例外を投げるのでテストは失敗します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js">    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;arguments should be type of number&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">add</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div>
<p>今までは、ただの<code>assert()</code>だったので、大した情報はでませんでした。
しかし、これもMocha経由で実行してみると、<code>assert(typeof x === &quot;number&quot;);</code>がpower-assert化されています。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/04/14-1460633294.png" alt="assert to be power-asssert"></p>

<p>これはどういうことになるかというと、コード上でライブラリとして<code>require(&quot;power-assert&quot;)</code>と読み込む必要がなくなり、ツールとしてpower-assertが動くようになった事を意味します。</p>

<p>なので、<code>power-assert</code>を使わなくなった時はツール(具体的には<code>babelrc</code>から)power-assertを外すだけで、コードは一切変更しなくても良くなったということです。</p>

<p>そのため、power-assertは開発用のライブラリからツールという位置づけに変わったという話でした。</p>

<p>サンプルプロジェクト</p>

<ul>
<li><a href="https://github.com/azu/power-assert-as-tool-demo" title="azu/power-assert-as-tool-demo: babel + power-assert preset demo project.">azu/power-assert-as-tool-demo: babel + power-assert preset demo project.</a></li>
</ul>

<h2 id="おまけ">おまけ</h2>

<p>アプリケーションに<code>assert</code>を書くようになったと言っても、今回の<code>add(x ,y)</code>のように決まりきったような引数のチェックを毎回書くのは大変です。</p>

<p>先ほどの<code>add.js</code>は次のような感じでテストすることができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="nx">add</span> <span class="nx">from</span> <span class="s2">&quot;../src/add&quot;</span><span class="p">;</span>
<span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return x + y&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;arguments should be type of number&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">add</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>

            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;unreachable line&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">assert</span><span class="p">.</span><span class="nx">AssertionError</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p>引数の型違反例外(<code>assert.AssertionError</code>)もテストされていることが分かります。</p>

<p>JSDocから自動でランタイムAssertionを追加してくれる<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使うことで、<code>add.js</code>から型チェック的な<code>assert</code>は取り除けます。</p>

<ul>
<li><a href="http://efcl.info/2016/03/25/jsdoc-to-assert/" title="JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch">JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch</a></li>
</ul>

<p>具体的には<code>presets</code>に<a href="https://github.com/azu/babel-preset-jsdoc-to-assert" title="azu/babel-preset-jsdoc-to-assert: Babel plugin for jsdoc-to-assert">babel-preset-jsdoc-to-assert</a>を追加して、JSDocを書くだけです。</p>
<div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">--- a/.babelrc</span>
<span class="gi">+++ b/.babelrc</span>
<span class="gu">@@ -5,6 +5,7 @@</span>
   &quot;env&quot;: {
     &quot;development&quot;: {
       &quot;presets&quot;: [
<span class="gi">+        &quot;jsdoc-to-assert&quot;,</span>
         &quot;power-assert&quot;
       ]
     }

<span class="gh">diff --git a/src/add.js b/src/add.js</span>
<span class="gh">index 4748ae3..5cc3b9c 100644</span>
<span class="gd">--- a/src/add.js</span>
<span class="gi">+++ b/src/add.js</span>
<span class="gu">@@ -1,7 +1,9 @@</span>
 &quot;use strict&quot;;
<span class="gd">-const assert = require(&quot;assert&quot;);</span>
<span class="gi">+/**</span>
<span class="gi">+ * @param {number} x</span>
<span class="gi">+ * @param {number} y</span>
<span class="gi">+ * @returns {Number}</span>
<span class="gi">+ */</span>
 export default function add(x, y) {
<span class="gd">-    assert(typeof x === &quot;number&quot;);</span>
<span class="gd">-    assert(typeof y === &quot;number&quot;);</span>
     return x + y;
<span class="gd">-}</span>
</code></pre></div>
<p>変更したコミット:</p>

<ul>
<li><a href="https://github.com/azu/power-assert-as-tool-demo/pull/1" title="feat(babel): use jsdoc-to-assert by azu · Pull Request #1 · azu/power-assert-as-tool-demo">feat(babel): use jsdoc-to-assert by azu · Pull Request #1 · azu/power-assert-as-tool-demo</a></li>
</ul>

<p><a href="https://github.com/azu/babel-preset-jsdoc-to-assert" title="azu/babel-preset-jsdoc-to-assert: Babel plugin for jsdoc-to-assert">babel-preset-jsdoc-to-assert</a>もpower-assert化できるといいのですが、Babelの変換の仕組み上難しいのでまだできてません。</p>

<p>また、<code>assert</code>をアプリケーション側で使っていた際に、プロダクションビルドからは取り除きたいということがあります。その場合はunassertを使えば、取り除けるので便利です。</p>

<ul>
<li><a href="https://github.com/twada/unassert">twada/unassert: Encourage reliable programming by writing assertions in production code, and compiling them away from release</a></li>
<li><a href="https://github.com/twada/babel-plugin-unassert">twada/babel-plugin-unassert: Babel plugin to encourage reliable programming by writing assertions in production code, and compiling them away from release.</a></li>
</ul>

<p>変更したコミット:</p>

<ul>
<li><a href="https://github.com/azu/power-assert-as-tool-demo/pull/2" title="feat(babel): add unassert in NODE_ENV=production building by azu · Pull Request #2 · azu/power-assert-as-tool-demo">feat(babel): add unassert in NODE_ENV=production building by azu · Pull Request #2 · azu/power-assert-as-tool-demo</a></li>
</ul>

<p>ここまでを全部適応した最終的な<code>.bebelrc</code>は次のような形になっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
    <span class="s2">&quot;es2015&quot;</span>
  <span class="p">],</span>
  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;jsdoc-to-assert&quot;</span><span class="p">,</span>
        <span class="s2">&quot;power-assert&quot;</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="s2">&quot;production&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;plugins&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;babel-plugin-unassert&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="https://github.com/azu/power-assert-as-tool-demo" title="azu/power-assert-as-tool-demo: babel + power-assert preset demo project.">azu/power-assert-as-tool-demo: babel + power-assert preset demo project.</a></li>
</ul>

<h2 id="おわり">おわり</h2>

<ul>
<li>espower-babelはBebel5以下における解だったので、役目はひとまず終わり</li>
<li>普通にコンパイル言語と同じように、デバッグ時のみ情報量の多いassertの適応、プロダクションビルド時は取り除くということができるようになった</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC%E3%82%A2%E8%AB%96%E7%90%86" title="ホーア論理">ホーア論理</a>的な事前条件は<code>assert</code>やJSDocで、事後条件はテストで保証するみたいなことはやりやすくなった</li>
<li>コード量や実行速度はそこまで変わらずにチェックできることが色々増えた</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Bikeshed.js アウトラインメモ</title>
   <link href="http://efcl.info/2016/04/13/bikeshedjs/"/>
   <updated>2016-04-13T23:11:00+09:00</updated>
   <id>http://efcl.info/2016/04/13/bikeshedjs</id>
   <content type="html"><![CDATA[ <p><a href="http://connpass.com/event/29019/" title="Bikeshed.js - connpass">Bikeshed.js - connpass</a>に参加したメモ</p>

<hr>

<h2 id="『let-vs-const』-yosuke_furukawa">『let vs. const』 @yosuke_furukawa</h2>

<ul>
<li>Effective Java</li>
<li>気持ちはImmutable</li>
<li>スレッドがないJavaScriptだと微妙</li>
<li><code>const</code> だけで防げるのか

<ul>
<li>const + <code>Object.freeze</code></li>
<li>Map+SetとかもImmutableではないのでimmutable.jsなどを使う必要がある</li>
</ul></li>
<li>やる意味

<ul>
<li><code>prefer-const</code></li>
<li>let使うときはforでぶん回す時ぐらい</li>
<li>逆にletつかているところを見ると注意して見るようになった</li>
<li>やりたいことはconst 強制 =&gt; 初学者のミスを減らせる</li>
</ul></li>
<li>基本的には <code>const</code> を使う</li>
</ul>

<hr>

<h2 id="セミコロン付けるつけない-yoshiko_pg">セミコロン付けるつけない - @yoshiko_pg</h2>

<ul>
<li>付ける人が殆ど</li>
</ul>

<hr>

<p><a href="https://app.sli.do/event/rewvfpmz/ask" title="Bikeshed.js">Bikeshed.js</a>のボードを見ながら自転車置場の議論をした。</p>

<p>インデントとか改行位置とかスタイルの話が殆どだった。</p>

<p>自分は設計においてこういうどっちでもいいような議論が多くあると思ってるので、JavaScriptとCSSの設計についてのスライドを用意したけど使わなかったので忘れる。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/bikeshedjs/javascript-read-write-stack.html">Read/Write Stack | JavaScriptアーキテクチャ</a></li>
<li><a href="http://azu.github.io/slide/2016/bikeshedjs/component-css-architecture.html">コンポーネントとCSSのアーキテクチャ</a></li>
</ul>

<hr>

<h2 id="power-assertがツールになった話-twada">power-assertがツールになった話 - twada</h2>

<ul>
<li><a href="https://github.com/power-assert-js/power-assert/issues/43" title="power-assert make `assert()` of assert module silent · Issue #43 · power-assert-js/power-assert">power-assert make <code>assert()</code> of assert module silent · Issue #43 · power-assert-js/power-assert</a></li>
</ul>

<p>のissueでは、</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>のようなコードをプロダクション側(テストではない)に書いてた時に、<code>assert()</code>の中身がpower-assert化(位置情報などを含んだオブジェクトを返す)されてしまい、常に<code>assert(object)</code>をパスしてしまうという問題。</p>

<p>これは、次のように<code>power-assert</code>が使われていれば解決すること。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;power-assert&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>そのため、<code>require(&quot;assert&quot;)</code>　を <code>require(&quot;power-assert&quot;)</code> するものが同時に行われればいいということで、<a href="https://www.npmjs.com/package/babel-plugin-empower-assert" title="babel-plugin-empower-assert">babel-plugin-empower-assert</a>というプラグインができた。</p>

<p>しかし、このプラグインはあくまでオプトインなので、既存の<code>babel-plugin-espower</code>だけを使ってる人は自分で以下のように追加する必要がある。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
  <span class="p">],</span>
  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;plugins&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;babel-plugin-empower-assert&quot;</span><span class="p">,</span>
        <span class="s2">&quot;babel-plugin-espower&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>毎回2つのプラグインをいれるのは面倒だということで、<a href="https://github.com/twada/babel-preset-power-assert" title="babel-preset-power-assert">babel-preset-power-assert</a>という2つのプラグインをまとめたpresetsが追加された。</p>

<p>これにより、<code>require(&quot;power-assert&quot;)</code>ではなく、ただの<code>require(&quot;assert&quot;)</code>もpower-assert化された状態でassertionが行えるようになった。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[</span>
        <span class="s2">&quot;babel-preset-power-assert&quot;</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>コード上からはNode.jsのassertモジュールに見えるけど、Babelによってpower-assertモジュールに差し替えられるため、power-assertはライブラリではなくツールになったという話。</p>

<hr>

<p>おわり</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintの設定をnpmにあげて使い回す</title>
   <link href="http://efcl.info/2016/04/08/textlint-sharable-config/"/>
   <updated>2016-04-08T21:51:00+09:00</updated>
   <id>http://efcl.info/2016/04/08/textlint-sharable-config</id>
   <content type="html"><![CDATA[ <p>textlint <a href="https://github.com/textlint/textlint/releases/tag/6.2.0" title="6.2.0">6.2.0</a>でSharable Configの機能を追加しました。</p>

<p>これは<code>.textlintrc</code>の中身をnpmパッケージとして公開して、使うときは<code>textlint --config @azu/textlint-config</code> のようにパッケージを指定して使えるという機能です。</p>

<p>簡単にいうと設定を共有する機能です。</p>

<p>ESLintのやつと基本的に同じですが、ESLintと違って<code>&quot;extend&quot;</code>での設定ファイルの継承は対応してません。
多分JavaScriptとしてやった方が良さそうな気がしていて実装してないです。(いい案があればIssueに下さい)</p>

<p><code>.textlintrc</code>はJavaScriptとして以下のような感じで書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="nx">rules</span> <span class="o">:</span> <span class="p">{</span>
    <span class="p">}</span>
 <span class="p">};</span>
</code></pre></div>
<ul>
<li><a href="http://qiita.com/hokaccha/items/6a132af7a28ffd4e9690">ESLintの設定をscoped packageでnpmにあげて使い回す - Qiita</a></li>
<li><a href="http://qiita.com/mysticatea/items/dc35ced6bd5e782f50cd">共有設定でらくらく ESLint - Qiita</a></li>
</ul>

<p>設定ファイルを公開する場合は<code>main</code>のスクリプトに<code>.textlintrc</code>の設定をJavaScriptで書いてexportするだけです。</p>

<p>例えば、<a href="https://github.com/azu/textlint-config-readme">azu/textlint-config-readme: Sharable config for textlint</a>は以下のファイルをpackage.jsonの&quot;main&quot;に指定しているだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">rules</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-todo&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;no-dead-link&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;alex&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;write-good&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s2">&quot;rousseau&quot;</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>
<p><code>pacakge.json</code>は次の通り</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;@azu/textlint-config-readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git+https://github.com/azu/textlint-config-readme.git&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;azu&quot;</span><span class="p">,</span>
  <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;azuciao@gmail.com&quot;</span><span class="p">,</span>
  <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/azu/textlint-config-readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
  <span class="nt">&quot;files&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
    <span class="s2">&quot;lib/&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;bugs&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/azu/textlint-config-readme/issues&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.2&quot;</span><span class="p">,</span>
  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint config module for writing readme&quot;</span><span class="p">,</span>
  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint-config.js&quot;</span><span class="p">,</span>
  <span class="nt">&quot;directories&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;test&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;textlint -c ./textlint-config.js ./*.md&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&quot;textlint&quot;</span><span class="p">,</span>
    <span class="s2">&quot;config&quot;</span>
  <span class="p">],</span>
  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;textlint-rule-alex&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-common-misspellings&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-no-dead-link&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-no-todo&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.0.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-rousseau&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.4.1&quot;</span><span class="p">,</span>
    <span class="nt">&quot;textlint-rule-write-good&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.1.4&quot;</span>
  <span class="p">},</span>
  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;textlint&quot;</span><span class="p">:</span> <span class="s2">&quot;^6.2.0&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>使うときは</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D @azu/textlint-config-readme textlint
</code></pre></div>
<p>でインストールして</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint --config @azu/textlint-config-readme README.md
</code></pre></div>
<p><code>--config</code>にパッケージ名を指定するだけです。</p>

<p>具体的には以下を見てみてください。</p>

<ul>
<li><a href="https://github.com/azu/textlint-config-readme">azu/textlint-config-readme: Sharable config for textlint</a>

<ul>
<li>README.mdのチェック用のルールを適当にまとめた</li>
</ul></li>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/configuring.md#sharable-configuration">textlint/configuring.md at master · textlint/textlint</a></li>
</ul>

<p>Scoped module(<code>@azu/abc</code>のような形式)も対応してるので、自分の名前空間なら気軽に公開できて便利です。</p>

<ul>
<li><a href="http://efcl.info/2015/04/30/npm-namespace/" title="npmで名前空間を持ったモジュールを公開する方法(scoped modules) | Web Scratch">npmで名前空間を持ったモジュールを公開する方法(scoped modules) | Web Scratch</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 20時限目 アウトラインメモ</title>
   <link href="http://efcl.info/2016/04/05/tng20/"/>
   <updated>2016-04-05T23:43:00+09:00</updated>
   <id>http://efcl.info/2016/04/05/tng20</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/29235/" title="Node学園 20時限目">Node学園 20時限目</a>に参加したきたのメモ。</p>

<h2 id="「eslintの話」-by-mysticatea">「eslintの話」 by @mysticatea</h2>

<p>スライド: <a href="https://docs.google.com/presentation/d/1OeKTQieBBTp4dQz8irIM-DxXS-0gUixC1hlOZbfIkqs/edit?usp=sharing" title="ESLint Past and Future - Google スライド">ESLint Past and Future - Google スライド</a></p>

<ul>
<li>ESLint 12-3% ぐらいのルールを書いた</li>
<li>JSHintにプラグイン機能が追加するという話はあったけどならなかった</li>
<li>ESLintの特徴

<ul>
<li>ASTベースでプラグインという特性</li>
<li>(以前書いたプラグインの仕組み: <a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/index.html" title="ESLint | JavaScript Plugin Architecture">ESLint | JavaScript Plugin Architecture</a>)</li>
<li>開発者が貢献するのが簡単

<ul>
<li>コントリビューションガイド</li>
</ul></li>
</ul></li>
<li>開発体制

<ul>
<li>機能に関しては Reviewer以上</li>
<li>バグに関しては Committer 以上が確認してマージ</li>
<li>隔週の金曜日にリリース</li>
</ul></li>
<li>ESLint 3.0.0

<ul>
<li>Stage 4に到達した構文</li>
<li>Auto FixはIDEと連携して選択式の適応へ

<ul>
<li>アグレッシブなFixは同時に適応できない問題</li>
</ul></li>
<li>Globベースの設定ファイル

<ul>
<li>RootにGlob的なファイルを置いてカスケードする</li>
</ul></li>
<li>より良いカスタムパーサーAPI

<ul>
<li>babel-eslintがしょっちゅう壊れる</li>
<li>patchアップデートで壊れる</li>
</ul></li>
<li>より良いスタイルルール

<ul>
<li>indentルールをどうかする</li>
<li>スタイルルールセットみたいな統一感がない</li>
</ul></li>
<li>TypeScriptサポート

<ul>
<li>ESLintがTypeScriptを扱えるようにする</li>
<li><a href="https://github.com/eslint/typescript-eslint-parser" title="eslint/typescript-eslint-parser: A TypeScript parser that produces output compatible with ESLint">eslint/typescript-eslint-parser: A TypeScript parser that produces output compatible with ESLint</a></li>
</ul></li>
</ul></li>
</ul>

<h2 id="「amebafresh-tvの話」-by-ahomu">「amebafresh.tvの話」 by @ahomu</h2>

<p>スライド: <a href="http://s.aho.mu/160405-node_school/#" title="Client Side of なんちゃらfresh.tv">Client Side of なんちゃらfresh.tv</a></p>

<ul>
<li>■■■■fresh.tv</li>
<li>クライアントサイドの話</li>
<li>SSRについて

<ul>
<li>Socket.IO</li>
<li>HLS</li>
</ul></li>
<li>ウェブクライアント

<ul>
<li>React + Fluxible</li>
</ul></li>
<li>サーバ

<ul>
<li>nignx -&gt; node(クライアントサーバ) -&gt; golang(APIサーバ)</li>
</ul></li>
<li>サーバサイドレンダリング

<ul>
<li>コンポーネント</li>
<li>サーバサイドレンダリング</li>
<li>テンプレをクライアント/サーバで共有するのがメイン</li>
<li>JavaScriptのみでレンダリングだと、クリティカルレンダリングパスが長くなる

<ul>
<li>初期表示を短くするためのサーバーサイドレンダリング</li>
</ul></li>
<li>Fluxible

<ul>
<li>Flux : fluxible</li>
</ul></li>
<li>Rendering

<ul>
<li>react</li>
</ul></li>
<li>Routing

<ul>
<li>Fluxible</li>
</ul></li>
<li>Data Loading

<ul>
<li>fetchrはサーバ用のService Middlewareとクライント用のProxy Requestを使ってやる</li>
<li>クライアントとサーバでそれぞれ同じコードだけど、リクエストはProxyで実体は異なる</li>
</ul></li>
</ul></li>
<li>Flux

<ul>
<li>コンポーネントはスマートUI気味</li>
<li>必要に応じてStoreに移していく</li>
<li>他のコンポーネントと共有しないUIの状態はStateを使う</li>
<li>開発速度を優先した感じ</li>
<li><code>Context</code>を注入してバケツリレーを回避</li>
</ul></li>
<li>SPAについて

<ul>
<li>メリット

<ul>
<li>画面遷移が早くなる</li>
</ul></li>
<li>デメリット

<ul>
<li>ブラザナビゲーションを破壊してしまう</li>
</ul></li>
</ul></li>
<li>ウェブサイトは本当にSPAにするべきか

<ul>
<li>ユーザー操作がリンクをクリックする感じなら、SPAにする意味はそこまでないのでは?</li>
<li>ウェブアプリ的な(一ページに滞在する必要があるもの)はSPAが良い</li>
<li>ブラウザのナビゲーションは自分で色々で責任を持つ必要があるので大変</li>
</ul></li>
<li>PinP(Picture in Picture)が要件にあったから

<ul>
<li>この要件があったのでSPAにした</li>
</ul></li>
<li>SPAの注意

<ul>
<li>ルーティング後の画面遷移

<ul>
<li>読み終わったら、データを画面に反映するべき</li>
</ul></li>
<li>スクロール(0,0)もルーティングが終わってから移動する</li>
<li>ブラウザバックは即座に表示

<ul>
<li>ブラウザバックなら情報は既知 = キャッシュを使う</li>
<li>Routing処理が発生してもfetchはスキップ

<ul>
<li>ここはルーティングで</li>
</ul></li>
</ul></li>
<li>7gogo</li>
<li>某巨大サービス</li>
</ul></li>
<li>ディレクトリ

<ul>
<li>コンポーネント毎にディレクトリを切ってる </li>
</ul></li>
<li>Componentについて

<ul>
<li>プロジェクト固有のレイヤーで、ここはCSSで上書きOKという感じになってる</li>
<li>日々デザインは変わるのでゆるめな感じの作り</li>
</ul></li>
<li>CSS

<ul>
<li>SUIT CSS + BEM</li>
</ul></li>
<li>コンポーネントはガンガン切る

<ul>
<li>shouldComponentUpdateを信じて細分化した</li>
</ul></li>
<li>CSSの今後

<ul>
<li><a href="http://bradfrost.com/blog/post/atomic-web-design/" title="Atomic Design | Brad Frost">Atomic Design | Brad Frost</a></li>
</ul></li>
</ul>

<hr>

<h2 id="「vue-jsの最近の話」-by-kazupon">「vue.jsの最近の話」 by @kazupon</h2>

<p>スライド: <a href="https://speakerdeck.com/kazupon/vue-dot-js-recent-trends" title="Vue.js Recent Trends // Speaker Deck">Vue.js Recent Trends // Speaker Deck</a></p>

<p>(雑談をしていたのでメモできてない)</p>

<h2 id="「nodebotsの話」-by-n0bisuke">「Nodebotsの話」 by @n0bisuke</h2>

<p>スライド: <a href="https://speakerdeck.com/n0bisuke/nodebotsfalsehua-nodexue-yuan-20shi-xian-mu-number-tng20-20fen" title="NodeBotsの話 (Node学園20時限目 #tng20 : 20分) // Speaker Deck">NodeBotsの話 (Node学園20時限目 #tng20 : 20分) // Speaker Deck</a></p>

<ul>
<li>JavaScriptでハードウェアを操作</li>
<li>konashi</li>
<li>mesh</li>
<li>ハードウェアの機能をNode.jsで制御する

<ul>
<li>noble</li>
<li>BT</li>
</ul></li>
<li>GPIO

<ul>
<li>npmにもライブラリがある</li>
</ul></li>
<li>NodeBots

<ul>
<li>JavaScriptでハードウェアを制御するコミュニティ</li>
</ul></li>
<li>Node.jsでハードウェアを制御する方法

<ul>
<li>Cylon.js

<ul>
<li>Arduinoを制御する</li>
</ul></li>
<li>johnny-five

<ul>
<li>Arduinoなどのハードウェア制御</li>
<li>こっちを使って始めるのがいいという話</li>
</ul></li>
</ul></li>
<li>始め方

<ul>
<li>NodeSchool</li>
<li>workshoperの中にNodeBot Workshopがある</li>
<li>これを使ってjohnny-fiveの基礎を学ぶことができる</li>
<li>ハードウェアがなくても始めることができるよという話</li>
<li>回路図とかも書かれてる</li>
<li>日本語訳を書いてる最中

<ul>
<li>ハードウェアも選定したWorkShopの準備中</li>
</ul></li>
<li>Arduino Uno R3を使うのが安心</li>
<li>Genuino 101というもIntellからでてきた

<ul>
<li>Arduino互換</li>
</ul></li>
<li>Tessel 2

<ul>
<li>Node.jsからの利用を最初から想定しているボード</li>
<li>no ぎてき</li>
</ul></li>
</ul></li>
<li>PR</li>
</ul>

<hr>

<h2 id="「option-tでエラーハンドリング」-by-saneyuki">「option-tでエラーハンドリング」 by @saneyuki</h2>

<p>スライド: <a href="http://www.slideshare.net/saneyuki/dont-use-try-catch-in-javascript" title="Don’t use try catch in JavaScript">Don’t use try catch in JavaScript</a></p>

<ul>
<li>try-catch</li>
<li>エラーの種類(2種類)

<ul>
<li>バグが起こすエラー</li>
<li>回復できるエラー</li>
</ul></li>
<li>バグは回復できるのか?

<ul>
<li>できるわけない</li>
<li>バグは回復してはいけない</li>
<li>開発者に通知するべき</li>
<li>これをtry-catchをがんばっては行けない</li>
<li>プログラムの整合性が壊れてしまう</li>
<li>さっさとクラッシュさせて通知する</li>
</ul></li>
<li>Type

<ul>
<li>TypeScriptの型を見るとerrorは<code>any</code>型になってしまう</li>
</ul></li>
<li>回復可能なエラー

<ul>
<li>DOMのエラーとか回復可能なエラーはある</li>
<li><code>throw-abilty</code> JSDocとかにある</li>
<li>けどツールはちゃんとそこをチェック出来るものは少ない</li>
</ul></li>
<li><a href="http://joeduffyblog.com/2016/02/07/the-error-model/" title="Joe Duffy - The Error Model">Joe Duffy - The Error Model</a>

<ul>
<li>シグネチャで縛らないと開発者はスルーしてしまう</li>
<li>エラーを投げうるかはどうやって表現するか</li>
</ul></li>
<li>Iteratorを拡張したエラー型

<ul>
<li>エラーを投げうる(返しうる)という型</li>
<li>Optional</li>
<li>GoLangのようなエラーハンドリング</li>
</ul></li>
<li>エラーをとりあえず全てキャッチになげる

<ul>
<li>キャッチでクラッシュさせる</li>
</ul></li>
<li>Obsevable on ES.next

<ul>
<li>正常系 =&gt; onNext</li>
<li>エラー =&gt; error = Observableも止まる

<ul>
<li>エラーですぐとめる</li>
</ul></li>
</ul></li>
<li><code>uncughException</code>

<ul>
<li>エラーをダンプしてプロセスをちゃんと落とす(回復しようと努力しない)</li>
<li><code>process.exit()</code></li>
</ul></li>
<li><a href="https://www.npmjs.com/package/option-t" title="option-t">option-t</a>

<ul>
<li><a href="http://saneyukis.hatenablog.com/entry/2016/03/14/223518" title="option-tにResult&amp;lt;T, E&amp;gt;型を実装した（簡易報告版） - snyk_s log">option-tにResult<T, E>型を実装した（簡易報告版） - snyk_s log</a></li>
<li><code>Either&lt;A, B&gt;</code></li>
<li>RustのResultを持ってきたnpmモジュール</li>
</ul></li>
<li>関数型パッピーなライブラリ

<ul>
<li>Rustのドキュメントを読め</li>
</ul></li>
<li>まとめ

<ul>
<li>try-catchを基本的に使うな 

<ul>
<li>例外はあるけど、自分の制御内ではできるだけ使わない</li>
</ul></li>
<li>関数にtry-catchをおし込めてちゃんと型を書いて制御する</li>
<li>バグを回復させてはいけない</li>
<li><code>throwable</code>かどうかはシグネチャとして担保する

<ul>
<li>関数がエラーを投げるかどうかという事を書くべき</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="「oracleがnode-jsをやり始めたというのだが！」-by-charlier_shoe">「OracleがNode.jsをやり始めたというのだが！」 by @charlier_shoe</h2>

<ul>
<li>Old IT

<ul>
<li>一枚岩アーキテクチャの上にJava EEを載せるみたいな</li>
<li>簡単に止めることができない</li>
</ul></li>
<li>New IT

<ul>
<li>軽量なサービス軍で構成</li>
<li>サービスごとに自主的にやってる</li>
</ul></li>
<li>Node Cloud

<ul>
<li>Cloud上のNode.jsのランタイム</li>
<li>アプリケーションコンテナクラウド</li>
</ul></li>
<li>JET

<ul>
<li><a href="http://www.oracle.com/webfolder/technetwork/jet/index.html" title="Home">Home</a></li>
<li>JQuery</li>
<li>JQuery UI</li>
<li>Knockout</li>
<li>RequireJS</li>
<li>Hammer</li>
</ul></li>
<li>Oracle初のOSS！

<ul>
<li><a href="https://github.com/oracle/oraclejet/blob/master/CONTRIBUTING.md" title="oraclejet/CONTRIBUTING.md at master · oracle/oraclejet">oraclejet/CONTRIBUTING.md at master · oracle/oraclejet</a></li>
</ul></li>
</ul>

<hr>

<h2 id="ひたすら楽してディープラーニング-yujiosaka">ひたすら楽してディープラーニング -yujiosaka</h2>

<p>スライド: <a href="https://speakerdeck.com/yujiosaka/hitasurale-sitedeipuraningu" title="ひたすら楽してディープラーニング // Speaker Deck">ひたすら楽してディープラーニング // Speaker Deck</a></p>

<ul>
<li>機械学習</li>
<li>はじめてのパターン認識

<ul>
<li>ニューラルネットワークに壁</li>
</ul></li>
<li>kaggle

<ul>
<li>minstの分類</li>
<li>新しいalgorithmがでると大体これで試される</li>
</ul></li>
<li><a href="http://neuralnetworksanddeeplearning.com/" title="Neural networks and deep learning">Neural networks and deep learning</a>

<ul>
<li>Python -&gt; CoffeeScript -&gt; ES6</li>
</ul></li>
<li>パーセプトロンモデル

<ul>
<li>滑らかになる</li>
</ul></li>
<li>数式

<ul>
<li>普段使ってるプログラミング言語に落としてみるとわかりやすくなる</li>
</ul></li>
<li>教科書にない問題

<ul>
<li>桁あふれの問題</li>
</ul></li>
<li>ライブラリ高機能

<ul>
<li>Pythonのライブラリが高機能過ぎて、JavaScriptで再実装するのが難しい</li>
<li>自動微分</li>
<li>Pythonに詳しくなってきた</li>
</ul></li>
<li>リポジトリ

<ul>
<li><a href="https://github.com/yujiosaka/js-mind" title="yujiosaka/js-mind: Deep Learning Library Written in ES2015.">yujiosaka/js-mind: Deep Learning Library Written in ES2015.</a></li>
</ul></li>
</ul>

<hr>

<h2 id="node-jsでble機器を制御">Node.jsでBLE機器を制御</h2>

<ul>
<li>BLE</li>
<li>振らないと止まらない目覚まし</li>
</ul>

<hr>

<h2 id="雑談">雑談</h2>

<p>@t_wada さんと<a href="http://efcl.info/2016/03/25/jsdoc-to-assert/" title="JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch">JSDocをランタイムassertに変換するBabelプラグインを書いた | Web Scratch</a>についての話をした。</p>

<p><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使うとテストの時に例外を投げるケースが出てきてしまうけど、そういう時はどうするのが正しいの?という話</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div>
<p>をテストするコードとして以下のようなものを書くと、<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使っているときは例外を投げる。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">it(&quot;should x&quot;, function(){
    myFunc(&quot;string&quot;);// {number}を受取るはずなので例外を投げる
});
</code></pre></div>
<p>この時のテストコードとしてはどうするのが正解なのかという話をした。</p>

<p>t_wada 「これは型違反例外なので、キャッチして処理するのが正解」</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should x&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">try</span><span class="p">{</span>
        <span class="nx">myFunc</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">);</span>
        <span class="nx">fail</span><span class="p">(</span><span class="s2">&quot;ここにきたらおかしいので例外を投げる __ いわゆるunreachable&quot;</span><span class="p">);</span>
    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;AssertionError&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>という感じにやるのが良いという話だった。</p>

<p>Nodeの<a href="https://nodejs.org/api/assert.html#assert_assert_fail_actual_expected_message_operator" title="assert.fail(actual, expected, message, operator)">assert.fail(actual, expected, message, operator)</a>は普通のfailじゃないので使えないという話や<code>assert.throws</code>のAPIも何か使いにくいという話をした。</p>

<p>後、今は<code>console.assert</code>使ってるけどブラウザ、Nodeで挙動違うから<a href="https://github.com/codemix/babel-plugin-typecheck" title="babel-plugin-typecheck">babel-plugin-typecheck</a>みたいにif throwするとかになるよなー的な話(ライブラリなしとする場合)</p>

<hr>

<p>@ahomu @pocotan001 さんと</p>

<blockquote>
<p>Component/index.sg.js : コンポーネントのスタイルガイド<br>
<a href="http://s.aho.mu/160405-node_school/#33">http://s.aho.mu/160405-node_school/#33</a></p>
</blockquote>

<p>の話とCSSの設計の話をした。</p>

<p>CSSのスタイルガイドをプロダクトにいれて動かしてる話はあんまり見たことないのでもっと読みたいです！</p>

<p>CSSはcssnext(PostCSS)な感じ。</p>

<p>CSSの原則的な規約とそこを破った方が楽な部分のバランスの話。</p>

<p>(SUIT CSSの考えなどでいくと)親が孫の要素(コンポーネントをまたいだ要素)に対してスタイルを当てるのは原則に反するが、そこは多少破っても問題が起きた時にどこが問題なのかが特定できればいいという話(少なくても親は一定となるという話だと思う)。</p>

<p>後は何にCSSの(グローバル)変数を使ってるかという話をした</p>

<ul>
<li>色</li>
<li>フォント</li>
<li>コンポーネント間の幅</li>
<li>高さ</li>
</ul>

<p>自分の今の考えをそのまま書き出してるのを以下のリポジトリでやってる。
React + CSSのコンポーネント志向とドメイン的なJavaScriptの設計的な題材でやってる。</p>

<ul>
<li><a href="https://github.com/azu/presentation-annotator" title="azu/presentation-annotator: viewing presentation and annotate.">azu/presentation-annotator: viewing presentation and annotate.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>Shibuya.XSS techtalk #7 アウトラインメモ</title>
   <link href="http://efcl.info/2016/03/28/shibuyaxss/"/>
   <updated>2016-03-28T21:41:00+09:00</updated>
   <id>http://efcl.info/2016/03/28/shibuyaxss</id>
   <content type="html"><![CDATA[ <p><a href="http://shibuyaxss.connpass.com/event/28232/" title="Shibuya.XSS techtalk #7">Shibuya.XSS techtalk #7</a>に参加してきたのでメモ</p>

<hr>

<h2 id="超絶技巧-csrf-mala">超絶技巧 CSRF - mala</h2>

<p>スライド: <a href="https://speakerdeck.com/mala/shibuya-dot-xss-techtalk-number-7" title="超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck">超絶技巧CSRF / Shibuya.XSS techtalk #7 // Speaker Deck</a></p>

<ul>
<li>CSRFについて</li>
<li>クロスサイトでリクエストを強制する脆弱性

<ul>
<li>書き込み</li>
<li>パスワードの削除</li>
</ul></li>
<li>未だによくある

<ul>
<li>XSSは正しく書いていれば防げる</li>
<li>CSRFは未だによくある</li>
</ul></li>
<li>CSRFは事後対処になりやすい

<ul>
<li>投票とか掲示板とか事後対処になりやすい</li>
<li>リスクの高いCSRFの紹介</li>
</ul></li>
<li>アカウント乗っ取り

<ul>
<li>危険なCSRF</li>
<li>パスワードの変更</li>
<li>メールアドレスの変更</li>
</ul></li>
<li>連携アカウント追加

<ul>
<li>OAuth2.0 + stateパラメータで防げる</li>
</ul></li>
<li>いろんなものにCSRFする

<ul>
<li>JSONやXMLを送る</li>
<li>form enctype=text/plainを使う</li>
<li>CSRFでmemcached protocolとして解釈可能なものをCSRFで送れる</li>
</ul></li>
<li>HTML Form protocol attach

<ul>
<li>Cross-Protocl スクリプトアタック</li>
<li>よくあるportはブロックされる</li>
<li>NoSQLサーバとかはブロックされてないので、攻撃出来ることがある</li>
</ul></li>
<li>昔との違い

<ul>
<li>バイナリをアップロード出来るようになってる</li>
<li>multipart/form-dataをCSRF =&gt; 可能</li>
<li>CORSのプリフライト対象外</li>
</ul></li>
<li>デモ

<ul>
<li>Memcachedにform経由で書き込むデモ</li>
<li>アプロケーションに任意のデータを書き込んだ任意のコード実行みたいなことができてしまう</li>
</ul></li>
<li>認証を突破するCSRF

<ul>
<li>Redisだとパスワードをかけられる</li>
<li>Redisのパスワード認証

<ul>
<li>パスワードが既知だと同じ</li>
</ul></li>
</ul></li>
<li>CSRFで突破できる認証

<ul>
<li>CSRFはレスポンスが取れない</li>
<li>チャレンジ&amp;レスポンス系は突破できない</li>
</ul></li>
<li>ミドルウェアへのCSRF対策

<ul>
<li>隔離するものはちゃんと隔離する</li>
<li>退職者向けバックドアは残さない</li>
</ul></li>
<li>Well-known port

<ul>
<li><a href="https://fetch.spec.whatwg.org/#port-blocking" title="3.5 Port blocking">3.5 Port blocking</a></li>
<li>Fetch APIで定義されてる</li>
<li>コレ以外はブロックされないので、CSRF経由での攻撃ができる</li>
</ul></li>
<li>プロセス間でやり取りする場合は相互認証をちゃんとやる</li>
<li>Cross protocolなCSRF + xhr.send(blob)でバイナリを送れる :new:

<ul>
<li>新しい脆弱性は生まれるかも</li>
</ul></li>
</ul>

<hr>

<h2 id="pathでxssする技術-masato-kinugawa">PATHでXSSする技術 - Masato Kinugawa</h2>

<p>スライド: <a href="https://speakerdeck.com/masatokinugawa/shibuya-dot-xss-techtalk-number-7" title="明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck">明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck</a></p>

<ul>
<li><code>https://host/path?key=a#b</code></li>
<li>クエリとかハッシュ以外もXSSに使える</li>
<li><code>$_SERVER</code> 

<ul>
<li>PHP</li>
<li><code>REQUEST_URI</code>

<ul>
<li>Firefox, Chrome</li>
<li>IEはリダイレクトするとなぜがPATHの部分がエスケープされない</li>
</ul></li>
</ul></li>
<li>その他のパスでのXSS

<ul>
<li>RPO(Relative Path Overwrite)

<ul>
<li>相対パスを上書きを引き起こすXSS</li>
</ul></li>
</ul></li>
<li><code>location.pathname</code>

<ul>
<li>パスを取得するためのプロパティ

<ul>
<li><code>&#39;=()</code>などはエスケープされない</li>
</ul></li>
</ul></li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a>

<ul>
<li>解説</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;img class=&quot;log&quot; src=&quot;/payloadLogger?url=&#39;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s2">&quot;//&quot;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">)</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<ul>
<li><code>aaa/..%2F</code></li>
<li>IE

<ul>
<li>iframe経由でドキュメントモードを古い動作をあえて呼び出す</li>
<li>親のドキュメントモードがiframeにも継承される

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/gg622935(v=vs.85).aspx" title="Understanding the Compatibility view list (Windows)">Understanding the Compatibility view list (Windows)</a></li>
<li>互換性</li>
</ul></li>
<li>AllowEncodeedSlashedの動作を利用してパス先頭に<code>javascript:</code>を書く</li>
<li><a href="http://shibuya.vulnerabledoma.in/jizen" title="Shibuya.XSS JIZEN-GAKUSHU Challenge">Shibuya.XSS JIZEN-GAKUSHU Challenge</a></li>
</ul></li>
<li>IE

<ul>
<li><code>http</code>から<code>mshtml</code>へreplaceStateができる</li>
<li>SafariもBlob+replaceStateができる</li>
</ul></li>
</ul>

<p>事前課題</p>

<ul>
<li><a href="https://twitter.com/kinugawamasato/status/713307732628021248" title="Masato Kinugawa on Twitter: &amp;#34;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&amp;#34;">Masato Kinugawa on Twitter: &quot;Dear XSSer, two XSS challenges are here. Can you solve it? :) https://t.co/xyi8qoyJBL https://t.co/jhiZMDZh1l&quot;</a></li>
</ul>

<hr>

<h2 id="electronのセキュリティの話-hasegawa">Electronのセキュリティの話 - hasegawa</h2>

<p>スライド: <a href="http://utf-8.jp/public/2016/0328/shibuyaxss.pdf" title="shibuyaxss.pdf">Electronのはなし</a></p>

<ul>
<li>Electron vs. CSP

<ul>
<li>レンダラにCSPを適用しても</li>
<li><code>webview</code>タグ内で任意コード実行ができる</li>
<li>CSPでは(Electronの)XSSを防げない</li>
</ul></li>
<li>WebViewタグを使わないでXSSするパターン

<ul>
<li>レンダラ内は同一オリジン以外のリソースは禁止</li>
<li>外部リソースを<code>innerHTML</code>で読ませれも発火しない</li>
<li>表示されるページと同じオリジンなら可能</li>
<li><code>innerHTML = &lt;iframe src=&quot;&lt;同じオリジン&gt;&quot;&gt;</code>はいける</li>
<li><code>file://</code>で悪意があるものがあれば、任意コード実行できそう</li>
</ul></li>
<li>同一オリジン

<ul>
<li>ディレクトリと関係なく全てが同一オリジン in <code>file://</code></li>
<li>Chrome 45では修正が入ってる: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=455882" title="Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail">Issue 455882 - chromium - Treat file:// URLs as having unique origin - Monorail</a></li>
<li>Electronもそのうち直る?</li>
</ul></li>
<li>悪意のあるファイル in <code>file://</code>

<ul>
<li>事前にダウンロード</li>
<li>ファイルサーバを立ち上げて、<code>file://</code>なものを用意しておくと同一オリジンとして認識される</li>
</ul></li>
<li>実行できてもNodeの機能が実行できない

<ul>
<li><code>window.open</code>でNodeを有効にしたウィンドウを開ける</li>
<li>XSSがあると何でも実行できる</li>
</ul></li>
<li>Electronのnodeモジュール探索パス

<ul>
<li>アプリ外のパスも探索パスとなる</li>
</ul></li>
</ul>

<hr>

<h2 id="http-こいつの-話-shibuya-xss-moe-yagihashoo">http://こいつの:話@shibuya.xss.moe/ - yagihashoo</h2>

<ul>
<li>パスワード認証の話</li>
<li>URI

<ul>
<li>RFC2396で定義、RFC3986で改定される</li>
<li>RFC1738 URL</li>
</ul></li>
<li>各ブラウザの対応状況

<ul>
<li>IE/Edge以外は大体何か動く</li>
<li>FirefoxとSafariとかは警告がでて確認される</li>
<li>Opera PWがマスクされるパターン</li>
</ul></li>
<li>Firefox

<ul>
<li>URLの履歴がそのまま表示される</li>
</ul></li>
<li>ベーシック認証をしてるサイトからログアウトできない

<ul>
<li>ブラウザを終了するしかない</li>
<li>もう一度同じURLでアクセスするとダイアログはでない</li>
</ul></li>
<li>各種ルータの管理画面ハック

<ul>
<li>管理画面はXSSとかCSRFがよくある</li>
<li>XSSの条件

<ul>
<li>ログイン済み</li>
<li>XSSが発言するURLが既知</li>
<li>ユーザがわなページを踏む</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="firefoxの話-llamakko_cafe">Firefoxの話 - llamakko_cafe</h2>

<p>関連: <a href="http://blog.vuln.jp/2016/01/firefox5000.html" title="晴れのちバグ( ꒪⌓꒪): Firefoxのバグを見つけて5000ドルの報奨金をもらった話">晴れのちバグ( ꒪⌓꒪): Firefoxのバグを見つけて5000ドルの報奨金をもらった話</a></p>

<ul>
<li>脆弱性を探す前に

<ul>
<li>ブラウザの脆弱性探しはハードル高そう</li>
<li>どんなものが脆弱性</li>
<li>どんなところに脆弱性</li>
</ul></li>
<li>ブラウザの脆弱性?

<ul>
<li>パッと浮かぶものがあまりない</li>
<li>引き出しが少ないと脆弱性結びつけるのが難しい</li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006323.html" title="JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006323 - JVN iPedia - 脆弱性対策情報データベース</a></li>
</ul></li>
<li>脆弱性を探す前に

<ul>
<li>Firefoxセキュリティアドバイザリ</li>
<li>脆弱性の一覧があって、ソースも見える</li>
</ul></li>
<li><a href="http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-006413.html" title="JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース">JVNDB-2015-006413 - JVN iPedia - 脆弱性対策情報データベース</a>

<ul>
<li>data および view-source URIを通じたクロスサイト読み取り攻撃</li>
</ul></li>
<li>Firefoxの脆弱性を見つけたきっかけ

<ul>
<li>「戻るボタンを押すのがめんどうくさくてhistory.backしてた」</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JSDocをランタイムassertに変換するBabelプラグインを書いた</title>
   <link href="http://efcl.info/2016/03/25/jsdoc-to-assert/"/>
   <updated>2016-03-25T10:37:00+09:00</updated>
   <id>http://efcl.info/2016/03/25/jsdoc-to-assert</id>
   <content type="html"><![CDATA[ <p>JSDocをassertに変換するライブラリとそれを使ったBabelプラグインを書きました。</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>ライブラリの<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>の方は、JavaScript ASTのコメントから<code>assert</code>の文字列を作り出すだけのシンプルなものです。</p>

<p>実際に使う場合は、Babelのプラグインとして<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を使い、コードを変換してランタイムassertを追加させます。</p>

<p>やっていることとしては、FlowTypeをランタイムチェックする<a href="https://github.com/codemix/babel-plugin-typecheck" title="babel-plugin-typecheck">babel-plugin-typecheck</a>のJSDoc版とも言えます。</p>

<ul>
<li><a href="http://qiita.com/mizchi/items/30a5f9560e86e0d5ab31">babel-plugin-typecheck を使って flowtype 文法で書かれたJSをランタイムチェックする - Qiita</a></li>
<li><a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
</ul>

<p>すごく難しい仕組みではないので、既にやって人がいるのではと思ったのですがいなかったので作りました。</p>

<ul>
<li><a href="https://github.com/azu/azu/issues/73" title="JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu">JSDoc to assertに変換するツールが欲しい · Issue #73 · azu/azu</a></li>
</ul>

<h2 id="変換例">変換例</h2>

<p>例えば次のような関数とJSDocがあったとします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div>
<p>これを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>では次のように変換してassert処理を追加しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * @param {number} a - this is a param.</span>
<span class="cm"> * @param {string} b - this is a param.</span>
<span class="cm"> * @param {string[]} c - this is a param.</span>
<span class="cm"> * @param {boolean} [d] - this is a optional.</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">param</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p>みて分かるようにかなりシンプルな変換がされます。(実際はもう少しメッセージを追加しますが、最小限です)</p>

<p><code>assert</code>ライブラリの依存を解決するのが面倒だったので、<code>console.assert</code>を使っていますが一部ブラウザは例外を投げずにログを出すだけらしいです。(Nodeは例外を投げてくれる)</p>

<p><code>d</code>はオプショナルな引数なので、今のところチェックしていません。
また、<code>string[]</code>のチェックが配列かどうかぐらいとなっていたり、まだまだ色々チェック不足な部分はあります。</p>

<p>Pull request 待ってます！</p>

<ul>
<li><a href="https://github.com/azu/jsdoc-to-assert/issues/1" title="Optional arguments support · Issue #1 · azu/jsdoc-to-assert">Optional arguments support · Issue #1 · azu/jsdoc-to-assert</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install babel-plugin-jsdoc-to-assert
</code></pre></div>
<h3 id="設定">設定</h3>

<p>Babelプラグインなので、Babelと共に利用するために<code>.babelrc</code>を設定します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;plugins&quot;: [
    &quot;jsdoc-to-assert&quot;
  ]
}
</code></pre></div>
<p>とシンプルに設定できますが、実際には開発中のみ変換して欲しいと思うので、<code>env</code>オプションを使うことで開発中のみ変換できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;presets&quot;: [
    &quot;es2015&quot;
  ],
  &quot;env&quot;: {
    &quot;development&quot;: {
      &quot;plugins&quot;: [
        &quot;jsdoc-to-assert&quot;
      ]
    }
  }
}
</code></pre></div>
<p><code>jsdoc-to-assert</code>の変換は含めずにビルドする場合は<code>production</code>を設定してビルドすれば、適応されずにすみます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">NODE_ENV=production babel src --out-dir lib --source-maps
</code></pre></div>
<h2 id="仕組み">仕組み</h2>

<p><a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>はコメント(leadingComments Node)を<code>assert</code>などのコード片に変換するだけです。</p>

<p><code>function a(){}</code> や <code>const a = function(){}</code>、 <code>class A{ method(){} }</code> などJSDocを書ける場所は沢山あります。</p>

<p>これらどの関数宣言に対してコード変換をするかは<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>側に実装しています。</p>

<ul>
<li><a href="http://efcl.info/2016/03/06/ast-first-step/" title="JavaScript ASTを始める最初の一歩 | Web Scratch">JavaScript ASTを始める最初の一歩 | Web Scratch</a></li>
</ul>

<p>で書いていますが、BabelのASTはあんまり互換性がないので、<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>の部分は複数実装が存在してもおかしくない領域です。</p>

<p>以前、似たようなツールで<code>a; // =&gt; &quot;string&quot;</code> のようなコメントをassertに変換するライブラリも書いていましたが、この場合も<a href="https://github.com/azu/comment-to-assert">コメントをassertに変換する部分</a>と<a href="https://github.com/azu/power-doctest">変換したassertをコードに追加する部分</a>は分けて実装していました。</p>

<ul>
<li><a href="https://github.com/azu/comment-to-assert">azu/comment-to-assert: convert single line comment to assert.</a></li>
<li><a href="http://efcl.info/2015/08/10/power-doctest1.0/">power-assertを使ったDoctestツール power-doctestを書き直した | Web Scratch</a></li>
</ul>

<p>話を戻して、JSDoc自体の型定義が結構曖昧(nullableとか定義みたいな部分が曖昧)なので、<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>も実装見ると分かるようにかなり簡略化しています。</p>

<p>ESLintで静的にJSDocのコメントをチェックできる<a href="http://eslint.org/docs/rules/valid-jsdoc" title="valid-jsdoc">valid-jsdoc</a>と<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>を合わせて使うようなイメージで書いています。</p>

<p>JSDoc単体の型定義はValidだけど、実際の利用方法と合ってるかどうかを<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>でチェックするイメージです。</p>

<ul>
<li><a href="http://eslint.org/docs/rules/valid-jsdoc" title="Rule valid-jsdoc - ESLint - Pluggable JavaScript linter">Rule valid-jsdoc - ESLint - Pluggable JavaScript linter</a></li>
</ul>

<p>また、<a href="https://ja.wikipedia.org/wiki/%E5%A5%91%E7%B4%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" title="契約プログラミング">契約プログラミング</a>に言えば<a href="https://github.com/azu/jsdoc-to-assert" title="jsdoc-to-assert">jsdoc-to-assert</a>は事前条件、つまり<code>@param</code>のみのチェックをしています。
<code>@returns</code>のチェックはユニットテストで保証するのがいいと思います。</p>

<p>正直まだエラーメッセージも全然わかりやすくないし、中途半端なチェックしかできません。
この辺を改善したい人のContributionsを待ってます！</p>

<ul>
<li><a href="https://github.com/azu/babel-plugin-jsdoc-to-assert">azu/babel-plugin-jsdoc-to-assert: Babel plugin for jsdoc-to-assert.</a></li>
<li><a href="https://github.com/azu/jsdoc-to-assert">azu/jsdoc-to-assert: JSDoc to assert</a></li>
</ul>

<p>結局はキレイなJSDocが残ればいいだけなので、
<a href="https://github.com/azu/babel-plugin-jsdoc-to-assert" title="babel-plugin-jsdoc-to-assert">babel-plugin-jsdoc-to-assert</a>はいつでも外しても問題ない作りです。
なので、Babelを使ってるプロジェクトにひっそりいれて色々エラーを見つけると面白いのかもしれません。</p>

<p>類似</p>

<ul>
<li>FlowType: <a href="https://github.com/codemix/babel-plugin-typecheck">codemix/babel-plugin-typecheck: Static and runtime type checking for JavaScript in the form of a Babel plugin.</a></li>
<li>TypeScript: <a href="https://github.com/Microsoft/TypeScript/issues/7607" title="Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript">Proposal: Run-time Type Checks · Issue #7607 · Microsoft/TypeScript</a></li>
</ul>
 ]]></content>
 </entry>
 

</feed>
