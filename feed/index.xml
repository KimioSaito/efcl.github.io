<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-09-14T22:23:32+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>文章をTDDする</title>
   <link href="http://efcl.info/2016/09/14/text-testing/"/>
   <updated>2016-09-14T20:22:00+09:00</updated>
   <id>http://efcl.info/2016/09/14/text-testing</id>
   <content type="html"><![CDATA[ <h1 id="文章のテスト">文章のテスト</h1>

<p>技術書とかの文書を開発するにあたってテストを先に書きたくなったという話です。</p>

<ul>
<li><a href="http://efcl.info/2015/11/07/nodefest-2015/">東京Node学園祭2015で技術文書をソフトウェア開発する話をしてきた | Web Scratch</a></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/">Introduction | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>とかの続きみたいなものです。</p>

<p>ここで扱う文章は、Markdownですが、構造を持った文章なら多分適応できる気がします。
具体的には<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>で扱うパーサを再利用しているので、reStructuredTextとかRe:VIEWとかHTMLも多分頑張ればできる。</p>

<h2 id="構造化された文章">構造化された文章</h2>

<p>構造を持った文章とはどういうものかというと、セクションやパラグラフなどがシンタックスとして大体分かる文章の事をここでは言っています。</p>

<p>しかし、Markdownにはセクション(HTMLでは <code>&lt;section&gt;</code> タグに該当するもの)がないので、HeaderとHeaderの間を一つのセクションとして認識しています。</p>

<ul>
<li><a href="https://github.com/azu/text-testing/tree/master/packages/select-section" title="text-testing/packages/select-section at master · azu/text-testing">text-testing/packages/select-section at master · azu/text-testing</a></li>
</ul>

<h2 id="文章が特定のキーワードを含むかテストする">文章が特定のキーワードを含むかテストする</h2>

<p>実際どうやって文章をテストするかというと次のようなBDDっぽいようなテストを書きます。</p>

<ul>
<li><a href="https://github.com/azu/text-testing/tree/master/packages/text-testing-mocha" title="text-testing-mocha">text-testing-mocha</a></li>
</ul>

<p>このテストでは<code>サンプル</code>というワードを含むセクションが、
<code>単語</code>というキーワードを含んでいるかをテストしています。</p>

<p><code>**</code> で囲んだ範囲だけをキーワードの対象にできます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">tester</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;text-testing-mocha&quot;</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
<span class="c1">// テストする対象の文章を読み込む</span>
<span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;README.md&quot;</span><span class="p">,</span> <span class="s2">&quot;utf-8&quot;</span><span class="p">);</span>
<span class="nx">tester</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="p">(</span><span class="nx">section</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 指定したセクションが</span>
    <span class="nx">section</span><span class="p">(</span><span class="s2">&quot;この**サンプル**が&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">test</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">test</span><span class="p">(</span><span class="s2">&quot;この**単語**を含んでいるかをテストする&quot;</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p>例えば次の文章だと、先ほどのテストはパスします。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># サンプルA

ある単語を含んでいる文章なのでOK
</code></pre></div>
<p>しかし、次の文章だと、先ほどのテストは失敗します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># サンプルB

ある???を含んでいないのでダメ
</code></pre></div>
<p>デフォルトでは含んでいる事をテストしていますが、第二引数で任意の判定をかけるので、含まない事も書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">tester</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="p">(</span><span class="nx">section</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">section</span><span class="p">(</span><span class="s2">&quot;ある**サンプル**は&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">it</span><span class="p">,</span> <span class="nx">sections</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;**unknown**を含まない&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">texts</span><span class="p">,</span> <span class="nx">section</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">texts</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">section</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p><a href="https://github.com/azu/text-testing/tree/master/packages/text-testing-mocha" title="text-testing-mocha">text-testing-mocha</a>は名前の通り、Mochaを使って動くDSLみたいなものです。</p>

<p>正直すごい雑で大したことをやっていないです。</p>

<h2 id="モチベーション">モチベーション</h2>

<p><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>を書いていて、一つの章が長くなると目的を見失う事がままあります。</p>

<p>そのため、まずその章が何を説明したいのかという目標規定文を書き、書きながらそれを何度も見なおして脇道に逸れないように注意を払う必要がありました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">目標規定文<br>-- 理科系の作文技術 <a href="https://t.co/qpHTynwfBh">pic.twitter.com/qpHTynwfBh</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/776034638942707712">September 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>章やセクションと言った単位で書いてる途中で、その目標が変わることはあまりないはずなので、何かガイドとなるものが欲しかったのが一つのモチベーションです。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">文章に関係しそうな文をキーワードを書き<br>その文章が何を伝えたいのかをかく目標規定文を書き<br>文章のアウトラインを考え<br>アウトラインの詳細を決める実験やコードを集め<br>もう一度アウトラインを構成し<br>アウトラインからテストを書き<br>文章に落とす</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/767584331875311617">August 22, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3 id="テストファースト">テストファースト</h3>

<p>新しい文章を書いてて一番気が重たいのは最初の一行を書くことだと思います。
しかし、アウトラインは本文に比べてラクな気持ちで書くことができていました。</p>

<p>なので、最初にアウトラインをテストとして書いてみることから始めました。
そうすることで、テストが落ちます。</p>

<p>テストが落ちてるので、次はテストが通るように文章を書き始めれば良くなります。
そうすることで、書き始めが楽になるのではないかなという実験も兼ねて作り始めました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;2000年は閏年&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">isLeap</span><span class="p">(</span><span class="mi">2000</span><span class="p">));</span>
<span class="p">});</span>
</code></pre></div>
<p>というテストを書いて、</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">isLeap</span><span class="p">(</span><span class="nx">year</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>というコードから書き始めるのと同じような気分でスタートできます。</p>

<p>また、技術書のような文書はある程度文章の構造があると思うので、入力(文章)に対する出力(伝えたい結果)はテストできてもいいんじゃないかなという期待も持っています。</p>

<p>実際にこのテストを取り入れて書いてみたものは次のものになっています。</p>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/basic/implicit-coercion/" title="暗黙的な型変換 · JavaScriptの入門書 #jsprimer">暗黙的な型変換 · JavaScriptの入門書 #jsprimer</a></li>
<li><a href="https://github.com/asciidwango/js-primer/pull/129" title="feat(implicit-coercion): 暗黙的な型変換について by azu · Pull Request #129 · asciidwango/js-primer">feat(implicit-coercion): 暗黙的な型変換について by azu · Pull Request #129 · asciidwango/js-primer</a></li>
</ul>

<p>後は、何かと文章は一度に多くを書きすぎてしまう問題を持っている気がします。
小さなPull Requestして開発を進めるのがいいように、文章にも同じアプローチが正しいのかは今後検証していきたい気がします。
この時に、より&quot;構造&quot;というものを意識した書き方が必要になるのかもしれません。</p>

<p>分かりやすいコードも分かりやすい文章もある程度のレベルまでは、センスとかではなく技術的なアプローチで解決できる問題なのではないかなと考えています。</p>

<ul>
<li><a href="https://github.com/azu/text-testing" title="azu/text-testing: Testing library for structured texts.">azu/text-testing: Testing library for structured texts.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>NaNはNot a NumberだけどNumber型である話</title>
   <link href="http://efcl.info/2016/09/06/nan/"/>
   <updated>2016-09-06T21:54:00+09:00</updated>
   <id>http://efcl.info/2016/09/06/nan</id>
   <content type="html"><![CDATA[ <p>この記事では、JavaScriptの<code>NaN</code>について改めて学ぶという趣旨の話をします。</p>

<p>JavaScriptで、文字列などから数値へ値を変換したいことがあると思います。
典型的なケースでは、ユーザーに入力してもらった数字となる文字列を、Number型へ変換するというケースです。</p>

<p>この場合、<code>Number</code>コンストラクタ関数や<code>Number.parseInt</code>、<code>Number.parseFloat</code>などが利用できます。(ここでは、<code>Number.parseInt</code>にしていますが、<code>parseInt</code>と同じです)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// ユーザー入力を文字列として受け取る</span>
<span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;数字を入力してください&quot;</span><span class="p">,</span> <span class="s2">&quot;42&quot;</span><span class="p">);</span>
<span class="c1">// 文字列を数値に変換する</span>
<span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">number</span><span class="p">);</span> <span class="c1">// =&gt; &quot;number&quot;;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span> <span class="c1">// 入力された文字列を数値に変換したもの</span>
</code></pre></div>
<p>しかし、<code>Number</code>コンストラクタ関数や<code>Number.parseInt</code>を使って、値を明示的に変換したとしても結果は<code>NaN</code>になる場合があります。
端的に言えば、Number型と互換性のない性質のデータをNumber型へ変換した結果は<code>NaN</code>となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 数字ではないため、数値へは変換できない</span>
<span class="nb">Number</span><span class="p">(</span><span class="s2">&quot;文字列&quot;</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
<span class="c1">// 整数としてパースできない文字列だった</span>
<span class="nb">Number</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">&quot;e10s&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
<span class="c1">// 未定義の値はNaNになる</span>
<span class="nb">Number</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
<span class="c1">// 空オブジェクトは数値にできない</span>
<span class="nb">Number</span><span class="p">({});</span> <span class="c1">// =&gt; NaN</span>
</code></pre></div>
<p>JavaScriptでは数値に<a href="https://ja.wikipedia.org/wiki/IEEE_754" title="IEEE 754">IEEE 754</a>を採用していて、<code>NaN</code>もIEEE 754で定義されている値です。
<code>NaN</code>はNot a Numberの略称で、特殊な性質をもつNumber型のデータです。</p>

<p>また、<code>NaN</code>は何と演算しても結果は<code>NaN</code>になる特殊な値です。
次のように、計算の途中で値が<code>NaN</code>になると、最終的な結果も<code>NaN</code>となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="kc">NaN</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// =&gt; 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
</code></pre></div>
<p>しかし、<code>NaN</code>はNumber型の一種であるという名前と矛盾したデータに見えますが仕様です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// NaNはnumber型</span>
<span class="k">typeof</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// =&gt; &quot;number&quot;</span>
</code></pre></div>
<p>NaNしか持っていない特殊な性質として、自分自身と一致しないという特徴があります。
この特徴を利用することで、ある値が<code>NaN</code>であるかを判定することもできます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// NaNは自分自身と一致しない</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">!==</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="nb">isNaN</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// =&gt; false</span>
<span class="nb">isNaN</span><span class="p">(</span><span class="s2">&quot;str&quot;</span><span class="p">);</span> <span class="c1">// =&gt; false</span>
<span class="nb">isNaN</span><span class="p">({});</span> <span class="c1">// =&gt; false</span>
<span class="nb">isNaN</span><span class="p">([]);</span> <span class="c1">// =&gt; false</span>
<span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>同様の処理を行う方法としてES2015から<code>Number.isNaN(x)</code>メソッドが追加されています。
実際に値が<code>NaN</code>かを判定する際には、<code>Number.isNaN(x)</code>メソッドを利用するとよいでしょう。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>注記: <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/isNaN" title="isNaN()">isNaN()</a>というグローバル関数もありますが、こちらは引数を暗黙的にNumber型へ変換してから<code>NaN</code>かどうかを判定します。</p>

<p>暗黙的な変換をしてしまうことで、明らかにバグっているような挙動を引き起こすため使わないようにしましょう。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// グローバルの`isNaN`関数</span>
<span class="c1">// 上で作ったisNaN関数とは別もの</span>
<span class="nb">isNaN</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="c1">// `isNaN`関数は以下のようなことをやっているのと同じ</span>
<span class="c1">// Numberコンストラクタ関数で変換してから、`Number.isNumber`で判定するのと同じようなもの</span>
<span class="nb">Number</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">));</span><span class="c1">// =&gt; true</span>
<span class="c1">// 安全に使うならxが number か判定してから isNaNで判定する</span>
<span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span> <span class="o">&amp;&amp;</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div>
<p><code>NaN</code>は暗黙的な型変換の中でももっとも避けたい値となります。
理由として、先ほど紹介したように<code>NaN</code>は何と演算しても結果が<code>NaN</code>となってしまうためです。
これにより、計算していた値がどこで<code>NaN</code>となったのかが分かりにくく、デバッグが難しくなります。</p>

<p>たとえば、次の<code>sum</code>関数は可変長引数（任意の個数の引数）を受け取り、その合計値を返します。
しかし、<code>sum(x, y, z)</code>と呼び出した時の結果が<code>NaN</code>になってしまいました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 任意の個数の数値を受け取り、その合計値を返す関数</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
</code></pre></div>
<p>よく注意して見ると、<code>y</code>の値が未定義となっています。
そのため、<code>sum(1, undefined, 10);</code>と呼ばれていたのと同じ結果になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
<span class="c1">// 計算中にNaNとなったため最終結果もNaNになった</span>
<span class="mi">1</span> <span class="o">+</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// =&gt; NaN</span>
<span class="kc">NaN</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// =&gt; NaN</span>
</code></pre></div>
<p>これは、<code>sum関数</code>において引数を明示的にNumber型へ変換したとしても回避することはできません。
つまり、次のように明示的な型変換しても解決できない問題あることが分かります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// `value`をNumberで明示的に変換して扱ったバージョン</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span>
</code></pre></div>
<p>この意図しない<code>NaN</code>への変換を避ける方法として、大きく分けて２つの方法があります。</p>

<ul>
<li><code>sum</code>関数側（呼ばれる側）で、Number型の値以外を受け付けなくする</li>
<li><code>sum</code>関数を呼び出す側で、Number型の値のみを渡すようにする</li>
</ul>

<p>つまり、呼び出す側または呼び出される側で対処するということですが、
どちらも行うことがより安全なコードにつながります。</p>

<p>そのためには、<code>sum</code>関数が数値のみを受け付けるということを明示する必要があります。</p>

<p>明示する方法として<code>sum</code>関数のドキュメント（コメント）として記述したり、
引数に数値以外の値がある場合は例外を投げるという処理を追加するといった形です。</p>

<p>JavaScriptではコメントで引数の型を記述する書式として<a href="http://usejsdoc.org/" title="Use JSDoc: Index">JSDoc</a>が有名です。
また、<a href="http://www.typescriptlang.org/" title="TypeScript - JavaScript that scales.">TypeScript</a>や<a href="https://flowtype.org/" title="Flow">Flow</a>を使うことで型定義や静的チェックもできます。</p>

<p>ランタイム時に値をチェックし例外または警告を表示する関数として<code>console.assert(条件式, メッセージ)</code>メソッドが多くの実行環境で利用できます。
(Node.jsだと例外をなげ、ブラウザだとコンソールへの警告になります)</p>

<p>この２つを利用して<code>sum</code>関数の前提条件を詳細に実装したものは次のようになります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * 数値を合計した値を返します。</span>
<span class="cm"> * 一つ以上の数値と共に呼び出す必要があります。</span>
<span class="cm"> * @param {...number} values</span>
<span class="cm"> * @returns {number}</span>
<span class="cm"> **/</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// 第一引数の評価結果がtrueではない場合、第二引数のメッセージが警告として出る</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="err">は</span><span class="nb">Number</span><span class="err">型ではありません`</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
<span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span> <span class="c1">// =&gt; AssertionError</span>
</code></pre></div>
<p>JSDocに書いたことを<code>console.assert</code>でも実装しているのが気になります。
Babelを使って変換している場合は<a href="https://github.com/azu/babel-preset-jsdoc-to-assert" title="babel-preset-jsdoc-to-assert">babel-preset-jsdoc-to-assert</a>を使うことで、JSDocから同等のassertionへ自動的に変換することができます。</p>

<ul>
<li><a href="http://akabeko.me/blog/2016/08/jsdoc-to-assert/" title="jsdoc-to-assert を試す – アカベコマイリ">jsdoc-to-assert を試す – アカベコマイリ</a></li>
</ul>

<hr>

<p>おまけ: さらに意地悪なことをすると、先ほどの<code>sum</code>関数に引数として<code>NaN</code>を渡すと、<code>NaN</code>はNumber型なのでassertをすり抜けることができます。
そのため、typeofではなく、<code>Number.isFinite(value)</code>を使い有限数かをチェックし、コメントもそのように書き換えるとより渡す値が明確になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**</span>
<span class="cm"> * 数値を合計した値を返します。</span>
<span class="cm"> * 一つ以上の有限数と共に呼び出す必要があります。</span>
<span class="cm"> * @param {...number} values</span>
<span class="cm"> * @returns {number}</span>
<span class="cm"> **/</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">values</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// NaNがきたらassertで落ちる</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">value</span><span class="p">),</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="err">は有限数ではありません`</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="kc">NaN</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
<span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span> <span class="c1">// =&gt; AssertionError</span>
</code></pre></div>
<p><code>console.assert</code>なども今は<a href="https://github.com/twada/unassert" title="unassert">unassert</a>を使えばproductionビルドからは簡単に取り除けるので、気軽に使うようにしても問題ないと思います。</p>

<hr>

<p>このように、<code>sum</code>関数はどのように使うべきかを明示することで、
エラーとなった時に呼ばれる側と呼び出し側でどちらに問題があるのかが明確になります。
この場合は、<code>sum</code>関数へ<code>undefined</code>な値を渡している呼び出し側に問題があります。</p>

<p>関数/モジュールの責務をどう実装するかという設計の方針としては、防御的プログラミングや契約による設計など色々あると思いますが、<a href="https://twitter.com/t_wada">誰かが</a>分かりやすく解説してくれると信じています。</p>

<h3 id="おわりに">おわりに</h3>

<p>JavaScriptは、Number型へ値を変換した場合に<code>NaN</code>となってしまうことがあります。
多くの場合、何らかの暗黙的な型変換が処理中に発生して<code>NaN</code>となっていることが多いです。
(または<code>parseInt</code>後に<code>Number.isNaN</code>でチェックしていないなど)</p>

<p>そのため、JavaScriptでアプリケーションを書く場合は、このような検出しにくいバグを見つけられるように書くことは重要です。</p>

<p>というような話を<a href="https://asciidwango.github.io/js-primer/basic/implicit-coercion/" title="暗黙的な型変換 · JavaScriptの入門書 #jsprimer">暗黙的な型変換 · JavaScriptの入門書 #jsprimer</a>で書きました。(暗黙的な型変換についてがメインで<code>NaN</code>はおまけ)</p>

<p>まだまだ書いてる最中なので、興味がある人は<a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>を見てみてください。</p>

<p>基本の基本は書いたのですが、まだどういうことを書くべきか迷っている部分も多いので、以下のIssueに意見をください。</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer/issues/137" title="Meta(基本文法): ロードマップ · Issue #137 · asciidwango/js-primer">Meta(基本文法): ロードマップ · Issue #137 · asciidwango/js-primer</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>performance.markでパフォーマンス計測する</title>
   <link href="http://efcl.info/2016/08/15/performance.mark/"/>
   <updated>2016-08-15T21:24:00+09:00</updated>
   <id>http://efcl.info/2016/08/15/performance.mark</id>
   <content type="html"><![CDATA[ <p>JavaScriptである区間にかかった時間を計測する時に、次のようなコードを書いたことがあると思います。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
<span class="c1">// 処理</span>
<span class="c1">// 色々な処理がすべて終わった</span>
<span class="nx">doSome</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div>
<p><a href="https://www.w3.org/TR/performance-timeline/" title="Performance Timeline">Performance Timeline</a>の<code>performance.mark</code>と<code>performance.measure</code>などを使うと、ある区間の処理時間をもっと簡単に取ることができます。</p>

<p>APIについて詳しくは以下の記事を見るといいと思います。</p>

<ul>
<li><a href="http://www.html5rocks.com/ja/tutorials/webperformance/usertiming/">User Timing API: あなたの Web アプリをもっと理解するために - HTML5 Rocks</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/Performance/mark">Performance.mark() - Web API インターフェイス | MDN</a></li>
</ul>

<p>簡単に解説すると <code>performance.mark(marker)</code> である地点に名前を付けて、<code>performance.measure(name, startMark, endMark);</code>でA地点とB地点の区間をマーキングすることができます。</p>

<p>そして、マーキングした後に<a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries" title="Performance.getEntries()">Performance.getEntries()</a>でその区間の開始時間やかかった時間などを得ることができます。</p>

<p>開発者ツールだとこのマーキングした区間を可視化してくれないので不便ですが、次の拡張 or ブックマークレットを使ううとNavigation Timing APIとともに可視化してくれるので便利です。</p>

<ul>
<li><a href="https://github.com/micmro/performance-bookmarklet" title="micmro/performance-bookmarklet: Performance-Bookmarklet helps to analyze the current page through the Resource Timing API, Navigation Timing API and User-Timing - requests by type, domain, load times, marks and more. Sort of a light live WebPageTest.">micmro/performance-bookmarklet</a></li>
</ul>

<p>polyfillとして以下のライブラリを使うと、このAPIをサポートしてない環境でもエラーが出なくなるので便利です。</p>

<ul>
<li><a href="https://github.com/nicjansma/usertiming.js" title="nicjansma/usertiming.js: UserTiming polyfill">nicjansma/usertiming.js: UserTiming polyfill</a>の</li>
</ul>

<p>この仕組みの良いところは、計測時はマーキングするだけでログを出すなどの余計な処理をしないため、より正確な値を取ることができます。
また、マーキングをとりあえずしておけば、後から必要なものをコンソールから<code>window.performance.getEntries()</code>などで取り出せるため、マーキングと計測を分離できます。</p>

<h2 id="実際の例">実際の例</h2>

<p>次の形態素解析をするサイトを例にしてみましょう。</p>

<ul>
<li><a href="http://azu.github.io/morpheme-match/">azu.github.io/morpheme-match/</a></li>
</ul>

<p>このサイトは、<a href="https://github.com/azu/kuromojin">kuromojin</a>(<a href="https://github.com/takuyaa/kuromoji.js">kuromoji.js</a>)を使うため、最初に形態素解析用の辞書をダウンロードして、ダウンロードが終わったら初回の画面が表示されます。</p>

<p>そのため、初期表示がものすごく遅いです。</p>

<p>まずは実際にどれくらいかかっているかを、<code>window.performance.mark</code>で計測してみましょう。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// LICENSE : MIT</span>
<span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;react&quot;</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;query-string&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s2">&quot;./App/App&quot;</span>
<span class="kr">import</span> <span class="nx">AppLocator</span> <span class="nx">from</span> <span class="s2">&quot;../../AppLocator&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">LoadingContainer</span> <span class="nx">from</span> <span class="s2">&quot;../ui-kit/LoadingContainer/LoadingContainer&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">InitializeUseCase</span> <span class="nx">from</span> <span class="s2">&quot;../../js/use-case/InitializeUseCase&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">AppLoading</span> <span class="o">=</span> <span class="nx">LoadingContainer</span><span class="p">(</span><span class="nx">App</span><span class="p">);</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">AppBootStrap</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 初期化開始ポイント</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="s2">&quot;AppBootStrap:start&quot;</span><span class="p">);</span>
        <span class="kr">const</span> <span class="nx">location</span> <span class="o">=</span> <span class="nx">AppLocator</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">();</span>
        <span class="kr">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
        <span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">AppLocator</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span>
        <span class="kr">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">useCase</span><span class="p">(</span><span class="nx">InitializeUseCase</span><span class="p">.</span><span class="nx">create</span><span class="p">()).</span><span class="nx">execute</span><span class="p">({</span><span class="nx">text</span><span class="o">:</span> <span class="nx">query</span><span class="p">.</span><span class="nx">text</span><span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// 初期化完了ポイント</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="s2">&quot;AppBootStrap:end&quot;</span><span class="p">);</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">measure</span><span class="p">(</span><span class="s2">&quot;起動までの時間&quot;</span><span class="p">,</span>
                <span class="s2">&quot;AppBootStrap:start&quot;</span><span class="p">,</span>
                <span class="s2">&quot;AppBootStrap:end&quot;</span>
            <span class="p">);</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">AppLoading</span> <span class="nx">promise</span><span class="o">=</span><span class="p">{</span><span class="nx">promise</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>初期化の開始と完了でそれぞれマーキングしました。</p>

<ul>
<li><code>window.performance.mark(&quot;AppBootStrap:start&quot;)</code></li>
<li><code>window.performance.mark(&quot;AppBootStrap:end&quot;)</code></li>
</ul>

<p>そして、開始から完了の区間を &quot;起動までの時間&quot; という名前でマーキングしています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">measure</span><span class="p">(</span><span class="s2">&quot;起動までの時間&quot;</span><span class="p">,</span>
    <span class="s2">&quot;AppBootStrap:start&quot;</span><span class="p">,</span>
    <span class="s2">&quot;AppBootStrap:end&quot;</span>
<span class="p">);</span>
</code></pre></div>
<p>Perfoamance APIでは、地点のマーキングと区間のマーキングとログ出力がそれぞれ分離できるのが便利なところです。</p>

<h3 id="before-計測">Before:計測</h3>

<p>ロガーを実装するのは面倒だったので、<a href="https://github.com/micmro/performance-bookmarklet" title="micmro/performance-bookmarklet: Performance-Bookmarklet helps to analyze the current page through the Resource Timing API, Navigation Timing API and User-Timing - requests by type, domain, load times, marks and more. Sort of a light live WebPageTest.">micmro/performance-bookmarklet</a>を使って&quot;起動までの時間&quot;をコンソールに表示します。</p>

<p><a href="http://efcl.info/wp-content/uploads/2016/08/13-1471098414.png"><img src="http://efcl.info/wp-content/uploads/2016/08/13-1471098414.png" alt="before"></a></p>

<p>&quot;AppBootStrap:end&quot;が遠すぎて見えない…</p>

<p>数MBの辞書をダウンロードしているため、起動までに8913ms程度かかっています。</p>

<h3 id="改善">改善</h3>

<p>数MBの辞書をダウンロードしているためしょうがないとはいえ毎回ダウンロードしてるのは非効率です。
辞書はそんなに変更するものでもないので、Service Workerでキャッシュしてみます。</p>

<p>ServiceWorkerの静的ファイルのキャッシュには以下のツールを使用すると簡単です。</p>

<ul>
<li><a href="https://github.com/GoogleChrome/sw-precache" title="GoogleChrome/sw-precache: A node module to generate service worker code that will precache specific resources.">GoogleChrome/sw-precache: A node module to generate service worker code that will precache specific resources.</a></li>
</ul>

<p>キャッシュしたいファイルパスを定義して、<code>$ sw-precache --config=sw-precache-config.json</code>という感じでコマンドラインを実行すると、ServiceWorkerで動くスクリプトを作成してくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
  &quot;staticFileGlobs&quot;: [
    &quot;./public/dict/*.gz&quot;
  ],
  &quot;stripPrefix&quot;: &quot;./public/&quot;
}
</code></pre></div>
<p>後は、作成したスクリプトを<a href="https://github.com/azu/morpheme-match/blob/master/website/src/service-worker-registration.js" title="service-worker-registration.js">ServiceWorkerに登録する処理</a>を追加したら、キャッシュできるようになりました。</p>

<p>これで2回目からの起動時間が改善されるはずです。</p>

<h3 id="after-計測">After:計測</h3>

<p>辞書をキャッシュしたことで、起動までの時間が8913ms -&gt; 2187msまで短縮できました。</p>

<p><a href="http://efcl.info/wp-content/uploads/2016/08/13-1471098703.png"><img src="http://efcl.info/wp-content/uploads/2016/08/13-1471098703.png" alt="after"></a></p>

<p><code>console.log</code>と違って、このまま<code>window.performance.mark(&quot;AppBootStrap:end&quot;);</code>などを残してても特に害があるわけではありません。
コンソールへの出力を実装していないので、能動的に見ないかぎりは何も出力されてないように見えるためです。</p>

<p>最近のReactとかAngularなどを使ったサイトを作ると大体初期化ポイントがはっきりしていると思うので、とりあえずこのようなマーキングを仕込んでおくと、後から遅いポイントを探すのに便利かもしれないですね。</p>

<h2 id="パフォーマンスロガーを作る">パフォーマンスロガーを作る</h2>

<p>実際には、クライアントサイドでログを出すだけではなく、いろんな環境で実行されたログを収集してボトルネックや処理がおかしい箇所などを見つけると思います。</p>

<p>そのためには、マーキングするだけではなくログ出力/送信も実装する必要がでてきます。
そうなった場合に、どのタイミングでログを取得するかというタイミングを図る必要がでてきます。</p>

<p>大体の場合は、計測したい地点がすべてマーキングできたら準備完了 -&gt; ログ出力という形になると思います。</p>

<p>簡単に、performance-loggerという準備完了のタイミングを取るだけのライブラリを書いてみました。</p>

<ul>
<li><a href="https://github.com/azu/performance-logger" title="azu/performance-logger: Simple Perf logger based on `performance.mark` API.">azu/performance-logger: Simple Perf logger based on <code>performance.mark</code> API.</a></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// LICENSE : MIT</span>
<span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">MapLike</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;map-like&quot;</span><span class="p">);</span> <span class="c1">// Mapみたいなもの</span>
<span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;events&quot;</span><span class="p">);</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">PerfLogger</span> <span class="kr">extends</span> <span class="nx">EventEmitter</span> <span class="p">{</span>
    <span class="kr">static</span> <span class="nx">get</span> <span class="nx">Events</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s2">&quot;mark&quot;</span><span class="o">:</span> <span class="s2">&quot;mark&quot;</span><span class="p">,</span>
            <span class="s2">&quot;complete&quot;</span><span class="o">:</span> <span class="s2">&quot;complete&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * @param {string[]} logItems logItems is list of event name</span>
<span class="cm">     */</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">logItems</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_isAlreadyOutput</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_completedEventMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MapLike</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_logItems</span> <span class="o">=</span> <span class="nx">logItems</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * logged event names</span>
<span class="cm">     * @returns {string[]}</span>
<span class="cm">     */</span>
    <span class="nx">get</span> <span class="nx">markedNames</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_completedEventMap</span><span class="p">.</span><span class="nx">keys</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">get</span> <span class="nx">isAllMarked</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_logItems</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">eventName</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_completedEventMap</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">eventName</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * Register onComplete handler and return unregister handler function</span>
<span class="cm">     * @param {Function} completeHandler</span>
<span class="cm">     * @returns {function()}</span>
<span class="cm">     */</span>
    <span class="nx">onComplete</span><span class="p">(</span><span class="nx">completeHandler</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">PerfLogger</span><span class="p">.</span><span class="nx">Events</span><span class="p">.</span><span class="nx">complete</span><span class="p">,</span> <span class="nx">completeHandler</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">PerfLogger</span><span class="p">.</span><span class="nx">Events</span><span class="p">.</span><span class="nx">complete</span><span class="p">,</span> <span class="nx">completeHandler</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span>
    <span class="cm">/**</span>
<span class="cm">     * Mark log with `markerName`</span>
<span class="cm">     * @param {string} markerName</span>
<span class="cm">     */</span>
    <span class="nx">mark</span><span class="p">(</span><span class="nx">markerName</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// output is only once</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_isAlreadyOutput</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_addMarking</span><span class="p">(</span><span class="nx">markerName</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isAllMarked</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">PerfLogger</span><span class="p">.</span><span class="nx">Events</span><span class="p">.</span><span class="nx">complete</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_isAlreadyOutput</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/**</span>
<span class="cm">     * @param {string} markerName</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="nx">_addMarking</span><span class="p">(</span><span class="nx">markerName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_completedEventMap</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">markerName</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_completedEventMap</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">markerName</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="nx">markerName</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">PerfLogger</span><span class="p">.</span><span class="nx">Events</span><span class="p">.</span><span class="nx">mark</span><span class="p">,</span> <span class="nx">markerName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>
<p>使うときは、以下のようにコンストラクタに準備完了に必要なマーキングの名前一覧を渡して、
そのマーキングが全部完了したら、<code>complete</code> イベントが呼ばれるという感じです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">PerfLogger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;performance-logger&quot;</span><span class="p">);</span>
<span class="c1">// These events are completed and emit &quot;end&quot; event</span>
<span class="kr">const</span> <span class="nx">perfLogger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PerfLogger</span><span class="p">([</span>
    <span class="s2">&quot;a&quot;</span><span class="p">,</span>
    <span class="s2">&quot;b&quot;</span>
<span class="p">]);</span>
<span class="c1">// All(&quot;a&quot; and &quot;b&quot;) complete!</span>
<span class="nx">perfLogger</span><span class="p">.</span><span class="nx">onComplete</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">measure</span><span class="p">(</span>
        <span class="s2">&quot;Taken a-&gt;b&quot;</span><span class="p">,</span>
        <span class="s2">&quot;a&quot;</span><span class="p">,</span>
        <span class="s2">&quot;b&quot;</span>
    <span class="p">);</span>
    <span class="kr">const</span> <span class="nx">entries</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">getEntriesByType</span><span class="p">(</span><span class="s1">&#39;measure&#39;</span><span class="p">);</span>
    <span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">duration</span><span class="p">}</span><span class="nx">ms</span><span class="err">`</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
<span class="c1">// mark &quot;a&quot;</span>
<span class="nx">perfLogger</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
<span class="c1">// mark &quot;b&quot;</span>
<span class="nx">perfLogger</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">);</span>
</code></pre></div>
<p>準備完了が完了してたら、既についてるマークから<code>window.performance.measure</code>で計測区間を作ります。
そして、<code>window.performance.getEntriesByType(&#39;measure&#39;);</code>で計測区間の一覧を取得して、区間の時間を出力しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">measure</span><span class="p">(</span>
    <span class="s2">&quot;Taken a-&gt;b&quot;</span><span class="p">,</span>
    <span class="s2">&quot;a&quot;</span><span class="p">,</span>
    <span class="s2">&quot;b&quot;</span>
<span class="p">);</span>
<span class="kr">const</span> <span class="nx">entries</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">getEntriesByType</span><span class="p">(</span><span class="s1">&#39;measure&#39;</span><span class="p">);</span>
<span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">duration</span><span class="p">}</span><span class="nx">ms</span><span class="err">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<h3 id="おわり">おわり</h3>

<p><code>window.performance.mark</code>は扱いが簡単な割には結構面白いです。
<code>window</code>というグローバル空間にある利点として、後からつけたマークを取り出して見ることができます。</p>

<p>開発中は結構ラフにマークをつけていくと、面白いデータが見えるかもしれません。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>そのコードが標準化されてるJavaScriptなのかを判定する方法</title>
   <link href="http://efcl.info/2016/08/04/ecmascript-version-detector/"/>
   <updated>2016-08-04T20:10:00+09:00</updated>
   <id>http://efcl.info/2016/08/04/ecmascript-version-detector</id>
   <content type="html"><![CDATA[ <h1 id="ecmascript-version-detector"><a href="https://azu.github.io/ecmascript-version-detector/" title="ECMAScript Version Detector">ECMAScript Version Detector</a></h1>

<p><a href="https://azu.github.io/ecmascript-version-detector/"><img src="http://efcl.info/wp-content/uploads/2016/08/04-1470309082.png" alt="image"></a></p>

<p><a href="https://azu.github.io/ecmascript-version-detector/" title="ECMAScript Version Detector">ECMAScript Version Detector</a>というツールとライブラリを書きました。</p>

<p><a href="https://azu.github.io/ecmascript-version-detector/" title="ECMAScript Version Detector">azu.github.io/ecmascript-version-detector/</a>へアクセスして、好きなコードをペーストすると、そのコードの構文がECMAScriptのどのバージョンから使える機能なのかを表示してくれます。</p>

<p>たとえば、以下のコードはasyncとawaitの部分がまだProposalである<a href="https://github.com/tc39/ecmascript-asyncawait" title="Async Functions">Async Functions</a>であることを検出してくれたりします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Async/Await</span>
<span class="nx">async</span> <span class="kd">function</span> <span class="nx">countUp</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">await</span> <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="目的">目的</h2>

<p>Babelなどの変換ツールでECMAScriptのProposalな機能などが身近になりました。
しかし、それがまだ仕様に入ってないもの(Proposal段階であるもの)ということを意識しないで書いてる人もよく見かけるようになりました。</p>

<p>そのため、まだProposalの段階である標準化されてない機能/構文を標準化される<a href="https://medium.com/@jayphelps/please-stop-referring-to-proposed-javascript-features-as-es7-cad29f9dcc4b">前提</a><a href="http://www.2ality.com/2016/01/ecmascript-2016.html">にして</a><a href="http://teppeis.hatenablog.com/entry/2016/01/es2016-feature-freeze">話すな</a>という<a href="http://jser.info/2015/11/16/ecmascript-7-ms-node-js/">話</a>が<a href="http://azu.github.io/slide-what-is-ecmascript/">あった</a>りします。</p>

<p>例えば、次のコードは既に仕様に入ってる(ES2015)構文で書かれたコードでしょうか?</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kr">export</span> <span class="kd">function</span> <span class="nx">friends</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>  
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s2">&quot;FRIEND&quot;</span><span class="o">:</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="nx">friendsById</span><span class="o">:</span> <span class="p">{</span>
          <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">friendsById</span><span class="p">,</span>
          <span class="p">[</span><span class="nx">newId</span><span class="p">]</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">name</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><a href="https://azu.github.io/ecmascript-version-detector/" title="ECMAScript Version Detector">ECMAScript Version Detector</a>に入れてみると分かりますが、<code>{...property}</code>はまだ標準化されていない機能です。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/08/04-1470309795.png" alt="result"></p>

<p>これは<a href="http://sebmarkbage.github.io/ecmascript-rest-spread/" title="Object Rest/Spread Properties">Object Rest/Spread Properties</a>で、Stage 2のProposalです。</p>

<p>こういう見た目から分かりにくいものも、構文を解析して一覧を出すのが目的です。</p>

<p>JavaScriptに詳しい人は問題ないですが、JavaScriptを今から始めるような人は、どの機能がいつから使える機能なのかが分からない場合があります。</p>

<p>また、最近のブラウザは先行して実装したりしています。
ブラウザに入ってる ＝ 標準化されたもの ではないので、そういうのをコードから検索できる必要が出てくる気がしています。</p>

<p><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a>を書いていて、<a href="https://asciidwango.github.io/js-primer/basic/operator/" title="演算子 · JavaScriptの入門書 #jsprimer">演算子</a>はGoogle検索が難しいので、１ページに殆どの演算子記号を並べて書いたりしています。</p>

<p>JavaScriptのコードにおいても、コードからこの構文って何なのかを知りたい事があると思うので作りました。</p>

<h2 id="おわり">おわり</h2>

<p><a href="https://github.com/azu/ecmascript-version-detector" title="azu/ecmascript-version-detector: ECMAScript Version Detector">azu/ecmascript-version-detector: ECMAScript Version Detector</a>は結構ラフスケッチな感じなので、もっといい感じの表示したりするPull Request待っています。</p>

<p>一応、ライブラリとして使えます。
コードをパースしたら、バージョンとかASTが入ったものを返します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">parse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ecmascript-version-detector&quot;</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
<span class="nx">parse</span><span class="p">(</span><span class="err">`</span><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span><span class="err">`</span><span class="p">);</span>
<span class="cm">/*</span>
<span class="cm">[</span>
<span class="cm">    {</span>
<span class="cm">        &quot;selector&quot;: &quot;//BinaryExpression[@operator==&#39;**&#39;]&quot;,</span>
<span class="cm">        &quot;version&quot;: &quot;2016&quot;,</span>
<span class="cm">        &quot;en&quot;: {</span>
<span class="cm">            &quot;name&quot;: &quot;BinaryExpression exponentiation operator&quot;</span>
<span class="cm">        },</span>
<span class="cm">        &quot;node&quot;: {</span>
<span class="cm">            &quot;type&quot;: &quot;BinaryExpression&quot;,</span>
<span class="cm">            &quot;start&quot;: 0,</span>
<span class="cm">            &quot;end&quot;: 6,</span>
<span class="cm">            &quot;loc&quot;: {</span>
<span class="cm">                &quot;start&quot;: {</span>
<span class="cm">                    &quot;line&quot;: 1,</span>
<span class="cm">                    &quot;column&quot;: 0</span>
<span class="cm">                },</span>
<span class="cm">                &quot;end&quot;: {</span>
<span class="cm">                    &quot;line&quot;: 1,</span>
<span class="cm">                    &quot;column&quot;: 6</span>
<span class="cm">                }</span>
<span class="cm">            },</span>
<span class="cm">            &quot;left&quot;: {</span>
<span class="cm">                &quot;type&quot;: &quot;NumericLiteral&quot;,</span>
<span class="cm">                &quot;start&quot;: 0,</span>
<span class="cm">                &quot;end&quot;: 1,</span>
<span class="cm">                &quot;loc&quot;: {</span>
<span class="cm">                    &quot;start&quot;: {</span>
<span class="cm">                        &quot;line&quot;: 1,</span>
<span class="cm">                        &quot;column&quot;: 0</span>
<span class="cm">                    },</span>
<span class="cm">                    &quot;end&quot;: {</span>
<span class="cm">                        &quot;line&quot;: 1,</span>
<span class="cm">                        &quot;column&quot;: 1</span>
<span class="cm">                    }</span>
<span class="cm">                },</span>
<span class="cm">                &quot;extra&quot;: {</span>
<span class="cm">                    &quot;rawValue&quot;: 1,</span>
<span class="cm">                    &quot;raw&quot;: &quot;1&quot;</span>
<span class="cm">                },</span>
<span class="cm">                &quot;value&quot;: 1</span>
<span class="cm">            },</span>
<span class="cm">            &quot;operator&quot;: &quot;**&quot;,</span>
<span class="cm">            &quot;right&quot;: {</span>
<span class="cm">                &quot;type&quot;: &quot;NumericLiteral&quot;,</span>
<span class="cm">                &quot;start&quot;: 5,</span>
<span class="cm">                &quot;end&quot;: 6,</span>
<span class="cm">                &quot;loc&quot;: {</span>
<span class="cm">                    &quot;start&quot;: {</span>
<span class="cm">                        &quot;line&quot;: 1,</span>
<span class="cm">                        &quot;column&quot;: 5</span>
<span class="cm">                    },</span>
<span class="cm">                    &quot;end&quot;: {</span>
<span class="cm">                        &quot;line&quot;: 1,</span>
<span class="cm">                        &quot;column&quot;: 6</span>
<span class="cm">                    }</span>
<span class="cm">                },</span>
<span class="cm">                &quot;extra&quot;: {</span>
<span class="cm">                    &quot;rawValue&quot;: 2,</span>
<span class="cm">                    &quot;raw&quot;: &quot;2&quot;</span>
<span class="cm">                },</span>
<span class="cm">                &quot;value&quot;: 2</span>
<span class="cm">            }</span>
<span class="cm">        }</span>
<span class="cm">    },</span>
<span class="cm">    ....</span>
<span class="cm">]</span>
<span class="cm">*/</span>
</code></pre></div>
<p><a href="https://github.com/azu/ecmascript-version-detector#contributing" title="Contributing">Contributing</a>に書いていますが、コードからのバージョンの判定は<a href="https://github.com/rse/astq" title="astq">astq</a>を使ってセレクタにマッチするかを見ています。</p>

<p>まだ足りてない判定などもあるので、気軽にPull Requestを投げてください。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintでスペースを入れる入れないを統一するルール</title>
   <link href="http://efcl.info/2016/07/21/textlint-rule-spacing/"/>
   <updated>2016-07-21T20:08:00+09:00</updated>
   <id>http://efcl.info/2016/07/21/textlint-rule-spacing</id>
   <content type="html"><![CDATA[ <p>文章を書いていると、日本語と english の間にスペースを入れるかどうかという表記揺れの問題がでてきます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">日本語と english にはスペースを入れる
日本語とenglishにはスペースを入れない
`code` と日本語の間はスペースを空ける
`code`と日本語の間はスペースを空けない
OK: 「良いですね」
NG: 「 ダメですね 」
</code></pre></div>
<p>このようなスペースのスタイルについての<a href="https://textlint.github.io/">textlint</a>ルールを書きました。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-spacing" title="textlint-ja/textlint-rule-spacing: スペース周りのスタイルを扱うtextlintルール集">textlint-ja/textlint-rule-spacing: スペース周りのスタイルを扱うtextlintルール集</a></li>
</ul>

<p>プリセットになっているため、次のようにまとめてインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-preset-ja-spacing
</code></pre></div>
<p>そして、次のように設定で有効化すれば利用できます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;preset-ja-spacing&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="ルール一覧">ルール一覧</h2>

<p>次のようなルールがプリセットには含まれています。
また、個別のルールとしてもnpmでインストールできるようになっています。</p>

<h3 id="textlint-rule-ja-space-between-half-and-full-width"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-space-between-half-and-full-width">textlint-rule-ja-space-between-half-and-full-width</a></h3>

<p>半角文字と全角文字の間にスペースを入れるかどうかのルール
デフォルトはスペースを入れない。</p>

<h3 id="textlint-rule-ja-space-around-code"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-space-around-code">textlint-rule-ja-space-around-code</a></h3>

<p>インラインコードの周りにスペースを入れるかを決めるルール</p>

<h3 id="textlint-rule-ja-no-space-between-full-width"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-no-space-between-full-width">textlint-rule-ja-no-space-between-full-width</a></h3>

<p>全角文字同士の間のスペースについてのtextlintルール。
全角文字どうしの間にスペースを入れません。</p>

<h3 id="textlint-rule-ja-nakaguro-or-halfwidth-space-between-katakana"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-nakaguro-or-halfwidth-space-between-katakana">textlint-rule-ja-nakaguro-or-halfwidth-space-between-katakana</a></h3>

<p>カタカナ語間の区切り文字についてのtextlintルール。
カタカナ語間は中黒または半角スペースを用いてカタカナ語を区切ります。</p>

<h3 id="textlint-rule-ja-no-space-around-parentheses"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-no-space-around-parentheses">textlint-rule-ja-no-space-around-parentheses</a></h3>

<p>かっこの外側、内側ともにスペースを入れないようにするルール</p>

<h3 id="textlint-rule-ja-space-after-exclamation"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-space-after-exclamation">textlint-rule-ja-space-after-exclamation</a></h3>

<p>文末に感嘆符を使用し、後に別の文が続く場合は、直後に全角スペースを挿入します。
文中に感嘆符を使用する場合はスペースを挿入しません</p>

<h3 id="textlint-rule-ja-space-after-question"><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-space-after-question">textlint-rule-ja-space-after-question</a></h3>

<p>文末に疑問符を使用し、後に別の文が続く場合は、直後に全角スペースを挿入します。
文中に疑問符を使用する場合はスペースを挿入しません。</p>

<h2 id="デフォルト設定">デフォルト設定</h2>

<p>デフォルトでは、次のような設定になっています。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;preset-ja-spacing&quot;</span><span class="p">:</span> <span class="p">{</span>
             <span class="nt">&quot;ja-nakaguro-or-halfwidth-space-between-katakana&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="nt">&quot;ja-no-space-around-parentheses&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="nt">&quot;ja-no-space-between-full-width&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="nt">&quot;ja-space-between-half-and-full-width&quot;</span><span class="p">:</span> <span class="p">{</span>
                 <span class="nt">&quot;space&quot;</span><span class="p">:</span> <span class="s2">&quot;never&quot;</span>
             <span class="p">},</span>
             <span class="nt">&quot;ja-space-after-exclamation&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="nt">&quot;ja-space-after-question&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="nt">&quot;ja-space-around-code&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
         <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><a href="https://github.com/textlint-ja/textlint-rule-spacing/tree/master/https://github.com/textlint-ja/textlint-rule-spacing/tree/master/packages/textlint-rule-ja-space-around-code">textlint-rule-ja-space-around-code</a>は、デフォルト無効になっています。(どちらが一般的か不明なため)</p>

<p>次のように設定することで、プリセットに含まれるすべてのルールを有効にできます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;preset-ja-spacing&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;ja-space-around-code&quot;</span><span class="p">:</span> <span class="p">{</span>
                <span class="nt">&quot;before&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nt">&quot;after&quot;</span><span class="p">:</span> <span class="kc">false</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="fixable">Fixable</h2>

<p><a href="https://textlint.github.io/"><img src="https://img.shields.io/badge/textlint-fixable-green.svg?style=social" alt="textlint rule"></a></p>

<p>大体のルールは<code>textlint --fix</code>の自動修正に対応しています。</p>

<h2 id="意見-要望">意見/要望</h2>

<p><a href="https://github.com/textlint-ja/textlint-rule-spacing/issues">Issue</a>や<a href="https://gitter.im/textlint-ja/textlint-ja">Gitterチャット</a>に書いてください。</p>

<p><a href="https://gitter.im/textlint-ja/textlint-ja"><img src="https://badges.gitter.im/textlint-ja/textlint-ja.svg" alt="Gitter"></a></p>

<h2 id="関連">関連</h2>

<p>JTFスタイルガイドに含まれているルールと大部分は共通しています。
以下のプリセットを利用している場合は重複するルールがありますが、スペース関連のルールを取り出した感じです。(JTFの方もこのモジュールをつかって実装したい)</p>

<ul>
<li><a href="https://www.jtf.jp/jp/style_guide/styleguide_top.html" title="JTF日本語標準スタイルガイド（翻訳用）">JTF日本語標準スタイルガイド（翻訳用）</a></li>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style" title="azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#teppeis_sushi に参加した</title>
   <link href="http://efcl.info/2016/07/14/teppeis_sushi/"/>
   <updated>2016-07-14T23:07:00+09:00</updated>
   <id>http://efcl.info/2016/07/14/teppeis_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?q=%23teppeis_sushi&amp;src=typd" title="#teppeis_sushi">#teppeis_sushi</a>に参加した。</p>

<ul>
<li><a href="http://togetter.com/li/1000035" title="#teppeis_sushi - Togetterまとめ">#teppeis_sushi - Togetterまとめ</a></li>
</ul>

<h2 id="karma-1-0について-kyo_ago">Karma 1.0について @ kyo_ago</h2>

<ul>
<li>Karma 1.0について</li>
<li><a href="https://github.com/karma-runner/karma/blob/v1.0.0/CHANGELOG.md" title="karma/CHANGELOG.md at v1.0.0 · karma-runner/karma">karma/CHANGELOG.md at v1.0.0 · karma-runner/karma</a></li>
<li><a href="http://docs.busterjs.org/en/latest/" title="Buster.JS">Buster.JS</a>の<a href="http://azu.github.io/slide/Kamakura/busterJS.html#slide22" title="testbed">testbed</a>みたいな機能</li>
<li>実際の環境を読み込ませたうえでテストファイルを読み込ませてテストできる</li>
<li>E2Eテストみたいなものを簡単に書ける</li>
<li>さらにmiddlewareで<a href="https://github.com/karma-runner/karma/blob/master/lib/middleware/proxy.js" title="proxy">proxy</a>を扱える</li>
<li>テストしてる内容はメソッド叩いたら要素がでるとか</li>
<li>技術的な側面でE2Eテストな感じ</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> E2Eテストは技術とユーザー的な側面とか色々ある</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753542849296146432">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3 id="proxy">Proxy</h3>

<ul>
<li>コミットごとのビルドをS3にアップロードし、本番環境で読み込むChrome拡張Proxy</li>
<li>拡張を入れれば開発中の内容が見られる</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 本番環境の上でハックして開発するスタイル</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753544008811421697">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 謎のやつ <a href="https://t.co/PuKx1Qe9Dm">pic.twitter.com/PuKx1Qe9Dm</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753546274012434433">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="pcブラウザから使われるウェブアプリケーションで独自ズームの実装-yoshiko">PCブラウザから使われるウェブアプリケーションで独自ズームの実装 - yoshiko</h2>

<p>スライド: <a href="http://yoshiko-pg.github.io/slides/20160714-sushijs/">3分で独自ズーム</a></p>

<ul>
<li>wheelイベントでやってるサービスがあった</li>
<li>DOM3で標準化されてる</li>
<li><a href="https://w3c.github.io/uievents/#events-wheelevents" title="UI Events">UI Events</a></li>
<li><code>event.deltaY</code>でピンチインの量を取れる</li>
<li>:sushi: デモ</li>
</ul>

<h3 id="passive-event">passive event</h3>

<ul>
<li>Passive Eventはイベントハンドラ内で<code>preventDefault()</code>が呼ばれないという状態を前提にしたもの</li>
<li><code>preventDefault()</code>が呼ばれると描画がとまってしまうため</li>
<li>呼ばれないことを前提とすればパフォーマンス最適化できる</li>
<li>現在のデフォルトは呼ばれる事を前提とした形になって動く</li>
<li><a href="https://blog.jxck.io/entries/2016-06-09/passive-event-listeners.html" title="Passive Event Listeners によるスクロールの改善 | blog.jxck.io">Passive Event Listeners によるスクロールの改善 | blog.jxck.io</a></li>
<li>ピンチインも<code>preventDefault()</code>を呼び出してる</li>
<li>こういう特殊なユースケースにはまだ対応できていない</li>
</ul>

<h2 id="cancellableの現在-jxck">Cancellableの現在 - jxck</h2>

<ul>
<li><a href="https://docs.google.com/presentation/d/1V4vmC54gJkwAss1nfEt9ywc-QOVOfleRxD5qtpMpc8U/edit#slide=id.gc6f9e470d_0_0">Cancelable promises - Google スライド</a></li>
<li><a href="https://github.com/domenic/cancelable-promise">domenic/cancelable-promise: Cancelable promises proposal for JavaScript</a></li>
<li><a href="https://github.com/zenparsing/es-cancel-token">zenparsing/es-cancel-token: Cancel Tokens for ECMAScript</a></li>
<li>fetchとかはPromise使うけど未だにキャンセルできない</li>
<li>progressはstreamでひとまずかいけつ</li>
<li>Cancellableの提案は2つでている</li>
<li>cancel用のresolvedでもrejectedでもない第三の状態を作る方向

<ul>
<li><code>cancel()</code> </li>
<li><a href="https://github.com/domenic/cancelable-promise">domenic/cancelable-promise: Cancelable promises proposal for JavaScript</a></li>
</ul></li>
<li>C#系のToken方式

<ul>
<li><a href="https://github.com/zenparsing/es-cancel-token">zenparsing/es-cancel-token: Cancel Tokens for ECMAScript</a></li>
</ul></li>
<li>決着と議論はこれから</li>
<li>まだfetchをXHRの代わりに使うのは早いのでは</li>
<li>Promiseの話はasync/awaitを前提として話が多い</li>
<li>finallyとかまだ決まってないものも議論に流れる

<ul>
<li><a href="https://github.com/ljharb/proposal-promise-finally" title="ljharb/proposal-promise-finally: ECMAScript Proposal, specs, and reference implementation for Promise.prototype.finally">ljharb/proposal-promise-finally: ECMAScript Proposal, specs, and reference implementation for Promise.prototype.finally</a></li>
</ul></li>
</ul>

<h2 id="javascriptにpanicが欲しい-会長">JavaScriptにpanicが欲しい - 会長</h2>

<ul>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2016/07/12/103734" title="Node.js における Promise を使った例外処理 - from scratch">Node.js における Promise を使った例外処理 - from scratch</a></li>
<li>Promiseを使えばとりあえずキャッチする場所ができた</li>
<li>でも必ずキャッチされるから落とすのが面倒</li>
<li>キャッチしてそれの理由付きで落とすpanicが欲しいという話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> 肉 <a href="https://t.co/22EM5D5H63">pic.twitter.com/22EM5D5H63</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753553912519536640">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これからの Web について真剣に議論している<a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a> <a href="https://t.co/RsH7CW56M0">pic.twitter.com/RsH7CW56M0</a></p>&mdash; Jxck (@Jxck_) <a href="https://twitter.com/Jxck_/status/753556576070275072">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="最近のtextlint-azu">最近のtextlint - azu</h2>

<p>スライド: <a href="http://azu.github.io/slide/2016/honbucho/textlint.html" title="最近のtextlint !">最近のtextlint !</a></p>

<p>最近のtextlintに入れた変更点の話</p>

<ul>
<li>filter rule</li>
<li><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></li>
<li><a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing">textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット</a></li>
<li><a href="https://github.com/textlint-ja/textlint-rule-spacing">textlint-ja/textlint-rule-spacing: スペース周りのスタイルを扱うtextlintルール集</a></li>
<li><a href="https://github.com/textlint-ja/textlint-ja">textlint-ja/textlint-ja: textlintの日本語コミュニティ</a></li>
</ul>

<h2 id="move-power-assert-to-tool-t_wada">move power-assert to tool - t_wada</h2>

<ul>
<li>power-assert 2.0をだそうをだろうしてる。</li>
<li>nodeのassert互換 - 透過的なassertにしようとしてる</li>
<li>一個だけnodeに追加してるassertがあるのでbreaking change</li>
<li><a href="http://efcl.info/2016/04/14/espower-babel-is-deprecated/" title="power-assert + babel as a development tool | Web Scratch">power-assert + babel as a development tool | Web Scratch</a></li>
<li>power-assertをツールにするということ</li>
<li>今はbabelのpresetのみになってる</li>
<li>他のASTツールでも動くようにする目標</li>
<li>Babelは一度のtraverseで変換</li>
<li>これを他のASTツールでもやる</li>
<li><a href="https://www.npmjs.com/package/merge-estraverse-visitors" title="merge-estraverse-visitors">merge-estraverse-visitors</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「ASTの世界が一歩先に： <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753565073788907520">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="axiosの話-axross"><a href="https://github.com/mzabriskie/axios" title="axios">axios</a>の話 - axross</h2>

<ul>
<li>エラーハンドリングの話</li>
</ul>

<h2 id="es-modulesはhttp-2で部分更新の夢を見るか-本部長">ES modulesはHTTP/2で部分更新の夢を見るか? - 本部長</h2>

<ul>
<li>最終的にはconcatに勝つ夢</li>
<li><a href="http://teppeis.hatenablog.com/entry/2015/05/es6-modules-and-http2" title="ES6 ModulesはHTTP/2によってconcat無しで使えるようになるのか - teppeis blog">ES6 ModulesはHTTP/2によってconcat無しで使えるようになるのか - teppeis blog</a></li>
<li>の続き</li>
<li>Cache Aware Server Push</li>
<li>HTTP/2 Server Pushで個別に304できない話</li>
<li>それは策定の段階で通り過ぎた話</li>
</ul>

<h2 id="流し">流し</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「和田だけど質問ある？」 <a href="https://twitter.com/hashtag/teppeis_sushi?src=hash">#teppeis_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/753573209220407296">July 14, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="研修">研修</h2>

<ul>
<li>学習はトップダウンから or ボトムアップから どっちから</li>
<li>あまりに広すぎるのでトップダウンから始めたほうがいいのでは</li>
<li>ボトムアップからやるとRFCを読むところで終わってしまうことがあるかも</li>
</ul>

<h2 id="definitelytypedの話-vvakame"><a href="https://github.com/DefinitelyTyped/" title="DefinitelyTyped">DefinitelyTyped</a>の話 - vvakame</h2>

<ul>
<li>最近MSの人が入ってガンガン開発してる</li>
<li><a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/" title="The Future of Declaration Files | TypeScript">The Future of Declaration Files | TypeScript</a></li>
<li>d.tsのバージョンニングの話</li>
</ul>

<hr>

<p><a href="http://group.cybozu.jp/news/16063001.html">本部長</a>おめでとうございます。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>技術文書を書くためのtextlint校正ルールセット</title>
   <link href="http://efcl.info/2016/07/13/textlint-rule-preset-ja-technical-writing/"/>
   <updated>2016-07-13T09:33:00+09:00</updated>
   <id>http://efcl.info/2016/07/13/textlint-rule-preset-ja-technical-writing</id>
   <content type="html"><![CDATA[ <p>技術文書向けの<a href="https://textlint.github.io/">textlint</a>ルールプリセットを作りました。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット">textlint-ja/textlint-rule-preset-ja-technical-writing: 技術文書向けのtextlintルールプリセット</a></li>
</ul>

<p>今、書いている<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>で使用しています。</p>

<p>元々,
<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="azu/JavaScript-Plugin-Architecture: JavaScriptプラグインアーキテクチャの本">JavaScript-Plugin-Architecture: JavaScriptプラグインアーキテクチャの本</a>で実験していたルールをまとめたプリセットになっています。</p>

<p>そのため、実際に適応した状態で書けることは確認した内容がベースです。一部オプションで設定をゆるくしたり、<a href="https://github.com/textlint/textlint-filter-rule-comments" title="textlint-filter-rule-comments">textlint-filter-rule-comments</a>などで無視する必要がある部分もありますが、許容範囲な感じでした。</p>

<p>そもそもなんでこういうツールが必要なのかについては以下のスライドを参照してください。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/" title="Introduction | 技術文書をソフトウェア開発する話">Introduction | 技術文書をソフトウェア開発する話</a></li>
</ul>

<h2 id="インストール">インストール</h2>

<p>通常の<a href="http://efcl.info/2015/12/30/textlint-preset/" title="ルールプリセット">ルールプリセット</a>と入れ方は同じです。</p>

<p>プリセットをインストールします</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># package.jsonがないなら npm init
npm install textlint-rule-preset-ja-technical-writing -D
</code></pre></div>
<p><code>.textlintrc</code>ファイルに以下の設定を追加します。
(<code>.textlinrc</code>ファイルがないなら <code>$(npm bin)/textlint --init</code>)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;rules&quot;: {
        &quot;preset-ja-technical-writing&quot;: true
    }
}
</code></pre></div>
<p>これで<a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-rule-preset-ja-technical-writing">textlint-rule-preset-ja-technical-writing</a>を使ってLintができるようになります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/textlint README.md
</code></pre></div>
<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/getting-started.md">textlint/getting-started.md at master · textlint/textlint</a></li>
<li><a href="http://blog.kymmt.com/entry/textlint">テキストの校正用に textlint を導入してみた - blog.kymmt.com</a></li>
</ul>

<h2 id="ルール一覧">ルール一覧</h2>

<p>現時点では以下のルールが含まれています。</p>

<p>最新のものとは異なる場合があるので、詳細は<a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-rule-preset-ja-technical-writing">textlint-rule-preset-ja-technical-writing</a>を参照してください。</p>

<p>また、ルールの大部分は読みにくさを排除してシンプルな文章にするためのものが中心です。
技術文書では、できるだけわかりやすく簡潔な表現をした方が良いです。</p>

<ul>
<li><a href="http://qiita.com/azu/items/60764ed6f415d3c748bf" title="文書執筆の指南書で解説されている問題点を textlint で発見する - Qiita">文書執筆の指南書で解説されている問題点を textlint で発見する - Qiita</a></li>
<li><a href="http://qiita.com/takahi-i/items/a8b994ef17fd66fe6237" title="文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita">文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita</a></li>
</ul>

<p>上記の記事では技術文書の問題点とそれに対するルールがまとめられています。
このプリセットも大部分は上記の記事で解説している内容が反映されています。</p>

<ul>
<li>1文の長さは90文字以下とする</li>
<li>カンマは1文中に3つまで</li>
<li>読点は1文中に3つまで</li>
<li>連続できる最大の漢字長は5文字まで</li>
<li>漢数字と算用数字を使い分けます</li>
<li>「ですます調」、「である調」を統一します</li>
<li>文末の句点記号として「。」を使います</li>
<li>二重否定は使用しない</li>
<li>ら抜き言葉を使用しない</li>
<li>同じ表現から文を開始しすぎない</li>
<li>逆接の接続助詞「が」を連続して使用しない</li>
<li>同じ接続詞を連続して使用しない</li>
<li>同じ助詞を連続して使用しない</li>
<li>UTF8-MAC 濁点を使用しない</li>
<li>感嘆符!！、感嘆符?？を使用しない</li>
<li>半角カナを使用しない</li>
<li>弱い日本語表現の利用を使用しない</li>
<li>同一の単語を間違えて連続しているのをチェックする</li>
<li>よくある日本語の誤用をチェックする</li>
</ul>

<!-- tocstop -->

<h3 id="1文の長さは90文字以下とする">1文の長さは90文字以下とする</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-sentence-length">https://github.com/azu/textlint-rule-sentence-length</a></p>
</blockquote>

<p>長過ぎる文は読みにくさに繋がるため、適切な単位で文を区切ってください。</p>

<h3 id="カンマは1文中に3つまで">カンマは1文中に3つまで</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-max-comma">https://github.com/azu/textlint-rule-max-comma</a></p>
</blockquote>

<p>カンマ（,）の多用は、文が長くなっている可能性があります。</p>

<h3 id="読点は1文中に3つまで">読点は1文中に3つまで</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-max-ten">https://github.com/azu/textlint-rule-max-ten</a></p>
</blockquote>

<p>読点（、）の多用は、文が長くなっている可能性があります。</p>

<h3 id="連続できる最大の漢字長は5文字まで">連続できる最大の漢字長は5文字まで</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-max-kanji-continuous-len">https://github.com/azu/textlint-rule-max-kanji-continuous-len</a></p>
</blockquote>

<p>漢字同士が連続していると読みにくさにつながります。
助詞を入れるなどして漢字だけで文章を書かないようにします。</p>

<p>長い漢字の固有名詞は <code>allow</code> オプションに記述して回避します。</p>

<h3 id="漢数字と算用数字を使い分けます">漢数字と算用数字を使い分けます</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-preset-JTF-style">https://github.com/azu/textlint-rule-preset-JTF-style</a></p>
</blockquote>

<p>数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。</p>

<p>慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。</p>

<h3 id="「ですます調」、「である調」を統一します">「ですます調」、「である調」を統一します</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu">https://github.com/azu/textlint-rule-no-mix-dearu-desumasu</a></p>
</blockquote>

<ul>
<li>見出しは自動</li>
<li>本文はですます調</li>
<li>箇条書きはである調</li>
</ul>

<p>文体は見出し、本文、箇条書きの中では統一した表記にします。</p>

<h3 id="文末の句点記号として「。」を使います">文末の句点記号として「。」を使います</h3>

<blockquote>
<p><a href="https://github.com/textlint-ja/textlint-rule-ja-no-mixed-period">https://github.com/textlint-ja/textlint-rule-ja-no-mixed-period</a></p>
</blockquote>

<p>文末には「。」を使い文を区切ります。</p>

<p>「。」のつけ忘れのチェックや「:」で文を区切らないようにします。</p>

<h3 id="二重否定は使用しない">二重否定は使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-double-negative-ja">https://github.com/azu/textlint-rule-no-double-negative-ja</a></p>
</blockquote>

<p>二重否定は使用しません。</p>

<h3 id="ら抜き言葉を使用しない">ら抜き言葉を使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-dropping-the-ra">https://github.com/azu/textlint-rule-no-dropping-the-ra</a></p>
</blockquote>

<p>ら抜き言葉は使用しません。</p>

<h3 id="同じ表現から文を開始しすぎない">同じ表現から文を開始しすぎない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-start-duplicated-conjunction">https://github.com/azu/textlint-rule-no-start-duplicated-conjunction</a></p>
</blockquote>

<p>同じ表現から文を開始している場合、同じことを繰り返し説明している場合があります。</p>

<p>箇条書きなどで同じ表現から開始したいは<a href="https://github.com/textlint/textlint-filter-rule-comments" title="textlint-filter-rule-comments">textlint-filter-rule-comments</a>を使い回避してください。</p>

<h3 id="逆接の接続助詞「が」を連続して使用しない">逆接の接続助詞「が」を連続して使用しない</h3>

<blockquote>
<p><a href="https://github.com/takahashim/textlint-rule-no-doubled-conjunctive-particle-ga">https://github.com/takahashim/textlint-rule-no-doubled-conjunctive-particle-ga</a></p>
</blockquote>

<p>逆接の接続助詞「が」は、特に否定の意味ではなくても安易に使われてしまいがちです。</p>

<p>同一文中に複数回出現していないかをチェックします。</p>

<h3 id="同じ接続詞を連続して使用しない">同じ接続詞を連続して使用しない</h3>

<blockquote>
<p><a href="https://github.com/takahashim/textlint-rule-no-doubled-conjunction">https://github.com/takahashim/textlint-rule-no-doubled-conjunction</a></p>
</blockquote>

<h3 id="同じ助詞を連続して使用しない">同じ助詞を連続して使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-doubled-joshi">https://github.com/azu/textlint-rule-no-doubled-joshi</a></p>
</blockquote>

<p>同じ助詞が連続して書かれているとどこに助詞がかかっているのかがわかりにくくなります。</p>

<blockquote>
<p>材料不足で代替素材で製品を作った。</p>
</blockquote>

<h3 id="utf8-mac-濁点を使用しない">UTF8-MAC 濁点を使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-nfd">https://github.com/azu/textlint-rule-no-nfd</a></p>
</blockquote>

<p>文章中にUTF8-MAC 濁点は不要です。
ファイルからコピー＆ペーストした文字である場合があります。</p>

<h3 id="感嘆符-！、感嘆符-？を使用しない">感嘆符!！、感嘆符?？を使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-exclamation-question-mark">https://github.com/azu/textlint-rule-no-exclamation-question-mark</a></p>
</blockquote>

<p>技術文書では感情的な表現はあまり使用するべきではありません。</p>

<p>特定の感嘆符または感嘆符を使用する場合は、オプションで許可して利用してください。
デフォルトでは全て禁止しています。</p>

<h3 id="半角カナを使用しない">半角カナを使用しない</h3>

<blockquote>
<p><a href="https://github.com/azu/textlint-rule-no-hankaku-kana">https://github.com/azu/textlint-rule-no-hankaku-kana</a></p>
</blockquote>

<p>全角カタカナを使用してください。</p>

<h3 id="弱い日本語表現の利用を使用しない">弱い日本語表現の利用を使用しない</h3>

<blockquote>
<p><a href="https://github.com/textlint-ja/textlint-rule-ja-no-weak-phrase">https://github.com/textlint-ja/textlint-rule-ja-no-weak-phrase</a></p>
</blockquote>

<p><code>〜かもしれない</code> 等の弱い表現を使用しない。</p>

<h3 id="同一の単語を間違えて連続しているのをチェックする">同一の単語を間違えて連続しているのをチェックする</h3>

<blockquote>
<p><a href="https://github.com/textlint-ja/textlint-rule-ja-no-successive-word">https://github.com/textlint-ja/textlint-rule-ja-no-successive-word</a></p>
</blockquote>

<p>同一の単語(形態素解析したtoken)が連続している場合は誤字の可能性があります。</p>

<p>誤字でない場合は、<a href="https://github.com/textlint-ja/textlint-rule-ja-no-successive-word/issues/new">Issue報告</a>してください。</p>

<h3 id="よくある日本語の誤用をチェックする">よくある日本語の誤用をチェックする</h3>

<blockquote>
<p><a href="https://github.com/textlint-ja/textlint-rule-ja-no-abusage">https://github.com/textlint-ja/textlint-rule-ja-no-abusage</a></p>
</blockquote>

<p>日本語や技術表現における漢字の誤用などをチェックするルールです。</p>

<hr>

<h2 id="類似ルール">類似ルール</h2>

<p>ルール的にもJTFスタイルガイドと似ている部分は多いです。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-preset-JTF-style">azu/textlint-rule-preset-JTF-style: JTF日本語標準スタイルガイド for textlint.</a></li>
<li><a href="http://efcl.info/2015/10/19/textlint-plugin-JTF-style/">JTF日本語標準スタイルガイドのルールセットで文章をチェックできるtextlintプリセット | Web Scratch</a></li>
</ul>

<p><a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-rule-preset-ja-technical-writing">textlint-rule-preset-ja-technical-writing</a>では、単純な辞書での一致ではなく、形態素解析をしているルールが多いです。
(JTF-styleは正規表現で頑張った感じ)</p>

<p>JTFスタイルガイドは名前の通りスタイル周りも含めていますが、<a href="https://github.com/textlint-ja/textlint-rule-preset-ja-technical-writing" title="textlint-rule-preset-ja-technical-writing">textlint-rule-preset-ja-technical-writing</a>では含まれていません。</p>

<p>スタイル周り(スペースの入れ方)については、別のプリセットを作っているのでそちらを参照してください。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-spacing" title="textlint-ja/textlint-rule-spacing: スペース周りのスタイルを扱うtextlintルール集">textlint-ja/textlint-rule-spacing: スペース周りのスタイルを扱うtextlintルール集</a></li>
</ul>

<h2 id="参考">参考</h2>

<ul>
<li><a href="https://github.com/continuous-manual-writing/writing-guideline/blob/master/writing-standard.md" title="writing-guideline/writing-standard.md at master · continuous-manual-writing/writing-guideline">writing-guideline/writing-standard.md at master · continuous-manual-writing/writing-guideline</a></li>
</ul>

<h2 id="コミュニティ">コミュニティ</h2>

<p>textlintの日本語周りについて話せるコミュニティが<a href="https://gitter.im/textlint-ja/textlint-ja"><img src="https://badges.gitter.im/textlint-ja/textlint-ja.svg" alt="Gitter"></a>にあります。
Organizationなっているので、日本語関係のルールを置きたい場合も言ってもらえれば対応できます。</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-ja">textlint-ja/textlint-ja: textlintの日本語コミュニティ</a></li>
<li><a href="https://gitter.im/textlint-ja/textlint-ja">textlint-ja/textlint-ja - Gitter</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>MarkdownのコードブロックをESLintでチェックするtextlintルール</title>
   <link href="http://efcl.info/2016/07/06/eslint-with-textlint/"/>
   <updated>2016-07-06T20:24:00+09:00</updated>
   <id>http://efcl.info/2016/07/06/eslint-with-textlint</id>
   <content type="html"><![CDATA[ <p>今、<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>を書いていて、この本ではいろんなものをテストできる状態にして開発しています。</p>

<p>詳しくは<a href="https://github.com/asciidwango/js-primer/blob/master/CONTRIBUTING.md" title="CONTRIBUTING.md">CONTRIBUTING.md</a>に書いていますが、今のところ次のようなテストが常に回っています。(CONTRIBUTINGもお待ちしています)</p>

<ul>
<li>GitBookのビルドテスト</li>
<li><a href="https://textlint.github.io/">textlint</a>による文章のLint</li>
<li><a href="http://eslint.org/" title="ESLint">ESLint</a>によるコードのLint</li>
<li><a href="https://textlint.github.io/">textlint</a> + <a href="http://eslint.org/" title="ESLint">ESLint</a>によるMarkdown中のインラインコードブロックのLint</li>
<li>Markdown中のインラインコードブロックへのDocTest</li>
<li><a href="http://mochajs.org/" title="Mocha">Mocha</a>による<code>*-test.js</code>ファイルのユニットテスト</li>
<li><code>*-example.js</code>がJavaScriptとして実行できるかのテスト</li>
<li><code>*-invalid.js</code>がJavaScriptとして実行できないかのテスト</li>
</ul>

<p>JavaScriptを学ぶ本なので、大量のサンプルコードがでてくるのですが、そのサンプルコードが常に正しくある必要があります。
そのため、いろんな方向からテストして間違っているサンプルコードを含めないようにしています(逆に間違っていることをテストする仕組みもあります)</p>

<p>サンプルコードは大きく分けると、文章中にコードブロックで直接書くインラインコードと外部ファイルとして作成して読み込むコードがあります。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/61.html" title="サンプルコード | 技術文書をソフトウェア開発する話">サンプルコード | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>インラインコードは、ESLintでスタイルのチェックや<a href="https://github.com/azu/power-doctest" title="doctest">doctest</a>を行い実行結果のテストをしています。</p>

<p>以前話した方法ではESLintの<a href="https://github.com/eslint/eslint-plugin-markdown" title="eslint-plugin-markdown">eslint-plugin-markdown</a>を使い、インラインコードをESLintでチェックしていました。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/67.html" title="インラインコードのLint | 技術文書をソフトウェア開発する話">インラインコードのLint | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>普通なら正しいコードしか出てこないので問題ないのですが、入門書という位置づけであるため次のような間違ったコードも解説として登場します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">そして、一度`const`で宣言された変数には再代入できなくなります。
そのため、次のコードでは`bookTitle`を上書きしようとして`TypeError`となります。

```js
const bookTitle = &quot;JavaScriptの本&quot;;
bookTitle = &quot;上書き&quot;; // TypeError: invalid assignment to const `bookTitle&#39;
```

一般に変数への再代入は「変数の値は最初に定義した値と常に同じである」という参照透過性を壊すため、
バグを発生させやすい要因として知られています。
</code></pre></div>
<p>via <a href="https://asciidwango.github.io/js-primer/basic/variables/" title="変数と宣言 · JavaScriptの入門書 #jsprimer">変数と宣言 · JavaScriptの入門書 #jsprimer</a></p>

<p><a href="https://github.com/eslint/eslint-plugin-markdown" title="eslint-plugin-markdown">eslint-plugin-markdown</a>では<code>js</code>がついたコードブロックが自動でチェックされてしまうため、このコードブロック自体を無視して欲しいという書き方ができません。
(コードの中でESLintを <code>eslint-disable</code> はできるが表示されてしまう)</p>

<p>そのため、Markdownのレベルでコードブロックを無視できるような仕組みが必要になりました。</p>

<h2 id="textlint-rule-eslint"><a href="https://github.com/azu/textlint-rule-eslint" title="textlint-rule-eslint">textlint-rule-eslint</a></h2>

<p><a href="https://textlint.github.io/">textlint</a>は7.0からフィルタールールという機能を持っていて、このフィルタールールである<a href="https://github.com/textlint/textlint-filter-rule-comments" title="textlint-filter-rule-comments">textlint-filter-rule-comments</a>を使えば次のような形で無視する領域を作ることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- textlint-disable --&gt;

この部分はtextlintのチェックでエラーがあっても無視される

&lt;!-- textlint-enable --&gt;
</code></pre></div>
<ul>
<li><a href="http://efcl.info/2016/06/30/textlint7.0/" title="textlint 7.0リリース、フィルタールールの追加 | Web Scratch">textlint 7.0リリース、フィルタールールの追加 | Web Scratch</a></li>
</ul>

<p>つまり、textlintのルールとしてESLintを動かすことができれば、textlintとしてコードブロックを無視する = ESLintのチェックしないコードブロックを作れるので<a href="https://github.com/azu/textlint-rule-eslint" title="textlint-rule-eslint">textlint-rule-eslint</a>を作りました。
(プラグインの<a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/">アーキテクチャとかも似てる</a>ので10分ぐらいでできた)</p>

<p>これでインラインコードと外部ファイルのJavaScriptにESLintを適応することができるので、インデントがずれてないかやSyntaxがおかしくないかなどのチェックをすることができるようになっています。
(逆にベストプラクティス的なルールは引っかかりまくるので外しています…)</p>

<h3 id="おまけ">おまけ</h3>

<p>後、最近入れた面白いテストとしてdoctestライクなものをテストとして入れています。</p>

<p><code>*-example.js</code>のJavaScriptファイルとMarkdownのインラインコードブロックを対象にDocTestが実行されています。</p>

<p>次のように<code>// =&gt; 値</code>というコメントを書いた部分に対してDocTestが実行されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// =&gt; 42</span>
</code></pre></div>
<p>これにより、サンプルコードのコメントに書いた評価結果と実際の出力が一致するかをテストしてる感じです。</p>

<p>色々テストを入れているのは、いい文章といいコードは同時に書くのが難しいというのもあります。
そのため、とにかく機械的に落とせる部分は落とせるようにしています。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">色々コードを考えて書いた結果、文章がダメだとCIが落ちる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/749461790744977408">July 3, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">読みやすい文章と読みやすいコードは同時に書くのが難しい  &quot;[WIP] 条件分岐の実装 by azu · Pull Request #‌69 · asciidwango/js-primer&quot;  <a href="https://t.co/UJ41KV5Ttk">https://t.co/UJ41KV5Ttk</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/749462503889833984">July 3, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>後、機械的にチェックする利点の話は以下の文章を読むと面白いかもしれません。</p>

<blockquote>
<p>ツールによる検査の利点
<a href="http://qiita.com/takahi-i/items/a8b994ef17fd66fe6237" title="文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita">文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita</a></p>
</blockquote>

<p>リポジトリをWatchしていると分かるかもしれませんが、書く前に<a href="https://github.com/asciidwango/js-primer/issues" title="Issues · asciidwango/js-primer">Issues · asciidwango/js-primer</a>にどういう方針にするか、どういうサンプルコードがあると話がし易いかなどの設計をすることが多いです。
(なので適当にコメントしてくれると参考になります)</p>

<p>書きながら考えることも多いのですが、その場合はごちゃごちゃした文章ができて大体CIが落ち始めます。そこで機械的なチェックやPull Requestを出して自分でレビューする(PRも勝手にコメントくれると嬉しい)と少しはまともになります。</p>

<p>そういうことを繰り返しを行うことで文章やコードの質を上げる方法を取っています。(<a href="https://textlint.github.io/">textlint</a>を入れたところで文章の質が上がるわけではないです)</p>

<p>まあ、一発でテストが通った文章とか不安になるのと同じ感覚です。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint 7.0リリース、フィルタールールの追加</title>
   <link href="http://efcl.info/2016/06/30/textlint7.0/"/>
   <updated>2016-06-30T10:15:00+09:00</updated>
   <id>http://efcl.info/2016/06/30/textlint7.0</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> 7.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/7.0.0" title="Release 7.0.0 · textlint/textlint">Release 7.0.0 · textlint/textlint</a></li>
</ul>

<p>前回: <a href="http://efcl.info/2016/03/15/textlint--fix/" title="textlint 6.0リリース。--fixでの自動修正に対応 | Web Scratch">textlint 6.0リリース。--fixでの自動修正に対応 | Web Scratch</a></p>

<h2 id="追加した機能">追加した機能</h2>

<h3 id="filter-rule">Filter rule</h3>

<p>フィルタールールが追加されました。
フィルタールールはルールエラーを無視するためのルールを定義できるものです。</p>

<p>たとえば、<a href="https://github.com/textlint/textlint-filter-rule-comments">textlint-filter-rule-comments</a>ではESLintなどで見かける、この部分は無視して！ということを文章中に書くことができます。</p>

<p>MarkdownだとコメントがHTMLコメントを使い <code>&lt;!-- textlint-disable --&gt;</code> と <code>&lt;!-- textlint-enable --&gt;</code> で囲みます。
(Re:Viewなどはコメント記法があるのでそちらを利用できます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- textlint-disable --&gt;

この部分はtextlintのチェックでエラーがあっても無視される

&lt;!-- textlint-enable --&gt;
</code></pre></div>
<p>この<code>textlint-filter-rule-comments</code>を有効にするには、他のルールと同じくnpmでインストールします。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint-filter-rule-comments
# or
npm install -g textlint-filter-rule-comments
</code></pre></div>
<p>そして、<code>.textlintrc</code>の<code>filters</code>フィールドを作ってそこへ追加します。</p>

<p><code>textlint-filter-rule-comments</code>の<code>textlint-filter-rule-</code>は省略できるので<code>comments</code>だけで問題ありません。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;comments&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>もう一つの例として、特定のNodeを全部無視する<a href="https://github.com/textlint/textlint-filter-rule-node-types">textlint-filter-rule-node-types</a>というフィルタールールがあります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint-filter-rule-node-types
</code></pre></div>
<p>のようにインストールしておき、次のように設定を書いて有効にします。
そうすると、<code>&quot;nodeTypes&quot;</code>で指定したNode typeのエラーが全て無視されます。
この例では<code>BlockQuote</code> nodeは全てtextlintのチェック対象から除外されます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;node-types&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;nodeTypes&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;BlockQuote&quot;</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;very-nice-rule&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>指定できる<code>nodeTypes</code>は <a href="https://github.com/textlint/textlint/blob/master/docs/txtnode.md#type">https://github.com/textlint/textlint/blob/master/docs/txtnode.md#type</a> を参照してください。</p>

<p>フィルタールールも自分で作る事ができます。
フィルタールールの作り方について詳しくはドキュメントを参照してください。
既存のルールにAPIが一つ増えたぐらいの違いしかありません。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/filter-rule.md" title="textlint/filter-rule.md at master · textlint/textlint">textlint/filter-rule.md at master · textlint/textlint</a></li>
</ul>

<h3 id="sharable-config">Sharable Config</h3>

<p>これは<a href="http://efcl.info/2016/04/08/textlint-sharable-config/" title="textlintの設定をnpmにあげて使い回す | Web Scratch">textlintの設定をnpmにあげて使い回す | Web Scratch</a>で紹介した機能です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D @azu/textlint-config-readme textlint
$(npm bin)/textlint --config @azu/textlint-config-readme README.md
</code></pre></div>
<p>で、<code>.textlintrc</code>の設定をnpmパッケージとして配布されているものを利用できます。</p>

<h3 id="ast-explorer-for-textlint"><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></h3>

<p>主にルール開発者向けですが、textlintの扱うASTをみたり、その場でルールを書いてためせるplaygroundサイトを追加しました。</p>

<p><a href="https://textlint.github.io/astexplorer/"><img src="https://raw.githubusercontent.com/textlint/textlint/master/docs/resources/ast-explorer.png" alt="ast-explorer for textlint"></a></p>

<p>JavaScript ASTで有名な<a href="http://astexplorer.net/">AST explorer</a>のtextlint版です。
ルールを書いてみたい人は、これを使って文章がどのようなASTになるかを眺めてみるといいと思います。</p>

<h2 id="breaking-change">Breaking Change</h2>

<p>textlint 7.0 ではいくつか破壊的な変更はありますが、ユーザーには影響ないと思います。
ルールを書いている人は<a href="https://github.com/textlint/textlint/releases/tag/7.0.0" title="Release 7.0.0 · textlint/textlint">Release 7.0.0 · textlint/textlint</a>をみてください。
メッセージの出力順を変更しているのでテストが落ちている可能性があります。</p>

<h3 id="drop-node-js-0-12-support">Drop Node.js 0.12 support</h3>

<p>またtexltint 7.0からはNode.0.12のサポートを終了し、Node.js 4.0.0 &gt;=がサポート環境となります。(0.12でも動くけどいつの間にか動かなくなる事があります)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 21時限目でECMAScript as a Living Standardという発表をした</title>
   <link href="http://efcl.info/2016/06/29/node-ecmascript/"/>
   <updated>2016-06-29T23:32:00+09:00</updated>
   <id>http://efcl.info/2016/06/29/node-ecmascript</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/34104/" title="Node学園 21時限目 -ES Modules Meetup-">Node学園 21時限目 -ES Modules Meetup-</a>で<a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a>という発表をしてきました。</p>

<p><a href="http://azu.github.io/slide/2016/node-es/ecmascript.html"><img src="https://monosnap.com/file/sWmJQbTd7YAKkFvPog7xozpPtHMOKF.png" alt="ECMAScript as a Living Standard"></a></p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a></li>
</ul>

<p>ECMAScriptの仕様策定は大きなプロジェクトですが、
大部分の作業がGitHub上で見られる形でやり取りされています。</p>

<p>そのため、大きなGitHubプロジェクトとそこまで変わらない感覚で見ることができます。
また標準仕様を作るのでConsensusを取ったり、フォーマルなやり取りもあります。</p>

<ul>
<li><a href="https://github.com/tc39/proposals">tc39/proposals: Tracking ECMAScript Proposals</a></li>
<li><a href="https://github.com/tc39/ecma262">tc39/ecma262: Status, process, and documents for ECMA262</a></li>
<li><a href="https://github.com/tc39/tc39-notes/">tc39/tc39-notes: These are the notes I take at TC39 Meetings, with Markdown formatting</a></li>
</ul>

<p>GitHubで常に最新の仕様が公開されていて、ECMAScriptもHTMLなどと同じようなLiving Standardの形になっています。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/" title="ECMAScript® 2017 Language Specification">tc39.github.io/ecma262/</a></li>
</ul>

<p>そのため、ES2015やES2016といったものは基本的にはスナップショット的な仕様となります。
仕様として参照する場合はLiving Standardの方を見るケースが増えてくると思います。
この策定プロセスの変化と早いリリースのベースとなる仕様はES2015で作成されました。</p>

<p>その中でJavaScriptを学ぶ書籍やコンテンツも常にアップデートできる形でないとズレがでてきてしまうことがあります。
それをどうにかしたいのもあり、ES2015以降をベースとしたJavaScriptの入門書を書き始めました。</p>

<p>プログラミングをやったことがあるが、JavaScriptはよくわからないという人が読むと良さそうな本を目指しています。</p>

<p><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書"><img src="http://azu.github.io/slide/2016/node-es/img/js-primer.png" alt="Image"></a></p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a></li>
</ul>

<p>まだ書き始めたばかりであるため、中身が殆どありません。
しかし、書いてる段階から公開することにも意味があると思うので公開しています。</p>

<p>この辺は最初から知っておいた方がいい！というものなどがありましたら、Issueに書いてもらったり、ハッシュタグ<a href="https://twitter.com/intent/tweet?hashtags=jsprimer">#jsprimer</a>をつけてつぶやいてもらうと嬉しいです。</p>

<p>全体としては、基本文法とユースケースの2種類に大きく分けていて、基本文法などを学んでユースケースで実際にJavaScriptで何か書いてみるという流れにしています。
(ECMAScript本というわけではないです)</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer/issues/6" title="[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer">[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer</a></li>
</ul>

<p>話を戻して、ECMAScriptの仕様策定は<a href="https://tc39.github.io/process-document/" title="The TC39 Process">プロセス</a>や<a href="https://github.com/tc39/tc39-notes/">ミーティングの議事録</a>などが公開されています。
これは、透明性を確保するためでもあり、開発者からのフィードバックを得やすい環境を作るためだとも考えられます(GitHubでやっているのもそういう理由があると思います)</p>

<p>そういった策定プロセスのパターンランゲージをAllen Wirfs-Brockさん(ES2015 Editor)が公開しているので読んでみると面白いかもしれません。</p>

<ul>
<li><a href="http://wirfs-brock.com/allen/files/papers/standpats-asianplop2016.pdf">Microsoft Word - standpats-asianplop-final.docx - standpats-asianplop2016.pdf</a></li>
<li>自分のメモ: <a href="https://gist.github.com/azu/47082cbcaf7cc7b2b2f2075afad1b025">プログラミング言語標準化のパターン</a></li>
</ul>

<p>現在のECMAScriptの情報は殆どGitHubで見ることができ、追うときには策定プロセスなどを知っておくと理解がしやすくなると思います。</p>

<p>ECMAScriptのニュースは以下のサイトでやっているので、Proposalの進捗や更新内容などを知りたい人は<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>を見てみてください。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a></li>
</ul>

<p><a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a>では、ECMAScriptを見ていくことは大きなGitHubプロジェクトを見るのとそこまで変わらないよという話をしました。</p>
 ]]></content>
 </entry>
 

</feed>
