<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2018-01-04T22:11:53+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>ECMAScript 2015以降のJavaScriptの`this`を理解する</title>
   <link href="http://efcl.info/2018/01/04/what-is-this/"/>
   <updated>2018-01-04T19:02:00+09:00</updated>
   <id>http://efcl.info/2018/01/04/what-is-this</id>
   <content type="html"><![CDATA[ <p>この記事はJavaScriptの入門書として書いている<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>の<code>this</code>に関する部分をベースにしています。
またjs-primerでは書けなかった現在時点(2018年1月1日)でのブラウザの挙動についてを加えたものです。</p>

<p>次の場所に<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>版のか<code>this</code>についての解説があります。
この記事と違って実際にコードを実行しながら読めるので、学習ソースとしては<a href="https://asciidwango.github.io/js-primer/basic/function-this/">js-primer版</a>を推奨します。</p>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/basic/function-this/" title="関数とthis · JavaScriptの入門書 #jsprimer">関数とthis · JavaScriptの入門書 #jsprimer</a></li>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a></li>
</ul>

<p>また、バグ報告やPRも直接リポジトリにして問題ありません。
おかしい場所を選択した状態で右下にある&quot;Bug Report&quot;ボタンを押せば、簡単にtypoとかのバグを報告できます。(PRでも歓迎)</p>

<p><img src="http://efcl.info/wp-content/uploads/2018/01/04-1515061693.png" alt="バグ報告のフロー"></p>

<p>前置きはこの辺までで、ここから本編。</p>

<h1 id="ecmascript-2015以降のthis">ECMAScript 2015以降の<code>this</code></h1>

<p>この記事では<code>this</code>という特殊な動作をするキーワードについてを見ていきます。
<code>this</code>は基本的にはメソッドの中で利用し、それ以外では利用しません。
しかし、<code>this</code>は読み取り専用のグローバル変数のようなものでどこにでも書くことができます。
また、<code>this</code>の参照先は条件によってさまざまです。</p>

<p><code>this</code>の参照先は主に次の条件によって変化します。</p>

<ul>
<li>実行コンテキストにおける<code>this</code></li>
<li>コンストラクタにおける<code>this</code></li>
<li>関数とメソッドにおける<code>this</code></li>
<li>Arrow Functionにおける<code>this</code></li>
</ul>

<p>もっとも複雑な条件が存在するのは「関数とメソッドにおける<code>this</code>」です。
そのためこの記事では関数と<code>this</code>の関係を主に扱います。
(コンストラクタにおける<code>this</code>はクラスと一緒に学んだ方がいいので省きます。)</p>

<p>この記事では、さまざまな条件下で変わる<code>this</code>の参照先と関数やArrow Functionとの関係を見ていきます。</p>

<h2 id="目標-thisの評価結果を理解する">目標: <code>this</code>の評価結果を理解する</h2>

<p><code>this</code>はさまざまな条件でその評価結果(参照先)は異なります。
基本的な関数やメソッドについては次のようなパターンが考えられます。</p>

<p>この記事では<code>???</code>となっている<code>this</code>の評価結果がなぜそうなるのかを理解できることを目標にします。</p>

<p><img src="http://efcl.info/wp-content/uploads/2018/01/04-1515062180.png" alt="`this`の評価結果の穴埋め"></p>

<ul>
<li><code>＊</code>はどの場合でも結果に影響しないということを示すワイルドカード</li>
<li>関数は<code>fn()</code>と実行した場合の<code>this</code>の評価結果、メソッドは<code>obj.method()</code>と実行した場合の<code>this</code>の評価結果</li>
</ul>

<p>表の結果がすべてわかっている人にはこの記事は不要だと思います。</p>

<ul>
<li><a href="https://gist.github.com/azu/ca9d5a0f4b7c137bc5e2453f8783bf8c">Gist: 穴埋め用の<code>this</code>表</a></li>
</ul>

<p>記事の最後に答え合わせ用の表を置いています。</p>

<h2 id="実行コンテキストとthis">実行コンテキストと<code>this</code></h2>

<p>JavaScriptには実行コンテキストとして&quot;Script&quot;と&quot;Module&quot;があります。
トップレベルにある<code>this</code>は、実行コンテキストによって値が異なります。
実行コンテキストの違いは意識しにくい部分であり、トップレベルで<code>this</code>を使うことは混乱を生むことになります。
そのため、コードのトップレベルにおいては<code>this</code>を使うべきではありませんが、それぞれの実行コンテキストにおける動作を紹介します。</p>

<h3 id="スクリプトにおけるthis">スクリプトにおける<code>this</code></h3>

<p>実行コンテキストが&quot;Script&quot;である場合、そのコード直下に書かれた<code>this</code>はグローバルオブジェクトを参照します。
グローバルオブジェクトとは、実行環境において異なるものが定義されています。
ブラウザなら<code>window</code>オブジェクト、Node.jsなら<code>global</code>オブジェクトとなります。</p>

<p>ブラウザでは、<code>script</code>要素の<code>type</code>属性を指定してない場合は実行コンテキストが&quot;Script&quot;として実行されます。
この<code>script</code>要素の直下に書いた<code>this</code>はグローバルオブジェクトである<code>window</code>オブジェクトとなります。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span>
<span class="c1">// 実行コンテキストは&quot;Script&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// =&gt; window</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<h3 id="モジュールにおけるthis">モジュールにおける<code>this</code></h3>

<p>実行コンテキストが&quot;Module&quot;である場合、そのコード直下に書かれた<code>this</code>は常に<code>undefined</code>となります。</p>

<p>ブラウザでは、<code>script</code>要素の<code>type=&quot;module&quot;</code>属性がついた場合は実行コンテキストが&quot;Module&quot;として実行されます。
この<code>script</code>要素の直下に書いた<code>this</code>は<code>undefined</code>となります。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;module&quot;</span><span class="nt">&gt;</span>
<span class="c1">// 実行コンテキストは&quot;Module&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>このように、コード直下の<code>this</code>は実行コンテキストによって<code>undefined</code>となる場合があります。
単純にグローバルオブジェクトを参照したい場合は、<code>this</code>ではなく<code>window</code>などのグローバルオブジェクトを直接参照した方がよいです。</p>

<h4 id="memo-note">:memo: Note</h4>

<p>なぜModuleコンテキストではトップレベルの<code>this</code>が<code>undefined</code>となるかは次の記事で解説しています。</p>

<ul>
<li><a href="http://efcl.info/2015/05/06/this-is-es6-module/" title="ES6 moduleのtop levelにある`this`の値は何になるのか? | Web Scratch">ES6 moduleのtop levelにある<code>this</code>の値は何になるのか? | Web Scratch</a></li>
</ul>

<p>また現時点では環境へ依存せずにグローバルオブジェクトを取得するのはややこしい方法が必要です。
しかし、現在(2018-01-01) Stage 3のProposalである<code>global</code>が将来的には利用できます。</p>

<ul>
<li><a href="https://github.com/tc39/proposal-global" title="tc39/proposal-global: ECMAScript Proposal, specs, and reference implementation for `global`">tc39/proposal-global: ECMAScript Proposal, specs, and reference implementation for <code>global</code></a></li>
</ul>

<h2 id="関数とメソッドにおけるthis">関数とメソッドにおける<code>this</code></h2>

<p><strong>関数</strong>を定義する方法として、<code>function</code>キーワードによる関数宣言と関数式、Arrow Functionなどがあります。
<code>this</code>が参照先を決めるルールはArrow Functionとそれ以外の方法で異なります。</p>

<p>まずは<strong>Arrow Function以外</strong>の関数やメソッドにおける<code>this</code>を見ていきます。</p>

<h2 id="arrow-function以外の関数におけるthis">Arrow Function以外の関数における<code>this</code></h2>

<p>Arrow Function以外の関数（メソッドも含む)における<code>this</code>は実行時に決まる値となります。
言い方をかえると<code>this</code>は関数に渡される暗黙的な引数のようなもので、その渡される値は関数を実行する時に決まります。</p>

<p>次のコードは擬似的なものです。
関数の中に書かれた<code>this</code>は、関数の呼び出し元から暗黙的に渡される値を参照することになります。
このルールはArrow Function以外の関数やメソッドで共通した仕組みとなります。Arrow Functionで定義した関数やメソッドはこのルールとは別の仕組みとなります。</p>

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 擬似的な`this`の値の仕組み</span>
<span class="c1">// 関数は引数として暗黙的に`this`の値を受け取るイメージ</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="err">暗黙的渡される</span><span class="k">this</span><span class="err">の値</span><span class="p">,</span> <span class="err">仮引数</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// =&gt; 暗黙的渡されるthisの値</span>
<span class="p">}</span>
<span class="c1">// 暗黙的に`this`の値を引数として渡しているイメージ</span>
<span class="nx">fn</span><span class="p">(</span><span class="err">暗黙的に渡す</span><span class="k">this</span><span class="err">の値</span><span class="p">,</span> <span class="err">引数</span><span class="p">);</span>
</code></pre></div>
<!-- textlint-disable no-js-function-paren -->

<p>関数における<code>this</code>の基本的な参照先（暗黙的に関数に渡す<code>this</code>の値）は<strong>ベースオブジェクト</strong>となります。
ベースオブジェクトとは「メソッドを呼ぶ際に、そのメソッドのドット演算子またはブラケット演算子のひとつ左にあるオブジェクト」のことを言います。
ベースオブジェクトがない場合の<code>this</code>は<code>undefined</code>となります。</p>

<p>たとえば、<code>fn()</code>のように関数を呼び出したとき、この<code>fn</code>関数呼び出しのベースオブジェクトはないため、<code>this</code>は<code>undefiend</code>となります。
一方、<code>obj.method()</code>のようにメソッドを呼び出したとき、この<code>obj.method</code>メソッド呼び出しのベースオブジェクトは<code>obj</code>オブジェクトとなり、<code>this</code>は<code>obj</code>となります。</p>

<!-- textlint-enable no-js-function-paren -->

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// `fn`関数はメソッドではないのでベースオブジェクトはない</span>
<span class="nx">fn</span><span class="p">();</span>
<span class="c1">// `obj.method`メソッドのベースオブジェクトは`obj`</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">method</span><span class="p">();</span>
<span class="c1">// `obj1.obj2.method`メソッドのベースオブジェクトは`obj2`</span>
<span class="c1">// ドット演算子、ブラケット演算子どちらも結果は同じ</span>
<span class="nx">obj1</span><span class="p">.</span><span class="nx">obj2</span><span class="p">.</span><span class="nx">method</span><span class="p">();</span>
<span class="nx">obj1</span><span class="p">[</span><span class="s2">&quot;obj2&quot;</span><span class="p">][</span><span class="s2">&quot;method&quot;</span><span class="p">]();</span>
</code></pre></div>
<p><code>this</code>は関数の定義ではなく呼び出し方で参照する値が異なります。これは、後述する「<code>this</code>が問題となるパターン」で詳しく紹介します。
Arrow Function以外の関数では、関数の定義だけを見て<code>this</code>の値が何かということは決定できない点には注意が必要です。</p>

<h3 id="関数宣言や関数式におけるthis">関数宣言や関数式における<code>this</code></h3>

<p>まずは、関数宣言や関数式の場合を見ていきます。</p>

<p>次の例では、関数宣言と関数式で定義した関数の中の<code>this</code>をコンソールに出力しています。
このとき、<code>fn1</code>と<code>fn2</code>はただの関数として呼び出されています。
つまり、ベースオブジェクトがないため<code>this</code>は<code>undefined</code>となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">fn1</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 関数の中の`this`が参照する値は呼び出し方によって決まる</span>
<span class="c1">// `fn1`と`fn2`どちらもただの関数として呼び出している</span>
<span class="c1">// メソッドとして呼び出していないためベースオブジェクトはない</span>
<span class="c1">// ベースオブジェクトがない場合、`this`は`undefined`となる</span>
<span class="nx">fn1</span><span class="p">();</span> <span class="c1">// =&gt; undefined</span>
<span class="nx">fn2</span><span class="p">();</span> <span class="c1">// =&gt; undefined</span>
</code></pre></div>
<p>これは、関数の中に関数を定義して呼びだす場合も同じです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
    <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// =&gt; undefined</span>
    <span class="p">}</span>
    <span class="c1">// `inner`関数呼び出しのベースオブジェクトはない</span>
    <span class="nx">inner</span><span class="p">();</span>
<span class="p">}</span>
<span class="c1">// `outer`関数呼び出しのベースオブジェクトはない</span>
<span class="nx">outer</span><span class="p">();</span>
</code></pre></div>
<p>この書籍では注釈がないコードはstrict modeとして扱いますが、コード例に<code>&quot;use strict&quot;;</code>でstrict modeを明示しています。
なぜなら、strict modeではない場合に<code>this</code>が<code>undefined</code>の場合は、<code>this</code>がグローバルオブジェクトへと暗黙的に変換されてしまう問題があるからです。
strict modeかどうかによって挙動が異なるのは混乱の元であるため、関数呼び出しする関数においては<code>this</code>を使うべきではありません。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Strict_mode" title="Strict モード - JavaScript | MDN">Strict モード - JavaScript | MDN</a></li>
</ul>

<h3 id="メソッド呼び出しにおけるthis">メソッド呼び出しにおける<code>this</code></h3>

<p>次に、メソッドの場合を見ていきます。
メソッドの場合は、そのメソッドは何かしらのオブジェクトに所属しています。
なぜなら、JavaScriptではオブジェクトのプロパティとして指定される関数のことをメソッドと呼ぶためです。</p>

<p>次の例では<code>method1</code>と<code>method2</code>はそれぞれメソッドとして呼び出されています。
このとき、それぞれのベースオブジェクトは<code>object</code>となり、<code>this</code>は<code>object</code>となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 関数式をプロパティの値にしたメソッド</span>
    <span class="nx">method1</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="c1">// 短縮記法で定義したメソッド</span>
    <span class="nx">method2</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// メソッド呼び出しの場合、それぞれの`this`はベースオブジェクト(`object`)を参照する</span>
<span class="c1">// メソッド呼び出しの`.`の左にあるオブジェクトがベースオブジェクト</span>
<span class="nx">object</span><span class="p">.</span><span class="nx">method1</span><span class="p">();</span> <span class="c1">// =&gt; object</span>
<span class="nx">object</span><span class="p">.</span><span class="nx">method2</span><span class="p">();</span> <span class="c1">// =&gt; object</span>
</code></pre></div>
<p>これを利用すれば、メソッドの中から同じオブジェクトに所属する別のプロパティを<code>this</code>で参照できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span><span class="p">,</span>
    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// `person.fullName`と書いているのと同じ</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `person.fullName`を出力する</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">sayName</span><span class="p">());</span> <span class="c1">// =&gt; &quot;Brendan Eich&quot;</span>
</code></pre></div>
<p>このようにメソッドが所属するオブジェクトのプロパティを、<code>オブジェクト名.プロパティ名</code>の代わりに<code>this.プロパティ名</code>で参照できます。</p>

<p>オブジェクトは何重にもネストできますが、<code>this</code>はベースオブジェクトを参照するというルールは同じです。</p>

<p>次のコードを見てみると、ネストしたオブジェクトにおいてメソッド内の<code>this</code>がベースオブジェクトである<code>obj3</code>を参照していることが分かります。
このときのベースオブジェクトはドットで繋いだ一番左の<code>obj1</code>ではなく、メソッドから見てひとつ左の<code>obj3</code>となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">obj2</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">obj3</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">method</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `obj1.obj2.obj3.method`メソッドの`this`は`obj3`を参照</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">.</span><span class="nx">obj2</span><span class="p">.</span><span class="nx">obj3</span><span class="p">.</span><span class="nx">method</span><span class="p">()</span> <span class="o">===</span> <span class="nx">obj1</span><span class="p">.</span><span class="nx">obj2</span><span class="p">.</span><span class="nx">obj3</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<h2 id="thisが問題となるパターン"><code>this</code>が問題となるパターン</h2>

<p><code>this</code>はその関数（メソッドも含む）呼び出しのベースオブジェクトを参照することがわかりました。
<code>this</code>は所属するオブジェクトを直接書く代わりとして利用できますが、一方<code>this</code>には色々な問題があります。</p>

<p>この問題の原因は<code>this</code>がどの値を参照するかは関数の呼び出し時に決まるという性質に由来します。
この<code>this</code>の性質が問題となるパターンの代表的な2つの例とそれぞれの対策についてを見ていきます。</p>

<h3 id="問題-thisを含むメソッドを変数に代入した場合">問題: <code>this</code>を含むメソッドを変数に代入した場合</h3>

<p>JavaScriptではメソッドとして定義したものが、後からただの関数として呼び出されることがあります。
なぜなら、メソッドは関数を値にもつプロパティのことで、プロパティは変数に代入し直すことができるためです。</p>

<p>そのため、メソッドとして定義した関数も、別の変数に代入してただの関数として呼び出されることがあります。
この場合には、メソッドとして定義した関数であっても、実行時にはただの関数であるためベースオブジェクトが変わっています。
これは<code>this</code>が定義した時点ではなく実行した時に決まるという性質そのものです。</p>

<p>具体的に、<code>this</code>が実行時に変わる例を見ていましょう。
次の例では、<code>person.sayName</code>メソッドを変数<code>say</code>に代入してから実行しています。
このときの<code>say</code>関数(<code>sayName</code>メソッドを参照)のベースオブジェクトはありません。
そのため、<code>this</code>は<code>undefined</code>となり、<code>undefined.fullName</code>は参照できずに例外をなげます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span><span class="p">,</span>
    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// `this`は呼び出し元によってことなる</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `sayName`メソッドは`person`オブジェクトに所属する</span>
<span class="c1">// `this`は`person`オブジェクトとなる</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span> <span class="c1">// =&gt; &quot;Brendan Eich&quot;</span>
<span class="c1">// `person.sayName`を`say`変数に代入する</span>
<span class="kr">const</span> <span class="nx">say</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">sayName</span><span class="p">;</span>
<span class="c1">// 代入したメソッドを関数として呼ぶ</span>
<span class="c1">// この`say`関数はどのオブジェクトにも所属していない</span>
<span class="c1">// `this`はundefinedとなるため例外を投げる</span>
<span class="nx">say</span><span class="p">();</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;fullName&#39; of undefined</span>
</code></pre></div>
<p>結果的には、次のようなコードが実行されているのと同じです。
次のコードでは、<code>undefined.fullName</code>を参照しようとして例外が発生しています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// const sayName = person.sayName; は次のようなイメージ</span>
<span class="kr">const</span> <span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// `this`は`undefined`となるため例外をなげる</span>
<span class="nx">say</span><span class="p">();</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;fullName&#39; of undefined</span>
</code></pre></div>
<p>このように、Arrow Function以外の関数において、<code>this</code>は定義した時ではなく実行した時に決定されます。
そのため、関数に<code>this</code>を含んでいる場合、その関数は意図した呼ばれ方がされないと間違った結果が発生するという問題があります。</p>

<p>この問題の対処法法としては大きく分けて2つあります。</p>

<p>ひとつはメソッドとして定義されている関数はメソッドとして呼ぶということです。
メソッドをわざわざただの関数として呼ばなければそもそもこの問題は発生しません。</p>

<p>もうひとつは、<code>this</code>の値を指定して関数を呼べるメソッドで関数を実行する方法です。</p>

<h3 id="対処法-call、apply、bindメソッド">対処法: call、apply、bindメソッド</h3>

<p>関数やメソッドの<code>this</code>を明示的に指定して関数を実行する方法もあります。
<code>Function</code>（関数オブジェクト）には<code>call</code>、<code>apply</code>、<code>bind</code>といった明示的に<code>this</code>を指定して関数を実行するメソッドが用意されています。</p>

<p><code>call</code>メソッドは第一引数に<code>this</code>としたい値を指定し、残りの引数は呼びだす関数の引数となります。
暗黙的に渡される<code>this</code>の値を明示的に渡せるメソッドといえます。</p>

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="err">関数</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="err">の値</span><span class="p">,</span> <span class="p">...</span><span class="err">関数の引数</span><span class="p">);</span>
</code></pre></div>
<p>次の例では<code>this</code>に<code>person</code>オブジェクトを指定した状態で<code>say</code>関数を呼び出しています。
<code>call</code>メソッドの第二引数で指定した値が、<code>say</code>関数の仮引数<code>message</code>に入ります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="err">！`</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span>
<span class="p">};</span>
<span class="c1">// `this`を`person`にして`say`関数を呼びだす</span>
<span class="nx">say</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span> <span class="c1">// =&gt; &quot;こんにちは Brendan Eich！&quot;</span>
<span class="c1">// `say`関数をそのまま呼び出すと`this`は`undefined`となるため例外が発生</span>
<span class="nx">say</span><span class="p">(</span><span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;fullName&#39; of undefined</span>
</code></pre></div>
<p><code>apply</code>メソッドは第一引数に<code>this</code>とする値を指定し、第二引数に関数の引数を配列として渡します。</p>

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="err">関数</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="err">の値</span><span class="p">,</span> <span class="p">[</span><span class="err">関数の引数</span><span class="mi">1</span><span class="p">,</span> <span class="err">関数の引数</span><span class="mi">2</span><span class="p">]);</span>
</code></pre></div>
<p>次の例では<code>this</code>に<code>person</code>オブジェクトを指定した状態で<code>say</code>関数を呼び出しています。
<code>apply</code>メソッドの第二引数で指定した配列は、自動的に展開されて<code>say</code>関数の仮引数<code>message</code>に入ります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="err">！`</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span>
<span class="p">};</span>
<span class="c1">// `this`を`person`にして`say`関数を呼びだす</span>
<span class="c1">// callとは異なり引数を配列として渡す</span>
<span class="nx">say</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;こんにちは&quot;</span><span class="p">]);</span> <span class="c1">// =&gt; &quot;こんにちは Brendan Eich！&quot;</span>
<span class="c1">// `say`関数をそのまま呼び出すと`this`は`undefined`となるため例外が発生</span>
<span class="nx">say</span><span class="p">(</span><span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;fullName&#39; of undefined</span>
</code></pre></div>
<p><code>call</code>メソッドと<code>apply</code>メソッドの違いは、関数の引数への値の渡し方が異なるだけです。
また、どちらのメソッドも<code>this</code>の値が不要な場合は<code>null</code>を渡すのが一般的です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// `this`は不要な場合はnullを渡す</span>
<span class="nx">add</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// =&gt; 3</span>
<span class="nx">add</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span> <span class="c1">// =&gt; 3</span>
</code></pre></div>
<p>最後に<code>bind</code>メソッドについてです。
名前のとおり<code>this</code>の値を束縛（bind）した新しい関数を作成します。</p>

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="err">関数</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="err">の値</span><span class="p">,</span> <span class="p">...</span><span class="err">関数の引数</span><span class="p">);</span> <span class="c1">// =&gt; thisや引数がbindされた関数</span>
</code></pre></div>
<p>次の例では<code>this</code>を<code>person</code>オブジェクトに束縛した<code>say</code>関数の関数を作っています。
<code>bind</code>メソッドの第二引数以降に値を渡すことで、束縛した関数の引数も束縛できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="err">！`</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span>
<span class="p">};</span>
<span class="c1">// `this`を`person`に束縛した`say`関数をラップした関数を作る</span>
<span class="kr">const</span> <span class="nx">sayPerson</span> <span class="o">=</span> <span class="nx">say</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span>
<span class="nx">sayPerson</span><span class="p">();</span> <span class="c1">// =&gt; &quot;こんにちは Brendan Eich！&quot;</span>
</code></pre></div>
<p>この<code>bind</code>メソッドをただの関数で表現すると次のように書けます。
<code>bind</code>は<code>this</code>や引数を束縛した関数を作るメソッドということがわかります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="err">！`</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">fullName</span><span class="o">:</span> <span class="s2">&quot;Brendan Eich&quot;</span>
<span class="p">};</span>
<span class="c1">// `this`を`person`に束縛した`say`関数をラップした関数を作る</span>
<span class="c1">//  say.bind(person, &quot;こんにちは&quot;); は次のようなラップ関数を作る</span>
<span class="kr">const</span> <span class="nx">sayPerson</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">say</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">sayPerson</span><span class="p">();</span> <span class="c1">// =&gt; &quot;こんにちは Brendan Eich！&quot;</span>
</code></pre></div>
<p>このように<code>call</code>、<code>apply</code>、<code>bind</code>メソッドを使うことで<code>this</code>を明示的に指定した状態で関数を呼び出せます。
しかし、毎回関数を呼びだすたびにこれらのメソッドを使うのは、関数を呼びだすための関数が必要になってしまい手間がかかります。
そのため、基本的には「メソッドとして定義されている関数はメソッドとして呼ぶこと」でこの問題を回避するほうがよいでしょう。
その中で、どうしても<code>this</code>を固定したい場合には<code>call</code>、<code>apply</code>、<code>bind</code>メソッドを利用します。</p>

<h3 id="問題-コールバック関数とthis">問題: コールバック関数と<code>this</code></h3>

<p>コールバック関数の中で<code>this</code>を参照すると問題となる場合があります。
この問題は、メソッドの中で<code>Array#map</code>メソッドなどコールバック関数を扱う場合に発生しやすいです。</p>

<p>具体的に、コールバック関数における<code>this</code>が問題となっている例を見てみましょう。
次のコードでは<code>prefixArray</code>メソッドの中で<code>Array#map</code>メソッドを使っています。
このとき、<code>Array#map</code>メソッドのコールバック関数の中で、<code>Prefixer</code>オブジェクトを参照するつもりで<code>this</code>を参照しています。</p>

<p>しかし、このコールバック関数における<code>this</code>は<code>undefined</code>となり、<code>this.prefix</code>は<code>undefined.prefix</code>であるためTypeErrorとなります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * `strings`配列の各要素にprefixをつける</span>
<span class="cm">     */</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// コールバック関数における`this`は`undefined`となる(strict mode)</span>
            <span class="c1">// そのため`this.prefix`は`undefined.prefix`となり例外が発生する</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `prefixArray`メソッドにおける`this`は`Prefixer`</span>
<span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;prefix&#39; of undefined</span>
</code></pre></div>
<p>なぜコールバック関数の中での<code>this</code>が<code>undefined</code>となるのかを見ていきます。
<code>Array#map</code>メソッドにはコールバック関数として、その場で定義した匿名関数を渡していることに注目してください。</p>

<!-- textlint-disable eslint -->

<!-- doctest:disable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// ...</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 匿名関数をコールバック関数として渡している</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="c1">// ...</span>
</code></pre></div>
<!-- textlint-enable eslint -->

<!-- textlint-disable no-js-function-paren -->

<p>このとき、<code>Array#map</code>メソッドに渡しているコールバック関数は<code>callback()</code>のようにただの関数として呼び出されます。
つまり、コールバック関数として呼びだすとき、この関数にはベースオブジェクトはありません。
そのため<code>callback</code>関数の<code>this</code>は<code>undefined</code>となります。</p>

<p>先ほどの匿名関数をコールバック関数として渡しているのは、一度<code>callback</code>変数に入れてから渡しても結果は同じです。</p>

<!-- textlint-enable no-js-function-paren -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * `strings`配列の各要素にprefixをつける</span>
<span class="cm">     */</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// コールバック関数は`callback()`のように呼び出される</span>
        <span class="c1">// そのためコールバック関数における`this`は`undefined`となる(strict mode)</span>
        <span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `prefixArray`メソッドにおける`this`は`Prefixer`</span>
<span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span> <span class="c1">// =&gt; TypeError: Cannot read property &#39;prefix&#39; of undefined</span>
</code></pre></div>
<h4 id="対処法-thisを一時変数へ代入する">対処法: <code>this</code>を一時変数へ代入する</h4>

<p>コールバック関数内での<code>this</code>の参照先が変わる問題への対処法として、<code>this</code>を別の変数に代入し、その<code>this</code>の参照先を保持するという方法があります。</p>

<p><code>this</code>は関数の呼び出し元で変化し、その参照先は呼び出し元におけるベースオブジェクトです。
<code>prefixArray</code>メソッドの呼び出しにおいては、<code>this</code>は<code>Prefixer</code>オブジェクトです。
しかし、コールバック関数はあらためて関数として呼び出されるため<code>this</code>が<code>undefined</code>となってしまうのが問題でした。</p>

<p>そのため、最初の<code>prefixArray</code>メソッド呼び出しにおける<code>this</code>の参照先を一時変数として保存することでこの問題を回避できます。
つぎのように、<code>prefixArray</code>メソッドの<code>this</code>を<code>that</code>変数に保持しています。
コールバック関数からは<code>this</code>の代わりに<code>that</code>変数を参照することで、コールバック関数からも<code>prefixArray</code>メソッド呼び出しと同じ<code>this</code>を参照できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * `strings`配列の各要素にprefixをつける</span>
<span class="cm">     */</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// `that`は`prefixArray`メソッド呼び出しにおける`this`となる</span>
        <span class="c1">// つまり`that`は`Prefixer`オブジェクトを参照する</span>
        <span class="kr">const</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// `this`ではなく`that`を参照する</span>
            <span class="k">return</span> <span class="nx">that</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `prefixArray`メソッドにおける`this`は`Prefixer`</span>
<span class="kr">const</span> <span class="nx">prefixedStrings</span> <span class="o">=</span> <span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prefixedStrings</span><span class="p">);</span> <span class="c1">// =&gt; [&quot;pre-a&quot;, &quot;pre-b&quot;, &quot;pre-c&quot;]</span>
</code></pre></div>
<p>もちろん<code>Function#call</code>メソッドなどで明示的に<code>this</code>を渡して関数を呼びだすこともできます。
また、<code>Arry#map</code>メソッドなどは<code>this</code>となる値引数として渡せる仕組みを持っています。
そのため、つぎのように第二引数に<code>this</code>となる値を渡すことでも解決できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * `strings`配列の各要素にprefixをつける</span>
<span class="cm">     */</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// `Array#map`メソッドは第二引数に`this`となる値を渡せる</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// `this`が第二引数の値と同じになる</span>
            <span class="c1">// つまり`prefixArray`メソッドと同じ`this`となる</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// `prefixArray`メソッドにおける`this`は`Prefixer`</span>
<span class="kr">const</span> <span class="nx">prefixedStrings</span> <span class="o">=</span> <span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prefixedStrings</span><span class="p">);</span> <span class="c1">// =&gt; [&quot;pre-a&quot;, &quot;pre-b&quot;, &quot;pre-c&quot;]</span>
</code></pre></div>
<p>しかし、これら解決方法はコールバック関数において<code>this</code>が変わることを意識して書く必要があります。
そもそもの問題としてメソッド呼び出しとその中でのコールバック関数における<code>this</code>が変わってしまうのが問題でした。
ES2015では<code>this</code>を変えずにコールバック関数を定義する方法として、Arrow Functionが導入されました。</p>

<h3 id="対処法-arrow-functionでコールバック関数を扱う">対処法: Arrow Functionでコールバック関数を扱う</h3>

<p>通常の関数やメソッドは呼び出し時に暗黙的に<code>this</code>の値を受け取り、関数内の<code>this</code>はその値を参照します。
一方、Arrow Functionはこの暗黙的な<code>this</code>の値を受け取りません。
そのためArrow Function内の<code>this</code>は、スコープチェーンの仕組みと同様で外側の関数(この場合は<code>prefixArray</code>メソッド)に探索します。
これにより、Arrow Functionで定義したコールバック関数は呼び出し方には関係なく、常に外側の関数の<code>this</code>をそのまま利用します。</p>

<p>Arrow Functionを使うことで、先ほどのコードは次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// Arrow Function自体は`this`を持たない</span>
            <span class="c1">// `this`は外側の`prefixArray`関数がもつ`this`を参照する</span>
            <span class="c1">// そのため`this.prefix`は&quot;pre&quot;となる</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// この時、`prefixArray`のベースオブジェクトは`Prefixer`となる</span>
<span class="c1">// つまり、`prefixArray`メソッド内の`this`は`Prefixer`を参照する</span>
<span class="kr">const</span> <span class="nx">prefixedStrings</span> <span class="o">=</span> <span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prefixedStrings</span><span class="p">);</span> <span class="c1">// =&gt; [&quot;pre-a&quot;, &quot;pre-b&quot;, &quot;pre-c&quot;]</span>
</code></pre></div>
<p>このように、Arrow Functionでのコールバック関数における<code>this</code>は簡潔です。
そのため、コールバック関数内での<code>this</code>の対処法として<code>this</code>を代入する方法を紹介しましたが、
ES2015からはArrow Functionを使うのがもっとも簡潔です。</p>

<p>このArrow Functionと<code>this</code>の関係についてもっと詳しく見ていきます。</p>

<h2 id="arrow-functionとthis">Arrow Functionと<code>this</code></h2>

<p>Arrow Functionで定義された関数やメソッドにおける<code>this</code>がどの値を参照するかは関数の定義時（静的）に決まります。
一方、Arrow Functionではない関数においては、<code>this</code>は呼び出し元に依存するため関数の実行時（動的）に決まります。</p>

<p>Arrow Functionとそれ以外の関数で大きく違うことは、Arrow Functionは<code>this</code>を暗黙的な引数として受け付けないということです。
そのため、Arrow Function内には<code>this</code>が定義されていません。このときの<code>this</code>は外側のスコープ（関数）の<code>this</code>を参照します。</p>

<p>なぜなら、スコープチェーンの性質として、そのスコープに同じ名前の変数が定義されていない場合には外側のスコープを探索するためです。
そのため、Arrow Function内の<code>this</code>の参照先は、常に外側のスコープ（関数）へと探索しに行きます（詳細は<a href="../function-scope/README.md##scope-chain%7D">スコープチェーン</a>を参照）。
また、<code>this</code>は読み取り専用のキーワードであるため、ユーザーが<code>this</code>という変数を定義できません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="k">this</span> <span class="o">=</span> <span class="s2">&quot;thisは読み取り専用&quot;</span><span class="p">;</span> <span class="c1">// =&gt; SyntaxError: Unexpected token this</span>
</code></pre></div>
<p>これにより、Arrow Functionにおける<code>this</code>は通常の変数と同じように、どの値を参照するかは静的に決まるという性質があります（詳細は<a href="../function-scope/README.md#static-scope">静的スコープ</a>を参照）。
つまりArrow Functionにおける<code>this</code>の参照先は「Arrow Function自身の外側のスコープにあるもっとも近い関数の<code>this</code>の値」となります。</p>

<p>具体的な例を元にArrow Functionにおける<code>this</code>の動きを見ていきましょう。</p>

<p>まずは、関数式のArrow Functionを見ていきます。</p>

<p>次の例では、関数式で定義したArrow Functionの中の<code>this</code>をコンソールに出力しています。
このとき、<code>fn</code>の外側には関数はないため、「自身より外側のスコープにあるもっとも近い関数」の条件にあてはまるものはありません。
このときの<code>this</code>はトップレベルに書かれた<code>this</code>と同じ値になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Arrow Functionで定義した関数</span>
<span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// この関数の外側には関数は存在しない</span>
    <span class="c1">// トップレベルの`this`と同じ値</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">fn</span><span class="p">()</span> <span class="o">===</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>トップレベルに書かれた<code>this</code>の値は実行コンテキストによって異なることを紹介しました。
<code>this</code>の値は、実行コンテキストが&quot;Script&quot;ならばグローバルオブジェクトとなり、&quot;Module&quot;ならば<code>undefined</code>となります。</p>

<p>次の例のように、Arrow Functionを包むように通常の関数が定義されている場合はどうでしょうか。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrow Functionで定義した関数を返す</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// この関数の外側には`outer`関数が存在する</span>
        <span class="c1">// `outer`関数に`this`を書いた場合と同じ</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>
<span class="c1">// `outer`関数の返り値はArrow Functionにて定義された関数</span>
<span class="kr">const</span> <span class="nx">innerArrowFunction</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">innerArrowFunction</span><span class="p">());</span> <span class="c1">// =&gt; undefined;</span>
</code></pre></div>
<p>Arrow Functionにおける<code>this</code>は「自身の外側のスコープにあるもっとも近い関数の<code>this</code>の値」となります。
つまり、このArrow Functionにおける<code>this</code>は<code>outer</code>関数で<code>this</code>を参照した場合と同じ値になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// `outer`関数直下の`this`</span>
    <span class="kr">const</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="c1">// Arrow Functionで定義した関数を返す</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// Arrow Function自身は`this`を持たない</span>
        <span class="c1">// `outer`関数に`this`を書いた場合と同じ</span>
        <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>
<span class="c1">// `outer()`と呼び出した時の`this`は`undefined`(strict mode)</span>
<span class="kr">const</span> <span class="nx">innerArrowFunction</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">innerArrowFunction</span><span class="p">());</span> <span class="c1">// =&gt; undefined;</span>
</code></pre></div>
<h3 id="メソッドとコールバック関数とarrow-function">メソッドとコールバック関数とArrow Function</h3>

<p>メソッド内におけるコールバック関数はArrow Functionをもっと活用できるパターンです。
<code>function</code>キーワードでコールバック関数を定義すると、<code>this</code>の値はコールバック関数の呼ばれ方を意識する必要があります。
なぜなら、<code>function</code>キーワードで定義した関数における<code>this</code>は呼び出し方によって変わるためです。</p>

<p>コールバック関数側から見ると、どのように呼ばれるかによって変わる<code>this</code>を使うことはエラーとなる場合もあるため使えません。
そのため、コールバック関数の外側のスコープで<code>this</code>を一時変数に代入し、それを使うという回避を取っていました。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// `callback`関数を受け取り呼び出す関数</span>
<span class="kr">const</span> <span class="nx">callCallback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// `callback`を呼び出す実装</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">method</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">callCallback</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// ここでの `this` は`callCallback`の実装に依存する</span>
            <span class="c1">// `callback()`のように単純に呼び出されるなら`this`は`undefined`になる</span>
            <span class="c1">// `Function#call`などを使い特定のオブジェクトを指定するかもしれない</span>
            <span class="c1">// この問題を回避するために`const that = this`のような一時変数を使う</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>
<p>一方、Arrow Functionでコールバック関数を定義した場合は、1つ外側の関数の<code>this</code>を参照します。
このときのArrow Functionで定義したコールバック関数における<code>this</code>は呼び出し方によって変化しません。
そのため、<code>this</code>を一時変数に代入するなどの回避方法は必要ありません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// `callback`関数を受け取り呼び出す関数</span>
<span class="kr">const</span> <span class="nx">callCallback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// `callback`を呼び出す実装</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">method</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">callCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// ここでの`this`は1つ外側の関数における`this`と同じ</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>
<p>このArrow Functionにおける<code>this</code>は呼び出し方の影響を受けません。
つまり、コールバック関数がどのように呼ばれるかという実装についてを考えることなく<code>this</code>を扱うことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Prefixer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">prefix</span><span class="o">:</span> <span class="s2">&quot;pre&quot;</span><span class="p">,</span>
    <span class="nx">prefixArray</span><span class="p">(</span><span class="nx">strings</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// `Prefixer.prefixArray()` と呼び出されたとき</span>
            <span class="c1">// `this`は常に`Prefixer`を参照する</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kr">const</span> <span class="nx">prefixedStrings</span> <span class="o">=</span> <span class="nx">Prefixer</span><span class="p">.</span><span class="nx">prefixArray</span><span class="p">([</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prefixedStrings</span><span class="p">);</span> <span class="c1">// =&gt; [&quot;pre-a&quot;, &quot;pre-b&quot;, &quot;pre-c&quot;]</span>
</code></pre></div>
<h3 id="arrow-functionはthisをbindできない">Arrow Functionは<code>this</code>をbindできない</h3>

<p>Arrow Functionで定義した関数には<code>call</code>、<code>apply</code>、<code>bind</code>を使った<code>this</code>の指定は単に無視されます。
これは、Arrow Functionは<code>this</code>をもつことができないためです。</p>

<p>次のようにArrow Functionで定義した関数に対して<code>call</code>で<code>this</code>をしても、<code>this</code>の参照先が代わっていないことが分かります。
同様に<code>apply</code>や<code>bind</code>メソッドを使った場合も<code>this</code>の参照先が変わりません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// Scriptコンテキストの場合、スクリプト直下のArrow Functionの`this`はグローバルオブジェクト</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fn</span><span class="p">());</span> <span class="c1">// グローバルオブジェクト</span>
<span class="c1">// callで`this`を`{}`にしようとしても、`this`は変わらない</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">({});</span> <span class="c1">// グローバルオブジェクト</span>
</code></pre></div>
<p>最初に述べたよう<code>function</code>キーワードで定義した関数は呼び出し時に、ベースオブジェクトが暗黙的な引数のように<code>this</code>の値として渡されます。
一方、Arrow Functionの関数は呼び出し時に<code>this</code>を受け取らずに、定義時のArrow Functionにおける<code>this</code>の参照先が静的に決定されます。</p>

<!-- textlint-disable -->

<p>また、<code>this</code>が変わらないのはあくまでArrow Functionで定義した関数だけで、Arrow Functionの<code>this</code>が参照する「自身の外側のスコープにあるもっとも近い関数の<code>this</code>の値」は<code>call</code>メソッドで変更できます。</p>

<!-- textlint-enable -->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">method</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">arrowFunction</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">arrowFunction</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// 通常の`this`は`object.method`の`this`と同じ</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">method</span><span class="p">());</span> <span class="c1">// =&gt; object</span>
<span class="c1">// `object.method`の`this`を変更すれば、Arrow Functionの`this`も変更される</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">method</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">&quot;THAT&quot;</span><span class="p">));</span> <span class="c1">// =&gt; &quot;THAT&quot;</span>
</code></pre></div>
<h2 id="thisの評価結果のまとめ"><code>this</code>の評価結果のまとめ</h2>

<p><code>this</code>は状況によって異なる値を参照する性質を持ったキーワードであることについてを紹介しました。
その<code>this</code>の評価結果をまとめると次の表のようになります。</p>

<p><img src="http://efcl.info/wp-content/uploads/2018/01/04-1515062936.png" alt="`this`の評価結果のまとめ"></p>

<!-- textlint-disable -->

<p>実際にブラウザで実行した結果は[What is <code>this</code> value in JavaScript?][]というサイトで確認できます。</p>

<!-- textlint-enable -->

<p>Chrome 63を使ってる人は&quot;Module&quot;コンテキストのトップレベルArrow Functionにおける<code>this</code>の挙動が表と一致しないことに気づいたかもしれません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// &quot;Module&quot; context @ Chrome 63</span>
<span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fn</span><span class="p">());</span> <span class="c1">// =&gt; window</span>
</code></pre></div>
<p>これはChrome(V8)のバグです。すでに報告して最新のCanary(65相当)では修正されています。</p>

<ul>
<li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791334" title="791334 - `this` in top level Arrow Function in Module Context should be `undefined` - chromium - Monorail">791334 - <code>this</code> in top level Arrow Function in Module Context should be <code>undefined</code> - chromium - Monorail</a></li>
</ul>

<p>Chrome 63とChrome 65では次のサイトの結果は異なることが分かります。</p>

<ul>
<li><a href="https://azu.github.io/what-is-this/" title="What is `this` value in JavaScript?">What is <code>this</code> value in JavaScript?</a></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p><code>this</code>はオブジェクト指向プログラミングの文脈でJavaScriptに導入されました。[^awbjs]
メソッド以外においても<code>this</code>は評価できますが、実行コンテキストやstrict modeなどによって結果が異なり混乱の元となります。
そのため、メソッド以外では<code>this</code>を使うべきではありません（ここでは紹介してないコンストラクタは例外です）</p>

<p>また、メソッドにおいても<code>this</code>は呼び出し方によって異なる値となり、それにより発生する問題と対処法についてを紹介しました。
コールバック関数における<code>this</code>はArrow Functionを使うことで分かりやすく解決できます。
この背景にはArrow Functionで定義した関数は<code>this</code>を持たないという性質があります。</p>

<p>もっと<code>this</code>について理解してみたい人は、書籍版も実行しながら見ると良さそうです。</p>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/basic/function-this/" title="関数とthis · JavaScriptの入門書 #jsprimer">関数とthis · JavaScriptの入門書 #jsprimer</a></li>
</ul>

<h3 id="memo-note-this-binding-syntax-proposal">:memo: Note: This-Binding Syntax proposal</h3>

<p>通常の関数をmixin関数のように扱いやすくする<code>::</code>という構文のProposalがありましたが、しばらくステータスが更新されていません。
(Proposalの元々のAuthorがTC39メンバーではなくなったのも1つの理由)</p>

<ul>
<li><a href="https://github.com/tc39/proposal-bind-operator" title="ECMAScript This-Binding Syntax">ECMAScript This-Binding Syntax</a></li>
</ul>

<h3 id="memo-this名前解決の仕様">:memo: <code>this</code>名前解決の仕様</h3>

<p><code>this</code> bindingの設定は、関数を呼ぶときの次の仕様で決定される。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/#sec-evaluatecall">https://tc39.github.io/ecma262/#sec-evaluatecall</a></li>
<li><a href="https://tc39.github.io/ecma262/#sec-call">https://tc39.github.io/ecma262/#sec-call</a></li>
<li><a href="https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist">https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></li>
<li><a href="https://tc39.github.io/ecma262/#sec-ordinarycallbindthis">https://tc39.github.io/ecma262/#sec-ordinarycallbindthis</a></li>
</ul>

<p>大きく分けると、WriteとReadの２つのフェーズで<code>this</code>が決まる。
ここでWriteとReadとつけているけど、仕様にそういうフェーズがあるわけじゃなくて自分の解釈です。</p>

<p>Write: 関数呼び出しをする際に、その関数のFunction Environment Recordsの<code>[[ThisValue]]</code>に<code>this</code>の値を入れる</p>

<p><code>[[ThisValue]]</code>には次のステップの結果が入る。
(ただしArrow Functionはlexicalなので<code>[[ThisValue]]</code>を持たない。<a href="https://tc39.github.io/ecma262/#sec-ordinarycallbindthis">Arrow Functionの詳細</a>)</p>

<p><a href="https://tc39.github.io/ecma262/#sec-evaluatecall" title="12.3.4.2Runtime Semantics: EvaluateCall(func, ref, arguments, tailPosition )">12.3.4.2Runtime Semantics: EvaluateCall(func, ref, arguments, tailPosition )</a>のステップを参照する</p>

<ul>
<li>プロパティならば

<ul>
<li><code>this</code>は<code>GetThisValue()</code>の結果

<ul>
<li><code>super.prop</code>なら

<ul>
<li><code>super</code>となる</li>
</ul></li>
<li>それ以外なら

<ul>
<li><a href="https://tc39.github.io/ecma262/#sec-getbase" title="6.2.4.1GetBase ( V )">6.2.4.1GetBase ( V )</a>の結果</li>
<li>ベースオブジェクトが<code>this</code>となる</li>
</ul></li>
</ul></li>
</ul></li>
<li>それ以外(ただの関数呼び出し)なら<a href="https://tc39.github.io/ecma262/#sec-object-environment-records-withbaseobject">WithBaseObject</a>の結果

<ul>
<li>withの場合

<ul>
<li>with bingingの値</li>
</ul></li>
<li>それ以外

<ul>
<li>undefined</li>
</ul></li>
</ul></li>
</ul>

<p>Read: <code>this</code>という識別子から、その値が何を参照するかを決めるフェーズ</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/#sec-getthisenvironment">https://tc39.github.io/ecma262/#sec-getthisenvironment</a>

<ul>
<li><code>this</code>の解決はスコープと同じく、一個つづ順に内側から外側へ探すのはスコープチェーンと同じ

<ul>
<li>見つかるまで再帰的に外側のEnvironment Recordsを探索する</li>
<li>見つからない場合は、&quot;Script&quot;や&quot;Module&quot;の実行コンテキストの<code>this</code>の値になる</li>
<li>&quot;Module&quot;の<a href="https://tc39.github.io/ecma262/#sec-module-environment-records-getthisbinding" title="GetThisBinding ( )">GetThisBinding ( )</a>は常に<code>undefined</code></li>
<li>&quot;Script&quot;の<a href="https://tc39.github.io/ecma262/#sec-global-environment-records-getthisbinding" title="GetThisBinding ( )">GetThisBinding ( )</a>はグローバルオブジェクト</li>
</ul></li>
<li>ただし、Arrow Functionは<code>[[ThisValue]]</code>を持たないので必ずスキップされる</li>
<li>もっと近い関数(Function Environment Records)の<code>[[ThisValue]]</code>の値が<code>this</code>の値となる</li>
</ul></li>
</ul>

<p>[^awbjs]: ES 2015の仕様策定者であるAllen Wirfs-Brock‏氏もただの関数においては<code>this</code>を使うべきではないと述べている。<a href="https://twitter.com/awbjs/status/938272440085446657">https://twitter.com/awbjs/status/938272440085446657</a>;</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>今年のOSS活動振り返り @ 2017</title>
   <link href="http://efcl.info/2017/12/30/oss-in-2017/"/>
   <updated>2017-12-30T21:04:00+09:00</updated>
   <id>http://efcl.info/2017/12/30/oss-in-2017</id>
   <content type="html"><![CDATA[ <p>2017年のOSS活動の振り返り記事です。</p>

<p>今までの振り返り。</p>

<ul>
<li><a href="http://efcl.info/2016/12/31/oss-in-2016/">今年のOSS活動振り返り @ 2016 | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/31/oss-in-2015/">今年のOSS活動振り返り @ 2015 | Web Scratch</a></li>
<li><a href="http://efcl.info/2014/12/31/oss-in-2014/">今年のOSS活動振り返り @ 2014 | Web Scratch</a></li>
</ul>

<p>2017年のGitHubのContributionsは8000~10000ぐらいを推移していました。
(1/3ぐらいは<a href="https://jser.info/" title="JSer.info">JSer.info</a>関連だと思います。)</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/12/30-1514635832.png" alt="GitHub contributions"></p>

<p>今はGitHubに表示されないけど、Current Streakは1507日でした。(1507/365 = 4.128767123年)</p>

<ul>
<li><a href="https://azu.github.io/github-longest-streak/?user=azu" title="GitHub Full Longest Streak">GitHub Full Longest Streak:azu</a>

<ul>
<li>GitHubのLongest Streakを出してくれるツール</li>
</ul></li>
</ul>

<h2 id="issue-pr">Issue/PR</h2>

<ul>
<li><a href="https://github.com/search?o=asc&amp;q=author%3Aazu+created%3A2017-01-01..2018-01-01+is%3Apr+&amp;s=updated&amp;type=Issues&amp;utf8=%E2%9C%93" title="Search · author:azu created:2017-01-01..2018-01-01 is:pr">PR</a>: 527

<ul>
<li>去年: 457</li>
</ul></li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=author%3Aazu+created%3A2017-01-01..2018-01-01+is%3Aissue+&amp;type=Issues">Issue</a>: 485

<ul>
<li>去年: 392</li>
</ul></li>
</ul>

<p>大体同じ程度増えている感じらしい</p>

<h2 id="作ったもの"><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=user%3Atextlint+user%3Atextlint-rule+user%3Atextlint-ja+user%3Aalmin+user%3Aazu+created%3A2017-01-01..2018-01-01&amp;type=Repositories">作ったもの</a></h2>

<blockquote>
<p><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=user%3Atextlint+user%3Atextlint-rule+user%3Atextlint-ja+user%3Aalmin+user%3Aazu+created%3A2017-01-01..2018-01-01&amp;type=Repositories">https://github.com/search?utf8=%E2%9C%93&amp;q=user%3Atextlint+user%3Atextlint-rule+user%3Atextlint-ja+user%3Aalmin+user%3Aazu+created%3A2017-01-01..2018-01-01&amp;type=Repositories</a></p>
</blockquote>

<ul>
<li>今年: 95</li>
<li>去年: 108</li>
</ul>

<p>去年よりも減っているのは、<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>、<a href="https://github.com/almin/almin">almin</a>、<a href="https://github.com/azu/searchive">searchive</a>、<a href="https://github.com/azu/immutable-array-prototype" title="immutable-array-prototype">immutable-array-prototype</a>などmonorepoを結構積極的に使うようになったのでその影響もあるのかも。</p>

<p>順番に何を作ってたのかを見ていく</p>

<ul>
<li><a href="https://github.com/azu/web-application-template-2016" title="azu/web-application-template-2016">azu/web-application-template-2016</a>

<ul>
<li>ウェブアプリを書くときこういうテンプレ使ってる的なやつ</li>
<li>今は<a href="https://qiita.com/azu/items/a149501ca1b5864000a3" title="React + TypeScript (+ Electron)でアプリを書き始めるときにやってること - Qiita">React + TypeScript (+ Electron)でアプリを書き始めるときにやってること - Qiita</a>みたいな感じになってる</li>
<li>手元では<code>init*.sh</code>みたいのがなんこかあってそこから選んでるだけなので変わってない</li>
</ul></li>
<li><a href="https://github.com/azu/negaposi-analyzer-ja" title="negaposi-analyzer-ja">negaposi-analyzer-ja</a>

<ul>
<li>形態素解析したテキストからネガティブ/ポジティブ(単語感情極性)を判定したスコアを返すJavaScriptライブラリ</li>
<li><a href="https://jser.info/2017/01/15/jser-info-6years/" title="JSer.info 6周年記念イベントを開催しました - JSer.info">JSer.info 6周年記念イベント</a>で<a href="http://azu.github.io/slide/2017/jser_info/how_to_make_jser_info.html" title="JSer.infoの作り方">JSer.infoの作り方</a>の発表のために作った気がする</li>
<li>JSer.infoの紹介記事は偏りのある言葉を嫌うので、実際に今までのデータを解析するために作った</li>
<li>実際にネガ・ポジは0に収束してそうだった的な話をした</li>
</ul></li>
</ul>

<p><img src="http://azu.github.io/slide/2017/jser_info/resources/feeling-words.png" alt="JSer.infoの感情情極性"></p>

<ul>
<li><a href="https://github.com/azu/access-limit-http-proxy" title="access-limit-http-proxy">access-limit-http-proxy</a>

<ul>
<li>たしか数回リクエストした時の挙動を調べるテストを書くために作った気がする。</li>
<li>3回アクセスしたら500返すみたいなプロキシ</li>
</ul></li>
<li><a href="https://github.com/azu/env-development" title="azu/env-development: Set $NODE_ENV to &amp;#34;development&amp;#34; works best with mocha --require=env-development">azu/env-development: Set $NODE_ENV to &quot;development&quot; works best with mocha --require=env-development</a>

<ul>
<li><code>process.env.NODE_ENV = &quot;development&quot;</code>するだけ</li>
<li><code>mocha --require env-development</code> したかった</li>
</ul></li>
<li><a href="https://github.com/azu/uni-gitbook-server" title="azu/uni-gitbook-server: [WIP] [Unofficial] Alternative of GitBook server.">azu/uni-gitbook-server: [WIP] [Unofficial] Alternative of GitBook server.</a>

<ul>
<li>GitBookのビルドがあまりにも遅くて作ってた</li>
<li>GitBookのwatch buildは変更 -&gt; サーバを止める -&gt; ビルド -&gt; サーバ再開 みたいな結構やばい感じだった</li>
<li>GitBook 開発チームのレスポンスもあまりにも悪かったりしてちょこちょこ不満がある(PR出しても数ヶ月放置とかがよくある)</li>
<li><a href="https://github.com/GitbookIO/gitbook/issues/1808" title="Is GitBook still alive? · Issue #1808 · GitbookIO/gitbook">Is GitBook still alive? · Issue #1808 · GitbookIO/gitbook</a></li>
<li>小さな技術書を作るためのツールはやっぱり欲しいので、どうにかしたい</li>
</ul></li>
<li><a href="https://github.com/azu/search-prototype.js" title="azu/search-prototype.js: Search usage of prototype.js in your codes.">azu/search-prototype.js: Search usage of prototype.js in your codes.</a>

<ul>
<li>コード中に<a href="http://prototypejs.org/">prototype.js</a>のメソッドがないかを検出するツール</li>
<li>公式のAPIレスポンスからメソッドのリストを作ってgraspを使ってASTで検索してる</li>
<li><a href="http://efcl.info/2017/04/26/search-prototype.js/" title="コード中にあるprototype.jsの拡張メソッドを使ってる部分を検索するツール | Web Scratch">コード中にあるprototype.jsの拡張メソッドを使ってる部分を検索するツール | Web Scratch</a></li>
<li>さすがにそろそろ亡くなったでしょうみたいな感じではあるけど、prototype拡張という性質上静的検索が難しいので、専用のツールを作った</li>
</ul></li>
<li><a href="https://github.com/azu/path-to-glob-pattern" title="azu/path-to-glob-pattern: Convert file/directory path to glob pattern.">azu/path-to-glob-pattern: Convert file/directory path to glob pattern.</a>

<ul>
<li><code>src/</code> =&gt; <code>src/**/*</code> みたいにglobに変換するライブラリ</li>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>で使ってる</li>
</ul></li>
<li><a href="https://github.com/azu/get-github-pr-review-comments" title="azu/get-github-pr-review-comments: Get PR review comments from command line.">azu/get-github-pr-review-comments: Get PR review comments from command line.</a>

<ul>
<li><a href="http://efcl.info/2017/03/06/get-pull-request-review-comments/" title="GitHubのPull Requestのレビューコメントをコマンドラインから取得するツール | Web Scratch">GitHubのPull Requestのレビューコメントをコマンドラインから取得するツール | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/position-map-text-to-markdown" title="azu/position-map-text-to-markdown: Map rendered text/html position to Markdown position.">azu/position-map-text-to-markdown: Map rendered text/html position to Markdown position.</a>

<ul>
<li>Markdownのレンダリング済みテキストから、指定した文字列が元のMarkdownでどの位置にあるかを返すライブラリ</li>
<li><a href="https://github.com/azu/gitbook-plugin-github-issue-feedback" title="gitbook-plugin-github-issue-feedback">gitbook-plugin-github-issue-feedback</a>のために作った</li>
<li><a href="http://efcl.info/2017/05/29/gitbook-plugin-github-issue-for-review/" title="書いた文章をレビューしてGitHubにIssueを切るためのGitBookプラグイン | Web Scratch">書いた文章をレビューしてGitHubにIssueを切るためのGitBookプラグイン | Web Scratch</a></li>
<li>レンダリング済みのHTMLから元のMarkdownの行数を見つける感じ</li>
</ul></li>
<li><a href="https://github.com/azu/strip-X-Frame-Options-proxy" title="azu/strip-X-Frame-Options-proxy: strip X-Frame-Options header for embedding on iframe.">azu/strip-X-Frame-Options-proxy: strip X-Frame-Options header for embedding on iframe.</a>

<ul>
<li>GitHubに3段階のiframe埋め込み拒否機能があってそれの検証</li>
<li>CSP -&gt; <code>X-Frame-Options</code> -&gt; 埋め込みJavaScriptで<code>window.top</code>をとかをみてる拒否してくる</li>
<li>結局は<code>Webview</code>とか使わないと埋め込めない</li>
</ul></li>
<li><a href="https://github.com/azu/can-use-webview" title="azu/can-use-webview: Detect if you can use electron&amp;#39; &amp;lt;webview&amp;gt;">azu/can-use-webview: Detect if you can use electron&#39; <webview></a>

<ul>
<li><code>webview</code>要素が使えるかどうかの判定</li>
</ul></li>
<li><a href="https://github.com/azu/check-invalid-control-characters" title="azu/check-invalid-control-characters: Check invalid control characters like `\u0008` in plain text.">azu/check-invalid-control-characters: Check invalid control characters like <code>\u0008</code> in plain text.</a>

<ul>
<li>Slack.app 、Electron、Chromeあたりで問題になった制御文字の問題を検出するツール</li>
<li>最近textlintでもっと便利な感じのを書いた</li>
<li><a href="http://efcl.info/2017/12/29/textlint-rule-no-invalid-control-character/" title="文中に制御文字が混じっているのを見つけて自動修正するtextlintルール | Web Scratch">文中に制御文字が混じっているのを見つけて自動修正するtextlintルール | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/localstorage-ponyfill" title="azu/localstorage-ponyfill: Universal LocalStorage for browser and Node.js.">azu/localstorage-ponyfill: Universal LocalStorage for browser and Node.js.</a>

<ul>
<li>ブラウザ、Node、Electronで動くみたいな目的の<code>localstorage</code></li>
</ul></li>
<li><a href="https://github.com/azu/video-events-debugger" title="azu/video-events-debugger: [WIP] HTML5 Video element events debugging tools.">azu/video-events-debugger: [WIP] HTML5 Video element events debugging tools.</a>

<ul>
<li><code>video</code>要素とかのイベントをひたすら見られるデバッガー</li>
</ul></li>
<li><a href="https://github.com/azu/faao" title="azu/faao: Faao is a GitHub issue/pull-request client on Electron.">azu/faao: Faao is a GitHub issue/pull-request client on Electron.</a>

<ul>
<li><a href="https://github.com/almin/almin" title="Almin">Almin</a>の技術ショーケースもかねて作ってたGitHub Issueクライアント</li>
<li>ドメインモデルとかもしっかり考えて開発してる</li>
<li><a href="http://azu.github.io/slide/2017/teppeis-sushi/client-side-ddd-on-github.html" title="Faao - ドメイン駆動設計で作るGitHub Issue Client -">Faao - ドメイン駆動設計で作るGitHub Issue Client -</a></li>
<li>方向がしっかり決まってなかったけど、<a href="https://github.com/azu/faao/issues/85" title="Redesign Faao · Issue #85 · azu/faao">Redesign Faao · Issue #85 · azu/faao</a>で方向をちゃんと定め直して開発中</li>
<li>単純に言えばGitHub Issueを使ってちゃんとTODO管理したいという話</li>
</ul></li>
<li><a href="https://github.com/azu/immutable-array-prototype" title="azu/immutable-array-prototype: A collection of Immutable Array prototype methods(Per method packages).">azu/immutable-array-prototype: A collection of Immutable Array prototype methods(Per method packages).</a>

<ul>
<li><code>Array#push</code> とかのImmutable版ほしいよねって感じで作った</li>
<li><a href="http://efcl.info/2017/07/11/immutable-array/" title="Array.prototypeのImmutable版メソッドを個別のパッケージで使えるものを作った | Web Scratch">Array.prototypeのImmutable版メソッドを個別のパッケージで使えるものを作った | Web Scratch</a></li>
<li><a href="https://github.com/azu/faao" title="Faao">Faao</a>でも使ってる

<ul>
<li>ドメインモデルもImmutableにしたいときにこういうシンプルで小さいパーツが便利で欲しかった</li>
</ul></li>
</ul></li>
<li><a href="https://github.com/azu/node-browser-shim-gap" title="azu/node-browser-shim-gap: The gap issue between Node.js and Browser shims.">azu/node-browser-shim-gap: The gap issue between Node.js and Browser shims.</a>

<ul>
<li><a href="https://gist.github.com/azu/96471e0405afa20819e2eaeb91c944db" title="Node.jsコアモジュールとブラウザ向けShimの挙動の違い(ギャップ)について">Node.jsコアモジュールとブラウザ向けShimの挙動の違い(ギャップ)について</a>の問題</li>
</ul></li>
<li><a href="https://github.com/azu/text-map-kuromoji" title="azu/text-map-kuromoji: テキストを形態素解析した結果とテキストの関係をビジュアライズするエディタ">azu/text-map-kuromoji: テキストを形態素解析した結果とテキストの関係をビジュアライズするエディタ</a>

<ul>
<li><a href="http://efcl.info/2017/10/19/text-map-kuromoji/" title="kuromoji.jsで形態素解析した結果とテキストの関係をビジュアライズする | Web Scratch">kuromoji.jsで形態素解析した結果とテキストの関係をビジュアライズする | Web Scratch</a></li>
<li>ビジュアライズしたくなった</li>
</ul></li>
<li><a href="https://github.com/azu/mp3cat-bin" title="azu/mp3cat-bin: Binary wrapper for mp3cat - concat mp3 files.">azu/mp3cat-bin: Binary wrapper for mp3cat - concat mp3 files.</a>

<ul>
<li>mp3の結合</li>
<li><a href="https://github.com/jser/podcast" title="jser/podcast: JSer.info podcast creator">jser/podcast: JSer.info podcast creator</a>関連</li>
</ul></li>
<li><a href="https://github.com/azu/git-commit-push-via-github-api" title="azu/git-commit-push-via-github-api: Git commit and push by using GitHub API. No depended on Git binary.">azu/git-commit-push-via-github-api: Git commit and push by using GitHub API. No depended on Git binary.</a>

<ul>
<li>GitHub APIだけでコミットやプッシュするライブラリ</li>
<li>lambdaからpushしたかった</li>
</ul></li>
<li><a href="https://github.com/azu/pronunciation-lexicon-specification-json">azu/pronunciation-lexicon-specification-json: Convert JSON to Pronunciation Lexicon Specification (PLS) XML.</a></li>
<li><a href="https://github.com/azu/pronunciation-lexicon-specification-yaml">azu/pronunciation-lexicon-specification-yaml: Convert YAML(YML) to Pronunciation Lexicon Specification(PLS) XML.</a>

<ul>
<li><a href="https://aws.amazon.com/jp/polly/" title="Amazon Polly">Amazon Polly</a>関係</li>
<li>JSON or YAMLから<a href="http://www.asahi-net.or.jp/%7Eax2s-kmtn/ref/accessibility/REC-pronunciation-lexicon-20081014.html" title="発音辞書仕様（PLS）バージョン1.0">発音辞書仕様（PLS）バージョン1.0</a>を再生する</li>
</ul></li>
<li><a href="https://github.com/azu/move-github-repository" title="azu/move-github-repository: Move GitHub repository(Update description &amp;amp;&amp;amp; URL &amp;amp;&amp;amp; default branch &amp;amp;&amp;amp; Archived).">azu/move-github-repository: Move GitHub repository(Update description &amp;&amp; URL &amp;&amp; default branch &amp;&amp; Archived).</a>

<ul>
<li>monorepo化した後のリポジトリの後片付けツール</li>
<li><a href="http://efcl.info/2017/05/22/move-github-repository/" title="GitHubのリポジトリをDeprecatedにするスクリプト | Web Scratch">GitHubのリポジトリをDeprecatedにするスクリプト | Web Scratch</a></li>
<li>GitHubはTransferできないときに、そのリポジトリからリダイレクトとかできないのでその辺をいい感じにするツール</li>
<li>最近追加されたArchieveにも対応した</li>
</ul></li>
<li><a href="https://github.com/azu/VideoPlaybackQuality-polyfill" title="azu/VideoPlaybackQuality-polyfill: A ponyfill/polyfill for VideoPlaybackQuality.">azu/VideoPlaybackQuality-polyfill: A ponyfill/polyfill for VideoPlaybackQuality.</a>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality" title="getVideoPlaybackQuality()">getVideoPlaybackQuality()</a>というAPIを知ったけど、Chromeが残念だったのでpolyfillを書いた</li>
</ul></li>
<li><a href="https://github.com/azu/alfred-hantebookmark-mydata" title="azu/alfred-hantebookmark-mydata: Search My HatenaBookmark in Alfred">azu/alfred-hantebookmark-mydata: Search My HatenaBookmark in Alfred</a>

<ul>
<li><a href="http://efcl.info/2017/10/20/alfred-hatenabookmark/" title="Alfred上で自分のはてなブックマークを検索できるWorkflow | Web Scratch">Alfred上で自分のはてなブックマークを検索できるWorkflow | Web Scratch</a></li>
<li>検索 はてブ</li>
</ul></li>
<li><a href="https://github.com/azu/performance-mark-metadata" title="azu/performance-mark-metadata: `performance.mark` with custom meta data.">azu/performance-mark-metadata: <code>performance.mark</code> with custom meta data.</a>

<ul>
<li>クライアントサイドのメトリクスを作成するためのライブラリ</li>
<li><a href="https://dev.to/azu/performancemark-with-medata-is-useful-for-real-user-monitoring-54p"><code>performance.mark</code> with metadata is useful for Real user monitoring</a></li>
<li><a href="http://efcl.info/2017/11/15/performance.mark-metadata/">performance.markにメタデータを紐付けできるライブラリを書いた | Web Scratch</a></li>
<li><a href="http://efcl.info/2017/09/20/almin-performance-profile-0.14.0/">Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように | Web Scratch</a></li>
<li>最近60ページぐらいのウェブアプリのパフォーマンス改善事例集(問題の見つけ方や修正方法、計測方法、動画とか実際のプロファイルみたいなやつ)を書いたけど、そこでも結構使った</li>
</ul></li>
<li><a href="https://github.com/azu/rc-config-loader" title="azu/rc-config-loader: Load config from .{product}rc.{json,yml,js} file">azu/rc-config-loader: Load config from .{product}rc.{json,yml,js} file</a>

<ul>
<li><code>.textlintrc</code>とかみたいによく見る設定ファイルを探して読み込むローダ</li>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>で使ってる</li>
<li><a href="https://github.com/davidtheclark/cosmiconfig" title="cosmiconfig">cosmiconfig</a>が昔非同期だけで、同期版が欲しくて作った</li>
</ul></li>
<li><a href="https://github.com/azu/github-label-setup" title="azu/github-label-setup: 📦 Setup GitHub label without configuration.">azu/github-label-setup: 📦 Setup GitHub label without configuration.</a>

<ul>
<li>最近リポジトリを作るときはラベルも設定するようにしてる</li>
<li>そのテンプレラベルを集めたもの</li>
<li><a href="http://efcl.info/2017/05/17/github-label/" title="GitHubのラベルをいい感じにセットアップするツール | Web Scratch">GitHubのラベルをいい感じにセットアップするツール | Web Scratch</a></li>
<li>知見としてはGitHubは<code>good first issue</code>など特定のラベルは優遇(Issueの画面に案内が表示される)されているのでその辺はGitHubに合わせたほうがいい</li>
</ul></li>
<li><a href="https://github.com/azu/avoid-json-stringify-on-react" title="azu/avoid-json-stringify-on-react: Deep equal vs. Shallow equal on React&amp;#39;s shouldComponentUpdate">azu/avoid-json-stringify-on-react: Deep equal vs. Shallow equal on React&#39;s shouldComponentUpdate</a>

<ul>
<li>Reactの<code>shouldComponentUpdate</code>でshallow equalとdeep equalの話</li>
<li><a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate">Reactの公式ドキュメントでJSON.stringifyとかで比較するな</a>って話があるのでそれを検証した</li>
<li><a href="http://efcl.info/2017/11/30/shallow-equal/" title="shallow-equal for Object/React props | Web Scratch">shallow-equal for Object/React props | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/shallow-equal-object">azu/shallow-equal-object: Shallow equal check object that support TypeScript.</a></li>
<li><a href="https://github.com/azu/shallow-equal-props">azu/shallow-equal-props: Shallow Equal for React&#39;s props. Help to implement shouldComponentUpdate.</a>

<ul>
<li>上の検証時に作ったshallow equalライブラリ</li>
<li>デバッグオプションがあって何が違っているのかが確認できるのが特徴</li>
</ul></li>
<li><a href="https://github.com/azu/what-is-this" title="azu/what-is-this: What value is `this` in Strict, Script, or Module?">azu/what-is-this: What value is <code>this</code> in Strict, Script, or Module?</a>

<ul>
<li>いろんなコンテキストで<code>this</code>の値を確認するサイト</li>
<li><a href="https://azu.github.io/what-is-this/">https://azu.github.io/what-is-this/</a></li>
<li><a href="https://asciidwango.github.io/js-primer/basic/function-this/" title="関数とthis · JavaScriptの入門書 #jsprimer">関数とthis · JavaScriptの入門書 #jsprimer</a>を書くために色々検証する目的で作った</li>
<li>このツールでV8のモジュールコンテキストでは<code>this</code>がバグってるのを見つけて報告した</li>
<li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791334" title="791334 - `this` in top level Arrow Function in Module Context should be `undefined` - chromium - Monorail">791334 - <code>this</code> in top level Arrow Function in Module Context should be <code>undefined</code> - chromium - Monorail</a></li>
</ul></li>
<li><a href="https://github.com/azu/nlp-pattern-match" title="azu/nlp-pattern-match: Natural Language pattern matching library for JavaScript.">azu/nlp-pattern-match: Natural Language pattern matching library for JavaScript.</a>

<ul>
<li><a href="http://efcl.info/2017/10/31/nlp-pattern-match/" title="自然言語にマッチする正規表現を書いて、形態素解析結果でテストして、置換するライブラリを書いた | Web Scratch">自然言語にマッチする正規表現を書いて、形態素解析結果でテストして、置換するライブラリを書いた | Web Scratch</a></li>
<li>言語処理をもっと楽にしたい！みたいな方向で書いてた</li>
<li>最近は逆に言語処理をもっと丁寧にしたい！みたいな方向で<a href="https://github.com/azu/sentence-splitter" title="sentence-splitter">sentence-splitter</a>を書き直したりした</li>
<li>多くの言語処理はただの文字列として扱ってるのが問題でその分いろんな情報がなくなってることに気づいてきた</li>
<li><a href="https://github.com/textlint/textlint" title="textlint">textlint</a>では文章はASTにしてから扱えるので、ASTのまま言語処理してコンテキストを維持して扱いたいみたいな方向を最近やっている</li>
<li><a href="https://github.com/textlint/textlint/issues/366" title="Core rule utility · Issue #366 · textlint/textlint">Core rule utility · Issue #366 · textlint/textlint</a></li>
</ul></li>
</ul>

<h2 id="searchive"><a href="https://github.com/azu/searchive" title="azu/searchive: Search All My Documents{PDF}.">Searchive</a></h2>

<blockquote>
<p><a href="https://github.com/azu/searchive" title="azu/searchive: Search All My Documents{PDF}.">azu/searchive: Search All My Documents{PDF}.</a></p>
</blockquote>

<p><a href="https://github.com/azu/searchive" title="azu/searchive: Search All My Documents{PDF}.">Searchive</a>というローカルのPDFを全文検索、串刺し検索するアプリを書いた。</p>

<ul>
<li><a href="http://efcl.info/2017/11/17/searchive/" title="ローカルのPDFを全文検索するクライアント/サーバ/Electronアプリを書いた | Web Scratch">ローカルのPDFを全文検索するクライアント/サーバ/Electronアプリを書いた | Web Scratch</a></li>
</ul>

<p>これもmonorepoでリポジトリにアプリ、クライアント、サーバ、CLIなどが全部入ってる。</p>

<p>副産物</p>

<ul>
<li><a href="https://github.com/azu/search-query-tester" title="azu/search-query-tester: Test object with search query syntax.">azu/search-query-tester: Test object with search query syntax.</a>

<ul>
<li>GitHubみたいな検索演算子をパースしてオブジェクトにしてマッチしてくれる</li>
</ul></li>
</ul>

<h2 id="ldr">LDR</h2>

<p>残念ながらLDRが閉鎖したので<a href="http://www.inoreader.com/">Inoreader</a>に移行した。
<a href="http://www.inoreader.com/">Inoreader</a>のクライアントは満足できなかったので、<a href="https://github.com/azu/irodr" title="azu/irodr: RSS reader client like LDR for Inoreader.">irodr</a>を作って使ってる</p>

<ul>
<li><a href="https://github.com/azu/ldr-export-opml" title="azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.">azu/ldr-export-opml: Convert exported json from LDR to opml with Rate.</a>

<ul>
<li>LDR閉鎖にともなってエクスポートツールを作成した</li>
<li><a href="http://efcl.info/2017/07/29/ldr-rate-export/" title="LDRのフィードをレート情報付きでエクスポートする | Web Scratch">LDRのフィードをレート情報付きでエクスポートする | Web Scratch</a></li>
</ul></li>
<li><a href="https://github.com/azu/irodr" title="azu/irodr: RSS reader client like LDR for Inoreader.">azu/irodr: RSS reader client like LDR for Inoreader.</a>

<ul>
<li><a href="http://efcl.info/2017/08/31/ldr-to-irodr/" title="LDRがサービス終了のため、Inoreader/Feedlyをバックエンドに動くRSSリーダを書いている | Web Scratch">LDRがサービス終了のため、Inoreader/Feedlyをバックエンドに動くRSSリーダを書いている | Web Scratch</a></li>
</ul></li>
<li><a href="http://irodr.netlify.com/">http://irodr.netlify.com/</a></li>
</ul>

<p>NetlifyのおかげてCORSも特に問題なくなった。
ウェブで動くInoreaderのクライアントという感じで、LDRのときと同じぐらい使ってる。</p>

<p>細かいバグとかもあるのでPR歓迎しています。
基本的にまだレート読みしか考えて作ってないのでその辺のオプションが欲しい人もIssueなどどうぞ。</p>

<ul>
<li><a href="https://github.com/azu/irodr/issues" title="Issues · azu/irodr">Issues · azu/irodr</a></li>
</ul>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>と<a href="https://developer.microsoft.com/en-us/fabric" title="Office UI Fabric">Office UI Fabric</a>(React)を使って作った。
(2-3日ぐらいで突貫的に作れてよかった)</p>

<h2 id="almin"><a href="https://github.com/almin/almin" title="Almin">Almin</a></h2>

<p>最近Alminのサイトを<a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>で作り直した。</p>

<ul>
<li><a href="http://efcl.info/2017/12/26/docusaurus-almin/" title="AlminのサイトをOSSドキュメントツールのdocusaurusで作り直した | Web Scratch">AlminのサイトをOSSドキュメントツールのdocusaurusで作り直した | Web Scratch</a></li>
</ul>

<p>Almin自体はあいかわらずアプリを作る際にもっとドメインに集中できるようにすることを目的に作ってる。最近、よそでも使ってくれてる人が増えてきてる。</p>

<ul>
<li><a href="https://qiita.com/kmdsbng/items/dc03d89c0ca5acc30a44" title="Almin.js がやってくれること - Qiita">Almin.js がやってくれること - Qiita</a></li>
<li><a href="https://qiita.com/tsuwatch/items/d53c4bb940ecde7016de" title="Electronアプリをリリースするまでにあった知見 - Qiita">Electronアプリをリリースするまでにあった知見 - Qiita</a></li>
</ul>

<p>既にあるAPIを使ってアプリを作るみたいなところには<a href="https://github.com/almin/almin" title="Almin">Almin</a>は結構強い部分はあるし(クライアントに裁量を強く持たせられる)、<a href="https://github.com/azu/searchive" title="azu/searchive: Search All My Documents{PDF}.">Searchive</a>みたいにほぼReduxみたいなこともできるので、その辺はちゃんとドキュメントを整備していきたい。</p>

<p><a href="https://github.com/almin/almin" title="Almin">Almin</a>へのコントビュートはいつでも歓迎しています。
興味がある人は<a href="https://github.com/almin/almin/blob/master/.github/CONTRIBUTING.md" title="Contributing Guide">Contributing Guide</a>や<a href="https://github.com/almin/almin/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"><code>label:&quot;good first issue&quot;</code></a>から見てくれると手が出しやすい気がします。</p>

<p>増えたライブラリとかツール</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/packages/almin-react-container" title="almin-react-container">almin-react-container</a>

<ul>
<li>AlminとReactを連携するContainerコンポーネント</li>
</ul></li>
<li><a href="https://github.com/almin/almin-usecase-map-generator" title="almin/almin-usecase-map-generator: Command line tool that generate UseCase map from almin&amp;#39;s UseCases.">almin/almin-usecase-map-generator: Command line tool that generate UseCase map from almin&#39;s UseCases.</a>

<ul>
<li>Alminのユースケースからユースケース図を自動生成するツール</li>
<li>例) <a href="https://azu.github.io/faao/meta/use-case.html" title="Faao - UseCase architecture">Faao - UseCase architecture</a></li>
</ul></li>
</ul>

<p><img src="https://github.com/almin/almin-usecase-map-generator/raw/master/out.png" alt="https://github.com/almin/almin-usecase-map-generator/raw/master/out.png"></p>

<ul>
<li><a href="https://github.com/almin/almin-devtools" title="almin/almin-devtools: Integrate almin into redux-devtools">almin/almin-devtools: Integrate almin into redux-devtools</a>

<ul>
<li><a href="https://github.com/zalmoxisus/redux-devtools-extension" title="redux-devtools-extension">redux-devtools-extension</a>をAlminを繋ぐ開発者ツール</li>
<li>ActionとかStateを開発者ツール的に見られる</li>
</ul></li>
<li><a href="https://github.com/almin/migration-tools" title="almin/migration-tools: Migration scripts for Almin.">almin/migration-tools: Migration scripts for Almin.</a>

<ul>
<li>マイグレーションツール</li>
<li><a href="https://github.com/avajs/ava-codemods" title="avajs/ava-codemods: Codemods for AVA">avajs/ava-codemods: Codemods for AVA</a>がかっこよかったので作った</li>
<li>最近<a href="https://github.com/facebook/jscodeshift" title="jscodeshift">jscodeshift</a>があんまりアクティブじゃなくてちょっとリスクあるかもと思った</li>
<li>Babelのメジャーアップデートもあるので</li>
</ul></li>
<li><a href="https://github.com/almin/ddd-base" title="almin/ddd-base: DDD base class library for JavaScript application.">almin/ddd-base: DDD base class library for JavaScript application.</a>

<ul>
<li>DDDには別にベースはいらないんだけど、やっぱり毎回同じような基礎部品がでてきてしまうのでその辺をとりあえず書いてみた</li>
<li>これ自体が何かできるというわけでもないので、ちょっとだけ便利になるかも的な補助ライブラリ(設計は助けてくれない)</li>
</ul></li>
</ul>

<p>本体もかなり書き換えてTypeScript化したり基盤部分のライフサイクルをしっかりもつようになった。後はどういうユースケースがあるかに基づいて進んでいく段階になっていると思う。</p>

<ul>
<li><a href="http://efcl.info/2017/07/24/almin-0.13/" title="Almin 0.13リリース - アプリケーションレイヤーのトランザクション | Web Scratch">Almin 0.13リリース - アプリケーションレイヤーのトランザクション | Web Scratch</a></li>
<li><a href="http://efcl.info/2017/07/17/JavaScript-to-TypeScript/" title="JavaScriptのライブラリを徐々にTypeScriptに移行する | Web Scratch">JavaScriptのライブラリを徐々にTypeScriptに移行する | Web Scratch</a></li>
<li><a href="http://efcl.info/2017/03/08/almim0.10/" title="Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch">Inroducing Almin 0.10.0: TypeScript, FlowType, Logger | Web Scratch</a></li>
</ul>

<h2 id="textlint"><a href="https://github.com/textlint/textlint" title="textlint">textlint</a></h2>

<p>自然言語のLintツールの<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>はあいかわらず開発してて、色々なルールや本体の改善をした。</p>

<p>この一年で</p>

<ul>
<li>TypeScript化

<ul>
<li><a href="http://efcl.info/2017/11/06/textlint-core-refactoring/" title="textlintのコアをTypeScriptで書き直した、textlintの今後について | Web Scratch">textlintのコアをTypeScriptで書き直した、textlintの今後について | Web Scratch</a></li>
</ul></li>
<li>monorepo化</li>
<li>メインのコントビューターが2人増えた

<ul>
<li><a href="http://efcl.info/2017/12/18/textlint-10.0.0/" title="textlint 10.0.0 リリース | Web Scratch">textlint 10.0.0 リリース | Web Scratch</a></li>
<li>人も増えて開発も活発化しています</li>
</ul></li>
</ul>

<p>こちらも<a href="https://github.com/textlint/textlint/blob/master/.github/CONTRIBUTING.md" title="Contributing Guide">Contributing Guide</a>や初めてでも手が付けやすい<a href="https://github.com/textlint/textlint/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"><code>label:&quot;good first issue&quot;</code></a>がついたIssueがあります。</p>

<ul>
<li><a href="https://gist.github.com/azu/2b482e8e2aa636970f5f6110f6488719" title="textlintの直し方">textlintの直し方</a></li>
</ul>

<p>コントビュートはいつでも歓迎してるので、何かやってみたいという人はお知らせください。</p>

<p><a href="https://gitter.im/textlint-ja/textlint-ja?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/textlint-ja/textlint-ja.svg" alt="Gitter"></a></p>

<p>アプリ</p>

<ul>
<li><a href="https://github.com/textlint/textlint-app" title="textlint/textlint-app: textlint standalone application top on Electron.">textlint/textlint-app: textlint standalone application top on Electron.</a>

<ul>
<li>Nodeのインストールもいらない単独で動くtextlintアプリ</li>
<li><a href="http://efcl.info/2017/05/12/textlint-app/" title="textlintのElectronアプリを作った | Web Scratch">textlintのElectronアプリを作った | Web Scratch</a></li>
<li>メンテしたいなー</li>
</ul></li>
</ul>

<p>ルール</p>

<ul>
<li><a href="https://github.com/textlint-ja/textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet" title="textlint-ja/textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet: 全角と半角アルファベットを混在をチェックするtextlintルール">textlint-ja/textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet: 全角と半角アルファベットを混在をチェックするtextlintルール</a></li>
<li><a href="https://github.com/textlint-ja/textlint-rule-ja-unnatural-alphabet" title="textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール">textlint-ja/textlint-rule-ja-unnatural-alphabet: 不自然なアルファベットを検知するtextlintルール</a></li>
<li><a href="https://github.com/azu/textlint-rule-period-in-list-item" title="azu/textlint-rule-period-in-list-item: textlint rule that check with or without period in list item.">azu/textlint-rule-period-in-list-item: textlint rule that check with or without period in list item.</a></li>
<li><a href="https://github.com/textlint-ja/textlint-rule-no-insert-dropping-sa" title="textlint-ja/textlint-rule-no-insert-dropping-sa: サ抜き、サ入れ表現の誤用をチェックするtextlintルール">textlint-ja/textlint-rule-no-insert-dropping-sa: サ抜き、サ入れ表現の誤用をチェックするtextlintルール</a></li>
<li><a href="https://github.com/azu/textlint-rule-abbr-within-parentheses" title="azu/textlint-rule-abbr-within-parentheses: textlint rule check if write abbreviations within parentheses.">azu/textlint-rule-abbr-within-parentheses: textlint rule check if write abbreviations within parentheses.</a></li>
<li><a href="https://github.com/textlint-ja/textlint-rule-prefer-tari-tari" title="textlint-ja/textlint-rule-prefer-tari-tari: 例示・並列・対表現の「〜たり〜たりする」をチェックするtextlintルール">textlint-ja/textlint-rule-prefer-tari-tari: 例示・並列・対表現の「〜たり〜たりする」をチェックするtextlintルール</a></li>
<li><a href="https://github.com/textlint-rule/textlint-rule-en-capitalization" title="textlint-rule/textlint-rule-en-capitalization: textlint rule that check capitalization in english text.">textlint-rule/textlint-rule-en-capitalization: textlint rule that check capitalization in english text.</a></li>
<li><a href="https://github.com/textlint-rule/textlint-rule-preset-google" title="textlint-rule/textlint-rule-preset-google: [WIP] Google Developer Documentation Style Guide for textlint.">textlint-rule/textlint-rule-preset-google: [WIP] Google Developer Documentation Style Guide for textlint.</a>

<ul>
<li>Google開発者ドキュメントガイドのルール化</li>
</ul></li>
</ul>

<p>ライブラリ</p>

<ul>
<li><a href="https://github.com/azu/check-ends-with-period" title="azu/check-ends-with-period: Check the text is ends with period mark.">azu/check-ends-with-period: Check the text is ends with period mark.</a></li>
<li><a href="https://github.com/azu/english-article-classifier" title="azu/english-article-classifier: Classifier english article(a, an).">azu/english-article-classifier: Classifier english article(a, an).</a></li>
</ul>

<p>関連</p>

<ul>
<li><a href="https://github.com/textlint-ja/technological-book-corpus-ja" title="textlint-ja/technological-book-corpus-ja: 日本語で書かれた技術書のコーパス">textlint-ja/technological-book-corpus-ja: 日本語で書かれた技術書のコーパス</a>

<ul>
<li>コーパス</li>
</ul></li>
<li><a href="https://github.com/azu/textlint-reviewdog-example" title="azu/textlint-reviewdog-example: textlint + reviewdog example project">azu/textlint-reviewdog-example: textlint + reviewdog example project</a>

<ul>
<li><a href="https://qiita.com/azu/items/c563da0b5455a1b1dca2" title="reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita">reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita</a>のサンプル</li>
</ul></li>
</ul>

<h2 id="javascript入門本"><a href="https://asciidwango.github.io/js-primer/">JavaScript入門本</a></h2>

<p><a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>というJavaScriptの入門書を書いています。書く部分自体については殆ど決まっていて、書く項目をあと少しになってきました。来年中にはなんとかなるはず。</p>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/" title="この書籍について · JavaScriptの入門書 #jsprimer">この書籍について · JavaScriptの入門書 #jsprimer</a></li>
</ul>

<p>既にウェブで見られるので、おかしなところは気軽にIssue登録とかPR出してみてください。</p>

<h2 id="その他">その他</h2>

<h3 id="sc22-ecmascript-ad-hoc委員会"><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a></h3>

<p><a href="http://azu.github.io/slide/2016/jser5years/sc22-ecmascript-ahodc.html" title="SC22 ECMAScript Ad hoc委員会">SC22 ECMAScript Ad hoc委員会</a>の活動としてECMA 404やECMA 414のISO標準化のレビューをした。</p>

<ul>
<li><a href="http://efcl.info/2017/02/27/ecma-414/" title="ECMA-414 ECMAScript Specification Suiteについて | Web Scratch">ECMA-414 ECMAScript Specification Suiteについて | Web Scratch</a></li>
<li><a href="https://dev.to/azu/ecma-404json-and-ecmascript-will-be-iso-standards-9g3" title="ECMA 404(JSON) and ECMAScript will be ISO standards">ECMA 404(JSON) and ECMAScript will be ISO standards</a></li>
<li><a href="http://efcl.info/2017/04/24/node-25/" title="Node学園 25時限目でECMAScriptの国際標準化の話をした | Web Scratch">Node学園 25時限目でECMAScriptの国際標準化の話をした | Web Scratch</a></li>
</ul>

<h3 id="jser-info"><a href="https://jser.info/" title="JSer.info">JSer.info</a></h3>

<p>今年の初めに<a href="https://jser.info/2017/01/15/jser-info-6years/" title="JSer.info 6周年記念イベントを開催しました - JSer.info">JSer.info 6周年記念イベントを開催しました - JSer.info</a>をやった。来年の1月で7周年だけど、ちょっと時期的に7周年イベントはできなさそう。</p>

<p><a href="https://github.com/jser/podcast" title="jser/podcast: JSer.info podcast creator">jser/podcast: JSer.info podcast creator</a>とか新しいことにもちゃんと挑戦していきたい。</p>

<h2 id="書けなかった">書けなかった</h2>

<ul>
<li><a href="https://github.com/azu/technical-writing-tips" title="azu/technical-writing-tips">azu/technical-writing-tips</a></li>
<li><a href="https://github.com/azu/information-technology" title="azu/information-technology: 情報の読み方と伝え方">azu/information-technology: 情報の読み方と伝え方</a></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>完全に新規で作ってるものがちょっと減っている気がする。
この辺はリソース配分の問題もあるけど、ちゃんと作っていきたい。</p>

<p>後、手をつけようとしてちゃんと終わりまで持っていけてないものがちょこちょこ出てきているので、その辺をどうやれば進められるかを考えていきたい。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>文中に制御文字が混じっているのを見つけて自動修正するtextlintルール</title>
   <link href="http://efcl.info/2017/12/29/textlint-rule-no-invalid-control-character/"/>
   <updated>2017-12-29T12:33:00+09:00</updated>
   <id>http://efcl.info/2017/12/29/textlint-rule-no-invalid-control-character</id>
   <content type="html"><![CDATA[ <p><a href="https://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%96%87%E5%AD%97" title="制御文字">制御文字</a>は色々ありますが、通常の文中に出てくる制御文字は復帰(<code>r</code>)、改行(<code>\n</code>)、タブ(<code>\t</code>)など限られたものだけだと思います。それ以外の制御文字は文中に入ると文字化けしたりします。</p>

<p><img src="https://monosnap.com/file/UjfDjfC7pmKgAJtz52Eot0DQn3MSP1.png" alt="cc"></p>

<p>次の記事では文中に制御文字が入った場合の問題を紹介しています。</p>

<ul>
<li><a href="https://dev.classmethod.jp/non-programming/texteditor_garbled_letter/" title="テキストエディタ内の「見えない何か」を見つける #atom #sublime ｜ Developers.IO">テキストエディタ内の「見えない何か」を見つける #atom #sublime ｜ Developers.IO</a></li>
</ul>

<p>最近、Slackアプリでバックスペースがおかしな文字が入っていたのも同じような原因です。</p>

<ul>
<li><a href="http://fortkle.hatenablog.com/entry/2017/05/24/104014" title="【10/2 追記 】MacのSlack.appで日本語入力すると変なスペースが入る問題への対応 - Today Fortkle Learned.">【10/2 追記 】MacのSlack.appで日本語入力すると変なスペースが入る問題への対応 - Today Fortkle Learned.</a></li>
</ul>

<p>これらを見つける<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>ルールとして<a href="https://github.com/textlint-rule/textlint-rule-no-invalid-control-character" title="@textlint-rule/textlint-rule-no-invalid-control-character">@textlint-rule/textlint-rule-no-invalid-control-character</a>を作りました。</p>

<p>すべての制御文字を禁止すると改行すら出来なくなってしまうので次の制御文字は許可されています。
また、チェックするのはただの文字列中に制御文字が混じってる場合のみで、CodeBlockの中などはチェックしないので問題ありません。</p>

<h3 id="許可されている制御文字">許可されている制御文字</h3>

<ul>
<li><code>\r</code></li>
<li><code>\n</code></li>
<li><code>\t</code></li>
</ul>

<h3 id="許可されていない制御文字">許可されていない制御文字</h3>

<p>その他の<a href="https://en.wikipedia.org/wiki/Control_character" title="Control character">Control character</a>であるもの</p>

<ul>
<li><code></code>(<code>\u0010</code> DATA LINK ESCAPE)</li>
<li><code></code>(<code>\u0019</code> ND OF MEDIUM)</li>
<li>etc...</li>
</ul>

<h2 id="インストール">インストール</h2>

<p><a href="https://github.com/textlint-rule/textlint-rule-no-invalid-control-character" title="@textlint-rule/textlint-rule-no-invalid-control-character">@textlint-rule/textlint-rule-no-invalid-control-character</a>はnpmでインストールできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install @textlint-rule/textlint-rule-no-invalid-control-character
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>に設定するだけです。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;@textlint-rule/no-invalid-control-character&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="オプション">オプション</h2>

<ul>
<li><code>allow</code>: <code>string[]</code>

<ul>
<li>例外として許可したい制御文字を指定</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;@textlint-rule/no-invalid-control-character&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;allow&quot;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&quot;\v&quot;</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="おわりに">おわりに</h2>

<p><code>\u0019</code>などの制御文字が文中に入るのはIMのバグとか何らかの問題がある場合が殆どだと思うので、デフォルトで弾くのが良い気がします。</p>

<p><a href="https://github.com/textlint-rule/textlint-rule-no-invalid-control-character" title="@textlint-rule/textlint-rule-no-invalid-control-character">@textlint-rule/textlint-rule-no-invalid-control-character</a>に似たルールとして、Macでコピペすると濁点が分離する問題を見つける<a href="https://github.com/azu/textlint-rule-no-nfd" title="textlint-rule-no-nfd">textlint-rule-no-nfd</a>などがあります。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>AlminのサイトをOSSドキュメントツールのdocusaurusで作り直した</title>
   <link href="http://efcl.info/2017/12/26/docusaurus-almin/"/>
   <updated>2017-12-26T09:48:00+09:00</updated>
   <id>http://efcl.info/2017/12/26/docusaurus-almin</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/almin/almin" title="Almin">Almin</a>では元々GitBookを使ったドキュメントサイトを<a href="https://almin.js.org/">https://almin.js.org/</a>で公開していました。
最近、OSS向けのドキュメントサイト作成ツールである<a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>が公開されたのを受けて、<a href="https://www.gitbook.com/">GitBook</a>から<a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>に移行しました。</p>

<ul>
<li>Alminのサイト: <a href="https://almin.js.org/" title="Almin · Flux/CQRS patterns for JavaScript application.">Almin · Flux/CQRS patterns for JavaScript application.</a>

<ul>
<li><a href="https://github.com/almin/almin">https://github.com/almin/almin</a></li>
</ul></li>
</ul>

<p><a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>は<q>Easy to Maintain Open Source Documentation Websites</q>とあるようにOSSのライブラリやプロダクト向けのドキュメントサイトを作る一種の静的サイトジェネレーターです。</p>

<p><a href="https://docusaurus.io/"><img src="http://efcl.info/wp-content/uploads/2017/12/26-1514286444.png" alt="Docusaurus"></a></p>

<p>Facebookから公開されていることからも分かるように、<a href="http://facebook.github.io/jest/" title="Jest">Jest</a>や<a href="https://prettier.io/" title="Prettier">Prettier</a>(Facebookプロダクトではないけど中にFacebookの<a href="https://github.com/vjeux" title="vjeux">vjeux</a>さんがいる)などが利用しています。</p>

<p>特徴としてはMarkdownでドキュメントと目次を書いてドキュメントサイトを作ることができます。
また、Reactを使ったカスタマイズ、バージョニングへの対応、<a href="https://crowdin.com/" title="Crowdin">Crowdin</a>を使った翻訳への対応、ブログ機能やalgoliaを使った検索などライブラリサイト向けの機能を持っています。</p>

<p>ライブラリなどはバージョンで大きく変わったときに旧バージョンのドキュメントを残す仕組みがあると便利です。またリリースノートを書く際に簡単なブログがあると置き場所に困らないので便利です。
(Organizationのコミュニティとして利用できる仕組みを持ったもとしては<a href="https://dev.to/">dev.to</a>などがあります)</p>

<p>また、ReactやESLintのサイトなどでも見かける<a href="https://community.algolia.com/docsearch/" title="DocSearch">Algolia DocSearch</a>との検索連携もオプションも簡単にできます。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Get search feature🔎<a href="https://t.co/5ArxMldalw">https://t.co/5ArxMldalw</a><br><br>Thanks to <a href="https://twitter.com/algolia?ref_src=twsrc%5Etfw">@algolia</a> DocSearch <a href="https://t.co/0Ort7svZdf">pic.twitter.com/0Ort7svZdf</a></p>&mdash; alminjs (@alminjs) <a href="https://twitter.com/alminjs/status/943113112193941504?ref_src=twsrc%5Etfw">December 19, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そのほかの概要については次の記事で紹介されていますが、Jekyllをドキュメントサイト向けに特化したというのが近い感触です。</p>

<ul>
<li><a href="https://docusaurus.io/blog/2017/12/14/introducing-docusaurus.html" title="Introducing Docusaurus · Docusaurus">Introducing Docusaurus · Docusaurus</a></li>
</ul>

<h2 id="gitbookからdocusaurusへの移行">GitBookからDocusaurusへの移行</h2>

<p><a href="https://almin.js.org/">https://almin.js.org/</a>は元々GitBookで動いていましたが、<a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>に移行しています。
GitBookは便利で<a href="https://github.com/asciidwango/js-primer">JavaScriptの入門書</a>や<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScriptプラグインアーキテクチャの本">JavaScriptプラグインアーキテクチャの本</a>でも使っていますが、ドキュメントサイト向けかというとそうでもない気がします。またファイル数が多くなると<code>gitbook serve</code>が異常なほど重くなる問題があります。
<a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>のサイトを見ていて、移行できそうと思ったのとブログ機能なども欲しかったので試しに移行してみました。</p>

<p>詳細は次のPRでまるっと移行しました。
合わせて<a href="https://www.netlify.com/" title="Netlify">Netlify</a>のPRプレビュー機能を使って、PRを出したら<a href="https://deploy-preview-304--almin.netlify.com/">https://deploy-preview-304--almin.netlify.com/</a>という感じでプレビューできるようにして進めました。</p>

<ul>
<li>PR: <a href="https://github.com/almin/almin/pull/304" title="docs(website): use docusaurus instead of GitBook by azu · Pull Request #304 · almin/almin">docs(website): use docusaurus instead of GitBook by azu · Pull Request #304 · almin/almin</a></li>
</ul>

<p>GitBookからDocusaurusへの移行に関するマイグレーションツールは特にありませんが、どちらも次の点が共通しています。</p>

<ul>
<li>ページをMarkdownで書く

<ul>
<li>YAMLなヘッダ + Markdown本体でほぼおなじ</li>
</ul></li>
<li>目次からページへのリンクを貼る

<ul>
<li>GitBookは<code>SUMMARY.md</code>からのリンク</li>
<li>Docusaurusはページに<code>id</code>を振って、<a href="https://github.com/almin/almin/blob/master/website/sidebars.json" title="sidebars.json">sidebars.json</a>から<code>id</code>の一覧をまとめる</li>
</ul></li>
</ul>

<p><a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>は<a href="https://docusaurus.io/docs/en/installation.html" title="Installation · Docusaurus">Installation · Docusaurus</a>にあるように、<code>docusaurus-init</code>をインストールして実行するとサイトのテンプレートを作ってくれます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install --global docusaurus-init
docusaurus-init
</code></pre></div>
<p>テンプレを生成したら、後は地道にリネームして移行しました。</p>

<ul>
<li><code>docs/</code> にMarkdownファイルをフラットに配置する

<ul>
<li>それぞれのMarkdownのYAMLヘッダに<code>id</code>と<code>title</code>を振る</li>
</ul></li>
<li><code>sidebar.json</code> に <code>id</code> をグループごとにまとめる。</li>
<li><a href="https://github.com/almin/almin/blob/master/website/siteConfig.js" title="siteConfig.js">siteConfig.js</a>にサイトタイトルとかを設定する

<ul>
<li>タイトルとかアイコンとかURLとかヘッダとか検索機能の有無、ブログの有無とか</li>
</ul></li>
<li>サイトデザインはGridコンポーネントなどよくあるパターンが用意されている

<ul>
<li>CSSは10行もかかないでいい感じになる</li>
</ul></li>
</ul>

<p><code>docs/</code>(このディレクトリ自体は変更できる)以下のフラットにMarkdownファイルを置かないと行けないのは制約のようです。</p>

<blockquote>
<p>Note that all of your documentation .md files must still reside in a flat hierarchy. You cannot have your documents in nested directories.<br>
<a href="https://docusaurus.io/docs/en/site-config.html#optional-fields" title="siteConfig.js · Docusaurus">siteConfig.js · Docusaurus</a></p>
</blockquote>

<p>Alminではフラットにしてかつファイル名を大文字小文字にするようにしました。
URLは<code>id</code>によって決定されるため、ファイル名とは別で管理できます。</p>

<ul>
<li><a href="https://github.com/almin/almin/tree/master/docs" title="almin/docs/">almin/docs/</a></li>
</ul>

<p><img src="http://efcl.info/wp-content/uploads/2017/12/26-1514284267.png" alt="dicrectory"></p>

<p>こうしたできたのが次のサイトです。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Almin get new website!<a href="https://t.co/5ArxMldalw">https://t.co/5ArxMldalw</a><br><br>Thanks to <a href="https://twitter.com/docusaurus?ref_src=twsrc%5Etfw">@docusaurus</a> <a href="https://t.co/OmrXn9SI8d">pic.twitter.com/OmrXn9SI8d</a></p>&mdash; alminjs (@alminjs) <a href="https://twitter.com/alminjs/status/942068484560715776?ref_src=twsrc%5Etfw">December 16, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>次の記事でも使い方を解説されてるので併せてみるといいかもしれません。</p>

<ul>
<li><a href="https://qiita.com/takeyuichi/items/835f2f5a882e3144e759" title="(OSS向け)ドキュメントツールDocusaurus - Qiita">(OSS向け)ドキュメントツールDocusaurus - Qiita</a></li>
</ul>

<h3 id="algolia-docsearchでの全文検索"><a href="https://community.algolia.com/docsearch/" title="DocSearch">Algolia DocSearch</a>での全文検索</h3>

<p>Docusaurusは<a href="https://community.algolia.com/docsearch/" title="DocSearch">DocSearch</a>での検索連携ができます。
<a href="https://community.algolia.com/docsearch/" title="DocSearch">DocSearch</a>はクロールしていい感じの検索結果とUIを提供してくれるサービです。(OSS向けで無料でやってくれる)</p>

<p><a href="https://eslint.org/">ESLint</a>や<a href="vuejs.org/guide/">Vue</a>、<a href="https://reactjs.org/">React</a>など最近の有名なツールでドキュメントがしっかりとあるものは、使ってることが多いので見たことがある人も多いかもしれません。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/12/26-1514284622.png" alt="eslint"></p>

<p>とても便利なのですが、この申請フローがなぜかマニュアルだったので有効化の仕方をメモって置きます。</p>

<ol>
<li><a href="https://community.algolia.com/docsearch/" title="DocSearch">DocSearch</a>のサイトでURLとメールアドレスを入れて申請する</li>
<li>このサイトのOwnerですかって確認メールがくる

<ul>
<li>このOrganizationのOwner権限を持ってて、このリポジトリで管理してるサイトだよって伝えた</li>
<li>後Docusaurusを使ってるサイトだよって書いた</li>
</ul></li>
<li>有効化したよってメール来る

<ul>
<li><a href="https://github.com/algolia/docsearch-configs/blob/master/configs/almin_js.json" title="docsearch-configs/almin_js.json at master · algolia/docsearch-configs">docsearch-configs/almin_js.json at master · algolia/docsearch-configs</a>が配置される</li>
</ul></li>
</ol>

<p>さすがにそのうち自動化される気がしますが、<a href="https://github.com/algolia/docsearch-configs/blob/master/configs/almin_js.json" title="docsearch-configs/almin_js.json at master · algolia/docsearch-configs">docsearch-configs/almin_js.json at master · algolia/docsearch-configs</a>を見る感じだとクロールする設定を追加したら有効化されるようです(申請から2-3日かかります)</p>

<h2 id="おわりに">おわりに</h2>

<p><a href="https://docusaurus.io/" title="Docusaurus">Docusaurus</a>はまだ公開されたばかりで、おかしなところはいくつかありますが、よくできていてドキュメントに必要な機能が大体あって便利です。
(<a href="https://github.com/azu/gitbook-plugin-include-codeblock" title="gitbook-plugin-include-codeblock">gitbook-plugin-include-codeblock</a>みたいなコードインポート機能は欲しいけど、プラグインの仕組みがあるので何とかできそう)</p>

<p>オープンソースで公開されているので、色々コントビュートしていきたいなという感じです。</p>

<ul>
<li><a href="https://github.com/facebook/Docusaurus" title="facebook/Docusaurus: Easy to maintain open source documentation websites.">facebook/Docusaurus: Easy to maintain open source documentation websites.</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ドキュメントツール なんか個性的なデザインをつくれる柔軟性よりも、簡単に作れるとかなんとなくいい感じになるが求められてる感じ</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/944196537126567937?ref_src=twsrc%5Etfw">December 22, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Docusaurusはこんなツールです。(GitBookもそうではあった)</p>

<p><a href="https://almin.js.org/">https://almin.js.org/</a> はDocusaurusが公開された翌日にDocusaurus化したので、Facebook関係以外で初めて<a href="docusaurus.io/en/users.html">Docusaurus User</a>に載せてもらいました。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://t.co/x6IYfCujya">https://t.co/x6IYfCujya</a><br><br>Almin is new user of docusaurus! <a href="https://t.co/r6XHhUvEHK">pic.twitter.com/r6XHhUvEHK</a></p>&mdash; alminjs (@alminjs) <a href="https://twitter.com/alminjs/status/942896757024866304?ref_src=twsrc%5Etfw">December 18, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint 10.0.0 リリース</title>
   <link href="http://efcl.info/2017/12/18/textlint-10.0.0/"/>
   <updated>2017-12-18T19:54:00+09:00</updated>
   <id>http://efcl.info/2017/12/18/textlint-10.0.0</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint/tree/master/packages/textlint" title="textlint">textlint</a> 10.0.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/textlint%4010.0.0" title="Release textlint 10.0.0 · textlint/textlint">Release textlint 10.0.0 · textlint/textlint</a></li>
</ul>

<h2 id="変更点">変更点</h2>

<p><a href="https://github.com/textlint/textlint/releases/tag/textlint%4010.0.0" title="textlint 10.0.0">textlint 10.0.0</a>の主な変更点です。</p>

<h2 id="🆕-features">🆕 Features</h2>

<h3 id="textlint-ast-node-typesがtxtnodeの型定義を持つように">@textlint/ast-node-typesが<code>TxtNode</code>の型定義を持つように</h3>

<p><a href="https://github.com/textlint/textlint/tree/master/packages/%40textlint/ast-node-types" title="@textlint/ast-node-types">@textlint/ast-node-types</a>という内部的に使ってるものがtextlintのパーサが作る<code>TxtNode</code>の型定義を持つようになりました。<a href="https://github.com/textlint/textlint/issues/358">#358</a> </p>

<p>textlintのASTを扱いたいTypeScriptユーザーはこれを利用できるので、textlint pluginを作りたいとかしたい人は便利かもしれません。</p>

<p>詳しくは<a href="https://github.com/textlint/textlint/blob/master/docs/txtnode.md">TxtNodeのドキュメント</a>を見てください</p>

<h3 id="textlintがtypescriptで扱えるように-248">textlintがTypeScriptで扱えるように <a href="https://github.com/textlint/textlint/issues/248">#248</a></h3>

<p>以前の9.0.0のリリースでtextlintのコアエンジンである<a href="https://github.com/textlint/textlint/tree/master/packages/%40textlint/kernel" title="@textlint/kernel">@textlint/kernel</a>をTypeScript化しました。</p>

<ul>
<li><a href="http://efcl.info/2017/11/06/textlint-core-refactoring/" title="textlintのコアをTypeScriptで書き直した、textlintの今後について | Web Scratch">textlintのコアをTypeScriptで書き直した、textlintの今後について | Web Scratch</a></li>
</ul>

<p>今回の10.0.0で<a href="https://github.com/textlint/textlint/tree/master/packages/%40textlint/kernel" title="@textlint/kernel">@textlint/kernel</a>と<a href="https://github.com/textlint/textlint/tree/master/packages/textlint" title="textlint">textlint</a>(CLIも含む)がどちらもTypeScript化しました。
これによりTypeScriptからtextlintが扱いやすくなりました。</p>
<div class="highlight"><pre><code class="language-ts" data-lang="ts"><span class="c1">// Types</span>
<span class="kr">import</span> <span class="p">{</span>
    <span class="nx">TextlintResult</span><span class="p">,</span>
    <span class="nx">TextlintFixResult</span><span class="p">,</span>
    <span class="nx">TextlintFixCommand</span><span class="p">,</span>
    <span class="nx">TextlintMessage</span><span class="p">,</span>
    <span class="c1">// Kernel rule/filter/plugin format</span>
    <span class="nx">TextlintKernelRule</span><span class="p">,</span>
    <span class="nx">TextlintKernelFilterRule</span><span class="p">,</span>
    <span class="nx">TextlintKernelPlugin</span><span class="p">,</span>
    <span class="c1">// Notes: Following interface will be separated module in the future.</span>
    <span class="c1">// textlint rule interface</span>
    <span class="nx">TextlintRuleCreator</span><span class="p">,</span>
    <span class="nx">TextlintRuleOptions</span><span class="p">,</span>
    <span class="c1">// textlint filter rule interface</span>
    <span class="nx">TextlintFilterRuleCreator</span><span class="p">,</span>
    <span class="nx">TextlintFilterRuleOptions</span><span class="p">,</span>
    <span class="c1">// textlint plugin interface</span>
    <span class="nx">TextlintPluginCreator</span><span class="p">,</span>
    <span class="nx">TextlintPluginOptions</span><span class="p">,</span>
    <span class="nx">TextlintPluginProcessor</span><span class="p">,</span>
    <span class="nx">TextlintPluginProcessorConstructor</span>
<span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;@textlint/kernel&quot;</span><span class="p">;</span>
</code></pre></div>
<p>また、まだちょっとPublic APIの型定義が曖昧になっている(大抵はJSDocが正しい)ので、以下のIssueでPublic APIに対するテストの変換を行っています。
本体のソースコードはTypeScript化されていますが、テストコードはまだJavaScriptのままであるため、そこを徐々に変換していく予定です。(この変換する際に型がおかしいなら一緒に直す必要がある)</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/369" title="Convert tests to TypeScript https://github.com/textlint/textlint/issues/369">Convert tests to TypeScript #369</a></li>
</ul>

<p>Reactのインフラ整備でもPublic APIに対するテスト重要性が語られていますが、まさにこういう移行時にはPublic APIへのテストを良くしていくと安定性が向上する感じです。</p>

<p><a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html" title="Behind the Scenes: Improving the Repository Infrastructure - React Blog">Behind the Scenes: Improving the Repository Infrastructure - React Blog</a></p>

<p>一緒に手伝ってくれる人は、いつでも募集しているのでTypeScript周りを改善したい人は上のIssueを見てみてください。(個人的には<a href="https://github.com/textlint/textlint/tree/master/packages/%40textlint/kernel" title="@textlint/kernel">@textlint/kernel</a>のPublic APIのテストがまだ足りていない印象です)</p>

<h2 id="🔥-breaking-change">🔥 Breaking Change</h2>

<p>10.0.0なのでいくつか破壊的な変更がありますが、textlintをCLIとして使う一般的なユーザーには殆ど影響はほぼありません。
主にtextlintを<code>require(&quot;textlint&quot;)</code>のようにモジュールとして使っている人は影響があるかもれません。</p>

<h3 id="textlint-export-as-es-module-337-344">textlint: Export as ES module <a href="https://github.com/textlint/textlint/issues/337">#337</a> <a href="https://github.com/textlint/textlint/issues/344">#344</a></h3>

<p>CommonJSとして出力していたものが、ES Modulesとして出力するように変更されました。</p>

<h4 id="before">Before</h4>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">textlint</span><span class="p">,</span>
  <span class="nx">TextLintEngine</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="after">After</h3>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="p">{</span> 
  <span class="nx">textlint</span><span class="p">,</span>
  <span class="nx">TextLintEngine</span>
<span class="p">}</span>
</code></pre></div>
<p>これによってimportの仕方によっては影響があるかもしれません。
以前からnamed importしていた人には影響がないと思います。</p>

<p>次のような形で利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">textlint</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;textlint&quot;</span>
</code></pre></div>
<p>or </p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">textlint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;textlint&quot;</span><span class="p">).</span><span class="nx">textlint</span>
</code></pre></div>
<h3 id="stop-to-export-unused-name-344">Stop to export unused name <a href="https://github.com/textlint/textlint/issues/344">#344</a></h3>

<p>次の使われてない値をexportしないようにしました。</p>

<ul>
<li><code>TextLintNodeType</code></li>
<li><code>TextLintMessageSeverityLevel</code></li>
<li><code>TextLintMessageType</code>

<ul>
<li>Use <code>@textlint/ast-node-types</code> insteadof it</li>
</ul></li>
</ul>

<h2 id="📝-documentaion">📝 Documentaion</h2>

<h3 id="improve-contributing-guide">Improve <a href="https://github.com/textlint/textlint/blob/master/.github/CONTRIBUTING.md" title="Contributing Guide">Contributing Guide</a>.</h3>

<p>Issues/PR: <a href="https://github.com/textlint/textlint/issues/380">#380</a> <a href="https://github.com/textlint/textlint/issues/379">#379</a> <a href="https://github.com/textlint/textlint/issues/355">#355</a> <a href="https://github.com/textlint/textlint/issues/352">#352</a> <a href="https://github.com/textlint/textlint/issues/353">#353</a> <a href="https://github.com/textlint/textlint/issues/341">#341</a> by <a href="https://github.com/leko">@Leko</a> and <a href="https://github.com/0x6b">@0x6b</a></p>

<p><a href="https://github.com/textlint/textlint/blob/master/.github/CONTRIBUTING.md" title="Contributing Guide">Contributing Guide</a>が色々と改善されました。
textlintにコミットしてみたいという人は、ここを読むとどうやってテストするかや直す場所に見つけ方などが分かります。</p>

<p>次の記事などにも書いていますが、textlintのコントビュートは歓迎です。
1つのテストを追加/変換、typoの修正、ドキュメントの追加、機能の追加/修正など色々とできることはあります。</p>

<p>簡単で手が出しやすいIssueには<a href="https://github.com/textlint/textlint/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"><code>good first issue</code></a>というラベルを付けているので、まずはそこから見てみると良いかもしれません。</p>

<ul>
<li><a href="http://efcl.info/2017/11/06/textlint-core-refactoring/">textlintのコアをTypeScriptで書き直した、textlintの今後について | Web Scratch</a></li>
<li><a href="https://gist.github.com/azu/2b482e8e2aa636970f5f6110f6488719">textlintの直し方</a></li>
</ul>

<h2 id="♻️-polish">♻️ Polish</h2>

<h3 id="monorepo-270">Monorepo <a href="https://github.com/textlint/textlint/issues/270">#270</a></h3>

<p><a href="https://github.com/leko">@Leko</a>さんによって、次のモジュールは<a href="https://github.com/textlint/textlint">textlint</a>のmonorepoに追加されました。</p>

<ul>
<li>textlint-formatter <a href="https://github.com/textlint/textlint/issues/359">#359</a></li>
<li>textlint-ast-test <a href="https://github.com/textlint/textlint/issues/357">#357</a></li>
<li>txt-ast-traverse <a href="https://github.com/textlint/textlint/issues/356">#356</a> </li>
<li>textlint-fixer-formatter <a href="https://github.com/textlint/textlint/issues/347">#347</a> </li>
</ul>

<p><code>textlint-plugin-html</code>をmonorepoに入れるべきかという議論があり、まだこれだけimportできていません。
主に自分がhtmlでチェックする対象を持っていないため、コアメンテナがいない状態でmonorepoに入れるのは良くないためです。
もし、textlintのHTMLプラグインに興味があり、もっと良くしていきたいという人は次のIssueに見てください。
コアにメンテをできる人がいるならばmonorepoに取り入れて改善するべきだと思います。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/pull/364" title="Import textlint-plugin-html to monorepo by Leko · Pull Request #364 · textlint/textlint">Import textlint-plugin-html to monorepo by Leko · Pull Request #364 · textlint/textlint</a></li>
</ul>

<h2 id="🎉-new-contributors">🎉 New Contributors</h2>

<ul>
<li><a href="https://github.com/leko">@Leko</a> – リファクタリングやバグ修正、monorepo化などを手伝ってくれました</li>
<li><a href="https://github.com/0x6b">@0x6b</a> - <a href="https://github.com/textlint/textlint/blob/master/.github/CONTRIBUTING.md" title="Contributing Guide">Contributing Guide</a>の改善などを手伝ってくれました</li>
</ul>

<p>何度も書いてますがコントビュートはいつでも歓迎です。</p>

<ul>
<li><a href="https://gist.github.com/azu/2b482e8e2aa636970f5f6110f6488719">textlintの直し方</a></li>
</ul>

<p>例えばルールを書くのもコントビュートの一種です。
textlintでは<a href="https://github.com/textlint-rule/organization" title="textlint-rule/organization">textlint-rule/organization</a>(ルール全般)や<a href="https://github.com/textlint-ja/textlint-ja" title="textlint-ja/textlint-ja">textlint-ja/textlint-ja</a>(日本語に特化したルール)を扱うOrganizationがあります。
人依存よりもメンテナンス性が上る可能性があるので、Organizationにルールを置きたい場合は何かしらの方法でmentionしてください。</p>

<ul>
<li>上記のリポジトリにIssueを立てるか</li>
<li>Gitterでmentionする <a href="https://gitter.im/textlint-ja/textlint-ja?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/textlint-ja/textlint-ja.svg" alt="Gitter"></a></li>
<li>Twitterで<a href="https://twitter.com/azu_re">@azu_re</a>や<code>#textlint</code>などに書き込む</li>
</ul>

<h2 id="その他">その他</h2>

<p>英語圏でも使われるようになってきたので、英語系のルールも増えてきています。</p>

<ul>
<li><a href="https://github.com/sapegin/textlint-rule-apostrophe">sapegin/textlint-rule-apostrophe: Textlint rule to check correct apostrophe usage</a></li>
<li><a href="https://github.com/sapegin/textlint-rule-title-case">sapegin/textlint-rule-title-case: Textlint rule to ensure that titles are using AP/APA style</a></li>
<li><a href="https://github.com/sapegin/textlint-rule-diacritics" title="sapegin/textlint-rule-diacritics: Textlint rule to check correct usage of diacritics">sapegin/textlint-rule-diacritics: Textlint rule to check correct usage of diacritics</a></li>
</ul>

<p>またtextlintのラッパーで設定なしで<a href="https://github.com/andrepolischuk/docslint" title="docslint">docslint</a>というツールも登場しました。
ESLintのXOやstandardに近いかな?</p>

<h2 id="⏭️-next">⏭️ Next</h2>

<p>ロジックを扱う<a href="https://github.com/textlint/textlint/tree/master/packages/%40textlint/kernel" title="@textlint/kernel">@textlint/kernel</a>や<a href="https://github.com/textlint/textlint/tree/master/packages/textlint" title="textlint">textlint</a>などがTypeScript化できたことでモジュールとして扱いやすくなる基盤ができてきていると思います。</p>

<p>そのため、次にやるのはtextlintのもう一つの本体であるルールの改善をやっていきます。
最近、Google Developer Documentation Style Guideのtextlintルールである<a href="https://github.com/textlint-rule/textlint-rule-preset-google" title="textlint-rule-preset-google">textlint-rule-preset-google</a>を作っていますが、文章を真面目に扱うと&quot;センテンス&quot;や&quot;セクション&quot;といった構造的な文脈を扱うのは避けられません。</p>

<p>次のキャピタライズを扱うルールは、ちゃんとセンテンスを扱えないことからくるバグがあります。</p>

<ul>
<li><a href="https://github.com/textlint-rule/textlint-rule-en-capitalization/issues/2" title="Complains about file names in text · Issue #2 · textlint-rule/textlint-rule-en-capitalization">Complains about file names in text · Issue #2 · textlint-rule/textlint-rule-en-capitalization</a></li>
</ul>

<p><code>textlint</code>のASTである<a href="https://github.com/textlint/textlint/blob/master/docs/txtnode.md" title="TxtAST">TxtAST</a>では<code>Paragraph</code>や<code>Link</code>と行ったNodeはありますが、意味論的な<code>Sentence</code>や<code>Section</code>といった概念はありません。
これらは言語によって扱いが異なり、言語に依存するものごとはtextlintのコアには含めることができないためです。(HTMLの<code>&lt;section&gt;</code>要素のようなものはマークアップにアレばいいけどそれがない場合は言語やコンテキストで推測するしかない)</p>

<p>この辺は<a href="http://redpen.cc/" title="RedPen">RedPen</a>だと<code>Section</code>という概念を持っていたりするように、なんとなくのルールは大体あるような気がしています。</p>

<ul>
<li><a href="http://redpen.cc/docs/latest/index.html#model-structure" title="RedPen 1.10 Documentation">RedPen 1.10 Documentation</a></li>
</ul>

<p>この辺のギャップからくるルールの書きにくさを解消するため、コアが持つUtilityライブラリを整備していく予定です。適当に文字列に変換してから&quot;Sentence&quot;などいった塊を作るとASTに比べて情報が欠落してしまって問題があるという経験則があるため、ASTレベルのUtilを拡充していく形です。</p>

<p>主に<code>Section</code>、<code>Sentence</code>、CSTをどうにかしていきたいです。</p>

<ul>
<li>⬆️  <code>Section</code> node は <code>Paragraph</code> nodes の集合から作る

<ul>
<li>Related: <a href="https://github.com/azu/text-testing/tree/master/packages/select-section" title="select-section">select-section</a></li>
</ul></li>
<li>⬇️  <code>Sentence</code> nodes は <code>Paragraph</code> nodes から分解して作る

<ul>
<li>Related: <a href="https://github.com/azu/sentence-splitter" title="sentence-splitter">sentence-splitter</a></li>
</ul></li>
<li>↔️ <a href="https://github.com/syntax-tree/nlcst" title="NLCST">NLCST</a>のようにASTとCSTを相互にやり取りする仕組み

<ul>
<li>Related: <a href="https://github.com/wooorm/parse-english" title="parse-english">parse-english</a>, <a href="https://github.com/azu/nlp-pattern-match/tree/master/packages/nlcst-parse-english" title="nlcst-parse-english">nlcst-parse-english</a> and <a href="https://github.com/azu/nlp-pattern-match/tree/master/packages/nlcst-parse-japanese" title="nlcst-parse-japanese">nlcst-parse-japanese</a></li>
</ul></li>
</ul>

<p>次のIssueに詳細があるので興味がある人は見てください。
また、合わせてtextlintルールのテストライブラリである<a href="https://github.com/textlint/textlint/tree/master/packages/textlint-tester" title="textlint-tester">textlint-tester</a>も改善していきたいと思います。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/issues/366">Core rule utility · Issue #366 · textlint/textlint</a></li>
<li><a href="https://github.com/textlint/textlint/issues/396">textlint-tester: to TypeScript · Issue #396 · textlint/textlint</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>ページ上でずっと動いているsetTimeout、setInterval、requestAnimationFrameを見つけてパフォーマンス改善する</title>
   <link href="http://efcl.info/2017/12/07/capture-living-timer/"/>
   <updated>2017-12-07T10:25:00+09:00</updated>
   <id>http://efcl.info/2017/12/07/capture-living-timer</id>
   <content type="html"><![CDATA[ <p>複雑なウェブアプリケーションになってくると、1つのページで複数のTimerなどを回すことがあります。</p>

<p>例えば、Twitterのようなアプリならば、ポーリングで更新するために<code>setInverval</code>のようなタイマーを回します。
また、ゲームなどCanvasで描画を行うアプリケーションならば、メインループを<code>requestAnimationFrame</code>で回します。</p>

<p>このように色々なタイマー系がありますが、アプリが多機能になっていくと色々なタイマーが同時に動くようになっていきます。
特に問題がなりやすいのが表示中だけタイマーを回すコンポーネントです。</p>

<p>よくあるのが次のようなmount時にtimerを開始して、unmount時にtimerを停止するコンポーネントです。
この実装はunmount時に止めているので問題ありませんが、<code>componentWillUnmount</code>の実装を忘れるとそのタイマーはコンポーネントが消えた後も回り続けます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">TimerComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">startTimer</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">componentWillUnmount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stopTimer</span><span class="p">();</span> <span class="c1">// &lt;= これを止め忘れるとTimerリーク</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>このような意図しないで動いてるタイマーなどを見つけるspyスクリプトを書きました</p>

<ul>
<li><a href="https://gist.github.com/azu/d7942102dc5282b0eca859149791c3f0" title="Logging Timer and requestAnimationFrame">Logging Timer and requestAnimationFrame</a></li>
</ul>

<h2 id="使い方">使い方</h2>

<ol>
<li>次のスクリプトをページに読み込ませる<br>

<ul>
<li>コンソールにコピペして実行しても大丈夫</li>
<li>Non strict modeじゃないと動かないことやってるで混ぜる場合は注意</li>
</ul></li>
<li>結果を取りたくなったら <code>window.getContexualLogResult()</code>を叩く</li>
</ol>

<p>&quot;setTimeout&quot;, &quot;setInterval&quot;, &quot;requestAnimationFrame&quot;の実行元の関数毎に呼ばれた回数をまとめて表示してくれます。
またスタックトレースも無理やり入れているので、意図しない呼び出しが頻発しているならその部分のコードを直す目安となります。</p>

<script src="https://gist.github.com/azu/d7942102dc5282b0eca859149791c3f0.js"></script>

<p>例えば、twtter.comでこれを実行してみると<code>setInterval</code>と<code>requestAnimationFrame</code>が回っていることが分かります。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/12/07-1512611803.png" alt="image"></p>

<p>これは定期的な更新をするために呼び出していることがわかります。</p>

<p>タイムラインツールでも記録はできるのですが、呼び出し元毎のグルーピングやフィルタリングが難しいです。(良い方法があるなら知りたい)
&quot;setTimeout&quot;, &quot;setInterval&quot;, &quot;requestAnimationFrame&quot;を乗っ取ってログを取ることで実装しています。</p>

<p>一回のタイマー発火ごとの処理は小さくても、スペック弱いデバイスではネックとなることがあるのでそのような無駄な処理を発見する目的で作りました。
(Chromeの<a href="https://umaar.com/dev-tips/88-cpu-throttling/" title="CPU Throttling - Chrome DevTools - Dev Tips">CPU Throttling</a>などでシミュレートすると問題を見つけやすいです)</p>

<p>最近は、分かりやすい指標が既にある起動時間のパフォーマンスではなく、アプリを起動後のパフォーマンスを改善しています。</p>

<p>次の記事で作ってたものはそういうところを改善する目安を探すためのツールです。</p>

<ul>
<li><a href="http://efcl.info/2017/11/15/performance.mark-metadata/" title="performance.markにメタデータを紐付けできるライブラリを書いた | Web Scratch">performance.markにメタデータを紐付けできるライブラリを書いた | Web Scratch</a></li>
<li><a href="https://dev.to/azu/performancemark-with-medata-is-useful-for-real-user-monitoring-54p" title="`performance.mark` with metadata is useful for Real user monitoring"><code>performance.mark</code> with metadata is useful for Real user monitoring</a></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これのFB Flux版を実装してたけど、やっぱりこういうの必要だと思う。ボトルネックが可視化されるので特殊な技能がなくてもパフォーマンス悪いところが発見できる。 &quot;Almin + React/Vue.jsのパフォーマンスプロフ…&quot; <a href="https://t.co/9alBY5tnca">https://t.co/9alBY5tnca</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/933888717101588480?ref_src=twsrc%5Etfw">November 24, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>アプリの起動後の指標として、何かした時に反応が100ms以内、アニメーションが10ms以内、アイドル時の処理は50ms以上以内のブロックにする(long task)、Loadは1000ms以内などを指標を定めた<a href="https://developers.google.com/web/fundamentals/performance/rail?hl=ja" title="RAIL">RAIL</a>モデルなどがあります。</p>

<p>これらはマイクロなベンチマークを取ってからそれを改善していくという積み重ねをしています。
この記事で書いたspyスクリプトも、無駄に動くタイマーが減ればその分処理が減ったということが明確であるため、それを検出するために作りました。</p>

<p>また、アプリ起動後は何もしてないときも体感が良いということも必要になります。
例えばユーザー操作がないけど、タイムラインがスムーズに更新される、映像がスムーズに流れる、放置ゲームを眺めててつっかかりがないとか、リアルタイムにデータを受信してて止まらないなどがこれにあたります。</p>

<p>これらの放置時の更新は大体裏では&quot;setTimeout&quot;, &quot;setInterval&quot;, &quot;requestAnimationFrame&quot;などを使っていることが多いです。
(WebRTCやWebSocketなどもありますが、それらが止まってないかを定期的にチェックする仕組みなどにも関係します)</p>

<p>タイマー系は意図しないタイミングで他の処理と重なるとUIを固めたりするので、<a href="https://developer.mozilla.org/ja/docs/Web/API/Window/requestIdleCallback" title="requestIdleCallback">requestIdleCallback</a>と組み合わせるなどの工夫が必要になるかもしれません。</p>

<ul>
<li><a href="https://github.com/azu/faao/blob/f52920656db792a0e24fc8bcbbc555c33b02b623/src/infra/time-sheduler/TimeScheduler.ts">https://github.com/azu/faao/blob/f52920656db792a0e24fc8bcbbc555c33b02b623/src/infra/time-sheduler/TimeScheduler.ts</a></li>
</ul>

<p>その他</p>

<ul>
<li><a href="https://havelog.ayumusato.com/develop/javascript/e725-timer_vs_raf.html" title="requestAnimationFrame とタイマーの今更な比較とデモ ::ハブろぐ">requestAnimationFrame とタイマーの今更な比較とデモ ::ハブろぐ</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>shallow-equal for Object/React props</title>
   <link href="http://efcl.info/2017/11/30/shallow-equal/"/>
   <updated>2017-11-30T10:12:00+09:00</updated>
   <id>http://efcl.info/2017/11/30/shallow-equal</id>
   <content type="html"><![CDATA[ <p>オブジェクトとReactのProps向けのShallow(浅い) equalライブラリを書きました。
Shallow Equalは対象のオブジェクトのプロパティをそれぞれ1段だけ比較することを言います。
ものすごく単純に書くならば次のようなことをするライブラリです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">targetObject</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kr">const</span> <span class="nx">isEqualed</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">object</span><span class="p">).</span><span class="nx">some</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">targetObject</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
<span class="p">});</span>
</code></pre></div>
<ul>
<li><a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a></li>
<li><a href="https://github.com/azu/shallow-equal-props" title="shallow-equal-props">shallow-equal-props</a></li>
</ul>

<p>どちらもTypeScriptに対応していて、シンプルにオブジェクト同士を比較してbooleanを返すだけのライブラリです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="p">{</span> <span class="nx">shallowEqual</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;shallow-equal-object&quot;</span><span class="p">);</span>
<span class="nx">shallowEqual</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">});</span> <span class="c1">// =&gt; true</span>
<span class="nx">shallowEqual</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">42</span> <span class="p">});</span> <span class="c1">// =&gt; false</span>
<span class="nx">shallowEqual</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="p">});</span> <span class="c1">// =&gt; false</span>
</code></pre></div>
<p><a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a>は、値の比較関数をカスタマイズできます。
デフォルトの比較関数は<code>Object.is</code>メソッド相当の実装がつかわれています。
これは、Reactの<code>PureComponent</code>やECMAScriptのProposalとして提出されていた(現在は取り下げ)<a href="https://github.com/sebmarkbage/ecmascript-shallow-equal" title="ecmascript-shallow-equal">ecmascript-shallow-equal</a>と同じ比較となります。</p>

<p><a href="https://github.com/azu/shallow-equal-props" title="shallow-equal-props">shallow-equal-props</a>は、この値の比較関数をReactのProps向けにしただけのバージョンです。
具体的には、<code>React.Element</code>同士の比較を考慮したバージョンなので、<code>props</code>(<code>children</code>も含む)に<code>React.Element</code>を使っていないなら大した違いはありません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">shallowEqual</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span> <span class="p">},</span> <span class="p">{</span>
    <span class="nx">customEqual</span><span class="o">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">b</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">});</span> <span class="c1">// =&gt; false</span>
</code></pre></div>
<p>どちらもデバッグモードに対応しています。
実際にshallowEqualしたことがある人はわかると思いますが、なぜそれが<code>false</code>になるのかは結構分かりにくいことが多いです。どのプロパティが異なるから<code>false</code>になったということをデバッグ時に知りたいがことが多々あります。</p>

<p>どちらのライブラリも <code>{ debug: true }</code> をオプションに渡すことでコンソールに、比較結果が<code>false</code>となった理由とオブジェクトを表示してくれます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">shallowEqual</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span>
    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">});</span>
<span class="c1">// &quot;objectA is not object.&quot;</span>

<span class="nx">shallowEqual</span><span class="p">({},</span> <span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">});</span>
<span class="c1">// &quot;objectB is not object.&quot;</span>

<span class="nx">shallowEqual</span><span class="p">({},</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span>
    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">});</span>
<span class="c1">// &quot;object key length is not same&quot;</span>

<span class="nx">shallowEqual</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span>
    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">});</span>
<span class="c1">// &quot;key:a is not equals between A and B.&quot;</span>
</code></pre></div>
<p>このShallow Equalがどのようなときに役立つかというと大きなオブジェクトの塊を比較するときに、オブジェクトの作り方次第では比較コストが大きく変わります。</p>

<p>ReactやReduxなどでよく言われる状態のオブジェクトのをImmutableにするのはこれに関連しています。</p>

<ul>
<li><a href="http://nekogata.hatenablog.com/entry/2013/06/15/013752" title="「オブジェクトをイミュータブルにしろ」って言うけど、それってたとえば状態が変わったらオブジェクト作り直すってことでしょ、ちょう非効率じゃん。って思ってたんだけど、 - 猫型の蓄音機は 1 分間に 45 回にゃあと鳴く">「オブジェクトをイミュータブルにしろ」って言うけど、それってたとえば状態が変わったらオブジェクト作り直すってことでしょ、ちょう非効率じゃん。って思ってたんだけど、 - 猫型の蓄音機は 1 分間に 45 回にゃあと鳴く</a></li>
</ul>

<p>実際にReactの例を見てみます。
次のサンプルは、恣意的な<code>JSON.stringify</code>でのDeepな比較の問題点を見るために作ったものです。
そのためDeepEqualが悪いという話ではありません。</p>

<h2 id="deep-equal-json-stringify-とshallow-equal">Deep Equal(<code>JSON.stringify</code>)とShallow Equal</h2>

<p>サンプルコードは次のリポジトリにあります。</p>

<ul>
<li><a href="https://github.com/azu/avoid-json-stringify-on-react" title="azu/avoid-json-stringify-on-react: Deep equal vs. Shallow equal on React&amp;#39;s shouldComponentUpdate">azu/avoid-json-stringify-on-react: Deep equal vs. Shallow equal on React&#39;s shouldComponentUpdate</a></li>
</ul>

<p>このサンプルではDeep Equalの実装例として<code>JSON.stringify</code>した結果同士を比較するものを利用しています。最近、Reactのドキュメントにおいて<code>shouldComponentUpdate</code>の実装で<code>JSON.stringify</code>を使うべきではないということが追加されています。
これを検証する目的で作ったサンプルコードです。</p>

<blockquote>
<p>We do not recommend doing deep equality checks or using JSON.stringify() in shouldComponentUpdate(). It is very inefficient and will harm performance.
<a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate">https://reactjs.org/docs/react-component.html#shouldcomponentupdate</a></p>
</blockquote>

<p><strong>関連するIssue</strong></p>

<ul>
<li><a href="https://github.com/erikras/redux-form/issues/3461">Performance issue (crash) in large apps when using Field with children in React v16 · Issue #3461 · erikras/redux-form</a></li>
<li><a href="https://github.com/reactjs/reactjs.org/issues/7">Document that deep equality checks and JSON.stringify() in shouldComponentUpdate() are a bad idea · Issue #7 · reactjs/reactjs.org</a></li>
</ul>

<p>このサンプルでは、すべてのコンポーネントは<code>BaseComponent</code>を継承しています。
<code>BaseComponent</code>はDeep Equal(<code>JSON.stringify</code>)とShallow Equalが切り替えできるようになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">shallowEqual</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;shallow-equal-object&quot;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">const</span> <span class="nx">isDeepEqual</span> <span class="o">=</span> <span class="p">(</span><span class="nx">prevState</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">nextState</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">prevState</span><span class="p">)</span> <span class="o">===</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">nextState</span><span class="p">);</span>
<span class="p">};</span>
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">isShallowEqual</span> <span class="o">=</span> <span class="p">(</span><span class="nx">prevState</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">nextState</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">shallowEqual</span><span class="p">(</span><span class="nx">prevState</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">);</span>
<span class="p">};</span>

<span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">BaseComponent</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">shouldUpdate</span> <span class="o">=</span> <span class="o">!</span><span class="nx">isShallowEqual</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">shouldUpdate</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>アプリの構造はシンプルで<code>&lt;A/&gt;</code>というネストが深い用途、でっかいリストを描画する<code>&lt;List /&gt;</code>があります。<code>&lt;button /&gt;</code>を押すたびに、<code>state.a</code>の中にある<code>count</code>が+1ずつ更新されるだけです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/11/30-1512048718.png" alt="image"></p>

<p>ここで<code>&lt;List /&gt;</code>に渡す<code>state.largeList</code>は初回時に固定の10000コの値をもつ配列となります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">frozenLargeList</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10000</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">);</span>
</code></pre></div>
<p>ボタン押しても<code>List</code>のpropsである<code>state.largeList</code>は変更されないので、<code>&lt;List/&gt;</code>は一度描画されたら更新する必要がありません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;App&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">A</span> <span class="p">{...</span><span class="nx">state</span><span class="p">.</span><span class="nx">a</span><span class="p">}</span><span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClick</span><span class="p">}</span><span class="o">&gt;+</span><span class="mi">1</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
    <span class="o">&lt;</span><span class="nx">hr</span><span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">List</span> <span class="nx">items</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">largeList</span><span class="p">}</span><span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="err">/div&gt;</span>
</code></pre></div>
<p>この渡されたpropsが同じ値であるなら、更新しないというのをReactでは<code>BaseComponent</code>ででてきた<code>shouldComponentUpdate</code>メソッドの実装で解決できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">BaseComponent</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>デフォルトの<code>shouldComponentUpdate</code>は常に<code>true</code>を返すので、常に新しい値が来たら更新することになります。
これを防止する方法として<code>this.props</code>(今のprops)と次にくる<code>nextProps</code>を比較して、同じなら<code>false</code>を返せば更新されないという寸法です。</p>

<p>今回はこの実装をDeep Equal(<code>JSON.stringify</code>)とShallow Equal(<a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a>)で比較しています。(<code>React.PureComponent</code>はShallow Equalと同じ実装になります)</p>

<p><code>&lt;A /&gt;</code>は毎回新しいPropsを受け取るので更新されますが、<code>&lt;List items={state.largeList}/&gt;</code>は同じpropsを毎回受け取るので更新する必要がありません。</p>

<p>どちらもDeepもShallow(<code>state.largeList</code>の参照先は毎回同じ)も比較結果は<code>true</code>となり、つまりそれを反転して返せば更新されません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">BaseComponent</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">shouldUpdate</span> <span class="o">=</span> <span class="o">!</span><span class="nx">isShallowEqual</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">shouldUpdate</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>この例ではわざわざ<a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a>を使ってますが、Reactには<code>React.PureComponent</code>があるので、そちらを使えば実装は特にいらないです。
(<a href="https://github.com/azu/shallow-equal-props" title="shallow-equal-props">shallow-equal-props</a>は<a href="https://github.com/facebook/react/issues/8669">React.PureComponentとはChildrenとかのReact.Elementの扱い</a>が違いますが、大抵は<code>React.PureComponent</code>で十分です。この例ではこの違いは特に関係ないので省きます。)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">export</span> <span class="kr">abstract</span> <span class="kr">class</span> <span class="nx">BaseComponent</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PureComponent</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="nx">S</span><span class="o">&gt;</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>ここで本題のDeep Equal(<code>JSON.stringify</code>)とShallow Equalの比較のコストの差の話がでてきます。このコストの差は<code>shouldComponentUpdate</code>の処理自体にどれぐらいかかっているかを調べれば比較できます。</p>

<p>React 15まではreact-addon-perfsで比較できましたが、React 16では<code>?react_perf</code>の<code>performance.mark</code>の結果を使うのが簡単です。</p>

<p>実行前に<code>PerformanceObserver</code>でReactが<code>performance.measure</code>した結果をコンソールログに出すように仕込んでおきます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="nb">window</span> <span class="nx">as</span> <span class="nx">any</span><span class="p">).</span><span class="nx">PerformanceObserver</span><span class="p">((</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">components</span><span class="o">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">let</span> <span class="nx">totalDuration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">list</span><span class="p">.</span><span class="nx">getEntries</span><span class="p">().</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// Display each reported measurement on console</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;shouldComponentUpdate&quot;</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">components</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="nx">totalDuration</span> <span class="o">+=</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Name: &quot;</span> <span class="o">+</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span>
                <span class="s2">&quot;, Duration: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">duration</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">components</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Total</span> <span class="nx">shouldComponentUpdate</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">totalDuration</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Updated</span> <span class="nx">components</span><span class="o">:</span><span class="err">`</span><span class="p">,</span> <span class="nx">components</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">));</span>
    <span class="p">}</span>

<span class="p">});</span>
<span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">({</span> <span class="nx">entryTypes</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;measure&#39;</span><span class="p">]</span> <span class="p">});</span>
</code></pre></div>
<p>このログには、それぞれのコンポーネントの<code>shouldComponentUpdate</code>の時間が出力されます。</p>

<p>次の環境で3回更新を更新を起こした時の<code>shouldComponentUpdate</code>の時間を計測しました。</p>

<ul>
<li>MacBookPro14,1</li>
<li>CPU: Intel Core i7, 2.5 GHz</li>
<li>Browser: Chrome – 6x CPU throttling</li>
</ul>

<h3 id="deep-equal-json-stringify-の結果">Deep Equal(<code>JSON.stringify</code>)の結果</h3>

<p>Deep Equal (<code>JSON.stringify(prevProps) === JSON.stringify(nextProps)</code>):</p>

<p><img src="https://user-images.githubusercontent.com/19714/33408570-7e4ff248-d5ba-11e7-8470-684413a8fb25.png" alt="image"></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Name: ⚛ A.shouldComponentUpdate, Duration: 0.9350000000004002

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.010000000000218279

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 1.1300000000001091

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.015000000000327418

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0.009999999999308784

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 5.364999999999782

App.tsx:32 Total shouldComponentUpdate: 7.4650000000001455
App.tsx:33 Update components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate

App.tsx:27 Name: ⚛ A.shouldComponentUpdate, Duration: 0.014999999999417923

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.004999999999199645

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 0.019999999999527063

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 5.770000000000437

App.tsx:32 Total shouldComponentUpdate: 5.81499999999869
App.tsx:33 Update components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate


App.tsx:27 Name: ⚛ A.shouldComponentUpdate, Duration: 0.015000000000327418

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0.005000000001018634

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 5.154999999999745

App.tsx:32 Total shouldComponentUpdate: 5.190000000001419
App.tsx:33 Update components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate
</code></pre></div>
<h3 id="shallow-equal">Shallow Equal</h3>

<p>Shallow Equal(Use <a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a>)</p>

<p><img src="https://user-images.githubusercontent.com/19714/33408628-d3677756-d5ba-11e7-83a3-5113a2e09739.png" alt="image"></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Name: ⚛ A.shouldComponentUpdate, Duration: 0.13999999999941792

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.010000000001127773

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 0.004999999999199645

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.010000000000218279

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0.015000000000327418

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 1.125

App.tsx:32 Total shouldComponentUpdate: 1.305000000000291
App.tsx:33 Updated components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate

App.tsx:27 Name: ⚛ A.shouldComponentUpdate, Duration: 0.009999999999308784

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.004999999999199645

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 0.009999999999308784

App.tsx:32 Total shouldComponentUpdate: 0.03999999999814463
App.tsx:33 Updated components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate

App.tsx:27 Name: ⚛ A.shouldComponentUpdate, Duration: 0.010000000000218279

App.tsx:27 Name: ⚛ B.shouldComponentUpdate, Duration: 0.004999999999199645

App.tsx:27 Name: ⚛ C.shouldComponentUpdate, Duration: 0

App.tsx:27 Name: ⚛ D.shouldComponentUpdate, Duration: 0.004999999999199645

App.tsx:27 Name: ⚛ E.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:27 Name: ⚛ List.shouldComponentUpdate, Duration: 0.005000000000109139

App.tsx:32 Total shouldComponentUpdate: 0.029999999998835847
App.tsx:33 Updated components: ⚛ A.shouldComponentUpdate, ⚛ B.shouldComponentUpdate, ⚛ C.shouldComponentUpdate, ⚛ D.shouldComponentUpdate, ⚛ E.shouldComponentUpdate, ⚛ List.shouldComponentUpdate
</code></pre></div>
<h2 id="結果">結果</h2>

<p>Deep Equalは合計で5ms程度かかるのに対して、Shallow Equalは0.02ms程度で済んでいます。
200倍程度の違いがでていますが、これは複雑で巨大なpropsになるほどDeep Equalは不利になります。
(<code>JSON.stringify</code>の結果をキャッシュすれば時間は半分程度になります)</p>

<p>この例は恣意的な比較なので、十分に早いデバイスでそこまで大きくないオブジェクトなら目に見えるコストにはなりにくいです。</p>

<p><code>shouldComponentUpdate</code>はかなり高頻度で呼ばれる処理であるため、この比較処理自体が重いとコンポーネントを更新しなかったとしても重たいことになります。</p>

<p>また、<code>JSON.stringify</code>はReact.Elementなど正しくstringifyできないものが来た場合にも問題がでてくるため実際にはその判定も必要です。(propsにはReactElementが渡されることがある。Childrenとか普通に属性として)
<a href="https://github.com/azu/shallow-equal-props" title="shallow-equal-props">shallow-equal-props</a>はReact Elementの比較も考慮したshallow equalの実装です。</p>

<p>BaseComponentなどでDeep Equalなどを使った<code>shouldComponentUpdate</code>は簡単でpropsが小さい間は効果的です。しかし、propsに巨大な配列などや循環参照しているもの、複雑なオブジェクトが入ってくると破綻しやすくなります。</p>

<p>Shallow Equalの場合はそのようなことはありませんが、参照する値の比較になるため状態をImmutableに作ったり、そのImmutableなツリーとして意識する必要がでてきます。</p>

<ul>
<li><a href="http://nekogata.hatenablog.com/entry/2013/06/15/013752" title="「オブジェクトをイミュータブルにしろ」って言うけど、それってたとえば状態が変わったらオブジェクト作り直すってことでしょ、ちょう非効率じゃん。って思ってたんだけど、 - 猫型の蓄音機は 1 分間に 45 回にゃあと鳴く">「オブジェクトをイミュータブルにしろ」って言うけど、それってたとえば状態が変わったらオブジェクト作り直すってことでしょ、ちょう非効率じゃん。って思ってたんだけど、 - 猫型の蓄音機は 1 分間に 45 回にゃあと鳴く</a></li>
</ul>

<p>Mutableな方法でStateの更新処理を行う場合は、Shallow Equalでは更新したつもりが更新されていないと判定されてしまう場合があります。
よくあるのは配列の値を追加するときに<code>Array#push</code>で行った場合などです。</p>

<ul>
<li><a href="https://asciidwango.github.io/js-primer/basic/array/#mutable-immutable" title="配列 · JavaScriptの入門書 #jsprimer">配列 · JavaScriptの入門書 #jsprimer</a></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">array</span><span class="o">:</span> <span class="p">[]</span>
<span class="p">};</span>
<span class="c1">// arrayの中身は更新されているけど、`state.array`の参照する配列オブジェクトは同じ</span>
<span class="c1">// Deep Equalでは異なるものとして判定できるけど、Shallow Equalでは同じオブジェクトとなる</span>
<span class="nx">state</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div>
<p>これをImmutableな形で更新するには、<code>state.array</code>の参照する配列オブジェクトそのものを更新する必要があります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">array</span><span class="o">:</span> <span class="p">[]</span>
<span class="p">};</span>
<span class="c1">// arrayの中身は更新し、かつ`state.array`の参照する配列オブジェクトも更新</span>
<span class="nx">state</span><span class="p">.</span><span class="nx">array</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div>
<p>このように、Shallow Equalが効果的に動くようにするためには、状態の管理の仕方も大事になってきます。</p>

<p>例えば、ステート管理ライブラリと言われてるものを見てみると、色々なパターンでこのShallow EqualができるようなStateを作りやすくなっています。</p>

<p><a href="https://redux.js.org/">Redux</a>のReducerで<code>state</code>を受け取り、その<code>state</code>が更新する必要ないなら、そのまま<code>state</code>を返すというパターンはImmutableな状態の実装パターンの一つです。</p>

<p><a href="https://github.com/mobxjs/mobx">MobX</a>の<a href="https://github.com/mobxjs/mobx-state-tree" title="mobx-state-tree">mobx-state-tree</a>は、mutableなmodelを持っておき、immutableなオブジェクトをスナップショットとして取得できます。</p>

<p><a href="https://almin.js.org/">Almin</a>のStoreでは、ReduxのようなパターンでImmutableなStateを更新したり、Repositoryに保存したドメインモデルから必要になったタイミングで新しいStateに変換して返すなどのパターンで実装します。</p>

<p>UIを持つ多くのアプリでは、状態を更新する回数よりも、状態を読み取りUIを作る回数の方が多くなりやすいです。そのため、更新のコストをちょっと払って(Immutableな更新)、状態からUIを更新するコストを小さくする(Shallow Equalにより判定処理自体を簡潔にする)ことがパフォーマンスにも効果がでます。また、更新範囲を抑えることが重要になるので、状態を作るときにある程度コントールしないと影響範囲を抑えるのは難しくなります。</p>

<h2 id="おわり">おわり</h2>

<p>世の中には既にいろんなShallow Equalのライブラリがあります。(大体実装は同じです)
今回はTypeScript対応がなかったのと、デバッグの仕組みを持っているものが見つからなかったのでライブラリを作りました。</p>

<ul>
<li><a href="https://github.com/azu/shallow-equal-object" title="shallow-equal-object">shallow-equal-object</a></li>
<li><a href="https://github.com/azu/shallow-equal-props" title="shallow-equal-props">shallow-equal-props</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>ローカルのPDFを全文検索するクライアント/サーバ/Electronアプリを書いた</title>
   <link href="http://efcl.info/2017/11/17/searchive/"/>
   <updated>2017-11-17T20:03:00+09:00</updated>
   <id>http://efcl.info/2017/11/17/searchive</id>
   <content type="html"><![CDATA[ <p>ローカルにあるPDFを全部検索して、その結果を一覧したいことがあります。
例えば、今、<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>という書籍を書いていて、ある用語が他の書籍ではどんな扱い/用語になっているのかを調べたいことがよくありました。</p>

<p>この手のアプリとしては論文管理の<a href="https://www.readcube.com/papers/mac/" title="Papers for Mac">Papers for Mac</a>などがありますが、検索したいだけなのに色々な機能がついていてまた、とりあえず作ってみることにしました。</p>

<p><a href="https://github.com/azu/searchive" title="searchive">searchive</a>というプロジェクト名にしてPDFからテキストを取り出す所やフロントエンドのElectronアプリ、PDFからテキストを取り出すのはブラウザでやるには遅いので、そこをサーバ側でやってくれる仕組みを作りました。</p>

<p>大体100冊ぐらいをインデックスに入れて検索していますが、数百ms以内に検索結果が出てるので意外と動くようです。</p>

<p><a href="http://www.giphy.com/gifs/3o6fIYo3aDtasisB2M"><img src="https://media.giphy.com/media/3o6fIYo3aDtasisB2M/giphy.gif" alt="App"></a></p>

<h2 id="インストール">インストール</h2>

<p><a href="https://github.com/azu/searchive/releases">Release page</a>からElectronアプリをダウンロードしてインストール出来ます。Electronアプリにはサーバの実装も入ってるので、アプリを入れるだけで動きます。</p>

<ul>
<li><a href="https://github.com/azu/searchive/releases/latest">Latest Release</a>からダウンロードしてインストール

<ul>
<li>署名してないので、右クリックの&quot;開く&quot;からじゃないと怒られる</li>
</ul></li>
</ul>

<p><a href="https://www.appveyor.com/" title="AppVeyor">AppVeyor</a>などのCIの設定が面倒だったので、Mac版のバイナリしか置いていませんが、<a href="https://github.com/azu/searchive/tree/master/packages/searchive-app" title="searchive-app">searchive-app</a>をビルドすればどのOSでも動くと思います。またはPR歓迎です。</p>

<h3 id="使い方">使い方</h3>

<p>起動したら最初にPDFのインデックスを作る必要があります。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/11/17-1510917382.png" alt="image"></p>

<p>メニューから設定を開くと、インデックスしたいファイルの場所を<a href="https://github.com/isaacs/node-glob" title="node-glob">glob</a>で指定できます。
保存するとPDFからテキストを取り出した<code>index.json</code>を作り出してくれます。(とても重いので放置しておくといいです)</p>

<p>ローディングバーが消えて終わったら後は検索するだけです。
検索結果をフィルターすることができるので、大雑把な検索をしてからフィルターする使い方を想定しています。(検索の単位はPDFのページ)</p>

<p><a href="http://www.giphy.com/gifs/3o6fIYo3aDtasisB2M"><img src="https://media.giphy.com/media/3o6fIYo3aDtasisB2M/giphy.gif" alt="App"></a></p>

<p>検索演算子はGitHubみたいなものが使えます。
ライブラリとしては<a href="https://github.com/azu/search-query-tester" title="search-query-tester">search-query-tester</a>を使っています。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/11/17-1510924048.png" alt="keyword operator"></p>

<h2 id="作り方">作り方</h2>

<p><a href="https://github.com/azu/searchive" title="searchive">searchive</a>はmonorepoのプロジェクトになっていて、細かい部品を独立したライブラリとして作っています。
それらを組み合わせて<a href="https://github.com/azu/searchive/tree/master/packages/searchive-app" title="searchive-app">searchive-app</a>というアプリが動いています。</p>

<p>それぞれの部品を順番に紹介していきます。</p>

<h3 id="pdf-to-json"><a href="https://github.com/azu/searchive/tree/master/packages/pdf-to-json"><code>pdf-to-json</code></a> <a href="https://www.npmjs.com/package/pdf-to-json"><img src="https://img.shields.io/npm/v/pdf-to-json.svg?style=flat-square" alt="npm"></a></h3>

<p><a href="https://github.com/mozilla/pdf.js" title="pdf.js">pdf.js</a>を使ってPDFからテキストを取り出してJSONにしてくれるライブラリです。ページごとのテキストをJSONにまとめてくれます。
実際にはpdf.jsのnpm版である<a href="https://github.com/mozilla/pdfjs-dist" title="pdfjs-dist">pdfjs-dist</a>を使います。</p>

<p>pdf.jsは使いにくいライブラリ(というアプリに近い)なので、日本語などもちゃんと扱えるようにするのは工夫が必要です。</p>

<ul>
<li><a href="http://efcl.info/2014/10/07/pdf-presentation/">pdf.jsを使いブラウザで見られるPDFスライド表示ツールを作った | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/12/07/pdf.js-controller/" title="[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch">[pdf.js] テキスト選択出来るスライド表示ライブラリを書いた | Web Scratch</a></li>
</ul>

<p>cmapsというファイルをちゃんと読めないと日本語などが扱えません。
Node.jsで扱う公式のオプションはないので、テストコードを読んでURLをfsで代替するモック実装を使って読み込むことができました。</p>

<ul>
<li><a href="https://github.com/azu/searchive/blob/7ed276adfec3ec86ba421a9a2227e8333502e248/packages/pdf-to-json/src/pdf-to-json.ts#L15-L43">https://github.com/azu/searchive/blob/7ed276adfec3ec86ba421a9a2227e8333502e248/packages/pdf-to-json/src/pdf-to-json.ts#L15-L43</a></li>
</ul>

<h3 id="searchive-client"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-client"><code>searchive-client</code></a>  <a href="https://www.npmjs.com/package/searchive-client"><img src="https://img.shields.io/npm/v/searchive-client.svg?style=flat-square" alt="npm"></a></h3>

<p><a href="https://github.com/azu/searchive" title="searchive">searchive</a>の検索やインデックへの書き込みを扱う抽象レイヤーです。fsやブラウザAPIにも依存してないクリーンなJavaScriptとして動作する層です。</p>

<h3 id="searchive-create-index"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-create-index"><code>searchive-create-index</code></a>  <a href="https://www.npmjs.com/package/searchive-create-index"><img src="https://img.shields.io/npm/v/searchive-create-index.svg?style=flat-square" alt="npm"></a></h3>

<p><a href="https://github.com/azu/searchive/tree/master/packages/searchive-client"><code>searchive-client</code></a>と<a href="https://github.com/azu/searchive/tree/master/packages/pdf-to-json"><code>pdf-to-json</code></a>を使って、実際にインデックファイルを作るライブラリでうｓ。
ファイルを読み込んだり、書き込んだりするのでNode.jsに依存しています。</p>

<h3 id="searchive-cli"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-cli"><code>searchive-cli</code></a> <a href="https://www.npmjs.com/package/searchive-cli"><img src="https://img.shields.io/npm/v/searchive-cli.svg?style=flat-square" alt="npm"></a></h3>

<p>インデックを作ったり、実際に検索できるCLIです。
<a href="https://github.com/azu/searchive/tree/master/packages/searchive-client"><code>searchive-client</code></a>や<a href="https://github.com/azu/searchive/tree/master/packages/searchive-create-index"><code>searchive-create-index</code></a>が実装の殆どを持っているため数行ぐらいしかないCLIです。monorepoだとこういう切り離しがし易いのもメリットです。</p>

<p>テスト用に使ったりできます。</p>

<h3 id="searchive-server"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-server"><code>searchive-server</code></a> <a href="https://www.npmjs.com/package/searchive-server"><img src="https://img.shields.io/npm/v/searchive-server.svg?style=flat-square" alt="npm"></a></h3>

<p>Electronアプリはmain(Node.js)とrenderer(ブラウザ)のプロセスを両方持っていますが、こちらはNode.js側の実装です。
<a href="https://github.com/azu/searchive/tree/master/packages/searchive-create-index"><code>searchive-create-index</code></a>を使ってインデックス作るWeb APIや、インデックを検索して結果を返すWeb APIを実装しています。</p>

<p>REST APIの実装するサーバには<a href="https://github.com/restify/node-restify" title="restify">restify</a>を使っています。
また、インデックスを作る処理は時間がかかるためREST APIでは不向きでした。
そこでWeb Socketを使ったAPIを実装して、クライアント側とはWebSocketで進捗をやり取りしています。
サーバ側のWebSocketsは<a href="https://github.com/websockets/ws" title="ws">ws</a>を使い、クライアント側はブラウザネイティブの<code>WebSocket</code>を使っています。</p>

<h3 id="searchive-web-api-interface"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-web-api-interface"><code>searchive-web-api-interface</code></a> | <a href="https://www.npmjs.com/package/searchive-web-api-interface"><img src="https://img.shields.io/npm/v/searchive-web-api-interface.svg?style=flat-square" alt="npm"></a></h3>

<p>主にWebSocketが原因でできたパッケージです。
WebSocketはReduxとかのActionみたいなコマンドをやり取りする必要があります。
それらの定義はサーバとクライアントどちらも共有したいので、インターフェイスだけを定義したパッケージを定義してサーバとクライアントではこれを使っています。</p>

<p>サーバ側に定義してしまうと、クライアントがサーバに依存するという問題が起きてしまうための回避策です。</p>

<h3 id="searchive-app"><a href="https://github.com/azu/searchive/tree/master/packages/searchive-app" title="searchive-app"><code>searchive-app</code></a></h3>

<p>最後にElectronで書かれたアプリです。
Electronはmain(Node.js)とrenderer(ブラウザ)の両方を持っているので、mainで<a href="https://github.com/azu/searchive/tree/master/packages/searchive-server"><code>searchive-server</code></a>のサーバを動かして、rendererからAPIを叩いて使っています。</p>

<p>Electronのセットアップは毎回苦戦するので、今回はElectron版<code>create-react-app</code>のような<a href="https://github.com/electron-userland/electron-webpack/" title="electron-webpack">electron-webpack</a>を使っています。
これで<code>yarn run dev</code>するだけで開発が始めらます。mainのソースが変わった場合はアプリが起動し直され、rendererの場合はHot Reloadingができる構成なので、面倒なwebpackを触れなくてよくて便利です。</p>

<p><a href="http://typescriptlang.org/">TypeScript</a>の対応も<a href="https://webpack.electron.build/add-ons" title="Add-ons · electron-webpack">Add-ons · electron-webpack</a>を入れるだけで解決するので楽でした。</p>

<p>一方問題もあって、webpack-dev-serverを開発中は使って、buildした場合はhtmlになるので、<code>file:///</code>だと特権で動く処理がdevelopment中は動かないことがあります。(webviewの中でfileなコンテンツを表示するなどがhttpのページ上ではできない)</p>

<p>次の記事でも同様の構成について触れています。</p>

<ul>
<li><a href="https://qiita.com/azu/items/a149501ca1b5864000a3" title="React + TypeScript (+ Electron)でアプリを書き始めるときにやってること - Qiita">React + TypeScript (+ Electron)でアプリを書き始めるときにやってること - Qiita</a></li>
</ul>

<p>Viewには<a href="https://reactjs.org/">React</a>を使っていて、UIコンポーネントとしてMSの<a href="https://developer.microsoft.com/en-us/fabric" title="Office UI Fabric">Office UI Fabric</a>を使っています。<a href="https://developer.microsoft.com/en-us/fabric" title="Office UI Fabric">Office UI Fabric</a>はこういうアプリを作るときに便利なメニューやコンテキストメニュー、パネルなどがあるのでよく使ってます。</p>

<p>State管理には、<a href="https://github.com/almin/almin" title="almin">Almin</a>を使っています。
基本的にやりたいことは次のようなことだけでした。</p>

<ul>
<li>(APIを叩いて)検索</li>
<li>(WebSocketを繋いで)インデックスを更新</li>
<li>フィルターを更新</li>
<li>設定パネルを開く/閉じる</li>
</ul>

<p>Alminでは、やりたいこと(ユースケース)を1ファイル1ユースケースで書いていきます。</p>

<ul>
<li><a href="http://azu.github.io/slide/2017/almin/concept-of-almin.html" title="The Concept of Almin">The Concept of Almin</a></li>
</ul>

<p>なので、このアプリでは次のようなユースケースを書きました。</p>

<p><img src="http://efcl.info/wp-content/uploads/2017/11/17-1510927384.png" alt="usecase図"></p>

<blockquote>
<p><a href="https://github.com/almin/almin-usecase-map-generator">https://github.com/almin/almin-usecase-map-generator</a>でユースケース図を生成</p>
</blockquote>

<p>このアプリではドメインとかそこまでちゃんとやっても旨味がない気がしたので、UseCaseでイベントをdispatchして、Storeでイベントを受け取ってStateを更新する感じにしました。
Reduxでよく見るような形になってると思います。</p>

<p><a href="https://github.com/azu/searchive/blob/master/packages/searchive-app/src/renderer/store/SearchIndexStore/SearchIndexStore.ts"><img src="http://efcl.info/wp-content/uploads/2017/11/17-1510923816.png" alt="Store"></a></p>

<p>後は、<a href="https://github.com/almin/almin/tree/master/packages/almin-react-container" title="almin-react-container">almin-react-container</a>を使えば、AlminのStoreとReactのViewが自動で繋がるので、Stateが更新されたViewを更新するだけです。</p>

<h4 id="todo">TODO</h4>

<ul>
<li>Electronのmainプロセスで重たい処理をすると、UIも固まるのでどうにかしたい

<ul>
<li>インデックスを作る処理が重たい</li>
</ul></li>
<li><a href="https://github.com/electron-userland/electron-webpack/" title="electron-webpack">electron-webpack</a>がdev serverを立てる制限で検索結果に実際にpdfを表示するプレビューがでてきてないのでどうにかしたい</li>
<li>PDF以外も原理的に対応できるのでテキストファイルも合わせて検索したい</li>
</ul>

<h2 id="おわり">おわり</h2>

<p>ローカルのPDFを全文検索する<a href="https://github.com/azu/searchive/tree/master/packages/searchive-app" title="searchive-app">searchive-app</a>の紹介とそのプロジェクト構造の解説をしました。</p>

<p>最初は<a href="https://github.com/weixsong/elasticlunr.js" title="elasticlunr.js">elasticlunr.js</a>とかを使った全文検索を実装していたのですが、単純にJSONを保存してその中身を単純にマッチしたほうが早かったので変更した経緯とかがあります。</p>

<p>勢いで自分用に書いたところが多いので、PRやIssueとかあったらよろしくお願いします。</p>

<ul>
<li><a href="https://github.com/azu/searchive" title="azu/searchive: Search All My Documents{PDF}.">azu/searchive: Search All My Documents{PDF}.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>performance.markにメタデータを紐付けできるライブラリを書いた</title>
   <link href="http://efcl.info/2017/11/15/performance.mark-metadata/"/>
   <updated>2017-11-15T21:58:00+09:00</updated>
   <id>http://efcl.info/2017/11/15/performance.mark-metadata</id>
   <content type="html"><![CDATA[ <p><code>performance.mark</code>というパフォーマンス計測に役立つAPIがあります。
<code>performance.mark</code> APIを使うと、指定して処理をマーキングでき、その結果を開発者ツールでみれます。とても便利なのですが、そのマーキングとメタデータを紐付ける仕組みがありませんでした。</p>

<p><a href="https://github.com/almin/almin/releases/tag/almin%400.14.0"><img src="http://efcl.info/wp-content/uploads/2017/09/20-1505888631.png" alt="DevTool timeline"></a></p>

<ul>
<li><a href="http://efcl.info/2016/08/15/performance.mark/" title="performance.markでパフォーマンス計測する | Web Scratch">performance.markでパフォーマンス計測する | Web Scratch</a></li>
<li><a href="http://efcl.info/2017/09/20/almin-performance-profile-0.14.0/" title="Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように | Web Scratch">Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように | Web Scratch</a></li>
</ul>

<p>TPAC 2017の<a href="https://docs.google.com/presentation/d/1d64Y4rtLCxobGgljVySU2CJpMPK5ksaiZuv3ka1dCVA/edit#slide=id.p" title="User Timing L3 - Google スライド">User Timing L3 - Google スライド</a>では、<code>performance.mark</code> APIでメタデータ(<code>details</code>)を紐付けできる仕組みが提案されています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">performance</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">startTime</span><span class="p">,</span> <span class="nx">details</span><span class="p">)</span>
</code></pre></div>
<p>これを使うと「Aという処理でデータを取得」を<code>performance.mark</code>でマーキングする際に、実際に取得したデータをとマーキングをメタデータ(<code>details</code>)によって紐付けられます。</p>

<p>これを速く使いたかったので<code>performance.mark</code>にメタデータを紐付けできる<a href="https://github.com/azu/performance-mark-metadata" title="performance-mark-metadata">performance-mark-metadata</a>というライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/performance-mark-metadata" title="azu/performance-mark-metadata: `performance.mark` with custom meta data.">azu/performance-mark-metadata: <code>performance.mark</code> with custom meta data.</a></li>
</ul>

<h2 id="サポート環境">サポート環境</h2>

<ul>
<li>モダンブラウザ と Node.js &gt;= 8.5.0をサポートしています。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" title="Performance.mark()">Performance.mark()</a> APIが使える環境ならOKです</li>
<li>Node.jsも8.5.0で<code>perf_hooks</code>が追加されています。</li>
<li><a href="https://nodejs.org/api/perf_hooks.html" title="Performance Timing API | Node.js v9.2.0 Documentation">Performance Timing API | Node.js v9.2.0 Documentation</a></li>
</ul>

<p>それ以外の環境では<code>Performance.mark()</code>のpolyfillが必要です。</p>

<ul>
<li><a href="https://github.com/nicjansma/usertiming.js" title="nicjansma/usertiming.js: UserTiming polyfill">nicjansma/usertiming.js: UserTiming polyfill</a></li>
</ul>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install performance-mark-metadata
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p>使い方は単純で<code>performance.mark</code>のProposalとよく似た形です。
<code>marker.mark(name, metadata)</code> を渡すようにしています。(全く同じにしなかったのは仕様変更の可能性もあるため)</p>

<p>メタデータを取り出すときは<code>marker.getEntryMetadata(entry)</code>で<code>entry</code>に紐づく<code>metadata</code>を取り出せます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">PerformanceMetadataMarker</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;performance-mark-metadata&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PerformanceMetadataMarker</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">details</span><span class="o">:</span> <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;value&quot;</span> <span class="p">}</span>
<span class="p">};</span>
<span class="kr">const</span> <span class="nx">markerName</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="p">;</span>
<span class="c1">// mark with metadata</span>
<span class="nx">marker</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="nx">markerName</span><span class="p">,</span> <span class="nx">metadata</span><span class="p">);</span>
<span class="nx">performance</span><span class="p">.</span><span class="nx">getEntriesByName</span><span class="p">(</span><span class="nx">markerName</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">entry</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">marker</span><span class="p">.</span><span class="nx">getEntryMetadata</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span>
    <span class="cm">/*</span>
<span class="cm">    {</span>
<span class="cm">        details: { key: &quot;value&quot; }</span>
<span class="cm">    };</span>
<span class="cm">    */</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">strictEqual</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">metadata</span><span class="p">,</span> <span class="s2">&quot;should get same metadata&quot;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p><code>entry</code>オブジェクトは<code>performance.get*</code> APIで取得できます。</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries">Performance.getEntries() - Web APIs | MDN</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName">Performance.getEntriesByName() - Web APIs | MDN</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType">Performance.getEntriesByType() - Web APIs | MDN</a></li>
</ul>

<h2 id="おわりに">おわりに</h2>

<p><code>performance.mark</code>はシンプルながら結構便利なAPIです。
<code>performance.now</code>を使うため負荷的に優しく、とりあえず必要なマーキングをしておき、後から取り出して細かく計測(<code>measure</code>)できます。</p>

<p>単純なパフォーマンスのロギングと違ってブラウザやNode.jsで使える共通の仕様であるため、<a href="http://efcl.info/2017/09/20/almin-performance-profile-0.14.0/" title="Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように | Web Scratch">Almin + React/Vue.jsのパフォーマンスプロファイルをタイムライン表示できるように | Web Scratch</a>のように他のライブラリと組み合わせ計測もできます。</p>

<p>今までは名前のみであったため処理時間しか取れるデータはありませんでしたが、<a href="https://github.com/azu/performance-mark-metadata" title="performance-mark-metadata">performance-mark-metadata</a>を使うことで任意のメタデータを乗せられるので幅が広がるのかなと思います。
将来的にUser Timing APIの方にこの仕組みが入ったらそちらに移行していくのがいいかなと思います。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>#html_modules_study アウトラインメモ</title>
   <link href="http://efcl.info/2017/11/15/html_module_study/"/>
   <updated>2017-11-15T20:56:00+09:00</updated>
   <id>http://efcl.info/2017/11/15/html_module_study</id>
   <content type="html"><![CDATA[ <h1 id="html_modules_study-connpass"><a href="https://web-study.connpass.com/event/70731/" title="html_modules_study - connpass">html_modules_study - connpass</a></h1>

<p><a href="https://web-study.connpass.com/event/70731/" title="html_modules_study - connpass">html_modules_study</a>に参加したのでメモ。</p>

<h2 id="webcomponents-updates-1000ch">WebComponents Updates - @1000ch</h2>

<blockquote>
<p>スライド: <a href="https://1000ch.github.io/slide/webcomponents-2017/#" title="Web Components Updates">Web Components Updates</a></p>
</blockquote>

<ul>
<li>Void or Self-closing Element

<ul>
<li>今は <code>&lt;x-button&gt;&lt;/x-button&gt;</code> なので省略したい</li>
<li><code>&lt;x-button&gt;</code></li>
</ul></li>
<li><code>assignedElements()</code>

<ul>
<li><code>assignedNodes()</code>はTextも含まれる</li>
<li>挿入された要素だけをShadom DOM内部で参照したい</li>
</ul></li>
<li>Custom Psuedo-elements

<ul>
<li>疑似要素を独自に定義出来るようにしたいPropsal</li>
<li><code>&lt;input paseudo=&quot;start-data&quot; type=&quot;data&quot;&gt;</code></li>
<li><code>data-range-selector::start-data</code></li>
</ul></li>
<li>CSS shadow Parts

<ul>
<li>Shadow Hostを<code>::part()</code>や<code>::theme()</code>で参照するCSSセレクタ</li>
</ul></li>
<li>HTML modules

<ul>
<li><code>import</code>、<code>export</code>でHTMLをロードしていいか</li>
<li>ESのシンタックスも拡張する必要がある?</li>
</ul></li>
<li>(個人の意見) HTML Importsが宣言的に使えば何でもいい</li>
<li>HTML Template Instantiation

<ul>
<li><a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md" title="webcomponents/Template-Instantiation.md at gh-pages · w3c/webcomponents">webcomponents/Template-Instantiation.md at gh-pages · w3c/webcomponents</a></li>
<li><code>&lt;template&gt;</code>の中でMustace的なテンプレート</li>
<li>記法とその振る舞いを定義</li>
</ul></li>
<li><code>&lt;link rel=&quot;modulepreload&quot;&gt;</code>

<ul>
<li><a href="https://github.com/whatwg/html/pull/2383">Add <link> rel=&quot;modulepreload&quot; by domenic · Pull Request #2383 · whatwg/html</a></li>
<li><a href="https://docs.google.com/document/d/1ds9EEkcDGnt-iR8SAN-_7nsOfw7gsMfhZjzZ_QAIyjM/edit">Loading Performance with (Many) Modules: Summary as of Oct 7, 2017 - Google ドキュメント</a></li>
<li>moduleの先までpreloadをしていくpreload</li>
</ul></li>
<li>rel=preloadとかas=moduleではだめ?

<ul>
<li>script要素のcredentialと一致する必要がある</li>
<li>パースする前にhtml moduleなのかスクリプトなのかわからないと問題に?</li>
<li>rel=preloadは専用のpreload cacheに保存してる V8</li>
<li>なので、module cache</li>
<li>なぜas=moduleではだめ?</li>
<li><a href="https://github.com/whatwg/fetch/issues/486" title="preload, destinations, and module scripts · Issue #486 · whatwg/fetch">preload, destinations, and module scripts · Issue #486 · whatwg/fetch</a></li>
</ul></li>
</ul>

<h2 id="template-instantiation-md-koba04">Template-Instantiation.md: @koba04</h2>

<blockquote>
<p>スライド: <a href="https://speakerdeck.com/koba04/template-instantiation" title="Template Instantiation // Speaker Deck">Template Instantiation // Speaker Deck</a></p>
</blockquote>

<ul>
<li><a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md" title="HTML Template Instantiation">HTML Template Instantiation</a></li>
<li>テンプレートであってコンポーネントではない

<ul>
<li>mustache syntax</li>
</ul></li>
<li>バックグラウンド

<ul>
<li>いろんなフレームワークが独自のテンプレートを定義していた</li>
<li>それぞれのテンプレートを組み合わせるのは難しい</li>
</ul></li>
<li>mustache syntax

<ul>
<li>シンプル</li>
<li>値を代入する所だけはmustache syntax</li>
<li>他はConfigurableにして柔軟性を作る</li>
</ul></li>
<li>Use Cases 9コ

<ul>
<li>テンプレートからDOM Treeを作れる</li>
<li>テンプレートの変数へ代入できる</li>
<li>テンプレートの変数は更新できる</li>
<li>テンプレートの変数処理には関数を挟むことができる</li>
<li>テンプレート -&gt; JavaScriptへ値を渡せる = 双方向なバンディング
ィング</li>
<li>属性を更新できる</li>
<li>デフォルトの値を指定できる</li>
<li>DOMの出し分けに対応する</li>
<li>ループ処理</li>
</ul></li>
<li>Template Parts

<ul>
<li><code>\{\{value\}\}</code> をPartsと呼ぶ</li>
<li>このpartsを更新することでCapitalizeとかの処理を実装できる</li>
<li>前後のNodeや親子のNodeの参照などを持つ</li>
</ul></li>
<li>Template Partsの中にTemplate Parts

<ul>
<li><code>InnterTemplatePart</code></li>
</ul></li>
<li>Template Process Callback

<ul>
<li>createとupdate時に呼ばれるcallbackを指定できる</li>
<li><code>createCallback</code></li>
<li><code>processCallback</code></li>
</ul></li>
<li>Other libraries

<ul>
<li><a href="https://github.com/PolymerLabs/lit-html" title="PolymerLabs/lit-html: HTML template literals in JavaScript">PolymerLabs/lit-html: HTML template literals in JavaScript</a>

<ul>
<li>JavaScriptの中にテンプレートを書く</li>
<li>Tagged Template</li>
</ul></li>
<li><a href="https://glimmerjs.com/" title="Glimmer">Glimmer</a>

<ul>
<li><a href="https://emberjs.com/blog/2017/10/10/glimmer-progress-report.html" title="Ember.js - Glimmer.js Progress Report">Ember.js - Glimmer.js Progress Report</a></li>
</ul></li>
</ul></li>
<li>出典

<ul>
<li><a href="https://github.com/whatwg/html/issues/2254" title="Standardize &amp;lt;template&amp;gt; variables and event handlers · Issue #2254 · whatwg/html">Standardize template variables and event handlers · Issue #2254 · whatwg/html</a></li>
</ul></li>
<li>FAQ

<ul>
<li><code>\{\{</code>の記号 は変えられない?</li>
</ul></li>
</ul>

<h2 id="html-modules-tkochi">HTML Modules -  @tkochi</h2>

<ul>
<li>Blinkやってる</li>
<li>Layout Tests</li>
<li>HTML5

<ul>
<li>progressとかいろんな要素が増えた</li>
<li>もっとプリミティブなAPIを定義したほうがいいのではというのがスタート</li>
</ul></li>
<li>HTML Imports

<ul>
<li><a href="https://www.polymer-project.org/blog/2017-08-22-npm-modules" title="Polymer 3.0 preview: npm and ES6 Modules - Polymer Project">Polymer 3.0 preview: npm and ES6 Modules - Polymer Project</a></li>
<li>PolymerでもHTML ImportsからES moduleに移行することになった</li>
</ul></li>
<li>そもそもHTML Importとは

<ul>
<li>コンポーネントの定義を一つにまとめてロードする仕組み</li>
<li><code>&lt;link rel=import href=my-button.html&gt;</code></li>
<li><code>HTMLLinkElement.import</code> (readonly)</li>
<li>後は使うだけ</li>
</ul></li>
<li>共通のImport

<ul>
<li>common.htmlを2回importした時</li>
<li>1度目は実行される、2度目は実行されない</li>
<li>import</li>
</ul></li>
<li>HTML Importのメリット

<ul>
<li><code>&lt;script&gt;</code>が実行できる</li>
<li>依存関係を解決しながらロードしてくれる

<ul>
<li>ES moduleはすべての依存をリンクしてから実行するモデル</li>
<li>HTML Importsならパイプライン処理できる</li>
</ul></li>
<li>テンプレート、スタイル、スクリプトを1つのファイルにかける

<ul>
<li>Vueの<code>.vue</code>とかと同じ</li>
</ul></li>
</ul></li>
<li>問題点

<ul>
<li>Chrome以外の実装がない</li>
<li><code>Document</code>のツリーができてしまう

<ul>
<li>しかし、HTML Importの<code>Document</code>は表示されない</li>
<li>Fragmentではない</li>
<li>Documentを持つ問題を引きずる

<ul>
<li><code>&lt;base&gt;</code>問題</li>
</ul></li>
<li>import先でも<code>document</code>を呼ぶとメインのドキュメントが返ってくる</li>
<li><code>document.currentScript.ownerDocument</code></li>
</ul></li>
<li><code>&lt;style&gt;</code>がメインドキュメントに適応される

<ul>
<li>HTML module待ち</li>
</ul></li>
<li>ESModulesと相互運用できない

<ul>
<li>ロードとか実行の順序を決めるとかをHTML ImportとES Module両方をそれぞれ書かないといけなくなる</li>
</ul></li>
</ul></li>
<li>HTML Modules

<ul>
<li><a href="https://github.com/w3c/webcomponents/issues/645">https://github.com/w3c/webcomponents/issues/645</a>

<ul>
<li>長いスレッド</li>
</ul></li>
<li>実際にユーザーに出すときにはコンパイルした何かになってる</li>
<li>そういうときにHTML Modulesみたいなそのまま出すものを作る意味がどれぐらいあるのか</li>
<li>スレッドのまとめ

<ul>
<li>HTML in JS、JS in HTML</li>
<li>importでJavaScript以外も <code>as Foo</code> で読めるようにするとか</li>
<li><code>Symbol.importer</code>みたいなhookを実装できるようにすればいいのではとか</li>
<li>論点がまとまってない</li>
</ul></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">module</span><span class="nt">&gt;</span>
<span class="kr">import</span> <span class="nx">temp</span> <span class="nx">from</span> <span class="s2">&quot;my-template.html&quot;</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;#id&quot;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">tmpl</span><span class="p">.</span><span class="nx">content</span><span class="p">));</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>実現例(イメージ)</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">module</span><span class="nt">&gt;</span>
<span class="kr">import</span> <span class="o">*</span> <span class="nx">from</span> <span class="s2">&quot;lgtm-button.html&quot;</span><span class="p">;</span>
<span class="c1">// registryはwindowにくっついている</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;lgtm-button&gt;&lt;/lgtm-button&gt;</span>
</code></pre></div>
<p>実装例(import/export)</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;button&gt;</span>LGTM<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;script&gt;</span>
<span class="kr">import</span> <span class="nx">MyButton</span> <span class="nx">from</span> <span class="s2">&quot;./my-button.html&quot;</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">LGTMButton</span> <span class="kr">extends</span> <span class="nx">MyButton</span><span class="p">{}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<ul>
<li><p>HTML moduileはHTMLとES両方の仕様を参照する</p>

<ul>
<li>ES側にhookの仕組み</li>
<li>HTML側に解釈の仕組み</li>
</ul></li>
<li><p>何がうれしいのか</p>

<ul>
<li><code>&lt;template&gt;</code>を読み込みたい</li>
<li>文字列からDOM生成じゃないので効率的?</li>
<li>ネイティブHTMLパーザーを使うと性能が出る?</li>
</ul></li>
<li><p>TAPC 2017の議論</p>

<ul>
<li>ES moduleベースのシステム</li>
<li>InertなHTMLがロードできる

<ul>
<li><a href="http://takenspc.hatenablog.com/entry/2013/09/26/232111" title="inertとは何だろう - Unreviewed">inertとは何だろう - Unreviewed</a></li>
</ul></li>
<li>ここまでは共通認識</li>
<li>single file component

<ul>
<li>html,js,cssを含んだコンポーネント</li>
</ul></li>
<li><code>&lt;script&gt;</code>が実行できる</li>
<li>DOMの一部をexportできる</li>
<li>他のモジュールをimportできる</li>
<li>Document or DocumentGragment</li>
<li>独立した空間

<ul>
<li>サードパーティなHTMLを独立した空間で実行出来る</li>
<li>いいねボタンとかを別の空間にする</li>
<li><a href="https://github.com/tc39/proposal-realms" title="tc39/proposal-realms: ECMAScript Proposal, specs, and reference implementation for Realms">tc39/proposal-realms: ECMAScript Proposal, specs, and reference implementation for Realms</a></li>
</ul></li>
<li>何も決まらなかった</li>
<li>具体的なユースケースで話をしようぜ</li>
</ul></li>
<li><p>FAQ</p>

<ul>
<li>Q. パッケージマネージャについて議論されてる?</li>
<li>A. 特になかった

<ul>
<li>Polymerの人もいるので一応考えているのでは</li>
<li><a href="https://github.com/package-community/discussions/issues/2" title="javascript: npm for web packages · Issue #2 · package-community/discussions">javascript: npm for web packages · Issue #2 · package-community/discussions</a></li>
</ul></li>
<li>Q. 文章のフォーマットなのに文章として実行できないもを定義する意味は?</li>
<li>A. Declarative Custom HTMLとかの議論はあった</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 

</feed>
