<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-07-06T21:09:49+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>MarkdownのコードブロックをESLintでチェックするtextlintルール</title>
   <link href="http://efcl.info/2016/07/06/eslint-with-textlint/"/>
   <updated>2016-07-06T20:24:00+09:00</updated>
   <id>http://efcl.info/2016/07/06/eslint-with-textlint</id>
   <content type="html"><![CDATA[ <p>今、<a href="https://github.com/asciidwango/js-primer" title="js-primer">js-primer</a>を書いていて、この本ではいろんなものをテストできる常体にして開発しています。</p>

<p>詳しくは<a href="https://github.com/asciidwango/js-primer/blob/master/CONTRIBUTING.md" title="CONTRIBUTING.md">CONTRIBUTING.md</a>に書いていますが、今のところ次のようなテストが常に回っています。(CONTRIBUTINGもお待ちしています)</p>

<ul>
<li>GitBookのビルドテスト</li>
<li><a href="https://textlint.github.io/">textlint</a>による文章のLint</li>
<li><a href="http://eslint.org/" title="ESLint">ESLint</a>によるコードのLint</li>
<li><a href="https://textlint.github.io/">textlint</a> + <a href="http://eslint.org/" title="ESLint">ESLint</a>によるMarkdown中のインラインコードブロックのLint</li>
<li>Markdown中のインラインコードブロックへのDocTest</li>
<li><a href="http://mochajs.org/" title="Mocha">Mocha</a>による<code>*-test.js</code>ファイルのユニットテスト</li>
<li><code>*-example.js</code>がJavaScriptとして実行できるかのテスト</li>
<li><code>*-invalid.js</code>がJavaScriptとして実行できないかのテスト</li>
</ul>

<p>JavaScriptを学ぶ本なので、大量のサンプルコードがでてくるのですが、そのサンプルコードが常に正しくある必要があります。
そのため、いろんな方向からテストして間違っているサンプルコードを含めないようにしています(逆に間違っていることをテストする仕組みもあります)</p>

<p>サンプルコードは大きく分けると、文章中にコードブロックで直接書くインラインコードと外部ファイルとして作成して読み込むコードがあります。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/61.html" title="サンプルコード | 技術文書をソフトウェア開発する話">サンプルコード | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>インラインコードは、ESLintでスタイルのチェックや<a href="https://github.com/azu/power-doctest" title="doctest">doctest</a>を行い実行結果のテストをしています。</p>

<p>以前話した方法ではESLintの<a href="https://github.com/eslint/eslint-plugin-markdown" title="eslint-plugin-markdown">eslint-plugin-markdown</a>を使い、インラインコードをESLintでチェックしていました。</p>

<ul>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/67.html" title="インラインコードのLint | 技術文書をソフトウェア開発する話">インラインコードのLint | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>普通なら正しいコードしか出てこないので問題ないのですが、入門書という位置づけであるため次のような間違ったコードも解説として登場します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">そして、一度`const`で宣言された変数には再代入できなくなります。
そのため、次のコードでは`bookTitle`を上書きしようとして`TypeError`となります。

```js
const bookTitle = &quot;JavaScriptの本&quot;;
bookTitle = &quot;上書き&quot;; // TypeError: invalid assignment to const `bookTitle&#39;
```

一般に変数への再代入は「変数の値は最初に定義した値と常に同じである」という参照透過性を壊すため、
バグを発生させやすい要因として知られています。
</code></pre></div>
<p>via <a href="https://asciidwango.github.io/js-primer/basic/variables/" title="変数と宣言 · JavaScriptの入門書 #jsprimer">変数と宣言 · JavaScriptの入門書 #jsprimer</a></p>

<p><a href="https://github.com/eslint/eslint-plugin-markdown" title="eslint-plugin-markdown">eslint-plugin-markdown</a>では<code>js</code>がついたコードブロックが自動でチェックされてしまうため、このコードブロック自体を無視して欲しいという書き方ができません。
(コードの中でESLintを <code>eslint-disable</code> はできるが表示されてしまう)</p>

<p>そのため、Markdownのレベルでコードブロックを無視できるような仕組みが必要になりました。</p>

<h2 id="textlint-rule-eslint"><a href="https://github.com/azu/textlint-rule-eslint" title="textlint-rule-eslint">textlint-rule-eslint</a></h2>

<p><a href="https://textlint.github.io/">textlint</a>は7.0からフィルタールールという機能を持っていて、このフィルタールールである<a href="https://github.com/textlint/textlint-filter-rule-comments" title="textlint-filter-rule-comments">textlint-filter-rule-comments</a>を使えば次のような形で無視する領域を作ることができます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- textlint-disable --&gt;

この部分はtextlintのチェックでエラーがあっても無視される

&lt;!-- textlint-enable --&gt;
</code></pre></div>
<ul>
<li><a href="http://efcl.info/2016/06/30/textlint7.0/" title="textlint 7.0リリース、フィルタールールの追加 | Web Scratch">textlint 7.0リリース、フィルタールールの追加 | Web Scratch</a></li>
</ul>

<p>つまり、textlintのルールとしてESLintを動かすことができれば、textlintとしてコードブロックを無視する = ESLintのチェックしないコードブロックを作れるので<a href="https://github.com/azu/textlint-rule-eslint" title="textlint-rule-eslint">textlint-rule-eslint</a>を作りました。
(プラグインの<a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/">アーキテクチャとかも似てる</a>ので10分ぐらいでできた)</p>

<p>これでインラインコードと外部ファイルのJavaScriptにESLintを適応することができるので、インデントがずれてないかやSyntaxがおかしくないかなどのチェックをすることができるようになっています。
(逆にベストプラクティス的なルールは引っかかりまくるので外しています…)</p>

<h3 id="おまけ">おまけ</h3>

<p>後、最近入れた面白いテストとしてdoctestライクなものをテストとして入れています。</p>

<p><code>*-example.js</code>のJavaScriptファイルとMarkdownのインラインコードブロックを対象にDocTestが実行されています。</p>

<p>次のように<code>// =&gt; 値</code>というコメントを書いた部分に対してDocTestが実行されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// =&gt; 42</span>
</code></pre></div>
<p>これにより、サンプルコードのコメントに書いた評価結果と実際の出力が一致するかをテストしてる感じです。</p>

<p>色々テストを入れているのは、いい文章といいコードは同時に書くのが難しいというのもあります。
そのため、とにかく機械的に落とせる部分は落とせるようにしています。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">色々コードを考えて書いた結果、文章がダメだとCIが落ちる</p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/749461790744977408">July 3, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">読みやすい文章と読みやすいコードは同時に書くのが難しい  &quot;[WIP] 条件分岐の実装 by azu · Pull Request #‌69 · asciidwango/js-primer&quot;  <a href="https://t.co/UJ41KV5Ttk">https://t.co/UJ41KV5Ttk</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/749462503889833984">July 3, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>後、機械的にチェックする利点の話は以下の文章を読むと面白いかもしれません。</p>

<blockquote>
<p>ツールによる検査の利点
<a href="http://qiita.com/takahi-i/items/a8b994ef17fd66fe6237" title="文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita">文書執筆の指南書で解説されている問題点を RedPen で発見する - Qiita</a></p>
</blockquote>

<p>リポジトリをWatchしていると分かるかもしれませんが、書く前に<a href="https://github.com/asciidwango/js-primer/issues" title="Issues · asciidwango/js-primer">Issues · asciidwango/js-primer</a>にどういう方針にするか、どういうサンプルコードがあると話がし易いかなどの設計をすることが多いです。
(なので適当にコメントしてくれると参考になります)</p>

<p>書きながら考えることも多いのですが、その場合はごちゃごちゃした文章ができて大体CIが落ち始めます。そこで機械的なチェックやPull Requestを出して自分でレビューする(PRも勝手にコメントくれると嬉しい)と少しはまともになります。</p>

<p>そういうことを繰り返しを行うことで文章やコードの質を上げる方法を取っています。(<a href="https://textlint.github.io/">textlint</a>を入れたところで文章の質が上がるわけではないです)</p>

<p>まあ、一発でテストが通った文章とか不安になるでしょ。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlint 7.0リリース、フィルタールールの追加</title>
   <link href="http://efcl.info/2016/06/30/textlint7.0/"/>
   <updated>2016-06-30T10:15:00+09:00</updated>
   <id>http://efcl.info/2016/06/30/textlint7.0</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/textlint/textlint" title="textlint">textlint</a> 7.0をリリースしました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/releases/tag/7.0.0" title="Release 7.0.0 · textlint/textlint">Release 7.0.0 · textlint/textlint</a></li>
</ul>

<p>前回: <a href="http://efcl.info/2016/03/15/textlint--fix/" title="textlint 6.0リリース。--fixでの自動修正に対応 | Web Scratch">textlint 6.0リリース。--fixでの自動修正に対応 | Web Scratch</a></p>

<h2 id="追加した機能">追加した機能</h2>

<h3 id="filter-rule">Filter rule</h3>

<p>フィルタールールが追加されました。
フィルタールールはルールエラーを無視するためのルールを定義できるものです。</p>

<p>たとえば、<a href="https://github.com/textlint/textlint-filter-rule-comments">textlint-filter-rule-comments</a>ではESLintなどで見かける、この部分は無視して！ということを文章中に書くことができます。</p>

<p>MarkdownだとコメントがHTMLコメントを使い <code>&lt;!-- textlint-disable --&gt;</code> と <code>&lt;!-- textlint-enable --&gt;</code> で囲みます。
(Re:Viewなどはコメント記法があるのでそちらを利用できます)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- textlint-disable --&gt;

この部分はtextlintのチェックでエラーがあっても無視される

&lt;!-- textlint-enable --&gt;
</code></pre></div>
<p>この<code>textlint-filter-rule-comments</code>を有効にするには、他のルールと同じくnpmでインストールします。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint-filter-rule-comments
# or
npm install -g textlint-filter-rule-comments
</code></pre></div>
<p>そして、<code>.textlintrc</code>の<code>filters</code>フィールドを作ってそこへ追加します。</p>

<p><code>textlint-filter-rule-comments</code>の<code>textlint-filter-rule-</code>は省略できるので<code>comments</code>だけで問題ありません。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;comments&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>もう一つの例として、特定のNodeを全部無視する<a href="https://github.com/textlint/textlint-filter-rule-node-types">textlint-filter-rule-node-types</a>というフィルタールールがあります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -D textlint-filter-rule-node-types
</code></pre></div>
<p>のようにインストールしておき、次のように設定を書いて有効にします。
そうすると、<code>&quot;nodeTypes&quot;</code>で指定したNode typeのエラーが全て無視されます。
この例では<code>BlockQuote</code> nodeは全てtextlintのチェック対象から除外されます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;node-types&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;nodeTypes&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;BlockQuote&quot;</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;very-nice-rule&quot;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>指定できる<code>nodeTypes</code>は <a href="https://github.com/textlint/textlint/blob/master/docs/txtnode.md#type">https://github.com/textlint/textlint/blob/master/docs/txtnode.md#type</a> を参照してください。</p>

<p>フィルタールールも自分で作る事ができます。
フィルタールールの作り方について詳しくはドキュメントを参照してください。
既存のルールにAPIが一つ増えたぐらいの違いしかありません。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/blob/master/docs/filter-rule.md" title="textlint/filter-rule.md at master · textlint/textlint">textlint/filter-rule.md at master · textlint/textlint</a></li>
</ul>

<h3 id="sharable-config">Sharable Config</h3>

<p>これは<a href="http://efcl.info/2016/04/08/textlint-sharable-config/" title="textlintの設定をnpmにあげて使い回す | Web Scratch">textlintの設定をnpmにあげて使い回す | Web Scratch</a>で紹介した機能です。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D @azu/textlint-config-readme textlint
$(npm bin)/textlint --config @azu/textlint-config-readme README.md
</code></pre></div>
<p>で、<code>.textlintrc</code>の設定をnpmパッケージとして配布されているものを利用できます。</p>

<h3 id="ast-explorer-for-textlint"><a href="https://textlint.github.io/astexplorer/" title="AST explorer for textlint">AST explorer for textlint</a></h3>

<p>主にルール開発者向けですが、textlintの扱うASTをみたり、その場でルールを書いてためせるplaygroundサイトを追加しました。</p>

<p><a href="https://textlint.github.io/astexplorer/"><img src="https://raw.githubusercontent.com/textlint/textlint/master/docs/resources/ast-explorer.png" alt="ast-explorer for textlint"></a></p>

<p>JavaScript ASTで有名な<a href="http://astexplorer.net/">AST explorer</a>のtextlint版です。
ルールを書いてみたい人は、これを使って文章がどのようなASTになるかを眺めてみるといいと思います。</p>

<h2 id="breaking-change">Breaking Change</h2>

<p>textlint 7.0 ではいくつか破壊的な変更はありますが、ユーザーには影響ないと思います。
ルールを書いている人は<a href="https://github.com/textlint/textlint/releases/tag/7.0.0" title="Release 7.0.0 · textlint/textlint">Release 7.0.0 · textlint/textlint</a>をみてください。
メッセージの出力順を変更しているのでテストが落ちている可能性があります。</p>

<h3 id="drop-node-js-0-12-support">Drop Node.js 0.12 support</h3>

<p>またtexltint 7.0からはNode.0.12のサポートを終了し、Node.js 4.0.0 &gt;=がサポート環境となります。(0.12でも動くけどいつの間にか動かなくなる事があります)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 21時限目でECMAScript as a Living Standardという発表をした</title>
   <link href="http://efcl.info/2016/06/29/node-ecmascript/"/>
   <updated>2016-06-29T23:32:00+09:00</updated>
   <id>http://efcl.info/2016/06/29/node-ecmascript</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/34104/" title="Node学園 21時限目 -ES Modules Meetup-">Node学園 21時限目 -ES Modules Meetup-</a>で<a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a>という発表をしてきました。</p>

<p><a href="http://azu.github.io/slide/2016/node-es/ecmascript.html"><img src="https://monosnap.com/file/sWmJQbTd7YAKkFvPog7xozpPtHMOKF.png" alt="ECMAScript as a Living Standard"></a></p>

<ul>
<li>スライド: <a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a></li>
</ul>

<p>ECMAScriptの仕様策定は大きなプロジェクトですが、
大部分の作業がGitHub上で見られる形でやり取りされています。</p>

<p>そのため、大きなGitHubプロジェクトとそこまで変わらない感覚で見ることができます。
また標準仕様を作るのでConsensusを取ったり、フォーマルなやり取りもあります。</p>

<ul>
<li><a href="https://github.com/tc39/proposals">tc39/proposals: Tracking ECMAScript Proposals</a></li>
<li><a href="https://github.com/tc39/ecma262">tc39/ecma262: Status, process, and documents for ECMA262</a></li>
<li><a href="https://github.com/tc39/tc39-notes/">tc39/tc39-notes: These are the notes I take at TC39 Meetings, with Markdown formatting</a></li>
</ul>

<p>GitHubで常に最新の仕様が公開されていて、ECMAScriptもHTMLなどと同じようなLiving Standardの形になっています。</p>

<ul>
<li><a href="https://tc39.github.io/ecma262/" title="ECMAScript® 2017 Language Specification">tc39.github.io/ecma262/</a></li>
</ul>

<p>そのため、ES2015やES2016といったものは基本的にはスナップショット的な仕様となります。
仕様として参照する場合はLiving Standardの方を見るケースが増えてくると思います。
この策定プロセスの変化と早いリリースのベースとなる仕様はES2015で作成されました。</p>

<p>その中でJavaScriptを学ぶ書籍やコンテンツも常にアップデートできる形でないとズレがでてきてしまうことがあります。
それをどうにかしたいのもあり、ES2015以降をベースとしたJavaScriptの入門書を書き始めました。</p>

<p>プログラミングをやったことがあるが、JavaScriptはよくわからないという人が読むと良さそうな本を目指しています。</p>

<p><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書"><img src="http://azu.github.io/slide/2016/node-es/img/js-primer.png" alt="Image"></a></p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer" title="asciidwango/js-primer: JavaScriptの入門書">asciidwango/js-primer: JavaScriptの入門書</a></li>
</ul>

<p>まだ書き始めたばかりであるため、中身が殆どありません。
しかし、書いてる段階から公開することにも意味があると思うので公開しています。</p>

<p>この辺は最初から知っておいた方がいい！というものなどがありましたら、Issueに書いてもらったり、ハッシュタグ<a href="https://twitter.com/intent/tweet?hashtags=jsprimer">#jsprimer</a>をつけてつぶやいてもらうと嬉しいです。</p>

<p>全体としては、基本文法とユースケースの2種類に大きく分けていて、基本文法などを学んでユースケースで実際にJavaScriptで何か書いてみるという流れにしています。
(ECMAScript本というわけではないです)</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer/issues/6" title="[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer">[meta] 全体的な設計/ユースケース一覧 · Issue #6 · asciidwango/js-primer</a></li>
</ul>

<p>話を戻して、ECMAScriptの仕様策定は<a href="https://tc39.github.io/process-document/" title="The TC39 Process">プロセス</a>や<a href="https://github.com/tc39/tc39-notes/">ミーティングの議事録</a>などが公開されています。
これは、透明性を確保するためでもあり、開発者からのフィードバックを得やすい環境を作るためだとも考えられます(GitHubでやっているのもそういう理由があると思います)</p>

<p>そういった策定プロセスのパターンランゲージをAllen Wirfs-Brockさん(ES2015 Editor)が公開しているので読んでみると面白いかもしれません。</p>

<ul>
<li><a href="http://wirfs-brock.com/allen/files/papers/standpats-asianplop2016.pdf">Microsoft Word - standpats-asianplop-final.docx - standpats-asianplop2016.pdf</a></li>
<li>自分のメモ: <a href="https://gist.github.com/azu/47082cbcaf7cc7b2b2f2075afad1b025">プログラミング言語標準化のパターン</a></li>
</ul>

<p>現在のECMAScriptの情報は殆どGitHubで見ることができ、追うときには策定プロセスなどを知っておくと理解がしやすくなると思います。</p>

<p>ECMAScriptのニュースは以下のサイトでやっているので、Proposalの進捗や更新内容などを知りたい人は<a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a>を見てみてください。</p>

<ul>
<li><a href="https://ecmascript-daily.github.io/" title="ECMAScript Daily">ECMAScript Daily</a></li>
</ul>

<p><a href="http://azu.github.io/slide/2016/node-es/ecmascript.html" title="ECMAScript as a Living Standard">ECMAScript as a Living Standard</a>では、ECMAScriptを見ていくことは大きなGitHubプロジェクトを見るのとそこまで変わらないよという話をしました。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>AWS lambdaでGitHubのアクティビティをTwitterで読む用に投稿する</title>
   <link href="http://efcl.info/2016/06/09/github-to-twitter-lambda/"/>
   <updated>2016-06-09T09:52:00+09:00</updated>
   <id>http://efcl.info/2016/06/09/github-to-twitter-lambda</id>
   <content type="html"><![CDATA[ <p>タイトルどおりですが、<a href="https://aws.amazon.com/jp/lambda/" title="AWS Lambda">AWS Lambda</a>を使って、GitHubのWatchやアクティビティをTwitterに投げるlambda functionを書きました。</p>

<ul>
<li><a href="https://github.com/azu/github-to-twitter-lambda" title="azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.">azu/github-to-twitter-lambda: Lambda bot that fetch own GitHub notifications/events and post to Twitter.</a></li>
</ul>

<p>こんな感じでTwitterにGitHubの<a href="https://github.com/notifications">Notification</a>(Watch)、<a href="https://github.com/">アクティビティ</a>が流れます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/06/09-1465433692.png" alt="on Twitter"></p>

<p><strong>⚠ 注意</strong>: メインで使ってるGitHubアカウントのPersonal Tokenを使うとそのアカウントのNotificationとタイムラインが流れるので、privateの情報とかもなげられてしまうので注意です。</p>

<p>ローカルだけで完結したい場合は以下のようなクライアントで動くタイプのものを利用したほうが良いです。</p>

<ul>
<li><a href="https://github.com/azu/github-reader" title="azu/github-reader: [node-webkit] GitHub client app - Viewer for Notifications and News Feed.">azu/github-reader: [node-webkit] GitHub client app - Viewer for Notifications and News Feed.</a></li>
</ul>

<p>GitHubのWatchやアクティビティは読むのが困難なデザインなので、基本読み飛ばしていいTwitterにまとめてしまうと楽な感じがしたので作りました。</p>

<p>自分が関係するような見逃したくない情報は、別の方法で見たほうがいいと思います。</p>

<ul>
<li><a href="https://github.com/pulls">Pull Requests</a></li>
<li><a href="https://github.com/issues">Issues</a></li>
<li><a href="https://github.com/issues/assigned">Issues assigned</a></li>
<li><a href="http://blog.h13i32maru.jp/entry/2016/06/08/090000">JasperというGitHub Issue Readerを作りました - maru source</a></li>
<li><a href="http://efcl.info/2015/07/30/github-issue-manager/">自分に関係するGitHub Issueを一覧できるアプリを書いた | Web Scratch</a></li>
</ul>

<p>導入はREADME通りにやっても動かない場合がありそうなので、そこは頑張って…(Pull Request下さい)</p>

<h2 id="必要なもの">必要なもの</h2>

<ul>
<li><a href="https://github.com/apex/apex" title="Apex">Apex</a>のインストール</li>
<li>GitHub token(情報元)</li>
<li>Twitter token(ポスト先)</li>
<li>AWSのアカウント</li>
<li>lambda</li>
<li>dynamodb</li>
</ul>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text"> git clone https://github.com/azu/github-to-twitter-lambda.git
cd github-to-twitter-lambda/functions/notifications
npm install
npm run init
# dynamodbのテーブルを作る
</code></pre></div>
<p>dynamodbをロックファイル代わりというか、前回実行した時間の記録だけに使っています。
lambdaとdynamodbは毎月無料枠があるので、基本的にこのlambda functionでかかる費用は $0から$1以内になる感じです。
(2分に1回実行した場合)</p>

<h3 id="config">Config</h3>

<p>サンプルの設定があるのでコピーして編集します。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cp project.example.json project.json
</code></pre></div>
<ul>
<li><code>role</code> はApexのドキュメントに書かれてるようにlambdaの実行するRoleです

<ul>
<li>後述するpolicyを持ったRoleを作って指定しています。</li>
</ul></li>
<li><code>environment</code>は環境変数的な感じですが、ここにToken類を入れています。

<ul>
<li>実行時に環境変数でも行けるはず</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">    &quot;role&quot;: &quot;arn:aws:iam::xxxxxxxxxxxx&quot;,
    &quot;defaultEnvironment&quot;: &quot;dev&quot;,
    &quot;environment&quot;: {
        &quot;GITHUB_TOKEN&quot;: &quot;GitHub Person token need repo/notification/user&quot;,
        &quot;TWITTER_CONSUMER_KEY&quot;: &quot;app key&quot;,
        &quot;TWITTER_CONSUMER_SECRET&quot;: &quot;app secret&quot;,
        &quot;TWITTER_ACCESS_TOKEN_KEY&quot;: &quot;token key&quot;,
        &quot;TWITTER_ACCESS_TOKEN_SECRET&quot;: &quot;token  secret&quot;
    }
</code></pre></div>
<h3 id="lambda-role-policy">Lambda role policy</h3>

<p>Lambda(<code>role&quot;: &quot;arn:aws:iam::xxxxxxxxxxxx&quot;</code>)のroleは次のpolicyをもたせています。
<code>&quot;lambda:*&quot;</code>と<code>&quot;cloudwatch:*&quot;</code>があればとりあえず動く気がします。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
    <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&quot;dynamodb:*&quot;</span><span class="p">,</span>
                <span class="s2">&quot;lambda:*&quot;</span><span class="p">,</span>
                <span class="s2">&quot;logs:*&quot;</span><span class="p">,</span>
                <span class="s2">&quot;cloudwatch:*&quot;</span><span class="p">,</span>
                <span class="s2">&quot;autoscaling:Describe*&quot;</span>
            <span class="p">],</span>
            <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
            <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="deploy">Deploy</h3>

<p><a href="https://github.com/apex/apex" title="Apex">Apex</a>を使ってデプロイします。
<code>aws configure</code> とかで awsのAPIキーとかを設定しておかないと当然デプロイできません。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apex deploy notifications
</code></pre></div>
<p>詳細は<a href="https://github.com/apex/apex" title="Apex">Apex</a>のドキュメントや以下を見て下さい。</p>

<ul>
<li><a href="http://dev.classmethod.jp/cloud/aws/how-to-manage-aws-lambda-functions-with-apex/" title="ApexでAWS Lambdaファンクションを管理する ｜ Developers.IO">ApexでAWS Lambdaファンクションを管理する ｜ Developers.IO</a></li>
</ul>

<h3 id="test">Test</h3>

<p>ローカルでdry-runしたい場合は test.js というのがあるのでそれを実行するといけます(実際にpostはしない)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">cd functions/notifications
npm test
</code></pre></div>
<p><a href="https://github.com/apex/apex" title="Apex">Apex</a>を使って、手元からlambdaを叩いてテストもできます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">apex invoke notifications
</code></pre></div>
<h3 id="cron">Cron</h3>

<p>lambdaはデフォルトだと１回実行して終わりなので繰り返し実行させて動かします
(lambdaの実行回数による料金は基本無料枠で納まります)</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/with-scheduled-events.html" title="スケジュールされたイベントでの AWS Lambda の使用 - AWS Lambda">スケジュールされたイベントでの AWS Lambda の使用 - AWS Lambda</a>を使うことで、Cron的に繰り返し実行を設定できます。</p>

<p>自分は2分に一度とかに設定しています。</p>

<p><img src="https://monosnap.com/file/lhJghW8bwKJmTZ3iDugi4B7eklRn5Z.png" alt="image"></p>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>GitHubのWatchは破綻してる</li>
<li>GitHub -&gt; Twitter</li>
<li>TwitterでGitHubを読めるようにした</li>
<li>Slackは未読に厳しい</li>
<li>未読を読み飛ばしやすいのはやっぱりTwitterかRSSリーダー</li>
<li>RSSリーダーもコンテキストが異なる物量には弱い

<ul>
<li>RSSリーダーはリリースノートだけに絞ってる</li>
<li><a href="http://efcl.info/2014/07/30/find-github-release/" title="GitHubでライブラリのリリースを見ていくためのツールや方法 | Web Scratch">GitHubでライブラリのリリースを見ていくためのツールや方法 | Web Scratch</a></li>
</ul></li>
<li><a href="http://www.misuzilla.org/Distribution/TweetIrcGateway/" title="TweetIrcGateway">TweetIrcGateway</a>っぽい</li>
<li>それぞれのコンテキストにあった読みやすさがあるので、読みやすい場所に読みたいものを置く</li>
<li>そういう土管ツールが簡単につくれるともっと良さそう</li>
<li><a href="http://hoist.io/" title="hoist.io">hoist.io</a> とかそういうサービスの類</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScript Plugin Architectureというプラグイン設計について学ぶ無料の電子書籍を書いた</title>
   <link href="http://efcl.info/2016/06/06/JavaScript-Plugin-Architecture/"/>
   <updated>2016-06-06T09:36:00+09:00</updated>
   <id>http://efcl.info/2016/06/06/JavaScript-Plugin-Architecture</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>というJavaScriptのプラグイン設計についての電子書籍を書きました。</p>

<p>この書籍はJavaScriptのライブラリやツールにおけるプラグインアーキテクチャについて見ていく事を目的としたものです。</p>

<p>以下の形式で読むことができます。</p>

<ul>
<li><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/">Web版</a></li>
<li><a href="https://www.gitbook.com/download/pdf/book/azu/javascript-plugin-architecture">PDF形式</a> - <a href="https://github.com/azu/JavaScript-Plugin-Architecture/issues/106">レンダリングに難あり</a></li>
<li><a href="https://www.gitbook.com/download/epub/book/azu/javascript-plugin-architecture">ePub形式</a></li>
<li><a href="https://www.gitbook.com/download/mobi/book/azu/javascript-plugin-architecture">Mobi形式</a></li>
</ul>

<p><a href="https://github.com/azu/JavaScript-Plugin-Architecture">GitHub</a>上にソースコードも公開されているでので直接Markdownファイルを読むこともできます。
Markdownよりは<a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/">Web版</a>の方が見やすいのでそちらをオススメします。</p>

<p>Twitterのハッシュタグは<a href="https://twitter.com/search?f=tweets&amp;q=%23js_plugin_book&amp;src=typd" title="Twitter #js_plugin_book">#js_plugin_book</a></p>

<p>更新情報は<a href="https://github.com/azu/JavaScript-Plugin-Architecture/releases.atom">RSS</a>や<a href="https://github.com/azu/JavaScript-Plugin-Architecture/releases">リリースノート</a>から見ることができます。</p>

<h2 id="v1-0-0">v1.0.0</h2>

<p>最初に<a href="https://github.com/azu/JavaScript-Plugin-Architecture/issues?q=label%3Aproposal+is%3Aclosed">書くと決めたプラグインアーキテクチャ</a>が揃ったので<a href="https://github.com/azu/JavaScript-Plugin-Architecture/releases/tag/1.0.0" title="1.0.0">1.0.0</a>としてリリースしました。
<a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>の時と同じく、継続的に更新できる仕組みを色々入れてあるので新しいプラグインアーキテクチャのProposalが出たら書いていく感じになると思います。</p>

<ul>
<li><a href="http://efcl.info/2014/0623/res3943/" title="JavaScript Promiseの本を書きました | Web Scratch">JavaScript Promiseの本を書きました | Web Scratch</a></li>
</ul>

<p>このツール/ライブラリで使われてるプラグインの仕組みは面白いというようなものがあれば、ProposalをIssueに書いてみてください。
<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/CONTRIBUTING.md" title="CONTRIBUTING.md">CONTRIBUTING.md</a>にProposalの書き方を載せています。</p>

<h2 id="はじめに">はじめに</h2>

<p>JavaScriptの世界では1つの大きなライブラリよりも小さいなものを組み合わせていくようなスタイルが多く見られます。
小さなものを組み合わせて作るためには、プラグインと呼ばれるような拡張の仕組みが必要となります。
またそのようなプラグインがたくさんあるエコシステムの土台を作るには、プラグインアーキテクチャが重要になると言えます。</p>

<blockquote>
<p>ソフトウェアの構造に「プラグイン機構」を設け、ユーザコミュニティから開発者コミュニティへの質的な転換を図るのは、ソフトウェア設計からエコシステム設計へとつながる<br>
-- <a href="http://t-wada.hatenablog.jp/entry/active-oss-development-vs-simplicity" title="OSS開発の活発さの維持と良いソフトウェア設計の間には緊張関係があるのだろうか? - t-wadaのブログ">OSS開発の活発さの維持と良いソフトウェア設計の間には緊張関係があるのだろうか? - t-wadaのブログ</a></p>
</blockquote>

<p>この書籍では、JavaScriptにおけるプラグインアーキテクチャやそのエコシステムを形成してるライブラリやツールなどの実装を学ぶことが目的となっています。</p>

<p>何も断りなしにECMAScript 2015で書いてて、JavaScriptの文法の説明は基本的にしてないのでご了承ください。</p>

<h2 id="この書籍の内容について">この書籍の内容について</h2>

<p>現状の書籍の概要をまとめてると以下のようなライブラリやツールについて書かれています。
大体の章は<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/CONTRIBUTING.md#proposal%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9" title="Proposal">Proposal</a>に沿って書いていたので、次のような項目になっています。</p>

<ul>
<li>どう書ける?</li>
<li>どういう仕組み?</li>
<li>実装してみよう</li>
<li>どういう用途に向いている?</li>
<li>どういう用途に向いていない?</li>
<li>この仕組みを使っているもの</li>
<li>エコシステム</li>
</ul>

<h3 id="jquery"><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/jQuery/">jQuery</a></h3>

<p>jQueryのプラグインについて解説しています。
<code>&lt;script&gt;</code>タグをベースとしたプラグインアーキテクチャについて解説しています。</p>

<h3 id="eslint"><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/">ESLint</a></h3>

<p>ESLintのルールを拡張する仕組みについて解説しています。
ESLintではJavaScriptのコードをパースして作成されたASTを元にコードのLintを行います。
実際にESLintのルールを解釈できる小さな実装を作りながらプラグインの仕組みについて学びます。</p>

<h3 id="connect"><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/connect/">Connect</a></h3>

<p>Connectの <strong>middleware</strong> と呼ばれるプラグインアーキテクチャについて解説しています。
Node.js以外においても<em>Rack</em>などHTTPサーバーでよく見られるプラグインを使った階層構造について学びます。</p>

<h3 id="gulp"><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/gulp/">gulp</a></h3>

<p><strong>タスク自動化ツール</strong>として知られるgulpのプラグインアーキテクチャについて解説しています。
gulpではデータの流れとして既存のNode.js Streamを使い、そこで流すデータとしてvinylオブジェクトを利用します。
実際にgulpプラグインを書きながら、gulpのプラグインの仕組みについて学びます。</p>

<h3 id="redux"><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/Redux/">Redux</a></h3>

<p>アプリケーションのStateを管理ライブラリのReduxのプラグインアーキテクチャについて解説しています。
Reduxでは <strong>Middleware</strong> と呼ばれる拡張の仕組みを持っていますが、Connectとの類似点や相違点があります。
小さなReduxの実装を作りながら <strong>Middleware</strong> の仕組みについて学びます。</p>

<h2 id="contributing">Contributing</h2>

<p>この書籍は無料で読むことができ、同時に修正や新しいページを書く権利があります。</p>

<p><a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>に、書籍で扱うべきプラグインアーキテクチャのProposalの書き方や
Pull Request、コミットのやりかたなどが書かれています。</p>

<p>間違いやライブラリのアップデートへの追従など何かあれば、IssueやPull Requestをよろしくお願いします。</p>

<p>ソースコードは全てGitHubに公開されています。</p>

<ul>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture">azu/JavaScript-Plugin-Architecture</a></li>
</ul>

<h2 id="license">License</h2>

<p>MIT/CC BY-NC © azu</p>

<ul>
<li>コードはMITライセンスで利用できます</li>
<li>文章は<a href="http://creativecommons.org/licenses/by-nc/4.0/" title="CC BY-NC 4.0">CC BY-NC 4.0</a>で利用できます</li>
</ul>

<h2 id="もう一つの目的">もう一つの目的</h2>

<p>この書籍のテーマは、先ほど書いたようにプラグインの仕組みについて学ぶという目的を持っています。
しかし、この書籍を書くことにした目的はまた別にあります。</p>

<p>以下のIssueがこの書籍の起点となっています。</p>

<ul>
<li><a href="https://github.com/azu/azu/issues/60" title="色々なプラグイン機構のパターン · Issue #60 · azu/azu">色々なプラグイン機構のパターン · Issue #60 · azu/azu</a></li>
</ul>

<p>このIssueよりさらに前に、電子書籍の開発環境について考えるというIssueが目的の半分です。</p>

<blockquote>
<p>目的: もっと気軽に書ける電子書籍
もっと簡単に色々自動化できる電子書籍の書き方についてを考える。</p>
</blockquote>

<ul>
<li><a href="https://github.com/azu/azu/issues/42">[Markdown] 電子書籍開発環境 · Issue #42 · azu/azu</a></li>
</ul>

<p>この書籍を書きながら考えた電子書籍のセットアップや継続的な開発については以下などで発表しています。</p>

<ul>
<li><a href="http://efcl.info/2015/09/28/easy-to-create-ebook/">今すぐ電子書籍(技術書)を書き始める方法と文章の自動チェック | Web Scratch</a></li>
<li><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/">Introduction | 技術文書をソフトウェア開発する話</a></li>
</ul>

<p>いつもどおり<a href="http://azu.github.io/promises-book/#about-author">手段と目的が逆転</a>しているので、
<a href="https://github.com/textlint/textlint" title="textlint">textlint</a>の開発を進めるためにこの書籍を開発していた部分も大きいです。</p>

<p>textlintで日本語の文章をチェックするために論文やRedPenなど既存のLinterを参考に色々なルールを実装しましたが、ルールの実験場として<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>を使っていました。</p>

<ul>
<li><a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule · textlint/textlint Wiki</a></li>
</ul>

<p>自分が実装するtextlintのルールはfalse positiveにならない事を目標にしています。
そのルールに問題ないかを測ることができ、ある程度量があり、自由にいじれる文章が欲しかったので<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>を書いていた部分もあります。</p>

<p>なので、JavaScript Plugin Architectureの<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/.textlintrc" title=".textlintrc">.textlintrc</a>はいろんなルールが詰め込まれています。
(後で整理してプリセットとか作るかもしれません。)</p>

<p><a href="https://azu.gitbooks.io/nodefest-technical-writing/content/">技術文書をソフトウェア開発する話</a>でも書いてましたが、自然言語はプログラミング言語と違って正解がないので、汎用的なルールを作るのは結構難しいです。</p>

<blockquote>
<p>自然言語処理のほとんどの技術は形態素解析が正しく行われていることを前提に設計されているので、
(中略) 文字レベルで誤った日本語入力に対する校正の大部分は当面困難と予想する。
残念ながら誤った日本語入力に対する形態素解析の研究はきわめて少ないのが現状
-- <a href="%E8%87%AA%E7%84%B6%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E6%8A%80%E8%A1%93%E3%81%AE%E7%8F%BE%E7%8A%B6%E3%81%A8%E5%B1%95%E6%9C%9B">https://ipsj.ixsq.nii.ac.jp/ej/index.php?action=pages_view_main&amp;active_action=repository_view_main_item_snippet&amp;index_id=8404&amp;pn=1&amp;count=20&amp;order=7&amp;lang=japanese&amp;page_id=13&amp;block_id=8</a></p>
</blockquote>

<p>とか書かれてるぐらいなので、textlintではルールを簡単に作って公開できる所に注力しています。
オレオレ<a href="http://efcl.info/2015/09/10/introduce-textlint/">ルール</a>、<a href="http://efcl.info/2016/04/08/textlint-sharable-config/">設定</a>や<a href="http://efcl.info/2015/12/30/textlint-preset/">プリセット</a>などをどんどん公開するといいです。</p>

<p>また、textlint自体もデフォルトでルールを持っていなかったり、プラガブルな実装になっています。</p>

<p>ルールを処理する仕組みはESLintと同じですが、<a href="https://github.com/textlint/textlint/blob/master/docs/plugin.md">パーサ</a>、<a href="https://github.com/textlint/textlint/blob/master/docs/rule.md">ルール</a>、ルールのエラーを無視する範囲を決める<a href="https://github.com/textlint/textlint/blob/master/docs/filter-rule.md">フィルタールール</a>、<a href="https://github.com/textlint/textlint/blob/master/src/messages/MessageProcessManager.js">フィルター実現するロジック</a>、<a href="https://github.com/textlint/textlint-formatter">出力フォーマッター</a>など大部分がプラガブルな実装です。</p>

<ul>
<li><a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/ESLint/" title="ESLint · JavaScript Plugin Architecture">ESLint · JavaScript Plugin Architecture</a></li>
</ul>

<p>そういうプラグインの実装方法についても<a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>では書いているので、興味がある人は見てみてください。</p>

<h3 id="継続的に書く">継続的に書く</h3>

<p>継続的に書くにはやっぱりCIを回してテストしないと辛いので、JavaScript Plugin Architectureでは次のようなテストが走っています。</p>

<ul>
<li>サンプルコードのテスト

<ul>
<li>Mochaで動かすユニットテスト</li>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L28">https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L28</a></li>
</ul></li>
<li>サンプルコードの実行テスト

<ul>
<li><code>*-example.js</code>は単独で実行できるというルールにして実行させてエラーにならないかテスト</li>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L27">https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L27</a></li>
</ul></li>
<li>textlint

<ul>
<li>文章のチェック</li>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L26">https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L26</a></li>
</ul></li>
<li>ESLint

<ul>
<li>サンプルコードのスタイルチェック</li>
<li>インラインコードブロックで埋め込んだサンプルコードのチェック</li>
</ul></li>
<li>文章のカバレッジ

<ul>
<li><a href="http://efcl.info/2016/01/12/textlint-coverage/" title="textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch">textlintで文章カバレッジレポートを継続的に見ていく | Web Scratch</a></li>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L32">https://github.com/azu/JavaScript-Plugin-Architecture/blob/dee986289576598d7f9725d84ab3ba4dcb961d57/package.json#L32</a></li>
</ul></li>
</ul>

<p>この辺をすぐ使えるGitBookのスターターキットも公開してるので興味がある人は触ってみると面白いかもしれません。</p>

<ul>
<li><a href="http://efcl.info/2015/09/28/easy-to-create-ebook/" title="今すぐ電子書籍(技術書)を書き始める方法と文章の自動チェック | Web Scratch">今すぐ電子書籍(技術書)を書き始める方法と文章の自動チェック | Web Scratch</a></li>
</ul>

<h2 id="おわりに">おわりに</h2>

<p><a href="https://github.com/azu/JavaScript-Plugin-Architecture" title="JavaScript Plugin Architecture">JavaScript Plugin Architecture</a>をひとまずリリースしました。
世の中にはまだまだおもしろいプラグインの仕組みがあるので、面白いものがあったら<a href="https://github.com/azu/JavaScript-Plugin-Architecture/blob/master/CONTRIBUTING.md#proposal%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9" title="Proposal">Proposal</a>のIssueを書いていただけると更新される気がします。</p>

<p>JavaScriptのライブラリを書くときにいろんなプラグインの仕組みをぱっと読めるものがあると便利なので、
他にも面白い仕組みの話を追加してくれる人も募集中です。</p>

<p>最近、プラガブルな<a href="https://github.com/azu/bellows-logger">ロガーライブラリ</a>を実装していて、<a href="https://azu.gitbooks.io/javascript-plugin-architecture/content/ja/connect/index.html" title="Connect · JavaScript Plugin Architecture">Connect · JavaScript Plugin Architecture</a>や<a href="https://github.com/azu/JavaScript-Plugin-Architecture/issues/101">Web Audio API</a>を参考にしたので、こういうのがあると便利です。</p>

<p>今現在、電子書籍を書く環境は簡単に揃います。
ブログでは収まらなそうなちょっとした内容を電子書籍という体裁でまとめてみたりすると面白いかもしれません。</p>

<blockquote>
<p>技術書は一日で書き終わらない
途中で飽きてしまう問題
-- <a href="https://azu.gitbooks.io/nodefest-technical-writing/content/slide/25.html" title="技術書を書く環境はできたが… | 技術文書をソフトウェア開発する話">技術書を書く環境はできたが… | 技術文書をソフトウェア開発する話</a></p>
</blockquote>

<p>今はまた別のJavaScript本を書いていますが、継続的に文書開発できる環境についてはまだまだ考える事が多そうです。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Reactで条件によって出したり消したりするコンポーネントを書いた</title>
   <link href="http://efcl.info/2016/05/31/react-toggle-pattern/"/>
   <updated>2016-05-31T20:38:00+09:00</updated>
   <id>http://efcl.info/2016/05/31/react-toggle-pattern</id>
   <content type="html"><![CDATA[ <p><code>&lt;TogglePattern /&gt;</code> というコンポーネントを書きました。</p>

<ul>
<li><a href="https://github.com/azu/react-toggle-pattern" title="azu/react-toggle-pattern: React Component that provide toggle pattern">azu/react-toggle-pattern: React Component that provide toggle pattern</a></li>
</ul>

<p>名前の通りトグルするボタンとかを実装するのを想定して作りましたが、
もっと汎用的にパターンマッチ的な感じの制御ができるようになってます(A/Bテスト的なやつにも使えそう)</p>

<p>使い方は、<code>children</code>に表示が切り替わる要素を置く形で書くようになっています。
(こういう親になるコンポーネントってなんというのだろう?)</p>

<p>次の例では<code>isEditing</code>の値が</p>

<ul>
<li><code>true</code>ならば<code>LeaveEditingButton</code>が表示</li>
<li><code>false</code>ならば<code>EnterEditingButton</code>が表示</li>
</ul>

<p>という形になっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span><span class="nx">TogglePattern</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;react-toggle-pattern&quot;</span><span class="p">;</span>
<span class="kr">class</span> <span class="nx">ToggleButton</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">(){</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">TogglePattern</span> <span class="nx">isEditing</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">isEditing</span><span class="p">}</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="nx">isEditing</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="o">/&gt;</span>
                <span class="o">&lt;</span><span class="nx">EnterEditingButton</span> <span class="nx">isEditing</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span>
            <span class="o">&lt;</span><span class="err">/TogglePattern&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>プログラム的に書くと以下の事をやっているのと同じです。
ViewからできるだけIf文を消すために、<code>TogglePattern</code>のような宣言的に書けるようにしています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">toggleButton</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">isEditing</span> 
                     <span class="o">?</span> <span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="o">/&gt;</span>
                     <span class="o">:</span> <span class="o">&lt;</span><span class="nx">EnterEditingButton</span> <span class="o">/&gt;</span>
</code></pre></div>
<p>条件が1つだけならORかANDなのか気にしなくていいですが、<code>&lt;TogglePattern /&gt;</code>は複数条件にも対応しています。
<code>&lt;TogglePattern /&gt;</code>は<code>&lt;ToggleOrPattern /&gt;</code>のエイリアスです。</p>

<p><strong>OR</strong></p>

<p>OR条件で表示を制御したい場合は<code>&lt;ToggleOrPattern /&gt;</code>が利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">ToggleOrPattern</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">EnterEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="err">/ToggleOrPattern&gt;</span>
</code></pre></div>
<p>両方共条件を満たしているので、両方とも表示します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;TogglePattern ToggleOrPattern&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">EnterEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="err">/div&gt;</span>
</code></pre></div>
<p><strong>AND</strong></p>

<p>AND条件で表示を制御したい場合は<code>&lt;ToggleAndPattern /&gt;</code>が利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">ToggleAndPattern</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">EnterEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="err">/ToggleAndPattern&gt;</span>
</code></pre></div>
<p>これはAND条件でマッチするのは <code>LeaveEditingButton</code> だけなので、次のような結果になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">LeaveEditingButton</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span>
</code></pre></div>
<p>条件の値には真偽値以外も使えます。
次の例では<code>pattern</code>に指定した文字列と一致するものが表示されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">TogglePattern</span> <span class="nx">pattern</span><span class="o">=</span><span class="s2">&quot;one&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ComponentX</span> <span class="nx">pattern</span><span class="o">=</span><span class="s2">&quot;one&quot;</span><span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">ComponentY</span> <span class="nx">pattern</span><span class="o">=</span><span class="s2">&quot;two&quot;</span><span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="err">/TogglePattern&gt;</span>
</code></pre></div>
<p>なので、結果は<code>&lt;ComponentY /&gt;</code>となります。</p>

<h2 id="実装">実装</h2>

<p>実装は大した事はやってないですが、テストを<a href="https://github.com/airbnb/enzyme" title="enzyme">enzyme</a>で書いています。
普通にReact Componentのテストを書けるので面白い感じがします。</p>

<ul>
<li><a href="https://github.com/azu/react-toggle-pattern/blob/master/test/react-toggle-pattern-test.js" title="react-toggle-pattern/react-toggle-pattern-test.js at master · azu/react-toggle-pattern">react-toggle-pattern/react-toggle-pattern-test.js at master · azu/react-toggle-pattern</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>textlintでAsciidoc/Asciidoctorをサポートするプラグイン</title>
   <link href="http://efcl.info/2016/05/08/textlint-support-asciidoc-loose/"/>
   <updated>2016-05-08T20:24:00+09:00</updated>
   <id>http://efcl.info/2016/05/08/textlint-support-asciidoc-loose</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/" title="textlint">textlint</a>で<a href="http://www.methods.co.nz/asciidoc/" title="AsciiDoc">AsciiDoc</a>/<a href="http://asciidoctor.org/" title="Asciidoctor">Asciidoctor</a>を限定的にサポートするプラグインを書きました。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="textlint-plugin-asciidoc-loose">textlint-plugin-asciidoc-loose</a></li>
</ul>

<h2 id="制限">制限</h2>

<p>今のところ<code>Paragarph</code>と<code>Str</code>しかサポートしていません。
他のNodeは単純に無視されるので、<code>Header</code>や<code>List</code>、<code>Link</code>などはないものと同じ扱いになっています。</p>

<p>簡単にいうと本文の文章をチェックするルールしか上手く動かないという感じです。</p>

<p>textlintのルールの大体は本文を対象としているので、<a href="https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule" title="Collection of textlint rule · textlint/textlint Wiki">Collection of textlint rule</a>に書かれてるルールの8割ぐらいは動くような気がします。</p>

<p><code>Header</code>や<code>List</code>のサポートぐらいできたら結構良さそうな気がするので、Pull Request募集中です。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose/issues" title="Issues · azu/textlint-plugin-asciidoc-loose">Issues · azu/textlint-plugin-asciidoc-loose</a></li>
</ul>

<p>現状は<a href="http://motemen.hatenablog.com/entry/2016/04/textlint-asciidoc" title="AsciiDoc（Asciidoctor）の文書をtextlintで校正する - 詩と創作・思索のひろば">AsciiDoc（Asciidoctor）の文書をtextlintで校正する - 詩と創作・思索のひろば</a> と似ているかもしれません。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-plugin-asciidoc-loose
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>の<code>&quot;plugins&quot;</code>に<code>&quot;asciidoc-loose&quot;</code>を追加すると有効になります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;plugins&quot;: [
        &quot;asciidoc-loose&quot;
    ]
}
</code></pre></div>
<p>以下の拡張子をAsciidocのファイルとして認識しています。</p>

<ul>
<li>&quot;.asciidoc&quot;,</li>
<li>&quot;.adoc&quot;,</li>
<li>&quot;.asc&quot;</li>
</ul>

<h2 id="例">例</h2>

<p><a href="http://azu.github.io/promises-book/" title="JavaScript Promiseの本">JavaScript Promiseの本</a>は<a href="https://github.com/azu/promises-book/search?l=asciidoc&amp;q=&amp;type=Code&amp;utf8=%E2%9C%93">Asciidoctorで書かれてる</a>で試しに<a href="http://textlint.github.io/" title="textlint">textlint</a>でLintしてみたら、エラー位置も正しく普通に動きました。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/05/08-1462706748.png" alt="textlint with asciidoc"></p>

<h2 id="注意">注意</h2>

<p>最初に書いた制限にあるように<code>Paragarph</code>と<code>Str</code>のみなので、<code>List</code>の中の<code>Str</code>は例外的に無視するみたいなルールが意図と異なる結果になったりする場合もあります。</p>

<ul>
<li><a href="https://github.com/azu/textlint-plugin-asciidoc-loose" title="textlint-plugin-asciidoc-loose">textlint-plugin-asciidoc-loose</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>敬体(ですます調)と常体(である調)の表記を統一するtextlintルール</title>
   <link href="http://efcl.info/2016/05/06/no-mixed-dearu-desumasu-2.0/"/>
   <updated>2016-05-06T15:21:00+09:00</updated>
   <id>http://efcl.info/2016/05/06/no-mixed-dearu-desumasu-2.0</id>
   <content type="html"><![CDATA[ <p><a href="http://textlint.github.io/" title="textlint">textlint</a>向けのルールとして敬体(ですます調)と常体(である調)を一つの文書内でどちらを使うか統一する<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu" title="textlint-rule-no-mix-dearu-desumasu">textlint-rule-no-mix-dearu-desumasu</a>というルールを書きました。</p>

<p>初期からあったのですが、<a href="https://github.com/takuyaa/kuromoji.js" title="kuromoji.js">kuromoji.js</a>で<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/releases/tag/2.0.0">形態素解析した結果</a>をベースとしたり、明示的にどちらを<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/releases/tag/2.2.0">優先するかのオプション</a>を追加したので改めて紹介します。</p>

<h2 id="インストール">インストール</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install textlint-rule-no-mix-dearu-desumasu
</code></pre></div>
<h2 id="使い方">使い方</h2>

<p><code>.textlintrc</code>(Recommended)に設定するのを推奨しています。
後述するオプション設定もできるのでこちらの方が便利です。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;rules&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;no-mix-dearu-desumasu&quot;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>CLIの<code>--rule</code>オプションだとデフォルト設定のみになります。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">textlint --rule no-mix-dearu-desumasu README.md
</code></pre></div>
<h2 id="オプション">オプション</h2>

<p>追記(2016-05-22): デフォルトでは <code>strict: false</code> にしています。
<code>strict:false</code>では少し緩めで文末のチェックのみ限定しているので、文中のチェックを入れたい場合は<code>strict: true</code>をオプションに加える必要があります。</p>

<p>このルールでは、本文、見出し、箇条書きをそれぞれ独立してチェックし、その項目内で表記が混在していないかを見つけます。
なので、本文と見出しの間で表記が混在するのは問題ありません。</p>

<ul>
<li>本文(Markdownなら通常の文章部分)</li>
<li>見出し(Markdownなら<code>#</code>)</li>
<li>箇条書き(Markdownなら<code>* item</code>や<code>- item</code>)</li>
</ul>

<p>それぞれの項目ごとに優先する表記をオプションで設定できます。</p>

<ul>
<li>本文(Body)</li>
<li>見出し(Header)</li>
<li>箇条書き(List)</li>
</ul>

<p>デフォルトは &quot;&quot;(空)で、多く使われている表記を自動的に優先します。
優先したい表記を &quot;である&quot; または &quot;ですます&quot; で指定します。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-mix-dearu-desumasu&quot;</span><span class="o">:</span> <span class="p">{</span>
             <span class="s2">&quot;preferInHeader&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInBody&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>   <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInList&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>    <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="c1">// 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか</span>
             <span class="s2">&quot;strict&quot;</span><span class="o">:</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>例えば、以下の例だと</p>

<ul>
<li>見出しは&quot;自動&quot;(多く使われてる表記に統一を促す)</li>
<li>本文は&quot;ですます&quot;</li>
<li>箇条書きは&quot;である&quot;</li>
<li>Strict modeでチェック</li>
</ul>

<p>というルールでチェックします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;no-mix-dearu-desumasu&quot;</span><span class="o">:</span> <span class="p">{</span>
             <span class="s2">&quot;preferInHeader&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInBody&quot;</span><span class="o">:</span> <span class="s2">&quot;ですます&quot;</span><span class="p">,</span><span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="s2">&quot;preferInList&quot;</span><span class="o">:</span> <span class="s2">&quot;である&quot;</span><span class="p">,</span>    <span class="c1">// &quot;である&quot; or &quot;ですます&quot;</span>
             <span class="c1">// 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか</span>
             <span class="s2">&quot;strict&quot;</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>これは、本文と箇条書きで表記が異なるのは一般的によくあることなので、それぞれの項目ごとに設定できるようになっています。</p>

<h2 id="リファクタリング例">リファクタリング例</h2>

<p>このルールを使ってリファクタリングしてみた例です。</p>

<ul>
<li><a href="https://github.com/azu/JavaScript-Plugin-Architecture/pull/94" title="refactor(textlint): 敬体(ですます調)と常体(である調)の使い分けを厳密に by azu · Pull Request #94 · azu/JavaScript-Plugin-Architecture">refactor(textlint): 敬体(ですます調)と常体(である調)の使い分けを厳密に by azu · Pull Request #94 · azu/JavaScript-Plugin-Architecture</a> </li>
</ul>
<div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-先ほどのgulpタスクの例では、既にモジュール化された処理を`pipe`で繋げただけであるため、</span>
<span class="gi">+先ほどのgulpタスクの例では、既にモジュール化された処理を`pipe`で繋げただけで、</span>
 それぞれの処理がどのように実装されているかはよく分かりませんでした。
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-BufferはStringと相互変換が可能であるため、多くのgulpプラグインと呼ばれるものは、`gulpPrefixer`と`prefixBuffer`にあたる部分だけを実装しています。</span>
<span class="gi">+BufferはStringと相互変換が可能なので、多くのgulpプラグインと呼ばれるものは、`gulpPrefixer`と`prefixBuffer`にあたる部分だけを実装しています。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-gulpではプラグインが持つ機能は1つ(単機能)であること推奨しています。</span>
<span class="gi">+gulpではプラグインが持つ機能は1つ(単機能)とすることを推奨しています。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-`jQuery.fn`の実装を見てみると、実態は`jQuery.prototype`であるため実際にprototype拡張していることがわかります。</span>
<span class="gi">+`jQuery.fn`の実装を見てみると、実態は`jQuery.prototype`なので、prototype拡張していることがわかります。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-単純なprototype拡張であると言えるので、利点はJavaScriptのprototypeと同様です。</span>
<span class="gi">+単純なprototype拡張なので、利点はJavaScriptのprototypeと同様です。</span>
</code></pre></div><div class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">-まだNode.jsで使われているCommonJSやES6 Modulesといったものがなかった時代に作られた仕組みであるため、</span>
<span class="gi">+まだNode.jsで使われているCommonJSやES6 Modulesなどがなかった時代に作られた仕組みなので、</span>
</code></pre></div>
<p>他にいい代替表現など書き方の指摘を募集しています。</p>

<ul>
<li><a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/issues/11" title="Docs: リファクタリング例を募集 · Issue #11 · azu/textlint-rule-no-mix-dearu-desumasu">Docs: リファクタリング例を募集 · Issue #11 · azu/textlint-rule-no-mix-dearu-desumasu</a></li>
</ul>

<p>また、テキストから解析する部分を別途ライブラリとして切り出しているので、これはそもそも&quot;である調&quot;なのか?という問題などがありましたらIssueを立ててください。</p>

<p>イマイチ明確な基準がわかっていないため、false positiveにならないように限定しています。</p>

<ul>
<li><a href="https://github.com/azu/analyze-desumasu-dearu" title="azu/analyze-desumasu-dearu: 文の敬体(ですます調)、常体(である調)を解析するJavaScriptライブラリ">azu/analyze-desumasu-dearu: 文の敬体(ですます調)、常体(である調)を解析するJavaScriptライブラリ</a></li>
</ul>

<p>(本当は<a href="https://github.com/azu/textlint-rule-no-mix-dearu-desumasu/issues/4" title="textlint-rule-no-mix*ed*-dearu-desumasu">textlint-rule-no-mix*ed*-dearu-desumasu</a>の方がESLint的なルール名として正しい…)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>npmで同じライブラリの複数バージョンをインストールして使う方法</title>
   <link href="http://efcl.info/2016/05/02/npm-package-mixed-multiple-versions-demo/"/>
   <updated>2016-05-02T14:12:00+09:00</updated>
   <id>http://efcl.info/2016/05/02/npm-package-mixed-multiple-versions-demo</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/fkling/astexplorer/pull/107/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R52" title="Add support for ESLint v2 by Daniel15 · Pull Request #107 · fkling/astexplorer">Add support for ESLint v2 by Daniel15 · Pull Request #107 · fkling/astexplorer</a>を見ていて、一つのプロジェクト内で複数のバージョンの同じライブラリを使う面白い方法が使われてたのでメモです。</p>

<p>前述した<a href="https://astexplorer.net/" title="AST explorer">AST explorer</a>の場合だと、ESLint@1とESLint@2の両方に対応したPlaygroundを作りたいため、一つのプロジェクトに両方のバージョンをインストールする必要があるという話です。</p>

<p>他にも、同じライブラリでもβ版は別の名前空間(<code>require(&quot;other-name-space&quot;)</code>)で使って試したいというケースもあると思います。</p>

<ul>
<li><a href="http://ja.stackoverflow.com/questions/9191/%E5%90%8C%E4%B8%80npm%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%90%8D%E3%81%AE%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%96%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B" title="javascript - 同一npmパッケージ名の複数のバージョンをサブディレクトリにインストールすることはできますか? - スタック・オーバーフロー">javascript - 同一npmパッケージ名の複数のバージョンをサブディレクトリにインストールすることはできますか? - スタック・オーバーフロー</a></li>
</ul>

<p>ブラウザだとちょっとファイルサイズ的に避けたい気がしますが、<code>jQuery@1</code>と<code>jquery@3</code>を混在させて使うプロジェクトとかにも応用できそうな気がします。</p>

<h2 id="やり方">やり方</h2>

<p>サンプルプロジェクトは以下においてあります。</p>

<ul>
<li><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo" title="azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.">azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.</a></li>
</ul>

<p>このプロジェクトのゴールは<code>lodash@3</code>と<code>lodash@4</code>を同時にひとつのプロジェクトで使うことです(実用性は置いておきます)</p>

<h2 id="1-それぞれのバージョンのローカルパッケージを作る">1. それぞれのバージョンのローカルパッケージを作る</h2>

<p>npm@2 からは<a href="https://docs.npmjs.com/files/package.json#local-paths" title="Local Paths">Local Paths</a>を依存関係として定義することができます。</p>

<p>簡単にいうと、相対パスで指定したディレクトリをモジュールとして<code>dependencies</code>に追加できる機能です。</p>

<ul>
<li><a href="http://efcl.info/2014/10/04/npm2-local-module/" title="npm 2.0.0でローカルパッケージを使ってrequire(&amp;#39;../../../&amp;#39;)を回避する | Web Scratch">npm 2.0.0でローカルパッケージを使ってrequire(&#39;../../../&#39;)を回避する | Web Scratch</a></li>
<li><a href="http://efcl.info/2015/07/29/example-test-on-npm/" title="npmパッケージをExampleテストしよう | Web Scratch">npmパッケージをExampleテストしよう | Web Scratch</a></li>
</ul>

<p>これを使って、<code>lodash@3</code>と<code>lodash@4</code>のローカルパッケージを作ります。</p>

<p><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo">サンプルプロジェクト</a>を見るのが分かりやすいですが、<code>lodash3</code>と<code>lodash4</code>というディレクトリを手動で作って、それぞれ<code>npm init</code>して<code>main</code>に<code>index.js</code>を指定しただけのモジュールです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">packages
├── lodash3
│   ├── index.js
│   └── package.json
└── lodash4
    ├── index.js
    └── package.json
</code></pre></div>
<p><code>index.js</code>には以下のようにlodashをexportしているだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// lodash@3
module.exports = require(&quot;lodash&quot;);
</code></pre></div>
<ul>
<li><a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo/blob/master/packages/lodash3/index.js" title="packages/lodash3/index.js">packages/lodash3/index.js</a></li>
</ul>

<p>lodash3のモジュールで<code>require(&quot;lodash&quot;)</code>したのは<a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo/blob/62745c4ee969da1672a6c4c84b929e6946da0e21/packages/lodash3/package.json#L9" title="packages/lodash3/package.json">packages/lodash3/package.json</a>で依存関係に定義されている<code>lodash</code>なので、<code>lodash@3</code>がexportされているという事になります。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;lodash3&quot;</span><span class="p">,</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;lodash@3&quot;</span><span class="p">,</span>
  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;azu&quot;</span><span class="p">,</span>
  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;lodash&quot;</span><span class="p">:</span> <span class="s2">&quot;^3.0.0&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="2-ローカルパッケージをインストールする">2. ローカルパッケージをインストールする</h2>

<p>後は、プロジェクトにローカルパッケージとして作った<code>lodash3</code>と<code>lodash4</code>への依存を定義するだけです。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">npm i -S packages/lodash3 packages/lodash4
</code></pre></div>
<p>でインストールできます。
npmのバージョンによって<code>npm i -S</code>でちゃんと相対パスにならないバグがありますが、直接以下のように書けば同じ結果が得られます。</p>
<div class="highlight"><pre><code class="language-json" data-lang="json">  <span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&quot;lodash3&quot;</span><span class="p">:</span> <span class="s2">&quot;file:packages/lodash3&quot;</span><span class="p">,</span>
    <span class="nt">&quot;lodash4&quot;</span><span class="p">:</span> <span class="s2">&quot;file:packages/lodash4&quot;</span>
  <span class="p">}</span>
</code></pre></div>
<h2 id="3-それぞれのバージョンを使う">3. それぞれのバージョンを使う</h2>

<p>後は、プロジェクトから<code>require(&quot;lodash3&quot;)</code>のような感じで<code>require</code>して使うだけです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lodash3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lodash3&quot;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lodash4</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lodash4&quot;</span><span class="p">);</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">lodash3</span><span class="p">.</span><span class="nx">VERSION</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">));</span>
<span class="nx">assert</span><span class="p">(</span><span class="nx">lodash4</span><span class="p">.</span><span class="nx">VERSION</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;4&quot;</span><span class="p">));</span>
</code></pre></div>
<p>lodashには<code>.VERSION</code>にバージョン番号が入ってるので、それぞれ@3と@4のバージョンが読み込めてることが確認できます。</p>

<h2 id="おわり">おわり</h2>

<p>ローカルパッケージを使って、一つのプロジェクト内で複数バージョンのnpmパッケージを使い分ける方法を紹介しました。</p>

<p><a href="https://github.com/fkling/astexplorer" title="astexplorer">astexplorer</a>みたいなツール系だと結構実用的なユースケースだと思います。
普通のウェブサイトとかプロダクトなら、最新のバージョン使おうねって感じです。
(ワークアラウンドとして覚えておくと便利なことがあるかもしれないという感じです)</p>

<p>他にも過去のバージョンとのパフォーマンス比較ポイントを作ったりなどの色々使い道があるかもしれません。</p>

<ul>
<li>サンプル: <a href="https://github.com/azu/npm-package-mixed-multiple-versions-demo" title="azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.">azu/npm-package-mixed-multiple-versions-demo: Demo project for mixing multiple version of the same npm package in a project.</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#child_process_sushi でJavaScriptアーキテクチャについて話してきた</title>
   <link href="http://efcl.info/2016/04/27/child_process_sushi/"/>
   <updated>2016-04-27T23:40:00+09:00</updated>
   <id>http://efcl.info/2016/04/27/child_process_sushi</id>
   <content type="html"><![CDATA[ <p><a href="https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=%20%23child_process_sushi" title="#child_process_sushi">#child_process_sushi</a>で最近やってたJavaScriptの設計の話をしてきた。</p>

<ul>
<li><a href="http://azu.github.io/slide/2016/child_process_sushi/almin-javascript-architecture.html" title="Almin.js | JavaScriptアーキテクチャ">Almin.js | JavaScriptアーキテクチャ</a></li>
</ul>

<p>Fluxとかで上半分は皆やるようになったけど、ドメインモデルとかFluxの場合にビジネスロジックとかをどこに書くとかはまだ未成熟な気がしているので、そのパターンを考えてて<a href="https://github.com/almin/almin" title="Almin.js">Almin.js</a>というのを書いたという話をした。</p>

<p>Almin自体は大した実装ではないので、サンプルとかドキュメントとしてパターンについて学べるものを書いていきたいイメージ。(このアーキテクチャ話自体は、色々な言語で繰り返しやっては言語が廃れて、パターンがちょっと違う形で残るというのを繰り返している by @t_wada)</p>

<p><img src="http://azu.github.io/slide/2016/child_process_sushi/img/almin-architecture-flux.png" alt="almin"></p>

<p>JavaScriptでもウェブアプリやElectronでのアプリのような、APIを叩いて表示して終わりじゃなくて、ドメインモデルの生存期間が長いものが増えてきているのでその辺を考えていこうという話でした。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr">🍣 <a href="https://twitter.com/hashtag/child_process_sushi?src=hash">#child_process_sushi</a> <a href="https://t.co/CSuqQoDrWj">pic.twitter.com/CSuqQoDrWj</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/725281910373511172">April 27, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ログ</p>

<ul>
<li><a href="http://togetter.com/li/968216" title="#child_process_sushi - Togetterまとめ">#child_process_sushi - Togetterまとめ</a></li>
</ul>

<h2 id="pathでのxss-kyo_ago">PathでのXSS - kyo_ago</h2>

<blockquote>
<p><a href="https://speakerdeck.com/masatokinugawa/shibuya-dot-xss-techtalk-number-7" title="明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck">明日から使える?! PATHでXSSする技術/ Shibuya.XSS techtalk #7 // Speaker Deck</a></p>
</blockquote>

<p>の話</p>

<ul>
<li>外部からIEのドキュメントモードを落として表示できるという話</li>
<li>iframe以外でIEのドキュメントモードをダウングレードする方法があったらすごい</li>
</ul>

<h2 id="angular2でニッチなやつ-83">Angular2でニッチなやつ - 83</h2>

<ul>
<li>Upgrading from 1.x</li>
<li>実際にこれをやってる話</li>
<li>Angular 1から2に上げていくパターン</li>
<li>2にあげたものが1のコンポーネントを使うことができる

<ul>
<li>実際にやると死ぬので大変</li>
</ul></li>
<li>npmとして名前が違うので2と1は両方パッケージとして入る</li>
<li>upgrade adaptorというものがあり、これからBootStrapをよぶ必要がある</li>
<li>Angular 1

<ul>
<li>Service

<ul>
<li>いろんな機能を持ってる</li>
</ul></li>
<li>Directive

<ul>
<li>コンポーネント</li>
</ul></li>
</ul></li>
<li>Angular 2

<ul>
<li>コンポーネントの方は移行完了した</li>
</ul></li>
<li>進捗80%で止まりそうな要因はuirouterの移行。</li>
<li>1.xで動いてるrouterなので、2.xに移行するときのボトルネックになる

<ul>
<li>1.x -&gt; 2.x -- 2.xのルーターの世界になる</li>
</ul></li>
</ul>

<hr>

<h1 id="広告の話-jxck">広告の話 - Jxck</h1>

<ul>
<li>HTTP2はRFCが出た</li>
<li>実装 から 使う話になってきた</li>
<li>現状の問題

<ul>
<li>AD問題</li>
<li>TLSの問題</li>
<li>ロードバランスの話</li>
</ul></li>
<li>ADの問題

<ul>
<li><a href="https://speakerdeck.com/suzuken/deisupureiguang-gao-falseji-chu-tosekiyuritei" title="ディスプレイ広告の基礎とセキュリティ // Speaker Deck">ディスプレイ広告の基礎とセキュリティ // Speaker Deck</a></li>
<li>mixed contentの問題</li>
<li>たまに　HTTP で出してくる</li>
<li>コレがおきる業界図</li>
<li>広告主 -&gt; メディア</li>
<li>iframeの入れ子の問題</li>
<li>一番外はHTTPSは保証</li>
<li>中の広告がmixed contentになってることが多い</li>
<li>mixed contentをreportする方法がない</li>
<li>中の広告まで全部制御できてないと全部HTTPSにならない</li>
<li><a href="https://hacks.mozilla.org/2015/09/subresource-integrity-in-firefox-43/">https://hacks.mozilla.org/2015/09/subresource-integrity-in-firefox-43/</a></li>
<li>CORSが必要</li>
<li>入れ子になった中のドメインの内容も推測出来てしまうので、CORSが必要

<ul>
<li>仕様的にはそっちは許可されてない</li>
</ul></li>
</ul></li>
<li>次回はCAの話</li>
</ul>

<hr>

<h1 id="almin-js-javascriptアーキテクチャ-azu"><a href="http://azu.github.io/slide/2016/child_process_sushi/almin-javascript-architecture.html" title="Almin.js | JavaScriptアーキテクチャ">Almin.js | JavaScriptアーキテクチャ</a> - azu</h1>

<ul>
<li>Fluxとかで上半分は皆できるようになったけどドメインモデルについてはまだ未成熟</li>
</ul>

<p><img src="http://azu.github.io/slide/2016/child_process_sushi/img/almin-architecture-flux.png" alt="almin"></p>

<ul>
<li><a href="https://github.com/almin/almin" title="Almin.js">Almin.js</a>はその辺を考える土台とパターンとサンプルを用意するプロジェクト

<ul>
<li>実装自体はFluxと大体同じ</li>
<li>DDDとかその辺をちゃんと実装してオープンソースで読めるものがまだ少ない(JavaScriptだと特に)</li>
</ul></li>
<li>考えて設計して、考えるコードを書く状況をクライアントサイドJavaScriptでも作っていきたい</li>
<li>アーキテクチャは毒

<ul>
<li>この話も何週目 - 世界は繰り返す</li>
</ul></li>
<li>フロントエンド/クライアントサイドでは、バックエンド/サーバサイドよりもオブジェクトの生存期間が長い

<ul>
<li>Gmailのメモリリークの話</li>
<li>クライアントサイドではモデルの生存する時間が数日単位とかある</li>
</ul></li>
<li>この辺の知見はC#がやっぱり多い(クライアントサイドであるため)</li>
<li>言語は死んでもパターンは残るのがパターンは強い</li>
<li>JavaScriptの影響を受けてiOS/Androidでも似たような話がでてたり面白い。</li>
<li>Repositoryと言ってた部分はrelayとかが代わりになったり(サーバサイドとの透過的な扱い)しそう</li>
<li>初期化時にRepositoryとか全部のシングルトンを集めたものを作ってそれを扱うフレームワーク的にすれば、依存関係とかは常に逆になるので気にしなくてよくなりそう

<ul>
<li>Alminはフレームワークにはしたくなかったのでアプリ側でLocatorとかで似たような事を書いてたり</li>
</ul></li>
</ul>

<hr>

<h1 id="node-js-v6-会長">Node.js v6 - 会長</h1>

<ul>
<li><a href="https://speakerdeck.com/yosuke_furukawa/eater" title="eater // Speaker Deck">eater // Speaker Deck</a></li>
<li>テスト = プロセス分離</li>
<li>mockを始末しなくてもプロセスが死んだら死ぬ</li>
<li>テストの時にmockの解放忘れでテストが落ちるのが死ぬ</li>
<li>Async/Syncが混ざって</li>
<li>node test.js で動く</li>
<li>TJ氏

<ul>
<li><a href="https://github.com/visionmedia/expresso">https://github.com/visionmedia/expresso</a></li>
<li>ファイルシステムとかテスト間で依存してるやつがいると死ぬ</li>
<li>RSpecとかみたいのは並列で実行するために、データベースとかも</li>
</ul></li>
<li>ブラウザ</li>
<li>eater

<ul>
<li>モック前提</li>
<li>基本は1ファイル1モック</li>
<li>サブテスト</li>
</ul></li>
<li>deprecatedメッセージでもテスト落ちる</li>
<li>Node.jsにはログの共通インターフェースがない問題</li>
<li>「immutableとか言ってるそうやったらmockできなくなるんじゃないの」</li>
</ul>

<h2 id="testのassertをastで数えるのやつ-teppis">testのassertをASTで数えるのやつ - teppis</h2>

<ul>
<li><a href="http://teppeis.hatenablog.com/entry/2014/12/esplan-new-testing-utility-counting-assertoins-statically" title="おまえは今まで実行したassertの回数を覚えているのか？あるいは新しいアサーションユーティリティのご提案 - teppeis blog">おまえは今まで実行したassertの回数を覚えているのか？あるいは新しいアサーションユーティリティのご提案 - teppeis blog</a>

<ul>
<li>変換しないと意味が分からないコードを書くのはなんか違うのでは</li>
</ul></li>
<li><a href="https://www.jfrog.com/video/artifactory-npm-support/" title="JFrog - Artifactory NPM Support">JFrog - Artifactory NPM Support</a>

<ul>
<li>月 98$ で SaaS</li>
<li>Mavenとかのホスティングとかいろんなパッケージのホステイングできる</li>
<li>npmのregistryとして登録するProxyとして</li>
</ul></li>
<li>社内のキャッシュになかったらpublicへ

<ul>
<li>npmの別registryの登録方法</li>
<li>scoped moduleでregistryの名前空間を分けるといい</li>
</ul></li>
</ul>

<h2 id="ビルド職人を減らしたいという話-vvakame">ビルド職人を減らしたいという話 -- vvakame</h2>

<blockquote>
<p>スライド: <a href="https://gist.github.com/vvakame/45ca8f051e54702071eb88bb1dd8b46e" title="ビルド職人.md">ビルド職人.md</a></p>
</blockquote>

<ul>
<li>設定を共有したい</li>
<li><a href="https://github.com/rocjs/roc" title="rocjs/roc: Modern Application Development Ecosystem">rocjs/roc: Modern Application Development Ecosystem</a></li>
</ul>

<hr>

<h2 id="intersectionobserver-koba04">InterSectionObserver -- koba04</h2>

<ul>
<li><a href="https://github.com/WICG/IntersectionObserver" title="WICG/IntersectionObserver: API Sketch for Intersection Observers">WICG/IntersectionObserver: API Sketch for Intersection Observers</a></li>
<li>画面から離れたら発火するイベント</li>
<li>下まで来たら再読み込みする</li>
<li>今のFirefoxは同期のスクロール処理は警告でるので、似たような事をする</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects" title="Scroll-linked effects - Mozilla | MDN">Scroll-linked effects - Mozilla | MDN</a></li>
</ul>

<h2 id="最近の辛いこと-t_wada">最近の辛いこと - t_wada</h2>

<ul>
<li><code>deepStrictEqual</code> がブラウザでは動かない</li>
<li>commmonjs assertはdeepEqualまでしかない</li>
<li><a href="https://github.com/sindresorhus/core-assert" title="sindresorhus/core-assert: Node.js `assert` as a standalone module">sindresorhus/core-assert: Node.js <code>assert</code> as a standalone module</a></li>
<li>暗礁に乗り上げた <code>assert.deepStrictEqual</code></li>
<li>ES6時代に対応したdeepEqualが必要</li>
<li>無限Iteratorとかどうするの?</li>
<li>ESLintでキャキャやってるのすごいね</li>
<li>npm3+dedupe+依存モジュールのバージョン違い競合(estraverseとか?)+Browserifyの辛い話

<ul>
<li>ESLintとpower-assertでdudupeの問題が起こることもある</li>
<li>バージョン違いが存在するとネストしてインストールされる</li>
<li>ネストしてインストールされたモジュールをBrowserifyに食べさせるとなぜか絶対パスがビルドファイル内にでてくる、2つ分のファイルが読み込まれたり、dedupeできなかった問題がおきる</li>
<li>後ろ向きな理由でJSHintを使ってる話</li>
</ul></li>
</ul>

<hr>

<h2 id="バッチ処理の依存関係定義が辛い-joker1007">バッチ処理の依存関係定義が辛い - joker1007</h2>

<ul>
<li>簡単なものだったらRakeでもいいけど</li>
<li>複雑になるとRubyでジョブフローを上手くやるものがない

<ul>
<li>オープンソースのいいものがない(Ruby)</li>
<li>rukawa</li>
<li><a href="http://qiita.com/joker1007/items/02b334d1cca76fadaf2c" title="Ruby製のシンプルなワークフローエンジンRukawaの紹介 - Qiita">Ruby製のシンプルなワークフローエンジンRukawaの紹介 - Qiita</a></li>
</ul></li>
<li>Ruby製のワークフローエンジンを作った</li>
</ul>

<hr>

<p>Child Processおめでとうございます。</p>
 ]]></content>
 </entry>
 

</feed>
