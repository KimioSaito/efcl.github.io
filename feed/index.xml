<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Web Scratch</title>
 <link href="http://efcl.info/feed/" rel="self"/>
 <link href="http://efcl.info"/>
 <updated>2016-11-22T10:11:53+09:00</updated>
 <id>http://efcl.info/</id>
 
 <author>
   <name>azu</name>
   
 </author>
 

 
 <entry>
   <title>東京Node学園祭2016 アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/13/nodefest2016/"/>
   <updated>2016-11-13T18:25:00+09:00</updated>
   <id>http://efcl.info/2016/11/13/nodefest2016</id>
   <content type="html"><![CDATA[ <p><a href="http://nodefest.jp/2016/" title="東京Node学園祭2016 | 11月12日,13日開催！">東京Node学園祭2016</a>に参加してきたのでメモ</p>

<hr>

<h2 id="demystifying-javascript-engines-alejandro-oviedo">Demystifying JavaScript Engines - Alejandro Oviedo</h2>

<ul>
<li><a href="https://github.com/a0viedo/demystifying-js-engines" title="a0viedo/demystifying-js-engines: A list of resources about JavaScript engines">a0viedo/demystifying-js-engines: A list of resources about JavaScript engines</a></li>
<li>2006年のJavaScriptエンジン

<ul>
<li>インタプリタ</li>
<li>遅い</li>
<li>最適化しても遅い</li>
</ul></li>
<li>Fortran、Self、Smalltalkの人がより良い方法を考えた

<ul>
<li>(Source) -&gt; Parse -&gt; (bytecode) -&gt; executionPhase &lt;-&gt; JIT Compiler</li>
<li>何度も実行するコードはJITコンパイラを通すようにした</li>
<li>プロパティのアクセスの最適化、Hidden Classなど色々な最適化

<ul>
<li><a href="https://github.com/v8/v8/wiki/Design%20Elements" title="Design Elements · v8/v8 Wiki">Design Elements · v8/v8 Wiki</a></li>
</ul></li>
<li><code>eval</code>と<code>try-catch</code>が最適化の邪魔になってることがある</li>
</ul></li>
<li>さらに変化して

<ul>
<li>execution phase

<ul>
<li>&lt;-&gt; unoptimiging compiler (インラインキャッシュとか)</li>
<li>&lt;-&gt; optimiging compiler</li>
</ul></li>
<li>何回か実行して、optimizeできるコードとそうでないコードを分別する</li>
</ul></li>
<li>SpiderMonkey

<ul>
<li>Interpreter(ParseとExecution) -&gt; JIT &lt;-&gt; Ionmonkey

<ul>
<li>Baseline compiler + Ionmonkey</li>
</ul></li>
<li>数百回動かして super optimize フラグがついたものはIonmonkeyで動く</li>
<li>bailoutした場合は、FallbackとしてInterpreterじゃなくてJITのコードを使ってる</li>
</ul></li>
<li>Chakra

<ul>
<li>FallbackとしてInterpreterが動く</li>
</ul></li>
<li>V8

<ul>
<li>Sourcecode

<ul>
<li>-&gt; Ignition</li>
<li>-&gt; Fullcodegen &lt;- (AST) -&gt; Crankshaft(+ TurboFan)</li>
</ul></li>
<li><a href="http://v8project.blogspot.jp/2016/08/firing-up-ignition-interpreter.html" title="V8 JavaScript Engine: Firing up the Ignition Interpreter">V8 JavaScript Engine: Firing up the Ignition Interpreter</a></li>
</ul></li>
<li>JavaScriptCode

<ul>
<li>SourceCode

<ul>
<li>-&gt; LLInt</li>
<li>-&gt; Baseline Compiler</li>
<li>-&gt; DFG Compiler</li>
<li>-&gt; FTL Compiler</li>
</ul></li>
<li>今はFTLじゃなくなってる - <a href="https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/" title="Introducing the B3 JIT Compiler | WebKit">Introducing the B3 JIT Compiler | WebKit</a></li>
</ul></li>
<li>最適化について

<ul>
<li>ループ内で動かない変数はループの外に出す <a href="https://en.wikipedia.org/wiki/Loop_optimization" title="Loop optimization">Loop optimization</a></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>関数のインライン化

<ul>
<li>関数を呼び出すとコンテキストスイッチが起きる</li>
<li>なので、関数をインライン化できるとコンテキストスイッチが減って早くなる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">fn</span><span class="p">();</span> <span class="c1">// &lt;= インライン化される</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>Dead code elimination 

<ul>
<li>ループの中にあっても、外で使ってないものは削除されてしまう</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &lt;= 使ってない</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>GCについて

<ul>
<li>Incremental GC

<ul>
<li>ちょっとづつやる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="debugging-node-js-performance-issues-in-production-thomas-watson">Debugging Node.js Performance Issues in Production - Thomas Watson</h2>

<ul>
<li>Thomas watson</li>
<li><a href="https://opbeat.com/" title="Opbeat">Opbeat</a>

<ul>
<li>パフォーマンスモニタリング</li>
</ul></li>
<li>Node.jsアプリのパフォーマンスモニタリングをしてなぜ遅くなったのかを見つける</li>
<li>プロダクションのアプリをどうやってデバッグするか</li>
<li>何が重要か(why production?)</li>
<li>productionで起きるエラーを見つけるのは難しい</li>
<li>開発時と違ってローカルじゃなくてリモートでデバッグするから難しい</li>
<li>Premature Optimization

<ul>
<li>productionに入る前に最適化仕様として間違った部分を最適化してしまうのは危険なところ</li>
</ul></li>
<li>計測

<ul>
<li>パフォーマンスの計測はどうやるか</li>
<li><code>JSON.parse(req.body)</code>

<ul>
<li>大きなリクエストがきたらJSON parseが遅くなる</li>
</ul></li>
<li><code>console.time</code>を使うことでシンプルな計測はできる</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&quot;json-parse&quot;</span><span class="p">);</span>
<span class="c1">// json-parse: 154.12ms</span>
</code></pre></div>
<ul>
<li>けど、なぜ遅いのかは色々な要因がある

<ul>
<li>(Single Threaded)</li>
<li>CPUをよくつかうコード</li>
<li>Slow I/O</li>
<li>Event loopにイベントを突っ込みすぎ</li>
<li>メモリの使いすぎ</li>
<li>GC

<ul>
<li>Stop the world</li>
</ul></li>
</ul></li>
<li>CPU Intensive Code

<ul>
<li>Sync I/O</li>
<li>JSON parase</li>
<li>RegExp</li>
<li>Crypto</li>
<li>Templates</li>
</ul></li>
<li>Demo

<ul>
<li><code>$ node --perf_basic_prof_only_functions cpu.js</code></li>
<li><code>perf</code> コマンド</li>
<li><a href="http://int.main.jp/txt/perf/" title="perfの使いかた">perfの使いかた</a></li>
<li><code>perf</code>で<code>perf.data</code>を使ってそれを見ていく</li>
<li>JavaScriptとLinuxのカーネルの関数のマッピングしているデータをみてデバッグ</li>
<li><a href="https://www.npmjs.com/package/0x" title="0x">0x</a>でflamechartを作って見る

<ul>
<li>JavaScriptとカーネルの関数の呼び出しをflamechartで見る</li>
</ul></li>
<li>flamechartを見るとcpu.js:13が重たい</li>
<li><code>cpu.js</code>を見てみると crypto 部分が重たい</li>
<li>syncな処理をやってたのをasyncにすればいい感じになりそう</li>
</ul></li>
<li>mdb

<ul>
<li>何で動かないのはよくわからないときのデバッグ</li>
<li><a href="https://github.com/joyent/mdb_v8" title="joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs">joyent/mdb_v8: postmortem debugging for Node.js and other V8-based programs</a></li>
<li><a href="https://www.joyent.com/blog/mdb-and-node-js" title="Joyent | MDB and Node.js">Joyent | MDB and Node.js</a></li>
<li><code>--abort_on_uncaught_exception</code> V8のダンプを出せる</li>
<li><a href="https://www.npmjs.com/package/autopsy" title="autopsy">autopsy</a>をつかつと  SolarisのVMを動かせるので、そこでmdbをやるのが簡単</li>
</ul></li>
</ul>

<hr>

<h2 id="サイボウズの開発を支えるkaizen文化-teppeis">サイボウズの開発を支えるKAIZEN文化 - teppeis</h2>

<blockquote>
<p><a href="http://www.slideshare.net/teppeis/kaizen-68803503" title="サイボウズの開発を支えるKAIZEN文化">サイボウズの開発を支えるKAIZEN文化</a></p>
</blockquote>

<ul>
<li>技術的負債を貯めるデータベースを作った</li>
<li>貯めていって時間があるときにやろう

<ul>
<li>貯まるだけでいつまでも減らない</li>
</ul></li>
<li>KAIZEN DAY

<ul>
<li>技術的負債 -&gt; KAIZEN</li>
<li>リファクタリングだけじゃなくて開発プロセスについても改善</li>
</ul></li>
<li>一日に終わらないタイプのKAIZENが進まない

<ul>
<li>KAIZEN DAYでも割り込みがある</li>
</ul></li>
<li>KAIZEN合宿

<ul>
<li>泊りがけでやる</li>
<li>一日で終わらないものもやる</li>
<li>終了後にプログラマ以外も呼んで発表会をやった</li>
</ul></li>
<li>KAIZEN

<ul>
<li><a href="http://pepabo-ceo.jugem.jp/?eid=40" title="スーパーリセット | ペパボ社長ブログ">スーパーリセット | ペパボ社長ブログ</a></li>
</ul></li>
<li>メインプロダクトで遊びづらい

<ul>
<li>B2Bサービス

<ul>
<li>サービス停止 = ユーザーの仕事も止まる</li>
</ul></li>
<li>大規模</li>
<li>新しいものを入れにくい</li>
<li>短期要件に振り回されることは少ないけど、新規ものが少ない</li>
</ul></li>
<li>技術的な変遷

<ul>
<li><a href="http://stateofjs.com/" title="Home">フロントエンドのアンケート</a></li>
<li>3年ぐらいで変化はある</li>
<li>けど、結果論なので途中ではもっと色々変化ある</li>
<li>そういう技術的な変化を試す場所が必要</li>
</ul></li>
<li>サイドプロジェクトで試す

<ul>
<li><a href="http://blog.cybozu.io/entry/2015/11/04/080000" title="cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ">cybozu.com 稼働状況 を React/Redux で作り直した話 - Cybozu Inside Out | サイボウズエンジニアのブログ</a></li>
<li>サイドでやってメインにも適応</li>
</ul></li>
<li>リモートワーク

<ul>
<li>テレビ会議をどこでもできるような仕組みが必要</li>
</ul></li>
<li>振り返り

<ul>
<li>振り返りの振り返り</li>
</ul></li>
</ul>

<h2 id="keynote">Keynote</h2>

<blockquote>
<p><a href="http://www.theserverside.com/news/4500279472/Seif-project-makes-Web-security-a-priority" title="Seif project makes Web security a priority">Seif project makes Web security a priority</a></p>
</blockquote>

<ul>
<li>MS、Apple、Adobe、Oracle

<ul>
<li>Webをリプレイスしようとしたけど、失敗</li>
<li>すべてのソリューションはオープンじゃなかった</li>
<li>Webはオープン</li>
</ul></li>
<li>Self Project

<ul>
<li>architectureはWebとは違うけど、ウェブブラウザで動く</li>
<li>Public key cryptは使われてる</li>
<li>CAは信用できないので</li>
</ul></li>
<li><code>seifnode</code>

<ul>
<li>cryptographic </li>
<li><a href="https://github.com/paypal/seifnode" title="paypal/seifnode">paypal/seifnode</a></li>
<li>random(RNG) - 一番大切</li>
<li>Entropy

<ul>
<li>OS、Microphone(音)、Camera</li>
<li>強いランダムを作る</li>
</ul></li>
</ul></li>
<li>Seif Protocol

<ul>
<li>Secure JSON Over TCP</li>
<li><a href="https://github.com/paypal/seif-protocol" title="paypal/seif-protocol: Node.js Implementation of the Seif protocol">paypal/seif-protocol: Node.js Implementation of the Seif protocol</a></li>
<li>ECC521 as unique = パスワードの代わり</li>
</ul></li>
<li>Seif Handshake</li>
<li><a href="http://www.seif.place/" title="The Seif Project">The Seif Project</a></li>
</ul>

<hr>

<h2 id="why-to-standardize-your-readmes-richard-littauer">Why to Standardize your READMEs - Richard Littauer</h2>

<blockquote>
<p><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></p>
</blockquote>

<ul>
<li>README

<ul>
<li>READMEはユーザーへのprotocol</li>
<li>READMEは一番最初に読む</li>
<li>ドキュメントよりも大事かも</li>
</ul></li>
<li>READMEを見たときに

<ul>
<li>なんて呼ぶの?</li>
<li>なぜ使うべきなの?</li>
<li>インストールの仕方</li>
<li>コントリビューター</li>
<li>ライセンス</li>
</ul></li>
<li>READMEに必要に必要なもの

<ul>
<li>タイトル</li>
<li>説明</li>
<li>インストール</li>
<li>ロゴ</li>
<li>バックグランド</li>
<li>セキュリティ</li>
<li>API</li>
<li>などなど</li>
</ul></li>
<li>ドキュメント

<ul>
<li>コード見なくても使えるのが100%</li>
</ul></li>
<li>問題

<ul>
<li>いろんなパッケージマネージャー</li>
<li>npmはパッケージが多い</li>
</ul></li>
<li>READEMEは難しい

<ul>
<li>書くのも難しい</li>
<li>パースするのも難しい</li>
</ul></li>
<li>Standard

<ul>
<li>READMEにもStandard(JS)みたいなものを作ろう</li>
<li>考えずに扱えるもの</li>
</ul></li>
<li>Standard README

<ul>
<li>A Specification</li>
<li>A Generator</li>
<li>A Linter</li>
<li>A badge </li>
<li>Example Templete</li>
</ul></li>
<li><a href="https://github.com/RichardLitt/standard-readme" title="RichardLitt/standard-readme: Readme Standard Style">RichardLitt/standard-readme: Readme Standard Style</a></li>
<li>Require

<ul>
<li>Title</li>
<li>Short Description</li>
<li>ToC</li>
<li>Install</li>
<li>Usage</li>
<li>Contribute</li>
<li>License</li>
</ul></li>
<li>Optional

<ul>
<li>Badge</li>
</ul></li>
<li>Generator

<ul>
<li><a href="https://github.com/RichardLitt/generator-standard-readme" title="RichardLitt/generator-standard-readme: Scaffold out a Standard Readme">RichardLitt/generator-standard-readme: Scaffold out a Standard Readme</a></li>
<li>Uses yeoman</li>
</ul></li>
<li>Linter

<ul>
<li>まだ</li>
</ul></li>
<li>UPTAKE

<ul>
<li>Standards.js とかでも使ってる</li>
</ul></li>
<li>Future

<ul>
<li>Linter</li>
<li>ExampleをREPLで試せるようにする</li>
<li>NLP

<ul>
<li>検索がもっとしやすくなる</li>
</ul></li>
</ul></li>
<li>FAQ

<ul>
<li>i18n README

<ul>
<li>Specなしより簡単にはなる</li>
</ul></li>
<li>Requirementsはどこに?

<ul>
<li>Install</li>
<li><a href="https://github.com/RichardLitt/standard-readme/blob/master/spec.md#install" title="standard-readme/spec.md at master · RichardLitt/standard-readme">standard-readme/spec.md at master · RichardLitt/standard-readme</a></li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="vue-js-サーバーサイドレンダリング">Vue.js サーバーサイドレンダリング</h2>

<blockquote>
<p><a href="https://speakerdeck.com/kazupon/vue-dot-js-2-dot-0-server-side-rendering" title="Vue.js 2.0 Server Side Rendering // Speaker Deck">Vue.js 2.0 Server Side Rendering // Speaker Deck</a></p>
</blockquote>

<ul>
<li>Vue.js 2.0

<ul>
<li>Progressive Framework</li>
</ul></li>
<li>Virtual DOM

<ul>
<li><a href="https://github.com/snabbdom/snabbdom" title="snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.">snabbdom/snabbdom: A virtual DOM library with focus on simplicity, modularity, powerful features and performance.</a>が元</li>
</ul></li>
<li>レンダリングシステム

<ul>
<li>ライフサイクル</li>
</ul></li>
<li>テンプレート

<ul>
<li>-&gt; AST</li>
<li>テンプレート言語の部分 = 動的</li>
<li>テンプレート言語じゃない部分 = 静的なNode</li>
<li>静的なNodeを静的なノードツリーを検出する</li>
</ul></li>
<li>レンダリング

<ul>
<li>Watcherというものが<code>render</code>関数を呼ぶ</li>
<li>render結果をvDOMにしてdiff+patchする</li>
</ul></li>
<li>仮想ノードツリー

<ul>
<li>ダイナミックと静的なノードツリー</li>
<li>ノードツリーをマージして期待するDOMを生成する</li>
</ul></li>
<li>サーバーサイドレンダリング

<ul>
<li>v1は独自のサーバ実装が必要だった</li>
<li>hydrogenの仕組みとかもなかった</li>
<li>v2ではvDOMとかあるのでできるようになった</li>
</ul></li>
<li>クライアントとサーバ</li>
<li>...</li>
</ul>

<hr>

<h2 id="react-reduxを使った大規模商用サービスの開発">React + Reduxを使った大規模商用サービスの開発</h2>

<ul>
<li>bookingtable.jp</li>
<li>ウェブ版

<ul>
<li>BFF(Backend for Frontend)を用意してやってる</li>
<li>アプリ版もあるのでそれぞれBFFがある</li>
</ul></li>
<li>React/Reduxのハマりどころ

<ul>
<li><code>mapToState</code></li>
</ul></li>
<li>ハマりどころ</li>
<li>画面遷移

<ul>
<li>ログインしてない -&gt; ログイン -&gt; replaceState/replaceしないと戻ったときにおかしくなる</li>
<li>POPならスクロール位置を戻す、PUSHならTOP 0にする</li>
</ul></li>
<li>Stateが集まるまでComonentをレンダリングしない

<ul>
<li>loading = true/false をstate管理して</li>
<li>loading = trueになったときにレンダリングする</li>
<li><a href="https://github.com/recruit-tech/redux-async-loader" title="recruit-tech/redux-async-loader: Async data loader for Redux apps.">recruit-tech/redux-async-loader: Async data loader for Redux apps.</a></li>
</ul></li>
<li>iPhoneの画面スワイプでのもどる/すすむ

<ul>
<li>画面スワイプして戻ると一瞬戻る前の画面でてしまう</li>
<li>戻って一瞬でてから、表示が更新される</li>
</ul></li>
<li>Monolithic JavaScript

<ul>
<li>ビルドすると毎回ファイル変わって再ダウンロードになってしまうのを避けたい</li>
<li>Before: 一個のjs</li>
<li>After: webpackJsomp、appX.js、vendor.js</li>
<li><code>require.ensure</code>(webpack)とRouterで動的ロード</li>
<li>Hotな画面は scriptタグで事前ロード</li>
<li>そうでない画面は <code>require.ensure</code> で動的ロード</li>
<li>Script Load Error

<ul>
<li>webpack 1.xだと<code>require.ensure</code>でのエラーが拾えない</li>
<li>表示 =&gt; デプロイ =&gt; 遷移仕様とするとエラーになってしまう</li>
<li><a href="https://github.com/webpack/webpack/issues/758" title="require.ensure error handling · Issue #758 · webpack/webpack">require.ensure error handling · Issue #758 · webpack/webpack</a></li>
</ul></li>
</ul></li>
<li>webpackのモジュールID問題

<ul>
<li>webpackでmodule一つ一つ idが振られてる</li>
<li>applyModuleIdsでidを振られてる</li>
<li>コレの前にidをsortしてあげればidが決まる</li>
</ul></li>
<li>SSR

<ul>
<li>checksumで比較して、合ってるならサーバのレンダリング結果を使う</li>
<li>一致しない場合は、一度捨ててクライアントでレンダリングする</li>
<li>サーバサイドの<code>renderToString</code>で数百msかかる</li>
</ul></li>
<li>Partial Reandering

<ul>
<li>見えるところだけサーバ、他はクライアントで</li>
<li>SEOは?

<ul>
<li>Google Botsはクライアントサイドレンダリングでもちゃんと認識する</li>
</ul></li>
</ul></li>
<li>SSR Cache

<ul>
<li>サーバサイドでキャッシュする</li>
<li>ユーザーの情報を含んでいるとレンダリングできない</li>
</ul></li>
<li>Composite Rendering

<ul>
<li>レンダリング方式を動的に切り替える</li>
<li>高負荷時はキャッシュを活用するなど</li>
</ul></li>
<li>まとめ

<ul>
<li>サーバサイドレンダリングはターンアラウンドタイム的にやらない方がよい</li>
</ul></li>
</ul>

<hr>

<h2 id="introducing-now-and-next-js-nkzawa">Introducing Now and Next.js - nkzawa</h2>

<blockquote>
<p><a href="https://speakerdeck.com/nkzawa/introducing-now-and-next-dot-js" title="Introducing Now and Next.js // Speaker Deck">Introducing Now and Next.js // Speaker Deck</a></p>
</blockquote>

<ul>
<li><a href="https://zeit.co/now">Now: realtime global deployments</a></li>
<li><a href="https://zeit.co/blog/next">ZEIT – Next.js</a>

<ul>
<li>の話</li>
</ul></li>
<li>Next.js</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm i -D next.js
$(npm bin)/next
# pages/ にコンポーネントを書いていく
</code></pre></div>
<ul>
<li>Next.jsは設定必要なし

<ul>
<li>Hot ReloadingとかBabelとかそういうのは自動的にやる</li>
</ul></li>
<li>SPA

<ul>
<li>初期表示が遅い</li>
<li>ページが増えると重くなる</li>
</ul></li>
<li>解決方法

<ul>
<li>サーバサイドレンダリング

<ul>
<li>ファイル置くだけでできる</li>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415" title="【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch">【翻訳】リッチなWebアプリケーションのための7つの原則 - from scratch</a></li>
</ul></li>
<li>コード分割 + 遅延ロード

<ul>
<li>ページごとに結合ファイルを生成して分割する</li>
</ul></li>
</ul></li>
<li>CSS

<ul>
<li><a href="https://github.com/threepointone/glamor" title="threepointone/glamor: inline css for react et al">threepointone/glamor: inline css for react et al</a>を使ってる</li>
</ul></li>
<li><code>&lt;Link /&gt;</code>

<ul>
<li>遅延読み込み + history.pushState</li>
</ul></li>
<li><code>&lt;Head /&gt;</code>

<ul>
<li><code>&lt;head /&gt;</code> の中身を書ける</li>
<li><a href="https://github.com/zeit/next.js/blob/master/lib/head.js" title="next.js/head.js at master · zeit/next.js">next.js/head.js at master · zeit/next.js</a></li>
</ul></li>
<li><a href="https://zeit.co/now" title="now">now</a>

<ul>
<li>Next.jsをどうやってデプロする</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm i -g now
$ now
</code></pre></div>
<ul>
<li>nowでの設定

<ul>
<li><code>npm start</code> を定義する</li>
</ul></li>
<li>特徴

<ul>
<li>デプロイするたびに新しいURLを作る

<ul>
<li>古いURLはそのまま残る</li>
<li>エイリアスを差し替えることで切り替わる</li>
<li>URLが常に同じアプリの状態表す</li>
</ul></li>
<li>オートスケール

<ul>
<li>自動的にスケールする</li>
<li>アクセスがない場合は 0 になる</li>
</ul></li>
<li>データの永続化

<ul>
<li>オートスケールでインスタンスが消えるのでデータは外部に保存する</li>
</ul></li>
</ul></li>
<li>now + micro

<ul>
<li>基本的にHTTPでやり取りするのでlambdaのようにロックインがない</li>
</ul></li>
</ul>

<hr>

<h2 id="the-evolution-of-electron-cheng-zhao">The Evolution of Electron - Cheng Zhao</h2>

<ul>
<li>3つの名前を持っている</li>
<li>ElectronはAtomのために作った</li>
<li>5年前

<ul>
<li>GitHub CEOが元でCocoaのアプリケーションだった</li>
</ul></li>
<li>AtomのChromium Embbed Frameworkをつかうようになった</li>
<li>これによりクロスプラットフォームになった

<ul>
<li>Atom: Cocoa -&gt; Chromium Embedded Framework -&gt; Atom Shell -&gt; Electron</li>
</ul></li>
<li>Chromium Embedded Framework -&gt; Node-Webkitに移行しようとした

<ul>
<li>Atomは結構でかいコードベースだったので、Node.jsのバインでィングに書き換える作業が難航</li>
<li>失敗</li>
</ul></li>
<li>node-webkitの改善を続ける -&gt; node-webkitの開発者を雇う = Cheng Zhao</li>
<li>node-webkitは複数ウィンドウのアプリケーションを扱えなかった</li>
<li>node-webkitを書き直すこと決意

<ul>
<li>Atom-Shellを作ることにした</li>
</ul></li>
<li>node-webkit と atom-shellの違い

<ul>
<li>エントリポイントがhtmlとjsが違う</li>
<li>Chromiumのビルドの問題など</li>
</ul></li>
<li>AtomとAtom-shellはOSSになった

<ul>
<li>Atom-Shell -&gt; Electronにリネームされた</li>
<li>Electron: 37000</li>
</ul></li>
<li>Electron製のアプリは毎日毎日新しいものが公開され、あなたのPCのディスクを食べます</li>
<li>Electronは個人プロジェクトとして始まったけど、今は外部Contributorが多くなった

<ul>
<li>Contributorがいなくなるとプロジェクトが終わる</li>
</ul></li>
<li>Contributorをちゃんとキープするには

<ul>
<li>IssueやPull Requestに対してちゃんと反応する</li>
<li>開発環境を簡単にセットアップできるようにする</li>
<li>よりよいコードレビューをできるようにしたり</li>
<li>リファクタリングをちゃんとやる

<ul>
<li>Contributorはそのプロジェクトをちゃんと理解してるわけではないので</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="browser-is-the-new-server-gleb-bahmutov">Browser is the new server - Gleb Bahmutov</h2>

<ul>
<li>KENSHO</li>
<li>Quickly

<ul>
<li>CDN</li>
<li>paralled downloads</li>
<li>caching</li>
<li>small image</li>
<li>などなどできてたけどまだ遅い</li>
</ul></li>
<li>Pivotal Tracker

<ul>
<li>リロードしただけなのに数秒かかる</li>
</ul></li>
<li>開発者ツールを開いて見ると

<ul>
<li>5秒ぐらいJavaScriptの処理に使ってた</li>
<li><code>HTML = App(DATA)</code></li>
<li><code>HTML</code>と<code>DATA</code>をキャッシュする</li>
</ul></li>
<li>リロード

<ul>
<li><a href="https://glebbahmutov.com/hydrate-vue-todo/" title="Hydrate Vue Todo">Hydrate Vue Todo</a></li>
<li>タイトルはすぐでるけど、内容は一瞬ちらっとする</li>
</ul></li>
<li>ServiceWorker

<ul>
<li>そこでServiceWorker</li>
<li>ブラウザの上で動くProxy</li>
<li>リクエストをProxyして処理できる</li>
<li><code>navigator.serviceWorker.register</code></li>
<li>Firefox/Chrome/Opera</li>
<li><code>https</code>が必須</li>
<li>Androidのモバイルでも既に使える</li>
</ul></li>
<li>ServiceWorkerの中

<ul>
<li><code>fetch</code> のhook</li>
<li><a href="https://github.com/bahmutov/bottle-service" title="bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache">bahmutov/bottle-service: Instant web applications restored from ServiceWorker cache</a></li>
</ul></li>
<li>オフライン

<ul>
<li>ブラウザのアプリはサーバがないと何もできない</li>
<li>ServiceWorkerの中にサーバを入れる</li>
</ul></li>
<li>サーバをブラウザで

<ul>
<li>express.js + middleware を browserifyで変換して、ServiceWorkerの中で動かす</li>
<li>express service</li>
<li><a href="https://github.com/bahmutov/express-service" title="bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker">bahmutov/express-service: Package ExpressJS server to run inside a ServiceWorker</a></li>
<li>オフラインでも動く</li>
<li>SWのコードはDevToolsのJavaScript無効でも動く</li>
<li>クライアントサイドのサーバサイドのJavaScript(ServiceWorkerの中のJS)でサーバサイドレンダリングしてる

<ul>
<li>最新のChromeはlinkタグでもServiceWorkerを登録できる</li>
</ul></li>
</ul></li>
</ul>

<hr>

<p>メモ</p>

<ul>
<li>人数が増えたので人口密度高かった</li>
<li>会場的に廊下とかで話すスペース場所とかあるとよかったのではと思った</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>mu-pdf-viewerに検索一覧をつけた</title>
   <link href="http://efcl.info/2016/11/07/mu-pdf-search/"/>
   <updated>2016-11-07T10:02:00+09:00</updated>
   <id>http://efcl.info/2016/11/07/mu-pdf-search</id>
   <content type="html"><![CDATA[ <p><a href="https://github.com/azu/mu-pdf-viewer" title="mu-pdf-viewer">mu-pdf-viewer</a>は上から下へ読むように作ったので、検索など移動して読むパターンはイマイチでした。</p>

<ul>
<li><a href="http://efcl.info/2016/10/12/mu-pdf-viewer/" title="pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch">pdf.jsなPDFビューアアプリをElectronで作った | Web Scratch</a></li>
</ul>

<p>タイトルのように、Cmd+Fで検索したら同時に検索結果の一覧を表示できるようにしました。
クリックすると移動もできるので、これでリファレンス的に探すのも少しは便利になりそうです。</p>

<p><iframe src="//giphy.com/embed/l0HlNxuHU8SmqmYus" width="480" height="242" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/l0HlNxuHU8SmqmYus">via GIPHY</a></p></p>

<p>自動でGitHub Releaseにアップロードしてるバイナリバグってる気がするので、動かない場合はローカルでビルドした方が良さそうです。(イマイチ原因分かってない…)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm run electron:build:osx
</code></pre></div>
<p>ECMAScriptの仕様書をオフラインで検索し易い形で読む方法を探してたらこうなりました。
(<a href="https://github.com/cho45/Chemrtron">Chemrtron</a>が求めてるようなものな気がするので、あとでもう一度挑戦したい。検索結果はでるけど、クリックも何もできなくてよくわからなかった。)</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>W3C TAG デベロッパー・サミット アウトラインメモ</title>
   <link href="http://efcl.info/2016/11/02/w3ctagdevmeetup/"/>
   <updated>2016-11-02T20:50:00+09:00</updated>
   <id>http://efcl.info/2016/11/02/w3ctagdevmeetup</id>
   <content type="html"><![CDATA[ <p><a href="http://frontend.connpass.com/event/42323/" title="W3C TAG デベロッパー・サミット">W3C TAG デベロッパー・サミット</a>に参加してきたのでメモ。</p>

<h2 id="web-payment-api-eiji">Web Payment API - eiji</h2>

<ul>
<li>Payment APIはUXを改善するためのAPI</li>
<li>購入するためのAPIじゃない</li>
<li>デモ

<ul>
<li>Polymer Shop</li>
</ul></li>
</ul>

<h2 id="webrtc-と-sfu-sakkuru">WebRTC と SFU - sakkuru</h2>

<ul>
<li>WebRTCてきななにか</li>
<li>P2Pでリアルタイムにやり取り</li>
<li>SkyWay

<ul>
<li>WebRTCを使うためのプラットフォーム</li>
</ul></li>
<li>つらいことが多い WebRTC</li>
<li>WebRTCの通信が始まるまで

<ul>
<li>ブラウザ同士でコネクションを結ぶ</li>
<li>やりとりはSDPというテキストデータ</li>
<li>ブラウザによってSDPが違う

<ul>
<li>Chrome PlanB SDP</li>
<li>Firefox Unified Plan SDP</li>
</ul></li>
</ul></li>
<li>SFU

<ul>
<li>P2Pでやる場合はフルメッシュでやる必要がある

<ul>
<li>自分以外全てに通信しないといけない</li>
<li>負荷が高い</li>
</ul></li>
<li>SFU

<ul>
<li>中央にサーバを置く</li>
<li>クライアントはSFUに向かって通信する</li>
<li>クライアントの負荷が減る</li>
</ul></li>
<li>SkyWay

<ul>
<li>SFUサーバの無償提供</li>
</ul></li>
</ul></li>
<li>最近 SFU

<ul>
<li>まだChromeのみ</li>
<li>Firefoxも実装始まった</li>
</ul></li>
</ul>

<h2 id="https-migration-in-local-network-w3c-trac">HTTPS migration in local network @  W3C Trac</h2>

<blockquote>
<p><a href="http://www.slideshare.net/sakkuru/webrtcsfu" title="WebRTCとSFU">WebRTCとSFU</a></p>
</blockquote>

<ul>
<li>ローカルネットでHTTPSを使いたいという話</li>
<li>HTTPとHTTPSのやり取りの問題

<ul>
<li>Secure Context</li>
<li>mixed contextの問題</li>
</ul></li>
<li>Video Stream

<ul>
<li>ローカルキャッシュサーバ</li>
</ul></li>
<li>この話の問題

<ul>
<li>ローカルの機器にどんなドメインを付けるのかなどの問題</li>
</ul></li>
<li>A) Public DNS + Public Certificate

<ul>
<li>機器の提供側がPublicなDNSと証明書認証局を運営</li>
<li>ローカルIPに対するものをちゃんと返す</li>
</ul></li>
<li>B) mDNS + Private &quot;.local&quot; Certificate

<ul>
<li>Let&#39;s Encryptのローカル版みたいな</li>
<li>ブラウザ側に新しいAPIがいる</li>
</ul></li>
</ul>

<hr>

<h1 id="breakout-session-css-houdini">Breakout Session: CSS Houdini</h1>

<p>1時間ぐらいTOPICに対してDiscussion</p>

<ul>
<li>CSSのレイアウトの部分をSecureとPeformantな方法で持ってくるAPI</li>
<li>JavaScriptからそういったものを扱う方法</li>
<li>●として扱うとか(Paint)</li>
<li>レイアウトだけじゃなくて、テキストだったり、エフェクト(影)とかを及ぶ影響を与えることができるAPI群に総称</li>
<li>CSSのリグレッションテスト</li>
<li>これまでのCSSの表現にJavaScriptで介入することができる</li>
<li>カスタムプロパティとかを持っと簡単に追加できるように

<ul>
<li>仕様を追加するまであまりに大きなこと</li>
<li>Boxtree API</li>
<li>CSS自体の拡張とAPIとして拡張ポイント</li>
<li>CSSは影響範囲が大きすぎるので、新しい機能を提供するのが難しい</li>
</ul></li>
<li>Custom Elementなら

<ul>
<li><code>-</code>を含めろとかがある。 </li>
<li>Custom Propertyは<code>--</code>で開始するというルールなので、既存のものとはぶつからない</li>
<li>新しいものについてはまだ検討されてない</li>
</ul></li>
<li>マイルストーン

<ul>
<li>足並み揃えるの難しいのでないよ</li>
</ul></li>
<li>HoudiniはCSSの補完的な機能

<ul>
<li>CSSに新しい機能を追加するときに待つ必要があった</li>
<li>これを開発者的にJavaScriptで追加できるようなAPIを提供する仕様</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Incubation WG

<ul>
<li>ウェブの機能に関する問題をどう解決するかという議論している</li>
<li>Fast Track的な早いパスでウェブ標準を作っていく</li>
<li>いいアイデアを集めたりする</li>
</ul></li>
<li>2つの方向

<ul>
<li>新しい機能を追加する</li>
<li>既にある機能を拡張する</li>
</ul></li>
<li>Incubationの意味

<ul>
<li>色々議論して議論を進めていくという意味</li>
</ul></li>
<li><a href="https://discourse.wicg.io/" title="WICG">WICG</a>

<ul>
<li>誰でも気軽にコミュニティ</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Web Payment Request API

<ul>
<li>UIは大きくは変更できない</li>
<li>ロゴを入れるとかはできる</li>
</ul></li>
<li>セキュリティ

<ul>
<li>今より悪くなることはない</li>
<li>今はフォームで送るのでハックされる可能性がある</li>
<li>Web Payment Request APIはtokenでやり取り</li>
</ul></li>
<li>月額課金

<ul>
<li>なんとかなる?</li>
</ul></li>
<li>Custom Field

<ul>
<li>今のところはない</li>
<li>検討される余地がある</li>
</ul></li>
</ul>

<hr>

<ul>
<li>Security

<ul>
<li>TAG</li>
<li>HTTPSを広く使われるようにする</li>
<li>Static ContentのサーバでもHTTPS使う必要があるのか?

<ul>
<li>Privacyのprotectionが一つのニーズ</li>
<li>Mixed Contentの問題

<ul>
<li>サードパーティコンテンツの問題</li>
</ul></li>
</ul></li>
<li>Let&#39;s Encryptの証明書 EVに対して信頼性

<ul>
<li>セキュリティのTrustは数を組み合わせて実現する</li>
<li>EV/DV証明書はTrustを組み合わせてやってる</li>
<li>なので信頼性がほしいならEVとかの方がー</li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="memo">memo</h2>

<p>ahomuさんとパフォーマンス計測について話してたメモ</p>

<ul>
<li>小さな改善はやはりブレに吸収される</li>
<li>のでコツコツ改善していくしかない</li>
<li>早いうち定常的に計測して視覚化してないと、どこでおそくなったか分からないので、早い段階から値を記録してた方が良い</li>
<li>マシンでperfの値が違う問題は sitespeed.io とかspeedcurveとか外から見るやつを回し続ける</li>
<li>speedcurve使ってるけど、完璧なソリューションというわけでもない</li>
<li>けど、どこで問題になったかが分かりやすくなる</li>
<li>mousemoveとかインタラクションに対するパフォーマンスは、機械的に計測しにくいので、手動で…</li>
<li>:money_with_wings: で人を動かした方が安くて質が高い</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>同じイベントのaddEventListenerを1つにまとめるライブラリを書いた</title>
   <link href="http://efcl.info/2016/11/02/ui-event-observer/"/>
   <updated>2016-11-02T09:48:00+09:00</updated>
   <id>http://efcl.info/2016/11/02/ui-event-observer</id>
   <content type="html"><![CDATA[ <p><code>UIEventObserver</code>という同じ要素への同じイベントを貼る <code>addEventListener</code> を1つにまとめるライブラリを書きました。</p>

<ul>
<li><a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.</a></li>
</ul>

<h2 id="インストール">インストール</h2>

<p>npmで入ります。     </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install ui-event-observer
</code></pre></div>
<h2 id="1つにまとめる">1つにまとめる?</h2>

<p>Reactなどのコンポーネント志向のライブラリを使っていると、各コンポーネントで同じ要素へ同じイベントを貼っていることがあります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Component A</span>
<span class="kr">const</span> <span class="nx">handlerA</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span> 
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">,</span> <span class="nx">handlerA</span><span class="p">);</span>
<span class="c1">// Component B</span>
<span class="kr">const</span> <span class="nx">handlerB</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">,</span> <span class="nx">handlerB</span><span class="p">);</span>
</code></pre></div>
<p><a href="https://github.com/azu/ui-event-observer" title="UIEventObserver">UIEventObserver</a>では同じ事が、内部的に一つの<code>window.addEventListener(&#39;scroll&#39;, ...)</code>にまとめてられます。
(Pub/SubはEventEmitterが代わりにやる感じです)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// singleton</span>
<span class="kr">const</span> <span class="nx">eventObserver</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;ui-event-observer&quot;</span><span class="p">);</span>
<span class="c1">// シングルトンじゃない方法</span>
<span class="c1">// require(&quot;ui-event-observer&quot;).UIEventObserver</span>
<span class="c1">// Component A</span>
<span class="kr">const</span> <span class="nx">handlerA</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span> 
<span class="nx">eventObserver</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">&quot;scroll&quot;</span><span class="p">,</span> <span class="nx">handlerA</span><span class="p">);</span>
<span class="c1">// Component B</span>
<span class="kr">const</span> <span class="nx">handlerB</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="nx">eventObserver</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">&quot;scroll&quot;</span><span class="p">,</span> <span class="nx">handlerB</span><span class="p">);</span>
</code></pre></div>
<p><a href="https://github.com/azu/ui-event-observer/tree/master/example/">Example project</a>では100個の&quot;scroll&quot;イベントを<code>window</code>に貼っています。</p>

<p><img src="https://monosnap.com/file/0L7z5AvZcuLKbCHxqB4sTU8TjRK0pk.png" alt="addEventListener vs, UIEventObserver"></p>

<ul>
<li>Left: 100x <code>addEventListener</code></li>
<li>Right: 1 <code>UIEventObserver</code></li>
</ul>

<p>とlistenしてるイベントの数が100個以上から10個程度に減っていることが分かります。</p>

<p><a href="https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener" title="EventTarget.addEventListener">EventTarget.addEventListener</a>はbubblingやcapturing、それらを止められる<code>preventDefault()</code>や<code>stopPropagation()</code>などEventEmitterに比べると高機能です。
<a href="https://blog.jxck.io/entries/2016-06-09/passive-event-listeners.html" title="Passive Event Listeners">Passive Event Listeners</a>とかもその辺を制限することでパフォーマンスを改善すために導入されています。</p>

<p>同じ目的のライブラリとして<a href="https://github.com/yahoo/subscribe-ui-event" title="yahoo/subscribe-ui-event">yahoo/subscribe-ui-event</a>がありますが、スロットリングなどがデフォルトにあったり色々高機能でした。
なので、単純にイベントを1つにまとめるだけの<a href="https://github.com/azu/ui-event-observer" title="azu/ui-event-observer: Provide performant way to subscribe to browser UI Events.">azu/ui-event-observer</a>を作ったという話でした。</p>

<p>他の機能的な要素はプラグインで書けるようにするのがいいんじゃないかなと思っています。</p>

<ul>
<li><a href="https://github.com/azu/ui-event-observer/issues/1" title="Proposal: plugin system · Issue #1 · azu/ui-event-observer">Proposal: plugin system · Issue #1 · azu/ui-event-observer</a></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>TestCafeでブラウザの自動テスト(E2Eテスト)</title>
   <link href="http://efcl.info/2016/10/23/testcafe/"/>
   <updated>2016-10-23T21:57:00+09:00</updated>
   <id>http://efcl.info/2016/10/23/testcafe</id>
   <content type="html"><![CDATA[ <p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>という自動テストフレームワーク(いわゆるE2Eテストフレームワークジャンルとしておきます)を試してみました。</p>

<p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>の特徴としては、Seleniumを使っていないこと、設定ファイルなしで利用できる点です。</p>

<p>Seleniumを使ったテストフレームワークとしては、<a href="http://www.protractortest.org/" title="Protractor">Protractor</a>、<a href="https://github.com/groupon/testium" title="testium">testium</a>、<a href="http://webdriver.io/" title="WebdriverIO">WebdriverIO</a>などがあります。
(Seleniumを使わない他のテストフレームワークだと<a href="http://www.nightmarejs.org/" title="Nightmare">Nightmare</a>など)</p>

<p>Seleniumを使わずにどうやって自動的にブラウザを操作するかというと、中継サーバーを起動してそこにテストコードなどを追加して動かすことができるSelenium RC(1)方式に近いものだと思います。</p>

<p>同名の<a href="https://testcafe.devexpress.com/" title="TestCafe: Web Testing Framework | DevExpress">ウェブサービス/クライアントアプリ</a>も出していて、こちらはSelenium IDEのようにGUIで操作して記録したものを再生などができます。</p>

<p>なぜ、Seleniumを使っていないかという点については、以下で回答されています。</p>

<ul>
<li><a href="https://testcafe-discuss.devexpress.com/t/why-not-use-selenium/47/2" title="Why not use Selenium? - Questions - TestCafe Discussion Board">Why not use Selenium? - Questions - TestCafe Discussion Board</a></li>
</ul>

<p>簡単にまとめると次のような点をどうにかしたいので、Seleniumを使わずに動く自動テストフレームワークを作ったようです。</p>

<ul>
<li>Remoteの端末でも動かせるようにしたい</li>
<li>とにかく設定なしでうごかせるようにしたい</li>
<li>WebDriverの互換性がブラウザ依存で、それが解決されるまでに時間かかる</li>
</ul>

<p>実際に動かしながら見ていきましょう。</p>

<h2 id="最小のデモ">最小のデモ</h2>

<p>以下に最小のデモプロジェクトを作りました</p>

<ul>
<li><a href="https://github.com/azu/demo-test-cafe" title="azu/demo-test-cafe: TestCafe">azu/demo-test-cafe: TestCafe</a></li>
</ul>

<p>これをインストールから動かすまでは次のコマンドを叩くだけです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/azu/demo-test-cafe.git
cd demo-test-cafe
npm install
npm test
</code></pre></div>
<p>これだけでChromeが立ち上がり、自動テストが実行できます。</p>

<p><iframe src="//giphy.com/embed/3o7TKFdaymhVNZ6XZe" width="480" height="322" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/3o7TKFdaymhVNZ6XZe">via GIPHY</a></p></p>

<p>テストコードは<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>にBabelが内蔵されているため、ES2016+async/awaitなどがそのまま書けるようになっています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">Selector</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;testcafe&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">getElementById</span> <span class="o">=</span> <span class="nx">Selector</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="err">`#</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
<span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;Example page&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://devexpress.github.io/testcafe/example&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Type the developer name, obtain the header text and check it&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">t</span>
        <span class="p">.</span><span class="nx">typeText</span><span class="p">(</span><span class="s1">&#39;#developer-name&#39;</span><span class="p">,</span> <span class="s1">&#39;John Smith&#39;</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#submit-button&#39;</span><span class="p">);</span>

    <span class="kr">const</span> <span class="nx">articleHeader</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;article-header&#39;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">headerText</span> <span class="o">=</span> <span class="nx">articleHeader</span><span class="p">.</span><span class="nx">innerText</span><span class="p">;</span>

    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">headerText</span><span class="p">,</span> <span class="s1">&#39;Thank you, John!&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>テストコードの実装はブラウザとディレクトリを指定するだけで、他に設定しなくても動きます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ testcafe chrome test/
</code></pre></div>
<p>テストの失敗結果が分かりやすいのも結構いいところです。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/10/23-1477228880.png" alt="result of testcafe"></p>

<h3 id="selector">Selector</h3>

<p>先ほどのテストコードでも出てきていますが、TestCafeは<a href="http://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html" title="Selectors">Selectors</a>という仕組みでDOMを指定します。</p>

<p>DOMのとり方はブラウザで使う<code>document.querySelector</code>などそのままのAPIです。
注意点として取ってきた値はsnapshotであるため、あとで値が変わったときに自動的にsnapshotのnodeの値は代わりません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Selector</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;testcafe&#39;</span><span class="p">;</span>

<span class="c1">// A selector is created from a regular function.</span>
<span class="c1">// This selector will take the &#39;id&#39; parameter and return</span>
<span class="c1">// a DOM element that has this ID.</span>
<span class="kr">const</span> <span class="nx">getElementById</span> <span class="o">=</span> <span class="nx">Selector</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">));</span>
<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;My Test&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">snapShotNode</span> <span class="o">=</span> <span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>ClickやTypeなどの操作のエミュレータは<a href="http://devexpress.github.io/testcafe/documentation/test-api/actions/" title="Actions">Actions</a>という特殊なメソッドを使いますが、DOMの取得については<a href="http://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html" title="Selectors">Selectors</a>でラップすれば基本的にそのまま使えるような感じになっています。</p>

<p>この辺も覚えることをできるだけ減らそうとしてる感じに見えます。</p>

<h3 id="リモートで実行">リモートで実行</h3>

<p>先ほどのテストは、ローカルにあるブラウザじゃなくても動かす事ができます。</p>

<p>次のように<code>remote:数</code>をブラウザの欄に指定すると、connect用のURLが表示されます。
このURLにアクセスすると、そのブラウザ上で先ほどの自動テストが実行されます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">✈ $(npm bin)/testcafe remote:1 test
Connecting 1 remote browser(s)...
Navigate to the appropriate URL from each of the remote browsers.
Browser #1: http://192.168.10.3:51822/browser/connect/SJuk2E9kg
</code></pre></div>
<p>これがWebDriverではない理由の一つとして挙げられていたものですね。</p>

<ul>
<li><a href="http://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browser-support.html#browsers-on-remote-devices" title="Browsers on Remote Devices #">Browsers on Remote Devices #</a></li>
</ul>

<p>また、実行できるブラウザは<a href="http://devexpress.github.io/testcafe/documentation/extending-testcafe/browser-provider-plugin/" title="Browser Provider Plugin">Browser Provider Plugin</a>で拡張できるようになっていて、PhantomJSとかはデフォルトでは入っていないようです。</p>

<p>プラグインの中身を見るとSelenium/WebDriverではないことがよくわかります。</p>

<ul>
<li><a href="https://github.com/DevExpress/testcafe-browser-provider-phantomjs/blob/master/src/index.js">https://github.com/DevExpress/testcafe-browser-provider-phantomjs/blob/master/src/index.js</a></li>
</ul>

<h2 id="もう少し複雑なケース">もう少し複雑なケース</h2>

<p>もう少し実際のテストに近いもので試してみます。</p>

<p>以前、Reduxの<a href="http://redux.js.org/docs/basics/ExampleTodoList.html" title="Example: Todo List · Redux">Example: Todo List</a>を写経したプロジェクトにE2Eテストを追加してみます。</p>

<ul>
<li><a href="https://github.com/coding-kata/redux-basic-tutorial" title="coding-kata/redux-basic-tutorial">coding-kata/redux-basic-tutorial</a></li>
</ul>

<p>追加したPRは以下にあります。</p>

<ul>
<li><a href="https://github.com/coding-kata/redux-basic-tutorial/pull/5" title="Add E2E Test with TestCafe by azu · Pull Request #5 · coding-kata/redux-basic-tutorial">Add E2E Test with TestCafe by azu · Pull Request #5 · coding-kata/redux-basic-tutorial</a></li>
</ul>

<h3 id="test-controller">test controller</h3>

<p><a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>のテスト構造については<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html" title="Test Code Structure | TestCafe">Test Code Structure | TestCafe</a>で簡単に解説されています。</p>

<p><code>fixture</code>と<code>page</code>はテスト名とテストするURLなので特に説明は入らない感じです。
テストケースは<code>test</code>という関数に書いていく感じになります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;MyFixture&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Test1&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/* Test 1 Code */</span>
<span class="p">});</span>
</code></pre></div>
<p>基本的に非同期になるのでAsync functionとして書くようになっています。
自動テストで必要になるのは、ある要素をクリックしたり、あるinput要素にテキストを入れたりするエミュレート関数が必要です。</p>

<p>TestCafeでは<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller" title="Test Controller">Test Controller</a>と呼ばれているものがそれで、上記の<code>async t</code>の<code>t</code>がTest Controllerのオブジェクトです。</p>

<p>Test Controllerにあるメソッドは以下にまとめられています。</p>

<ul>
<li><a href="http://devexpress.github.io/testcafe/documentation/test-api/actions/" title="Actions | TestCafe">Actions | TestCafe</a></li>
</ul>

<h3 id="テスト">テスト</h3>

<p><a href="https://github.com/coding-kata/redux-basic-tutorial" title="coding-kata/redux-basic-tutorial">coding-kata/redux-basic-tutorial</a>はTodoリストを作るサンプルプロジェクトなので、
Todoを追加するE2Eテストを書いてみます。</p>

<p><img src="http://efcl.info/wp-content/uploads/2016/10/23-1477230356.png" alt="Image of redux-basic tutorial"></p>

<p>Page Objectパターンっぽく書いて次のような感じで書けました。</p>

<p>Test Controllerの操作は基本非同期で、<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>は自動で色々な操作待つ仕組みを持っています。</p>

<blockquote>
<p>TestCafe automatically waits for page loads and XHRs to complete, as well as for DOM elements to become visible. You do not need to write custom code for that.
-- <a href="https://github.com/DevExpress/testcafe#no-extra-coding">https://github.com/DevExpress/testcafe#no-extra-coding</a></p>
</blockquote>

<p>(<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>のサイトを見てるといたるところにAutomatic*という単語が出て来る)</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
<span class="kr">import</span> <span class="nx">TodoPage</span> <span class="nx">from</span> <span class="s2">&quot;./pages/index&quot;</span>
<span class="nx">fixture</span><span class="p">(</span><span class="s1">&#39;TodoList&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">page</span><span class="p">(</span><span class="s1">&#39;http://127.0.0.1:8080/&#39;</span><span class="p">);</span>

<span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Add TodoItem&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;NEW TODO&quot;</span><span class="p">;</span>
    <span class="kr">const</span> <span class="nx">todoPage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TodoPage</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
    <span class="c1">// add item</span>
    <span class="nx">await</span> <span class="nx">todoPage</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">({</span><span class="nx">title</span><span class="p">});</span>
    <span class="kr">const</span> <span class="nx">currentItems</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">todoPage</span><span class="p">.</span><span class="nx">getItems</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">currentItems</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
    <span class="kr">const</span> <span class="p">[</span><span class="nx">firstItem</span><span class="p">]</span> <span class="o">=</span> <span class="nx">currentItems</span><span class="p">;</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">firstItem</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">title</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p><img src="https://cloud.githubusercontent.com/assets/19714/19626295/03b76978-9969-11e6-84b3-c5f973f7957e.gif" alt="10 -23-2016 21-37-53"></p>

<p><code>await</code>をちょこちょこ忘れたりしましたが、<a href="http://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller" title="Test Controller">Test Controller</a>のメソッドの<code>await</code>忘れは検知できるようです。
(自分で書いてる非同期はそうでもないので、Page Obejctに操作メソッドを持たせると良くないかも)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"> TodoList
 ✖ Add TodoItem

   1) A call to an async function is not awaited. Use the &quot;await&quot; keyword
      before actions, assertions or chains of them to ensure that they run
      in the right sequence.

      Browser: Chrome 56.0.2899 / Mac OS X 10.11.6

          8 |        this.t = t;
          9 |    }
         10 |
         11 |    async addTodo({title}) {
         12 |        const input = await this.getInput();
       &gt; 13 |        this.t.typeText(input, title);
         14 |        const button = await this.getButton();
         15 |        await this.t.click(button);
         16 |    }
         17 |
         18 |    async getInput() {

         at &lt;anonymous&gt;
</code></pre></div>
<p>E2Eテストでよくハマる表示されてるかどうかのタイミング問題も、基本的にTestCafeは表示に関するものは自動で一定時間待つようになっているみたいです。
(詳しい仕組みは調べてないけど、表示されてないことをテストすると時間がかかる気がする…)</p>

<p>デフォルトの自動待ち時間は結構長いですが、<code>--selector-timeout ms</code>で待ち時間を指定できるようです。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(npm bin)/testcafe chrome e2e --selector-timeout 100
</code></pre></div>
<h2 id="おわり">おわり</h2>

<p>ものすごく簡単に<a href="http://devexpress.github.io/testcafe/" title="TestCafe">TestCafe</a>について紹介?しました。</p>

<p><a href="http://devexpress.github.io/testcafe/documentation/using-testcafe/programming-interface/" title="Programming Interface">Programming Interface</a>もあったりするので、テストフレームワークというよりも、これを使ったブラウザ自動操作ツールとして使ったりすると面白いのかもしれないなーと思いました。</p>

<p>TestCafe自体も結構よくできていて、エラー表示や操作の要素を表示していて分かりやすいです。
また、Seleniumの設定が不要にしたいという気持ちはよく分かるので、ほんとに設定なしで動かせるのはすごいなと思いました。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>Node学園 23時限目 アウトラインメモ</title>
   <link href="http://efcl.info/2016/10/21/node23/"/>
   <updated>2016-10-21T21:25:00+09:00</updated>
   <id>http://efcl.info/2016/10/21/node23</id>
   <content type="html"><![CDATA[ <p><a href="http://nodejs.connpass.com/event/42200/" title="Node学園 23時限目 (今回はリクルート（東京駅）でやります！) - connpass">Node学園 23時限目 (今回はリクルート（東京駅）でやります！) - connpass</a>に参加してきたのメモ</p>

<h2 id="npm-4、npm-5">npm@4、npm@5</h2>

<blockquote>
<p><a href="https://gist.github.com/othiym23/c98bd4ef5d9fb3f496835bd481ef40ae" title="node-gakuen-201610.md">node-gakuen-201610.md</a></p>
</blockquote>

<ul>
<li>npmは後方互換性を重んじている

<ul>
<li>Node.jsにbundleされているので</li>
</ul></li>
<li>npm@2のbreaking changeについて

<ul>
<li>&gt; backwards-incompatible change to the way npm run-script handled its arguments</li>
</ul></li>
<li>npm@3

<ul>
<li>flat directory</li>
<li>npm@2そのまま使い続ける人もいる</li>
<li>大きな変更は移行の壁になるという話</li>
</ul></li>
<li>npm@4

<ul>
<li><a href="https://github.com/npm/npm/releases/tag/v4.0.0" title="Release v4.0.0 · npm/npm">Release v4.0.0 · npm/npm</a></li>
<li>npm 4は小さな変更にした</li>
<li><code>prepublish</code> が <code>npm install</code> 時に実行されるのは Deprecated

<ul>
<li><code>prepublishOnly</code> と <code>prepare</code> というライフサイクルに分解された</li>
</ul></li>
<li>outdated

<ul>
<li><a href="https://github.com/npm/npm/pull/14013" title="outdated: exitcode != 0 on outdated dependencies by watilde · Pull Request #14013 · npm/npm">outdated: exitcode != 0 on outdated dependencies by watilde · Pull Request #14013 · npm/npm</a></li>
</ul></li>
<li><code>npm search</code>

<ul>
<li>big jsonからストリーミングに</li>
<li>やっと高速な検索ができるように</li>
</ul></li>
<li><code>npm tag</code>は <code>npm dist-tag</code>に</li>
</ul></li>
<li>npm@5

<ul>
<li>bundlerとCargoインスパイアな<a href="https://gist.github.com/othiym23/c98bd4ef5d9fb3f496835bd481ef40ae#lock-files" title="lock files">lock files</a></li>
<li>Bundler

<ul>
<li><code>Gemfile</code>と<code>Gemfile.lock</code></li>
<li>Flatな依存(no nest)</li>
<li><code>Gemfile</code>は常にgit管理下</li>
</ul></li>
<li>Cargo

<ul>
<li><code>Cargo.toml</code> と <code>Cargo.lock</code></li>
<li>依存はnestできる</li>
</ul></li>
</ul></li>
<li><code>yarn</code>

<ul>
<li><code>packagejson</code>と<code>yarn.lock</code></li>
<li>yarn&#39;s lock file is meant to be checked in to Git, but isn&#39;t published to the npm registry.</li>
<li>flatとnestどっちも行ける</li>
<li>アプリ用っぽい</li>
<li><a href="https://github.com/yarnpkg/yarn/issues/570" title="make `--pure-lockfile` default for `install` · Issue #570 · yarnpkg/yarn">make <code>--pure-lockfile</code> default for <code>install</code> · Issue #570 · yarnpkg/yarn</a></li>
</ul></li>
<li>Different

<ul>
<li>Library</li>
<li>Command</li>
<li>Application</li>
<li>とそれぞれ役割が違うので、ロックファイルがいるのかも違う</li>
</ul></li>
<li>shrinkwrap 

<ul>
<li>ライブラリ向けに設計されてなかった(production application向けだった)</li>
<li>問題がある</li>
</ul></li>
<li>source of truth 

<ul>
<li><code>npm-shrinkwrap.json</code> is a single source of truth.</li>
</ul></li>
<li>npm LTS

<ul>
<li>Node.jsにbundleされるとLTSはどうなるという話</li>
</ul></li>
<li>npm@5 2017年4月リリース目標

<ul>
<li>Node.js 8がnpm@5を含むかは知らないよ</li>
</ul></li>
</ul>

<hr>

<h2 id="api-for-front-end-graphqlの話">API for Front-end - GraphQLの話</h2>

<ul>
<li>RESTful API再考</li>
<li>RESTful API

<ul>
<li>貧弱なSQLをAPIを目指しているわけではない</li>
</ul></li>
<li>SPAなフロントエンドはつらい?

<ul>
<li>ただのViewではないから</li>
<li>サーバサイド、クライアントサイドそれぞれにMVCがいる</li>
<li>最近のサーバサイドはMicroServiceになってきている</li>
<li>クライアントサイドもMicroservicesの一つなのでは</li>
</ul></li>
<li>フロントエンド

<ul>
<li>サーバ &lt;-&gt; フロントエンド</li>
<li>物理的に遠いので、時間がかかる</li>
<li>他のMicroservicesと違ってやり取りに時間がかかる</li>
<li>先頭から3件だけ欲しいとか細かい指定をしてリクエストしたい</li>
</ul></li>
<li>オーケストレーション層のパターン

<ul>
<li>サーバに手を入れる必要がある</li>
<li>ドキュメントは別途必要</li>
</ul></li>
<li>GraphSQL

<ul>
<li>表じゃなくてネストしたJSONが欲しいのではという話</li>
<li><a href="https://github.com/graphql/graphiql" title="graphql/graphiql: An in-browser IDE for exploring GraphQL.">graphql/graphiql: An in-browser IDE for exploring GraphQL.</a>

<ul>
<li>GraphQLには型があるので、自動的に補完とかを作れる</li>
</ul></li>
<li>並列にデータを取得できる。</li>
</ul></li>
<li>N + 1問題

<ul>
<li>DataLoaderみたいな工夫が必要</li>
<li><a href="https://quramy.github.io/graph-api-note/#/" title="Graph API: GraphQL and Falcor">Graph API: GraphQL and Falcor</a></li>
<li>それ用のものを作った</li>
</ul></li>
<li>GraphQLの仕様

<ul>
<li><a href="https://facebook.github.io/graphql/" title="GraphQL">GraphQLの仕様</a></li>
<li>でかい</li>
</ul></li>
</ul>

<hr>

<h2 id="client-side-js-for-infeed-layout-native-ad-at-fluct-ssp">Client-side JS for infeed layout native ad at fluct SSP</h2>

<blockquote>
<p><a href="https://speakerdeck.com/saneyuki/client-side-js-for-infeed-layout-native-ad-at-fluct-ssp" title="Client-side JS for infeed layout native ad at fluct SSP // Speaker Deck">Client-side JS for infeed layout native ad at fluct SSP // Speaker Deck</a></p>
</blockquote>

<ul>
<li>fluct in VOYAGE</li>
<li><code>document.write()</code></li>
<li>広告業界

<ul>
<li>SSP

<ul>
<li>問屋業</li>
<li>枠を売買</li>
<li>Adのリクエストを管理する</li>
<li>タグマネージャー的に動く</li>
</ul></li>
<li>DSP

<ul>
<li>広告枠を買って広告案件を流したい</li>
<li>Real Time Bidding (RTB)というオークションを介してSSPから枠を買う</li>
</ul></li>
<li>Adnetwork

<ul>
<li>広告枠を買って広告案件を流したい</li>
<li>RTBに参加するか否かが概ねDSPとの違い</li>
</ul></li>
</ul></li>
<li>Infeed Layout web ad

<ul>
<li>いわゆるネイティブ広告</li>
<li>従来の広告はimgとかで貼ってたりした</li>
<li>ネイティブアドはデザインテンプレートと広告コンテンツを合わせてる</li>
</ul></li>
<li>ネイティブ広告

<ul>
<li>SDKスタイル

<ul>
<li>SDKを開発者に配って実装してもらう</li>
</ul></li>
<li>コンサルティングスタイル

<ul>
<li>開発者がいないとデザインできないので、代わりにやるスタイル</li>
<li>タグを貼ってくれれば広告がでる</li>
</ul></li>
</ul></li>
<li>OpenRTB protocol

<ul>
<li>デファクトの仕様</li>
<li>最近のW3CやIETFに比べてザルな仕様</li>
</ul></li>
<li>iABという業界団体

<ul>
<li>リクエストとレスポンスのフォーマットを決めた</li>
<li>多くの会社はサブセットとかスーパーセットを定義してる</li>
</ul></li>
<li>OpenRTB - js-tracker

<ul>
<li>DSPが任意のJavaScriptを埋め込める素敵な仕様

<ul>
<li>悪意があればマルウェアも仕込める</li>
</ul></li>
<li><code>document.write()</code>とかも仕込めてしまう

<ul>
<li>非同期読み込みの障害なので自社用の拡張仕様を作って縛る</li>
</ul></li>
</ul></li>
<li>SSPのサポートする範囲

<ul>
<li>網羅できるものが多いほど強い</li>
<li>RTB一回やAd network一社だけでは売れない場合があるので色々なAd networkに多段する</li>
</ul></li>
<li>Data flow overview

<ul>
<li>Web Page -&gt; リクエスト -&gt; SSP &lt;-&gt; DSP

<ul>
<li>SSP &lt;-&gt; DSP</li>
<li>広告オークションを行う</li>
</ul></li>
<li>Web Page &lt;- レスポンス &lt;- SSP</li>
<li>オークションが成功したらこれでOK</li>
<li>失敗した場合は、Ad networkへクライアントからリクエスト投げる

<ul>
<li>クッキーとかクレデンシャルがあるのでクライアントから</li>
</ul></li>
</ul></li>
<li>Construct JavaScript in ad server

<ul>
<li>JavaScriptを文字列で組み立てるのは危険</li>
<li>一端 <code>JSON.stringify</code> で文字列リテラルとして評価できるようにする</li>
</ul></li>
<li>非同期処理をサポートする広告

<ul>
<li><a href="https://www.iab.com/news/lean/" title="Getting LEAN with Digital Ad UX">Getting LEAN with Digital Ad UX</a></li>
<li><code>document.write()</code>も使えない</li>
</ul></li>
<li>一つの画面に複数の広告

<ul>
<li>非同期だと問題が

<ul>
<li>今まではdocument.writeばかりなのでparser blockingして同期的に動いてた</li>
<li>deferもasyncもない普通のscript要素も同期的に動いてくれた</li>
</ul></li>
<li><code>document.currentScript</code>が使えない環境で問題がある</li>
<li>自分がどのAd Scriptタグなのかわからない問題</li>
<li>最後のscriptタグ !== 自分

<ul>
<li><code>async</code>属性などがあるため</li>
</ul></li>
<li>リクエスト時にuniqueなidを振って、レスポンスでそれを使うことで解決する</li>
</ul></li>
<li>優先度付きのリトライ

<ul>
<li>並列にリクエストを投げて最初に返ってきたものを取るというのを上手くやる仕組み</li>
</ul></li>
<li>Construct DOM

<ul>
<li>テンプレートな文字列を安全にやるのは難しい(XSS)</li>
<li>クライアントのDOM APIを使ったほうが安全</li>
</ul></li>
<li>Implementation Style</li>
<li>Limitation

<ul>
<li>ファイルサイズ</li>
<li>サードパーティのライブラリを含めるとファイルサイズがネックになる</li>
<li>Promiseのpolyfillが使えない</li>
</ul></li>
<li>自前で実装

<ul>
<li>10kb~ / response ぐらい</li>
</ul></li>
<li>他の問題

<ul>
<li><code>navigator.sendBeacon()</code> はクリティカルパス中など大量のリクエストがあるとき？にリクエストが飛ばないときがある

<ul>
<li>仕様としては有り得る挙動

<ul>
<li><a href="https://www.w3.org/TR/beacon/#return-values">https://www.w3.org/TR/beacon/#return-values</a></li>
<li><a href="https://www.w3.org/TR/beacon/#sec-processing-model">https://www.w3.org/TR/beacon/#sec-processing-model</a></li>
</ul></li>
<li>仕方がないのでXHRで代替すると上手くいく</li>
</ul></li>
</ul></li>
<li>Telemetry Reporter

<ul>
<li>広告タグはいろんな環境で動かす必要がある</li>
<li>動かない環境とかもあるのか調べる方法が必要</li>
<li>ログを上手く取る方法が必要</li>
<li>またサイズを気にする必要がある</li>
</ul></li>
<li>Open Source

<ul>
<li>JavaScriptのコードは重要だけど、SSPは問屋業がコアバリュー</li>
</ul></li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>#jxck_sushi でserverlessの話をしてきた</title>
   <link href="http://efcl.info/2016/10/18/jxck_sushi/"/>
   <updated>2016-10-18T23:08:00+09:00</updated>
   <id>http://efcl.info/2016/10/18/jxck_sushi</id>
   <content type="html"><![CDATA[ <p><a href="http://togetter.com/li/1038372" title="#jxck_sushi - Togetterまとめ">#jxck_sushi</a>に参加してきた。</p>

<ul>
<li><a href="https://github.com/meta-sushi/guideline" title="meta-sushi/guideline: Sushiイベントのガイドライン">meta-sushi/guideline: Sushiイベントのガイドライン</a></li>
<li><a href="http://togetter.com/li/1038372" title="#jxck_sushi - Togetterまとめ">#jxck_sushi - Togetterまとめ</a></li>
</ul>

<p>2回目の<code>#jxck_sushi</code>だった。</p>

<ul>
<li><a href="http://efcl.info/2015/01/30/cross-2015/" title="CROSS 2015 アウトラインメモ | Web Scratch">CROSS 2015 アウトラインメモ | Web Scratch</a></li>
</ul>

<p>今回は<a href="http://azu.github.io/slide/2016/jxck_sushi/serverless.html" title="Serverlessを使った匿名でGitHub Issueを立てるAPIを作った">Serverlessを使った匿名でGitHub Issueを立てるAPIを作った</a>という話をしてきた。</p>

<p><a href="https://github.com/jser/ping" title="jser/ping: ping! your issus">jser/ping: ping! your issus</a>を作ったときに必要だったのAPI Gatewayとlambdaを使ってAPIとして作った話。</p>

<hr>

<h2 id="walter">Walter</h2>

<blockquote>
<p>TODO: スライドはここに</p>
</blockquote>

<ul>
<li>FirebaseとIndexedDBの話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="und" dir="ltr"><a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> 🍣 <a href="https://t.co/YcLaJR6dK2">pic.twitter.com/YcLaJR6dK2</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788335553611640832">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">CQRS寿司 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> <a href="https://t.co/K9tWo8xGl6">pic.twitter.com/K9tWo8xGl6</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/788335724680523777">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これからの Web について真剣に議論している <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> <a href="https://t.co/WQxTaieQng">pic.twitter.com/WQxTaieQng</a></p>&mdash; Jxck (@Jxck_) <a href="https://twitter.com/Jxck_/status/788336179221401600">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> による🍣 <a href="https://t.co/PMNoJa8gRn">pic.twitter.com/PMNoJa8gRn</a></p>&mdash; Laco (@laco0416) <a href="https://twitter.com/laco0416/status/788336275472265216">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">次世代のアーキテクチャについて真剣に議論している <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> <a href="https://t.co/GPuAQFX2u1">pic.twitter.com/GPuAQFX2u1</a></p>&mdash; 83 (@armorik83) <a href="https://twitter.com/armorik83/status/788336294304768000">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>内容は :sushi: </p>

<h2 id="serverless-frameworkでのapi作成">Serverless FrameworkでのAPI作成</h2>

<blockquote>
<p>スライド: <a href="http://azu.github.io/slide/2016/jxck_sushi/serverless.html" title="Serverlessを使った匿名でGitHub Issueを立てるAPIを作った">Serverlessを使った匿名でGitHub Issueを立てるAPIを作った</a></p>
</blockquote>

<ul>
<li><a href="https://github.com/jser/ping" title="jser/ping: ping! your issus">jser/ping: ping! your issus</a></li>
<li>API Gatewayとlambdaを使ってブラウザから叩けるAPIを作る話</li>
<li>CORSの設定とかも<a href="https://github.com/serverless/serverless" title="Serverless Framework">Serverless Framework</a>から設定ファイルだけで簡潔して便利だった</li>
<li>lambdaのテストについて</li>
<li>handlerのスクリプトをローカルで実行できるようにするしか…</li>
<li>ApexやServerlessは実際にlambdaを叩くCLIがある</li>
<li><code>console.log</code>を細かく仕込んでCloudWatchで見るとか</li>
<li>AWSのサービスと連携した場合が結構たいへん</li>
</ul>

<h2 id="web-component-v1">Web Component v1</h2>

<blockquote>
<p>スライド: <a href="http://slides.com/laco/webcomponents-v1-libs#/" title="webcomponents v1 libraries by laco">webcomponents v1 libraries by laco</a></p>
</blockquote>

<ul>
<li>Custom Element v1などがでた</li>
<li>ライブラリ</li>
<li><a href="https://www.polymer-project.org/2.0/docs/about_20" title="Polymer 2.0">Polymer 2.0</a></li>
<li><a href="http://skate.js.org/" title="SkateJS">SkateJS</a></li>
<li>が対応してる</li>
<li>Custom Element v1はクラス継承に対応してる</li>
<li>Polymer 2.0は継承路線</li>
<li>SkateJSはWebComponentとJSXとincrementJSに対応してたり、タグ定義は独自関数

<ul>
<li>自前でpolyfillを持っている</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">らこ「Polymerはbower」<br>一同「bowerか〜〜」 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; 83 (@armorik83) <a href="https://twitter.com/armorik83/status/788341086901022720">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>HTML Imports</li>
<li>PolymerはHTML Import頑張りたい姿勢</li>
<li>SkateJSはHTML Importを捨てている。モジュールの仕組み</li>
<li>Firefox: <a href="https://hacks.mozilla.org/2014/12/mozilla-and-web-components/" title="Mozilla and Web Components: Update ★ Mozilla Hacks – the Web developer blog">Mozilla and Web Components: Update ★ Mozilla Hacks – the Web developer blog</a>

<ul>
<li>Loaderで似たようなことができるかもしれないのに、別途HTML Importやるのが微妙という姿勢</li>
</ul></li>
</ul>

<h3 id="amp">AMP</h3>

<ul>
<li>社内フレームワークとしてのAMP</li>
<li>社内フレームワークとしてのWeb Components</li>
<li>よくJavaScriptとかしらない人が <code>&lt;TPLogin /&gt;</code> とかでログイン画面を作れるとか</li>
<li>AMPのいいところは imageのwidthを指定しないとバリデーションで落ちる</li>
<li>バリデーション通らないとSEO不利なのに皆対応するという強制力</li>
<li>そういった強制力をWeb Componentsで出せる?

<ul>
<li>JSXのpropTypesみたいな?</li>
<li>今のところ仕組みはなさそう</li>
</ul></li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「俺が書いたHTMLのほうがAMPより早い」 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788343509182918657">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3 id="web-components-銀の弾丸">Web Components 銀の弾丸</h3>

<ul>
<li>CSSにとってはやっぱり銀の(ry</li>
<li>CSSのスコープ</li>
<li>けどCSSはレイアウトをするために外から差し込める口が必要

<ul>
<li>テーマ機能とか</li>
<li>CSSむずかしい</li>
</ul></li>
<li>v1ではopenとclose modeとなった

<ul>
<li>どちらもCSS Custom PropertyをI/F的に使えるのは同じ</li>
<li><a href="http://terkel.github.io/why-im-excited-about-native-css-variables/" title="僕がネイティブな CSS 変数にわくわくする理由">僕がネイティブな CSS 変数にわくわくする理由</a></li>
<li>closeは外からさせない</li>
<li>openは外からさせる</li>
<li>コンポーネントをattachShadowする時に確定する仕組みになった</li>
</ul></li>
</ul>

<h2 id="それcssでできるよ">それCSSでできるよ</h2>

<ul>
<li>可変長のリストの話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「Webの技術の中で一番難しいのがCSS」 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; 83 (@armorik83) <a href="https://twitter.com/armorik83/status/788348248188555264">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="セマンティックス">セマンティックス</h2>

<ul>
<li><code>&lt;img src=&quot;jxck.png&quot;&gt;</code> を見てどう思うか

<ul>
<li><code>alt</code></li>
<li><code>title</code></li>
</ul></li>
<li><code>alt</code>を付けるのはスクリーンリーダのためだけではないという話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「セマンティックスはPull型であるべきだ」 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788349959179427840">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><code>title</code>属性の使い道は現在のUAだとツールチップぐらい</li>
<li>セマンティックスが先にあって、それを消費する形が正しい姿</li>
<li>今title属性を消費するクライアントがないからという理由で、titleを省略していくという考えは変なのではという話</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">HTMLとして正しいじゃなくて、ウェブとして正しいかという話になってしまう。<br>なのでやや抽象的で、どこから見た視点なのかという話になる<br> <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788351935640285184">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>HTMLの仕様ではMUSTが正しいとは言えるけど、それ以外はどう見たら正しいのかという指標が難しい</li>
<li>正しさを正しいと評価するツールが欲しいのは分かる</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">仕様上のMUSTだと結構範囲は狭い、ユースケースまで行くとある程度の正しい形は書かれてる <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788353505144602624">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li>HTTP</li>
<li>getでdeleteするな話</li>
<li>Google Botsがクロールして全部getして消える話</li>
<li>Google Botsのために&quot;getでdelete&quot;を避けるじゃない</li>
</ul>

<h2 id="node-interactive-europe">Node Interactive Europe</h2>

<ul>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2016/09/30/123942" title="Node Interactive Europe 2016 に参加しました。 - from scratch">Node Interactive Europe 2016 に参加しました。 - from scratch</a></li>
<li>Node.js 今互換性を気にしすぎで少し停滞してる</li>
<li>またio.js?</li>
<li>Node.jsの競合がでるのが正しい競争の形</li>
<li>Web標準も色々やっていきたい in Node.js</li>
</ul>

<h2 id="prh">prh</h2>

<ul>
<li><a href="http://qiita.com/vvakame/private/5cbb2bf9b6de5899006b" title="prhのWEB+DB PRESS校正ルール最新版を作成した話 - Qiita">prhのWEB+DB PRESS校正ルール最新版を作成した話 - Qiita</a></li>
<li>WEB+DBの<code>prh.yml</code>最新版情報</li>
<li>別でprh.ymlをまとめたリポジトリ</li>
<li><a href="https://github.com/azu/prh.yml" title="azu/prh.yml: A collection of prh.yml">azu/prh.yml: A collection of prh.yml</a></li>
</ul>

<h2 id="preflight">preflight</h2>

<ul>
<li>WHATWG module loaderでCORS強制する?</li>
<li>TODO: この辺に議論されてるURLが入る</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「タイミングのpreflightが届いてなかった」 <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/status/788361447558426625">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="angular1と2">Angular1と2</h2>

<ul>
<li>Angular2は半年に1度メジャーを上げる予定?</li>
<li>Angular1と2で落差がある</li>
<li>信頼を取り戻すのに Angular 4ぐらいまでかかりそう</li>
<li>1を管理画面などの業務系に使っていた人たちが多い</li>
<li>Truly覚悟が必要</li>
</ul>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Angular 2は別のネームスペースの1.0にしなかったから今後一生「Angular 2」って呼ばれそう <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a></p>&mdash; 83 (@armorik83) <a href="https://twitter.com/armorik83/status/788367243264471042">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ありがとうございました！ <a href="https://twitter.com/hashtag/jxck_sushi?src=hash">#jxck_sushi</a> <a href="https://t.co/qf3Durm9wa">pic.twitter.com/qf3Durm9wa</a></p>&mdash; Jxck (@Jxck_) <a href="https://twitter.com/Jxck_/status/788372247043899392">October 18, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
 ]]></content>
 </entry>
 
 <entry>
   <title>AbemaTV Developer Conference 2016のアウトラインメモ</title>
   <link href="http://efcl.info/2016/10/15/abematv-2016/"/>
   <updated>2016-10-15T20:46:00+09:00</updated>
   <id>http://efcl.info/2016/10/15/abematv-2016</id>
   <content type="html"><![CDATA[ <p><a href="http://developer.abema.io/" title="AbemaTV Developer Conference 2016">AbemaTV Developer Conference 2016</a>に参加してきたメモ。
途中でメモが吹っ飛んだので最初のほうがありません。</p>

<h2 id="イマドキの-web-サービス運営で突き当たるフロントエンド課題とつらみ"><a href="http://developer.abema.io/#session_2_b" title="イマドキの Web サービス運営で突き当たるフロントエンド課題とつらみ">イマドキの Web サービス運営で突き当たるフロントエンド課題とつらみ</a></h2>

<blockquote>
<p><a href="https://speakerdeck.com/ahomu/kai-fa-shang-falseyang-nayi-cun-falseturamito-fresh-by-abematv-falsehua" title="開発上の様々な依存のつらみと FRESH! by AbemaTV の話 // Speaker Deck">開発上の様々な依存のつらみと FRESH! by AbemaTV の話 // Speaker Deck</a></p>
</blockquote>

<ul>
<li>ahomuさんすごい！！！</li>
</ul>

<hr>

<h2 id="リニア放送型動画サービスの-web-フロントエンド"><a href="http://developer.abema.io/#session_3_b" title="リニア放送型動画サービスの Web フロントエンド">リニア放送型動画サービスの Web フロントエンド</a></h2>

<blockquote>
<p><a href="http://www.slideshare.net/ygoto3q/web-67207768" title="リニア放送型動画サービスの  Web フロントエンド">リニア放送型動画サービスの  Web フロントエンド</a></p>
</blockquote>

<ul>
<li>動画のストリーミング配信について</li>
</ul>

<hr>

<h2 id="flux-with-rxswift"><a href="http://developer.abema.io/#session_5_b" title="Flux with RxSwift">Flux with RxSwift</a></h2>

<ul>
<li>FluxをRxSwiftで実装する話</li>
<li><a href="https://github.com/dekatotoro/FluxWithRxSwiftSample" title="dekatotoro/FluxWithRxSwiftSample">dekatotoro/FluxWithRxSwiftSample</a></li>
</ul>

<hr>

<h2 id="デザイナーとエンジニアの境界線"><a href="http://developer.abema.io/#session_7_b" title="デザイナーとエンジニアの境界線">デザイナーとエンジニアの境界線</a></h2>

<ul>
<li>デザイン</li>
<li>人の話</li>
<li>AbemaTC</li>
<li>社長からの要望

<ul>
<li>すぐ再生</li>
<li>ザッピング再生</li>
<li>受身的な再生</li>
</ul></li>
<li>最初のモック

<ul>
<li>縦画面</li>
<li>pixate

<ul>
<li>サービス終了.. <a href="http://www.pixate.com/">http://www.pixate.com/</a></li>
</ul></li>
<li>モックを移して夕会で共有</li>
<li>テレビっぽくない</li>
<li>モックは250個</li>
</ul></li>
<li>結果

<ul>
<li>16:9の横画面</li>
<li>皆の意見が反映させているので納得感がある</li>
</ul></li>
<li>モック見ながらの話

<ul>
<li>ステータスバーはwifi、バッテリーが気になるのであったほうがいい</li>
<li>要素が多くて多くて分かりにくい</li>
</ul></li>
<li>デザイン -&gt; エンジニア

<ul>
<li>Sketchのファイルをエンジニアに渡す</li>
<li>エンジニアがsketchを開いてマージンとかを見る</li>
</ul></li>
<li>アイコンの書き出し

<ul>
<li>Sketchからエクスポート</li>
<li>いい感じに最適化までやってくれるスクリプト</li>
</ul></li>
<li>デザインガイドみたいのは用意しなかった</li>
<li>アニメーションはPixateで

<ul>
<li>アニメーションの種類</li>
<li>秒数とかも共有できる</li>
<li>デザイナーが管理する</li>
</ul></li>
</ul>

<h3 id="デザイナーがコードに触ってみて感じたこと">デザイナーがコードに触ってみて感じたこと</h3>

<ul>
<li>Atomic Design</li>
<li>コンポーネント管理</li>
<li>GitHubを使う</li>
</ul>

<h2 id="gke-at-abematv"><a href="http://developer.abema.io/#session_8_a" title="GKE at AbemaTV">GKE at AbemaTV</a></h2>

<ul>
<li>GKEを選んだ理由</li>
<li>設計</li>
<li>GKE is

<ul>
<li>Google Container Engine</li>
<li>Kubernetesをフルマネージメントサービス</li>
</ul></li>
<li>Kubernetes is

<ul>
<li>Dockerのコンテナマネージメントツール</li>
<li>MasterとMinionのノードに別れる</li>
</ul></li>
<li>AbemaTV on GKE

<ul>
<li>フルフルGoogleプラットフォーム</li>
</ul></li>
<li>GKEを選んだ理由

<ul>
<li>GKEがGAに</li>
<li>活発なアップデートなどが理由</li>
<li>マイクロサービスアーキテクチャとの親和性</li>
</ul></li>
<li>RequestとLimits

<ul>
<li>RequestsはPod起動時に必要なリソース</li>
<li>LimitsはPodsのリソース制限</li>
<li>この2つの開きがあると高負荷時にリソースが枯渇する</li>
<li>Podスケール時にスケジュールしていた場合にLimitを超える場合もある</li>
</ul></li>
<li>1クラスタ × Nサービス AmebaTV

<ul>
<li>メリット

<ul>
<li>追加機能でインフラの準備不要</li>
<li>運用コストを低減

<ul>
<li>ローカルホストのポート指定で繋がる</li>
</ul></li>
</ul></li>
<li>デメリット

<ul>
<li>リソース消費の見極めが複雑化</li>
<li>Podの冗長化に難</li>
</ul></li>
</ul></li>
<li>Docker Image

<ul>
<li>Alpine Linux

<ul>
<li>Docker向きの軽量OS</li>
</ul></li>
<li>デプロイ頻度が少ないとかパッケージが足りないのはUbuntu</li>
</ul></li>
<li>lubectl

<ul>
<li>リソース作成

<ul>
<li><code>kubectrl create</code></li>
</ul></li>
<li>設定内容の更新

<ul>
<li><code>kubectrl apply</code></li>
</ul></li>
<li>Roling-Update

<ul>
<li>各Podをローリングでアップデートする</li>
<li>途中で失敗すると、中途半端な状態なPodが残る</li>
</ul></li>
</ul></li>
<li><code>kubetool</code>

<ul>
<li><code>kubectl</code>をラップした補助ツール</li>
<li><a href="https://github.com/abema/kubetool" title="abema/kubetool: Kubernetes deployment tools">abema/kubetool: Kubernetes deployment tools</a></li>
<li>Podを1台だけ最新へ -&gt; 他のPodへ反映のふろー</li>
</ul></li>
<li>監視/ログ

<ul>
<li>標準で取れるのはリソース状況のみ</li>
<li>Podの標準出力はLoggingに流れる =&gt; フィルターして監視</li>
</ul></li>
<li><code>kube-ui</code>

<ul>
<li>各コンポーネントの情報一覧</li>
<li>最近はリソースの編集とかもできる</li>
</ul></li>
<li>Terraformとの別離

<ul>
<li>編集するとすべて再作成される</li>
<li>無停止でやりにくい</li>
</ul></li>
<li>ServiceのIPに接続できない問題

<ul>
<li>v1.2.0でのバグ</li>
</ul></li>
<li>Nodeアップグレード時に問題

<ul>
<li>1台ずつアップグレードされるが、Podが先に落ちないためNodeに繋がらないとう問題がおきた</li>
</ul></li>
<li>GKEの感想

<ul>
<li>Docker導入の敷居が低い</li>
<li>デプロイ簡単</li>
<li>リソース調整にはコツがある</li>
<li>DevOps</li>
</ul></li>
</ul>

<h2 id="abematvの開発スタイル"><a href="http://developer.abema.io/#session_10_a" title="AbemaTVの開発スタイル">AbemaTVの開発スタイル</a></h2>

<ul>
<li>FRESHの立ち上げ</li>
<li>AbemaTVのリリース後の運用</li>
<li>インセプションデッキ

<ul>
<li>コンセプトイメージをまずつくった</li>
</ul></li>
<li>スプリント

<ul>
<li>2週間ぐらいを区切りにしてタイムボックスにいれてｒ</li>
<li>朝回で確認</li>
<li>スプリントレビューで成果の確認</li>
<li>KPTを振り返り</li>
</ul></li>
<li>チーム人数に適応する

<ul>
<li>そのままベースを使うわけじゃない</li>
<li>FRESH

<ul>
<li>開発20人前後</li>
</ul></li>
<li>AbemaTV

<ul>
<li>開発30人以上</li>
</ul></li>
<li>スクラムチームは15人ぐらいが限界</li>
<li>チームの分解が必要</li>
</ul></li>
<li>チームの分解

<ul>
<li>クライアント、サーバ、iOS、Android、デザイン</li>
<li>規模が大きくなるとヨコの連携が弱くなる</li>
<li>機能毎にプロジェクトを作る人をアサインすることでヨコの連携を補強</li>
</ul></li>
<li>FRESH 縦から横事件

<ul>
<li>リリース予定まで2スプリントだった</li>
<li>残りの機能をリリーススコープから外して横対応にした</li>
<li>デザインスプリント(デザイン合宿)をして認識合わせをした</li>
</ul></li>
<li>人に適応する

<ul>
<li>開発者個人でも課題が異なる</li>
<li>S1-S6の評価制度を意味づけを</li>
<li>評価制度を使って役割を明確化</li>
<li>自走できる人は権限を持つ</li>
</ul></li>
<li>自走

<ul>
<li>自走できる人は勝手に課題を見つけて対応する</li>
<li>計画する前に手を動いて追わせている場合がある</li>
<li>管理しすぎるとパフォーマンスが落ちることがある</li>
</ul></li>
<li>属人化

<ul>
<li>個人に依存するので属人化する</li>
<li>開発速度 &gt; 属人化</li>
</ul></li>
</ul>

<h2 id="炎上プロジェクト立て直しの風景"><a href="http://developer.abema.io/#session_12_a" title="炎上プロジェクト立て直しの風景">炎上プロジェクト立て直しの風景</a></h2>

<ul>
<li>炎上プロジェクトの立て直しの事例</li>
<li>権力者の介入がある風景

<ul>
<li>iOSとAndroidの仕様のズレがある</li>
<li>チーフプロデューサーが修正依頼がiOSのエンジニアのみに来る</li>
<li>=&gt; iOSとAndroidの仕様がずれる</li>
<li>やること

<ul>
<li>仕様はプロヂューサーとチーフプロデューサーで決める</li>
<li>直接エンジニアにはいかないはず</li>
<li>プロヂューサーを対話に同席させる</li>
</ul></li>
<li>学び

<ul>
<li>意思決定と情報の集約は一元化する</li>
<li>権力者とは上手く付きあう</li>
</ul></li>
</ul></li>
<li>要件がいつの間にか進化する風景

<ul>
<li>ヒアリングしてると要件が変わってきてることに気づいた</li>
<li>クライアントのひらめきにより要件が変わった</li>
<li>=&gt; 在庫連動したレコメンドサービスになってしまった</li>
<li>本来の目的に戻した</li>
<li>スコープは明確にすることが大事</li>
</ul></li>
<li>大規模プロモの直前なのにシステムが落ちまくっている風景

<ul>
<li>1.5万キャパを100万同時接続にするという風景</li>
<li>SNS認証のバックアッププランがない</li>
<li>特定機能の障害がひきずられて全体がダウンする</li>
<li>プロモが成功しても100万同時接続は行きそうになり

<ul>
<li>CM計画とアクセス傾向から</li>
</ul></li>
<li>プロジェクトゴールの再設定

<ul>
<li>過剰要件は落とす</li>
</ul></li>
</ul></li>
<li>最悪の問題とは

<ul>
<li>ゴールがブレる、終わりが見えない</li>
<li>チームワークの崩壊</li>
</ul></li>
<li>炎上 = 祭り</li>
<li>Q. AbemaTVは祭りにならなかったとのことですが、どういう工夫が?</li>
<li>A. いややっぱり祭りでした。</li>
</ul>
 ]]></content>
 </entry>
 
 <entry>
   <title>pdf.jsなPDFビューアアプリをElectronで作った</title>
   <link href="http://efcl.info/2016/10/12/mu-pdf-viewer/"/>
   <updated>2016-10-12T20:39:00+09:00</updated>
   <id>http://efcl.info/2016/10/12/mu-pdf-viewer</id>
   <content type="html"><![CDATA[ <p>タイトルどおりですが、FirefoxのPDFビューアをスタンドアローン化したようなアプリを作りました。</p>

<ul>
<li><a href="https://github.com/azu/mu-pdf-viewer" title="azu/mu-pdf-viewer: PDF viewer on electron.">azu/mu-pdf-viewer: PDF viewer on electron.</a></li>
</ul>

<p>特徴は次の通りです。</p>

<ul>
<li><a href="https://github.com/mozilla/pdf.js" title="PDF.js">PDF.js</a>ベース</li>
<li>J, Kでスクロールなどいじっています</li>
<li>Drag and Dropをサポートしてます</li>
</ul>

<p><img src="https://monosnap.com/file/BfCnnmtQZhiRNDAfahDjTtzQpy4nss.png" alt="screenshot"></p>

<h2 id="install">Install</h2>

<p>npm でインストールするか</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install mu-pdf-viewer -g
</code></pre></div>
<p>バイナリをダウンロードして使えます(OS Xのみ)</p>

<ul>
<li><a href="https://github.com/azu/mu-pdf-viewer/releases/latest">https://github.com/azu/mu-pdf-viewer/releases/latest</a></li>
</ul>

<p>Travis CIとかでelectronを自動ビルドするのがかなり難しくなったので、自分用にOS X版のみバイナリを作ってます。</p>

<p>READMEにその他の環境のバイナリの作り方を書いてあります。</p>

<h2 id="usage">Usage</h2>

<p>npmでインストールした場合はCLIから起動できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ mu-pdf-viewer &lt;pdf-file-path&gt;
</code></pre></div>
<p>アプリの場合は普通にPDFファイルを開いたり、D&amp;Dすれば起動します。</p>

<h2 id="目的">目的</h2>

<p>ショートカットが自分好みにカスタマイズできるPDFビューアが少なかったので作りました。
具体的には0.3画面分ぐらいスクロールするショートカットを持っているアプリが殆どなかったというのがメインです。</p>

<p>ショートカットが自由なPDFビューアは他にないのかな?</p>

<p>アプリ自体は、<a href="https://github.com/almin/almin" title="Almin">Almin</a>と<a href="https://facebook.github.io/react/" title="React">React</a>を使ってDDD風味で書いています。</p>
 ]]></content>
 </entry>
 
 <entry>
   <title>JavaScriptの配列のパターン</title>
   <link href="http://efcl.info/2016/10/11/array-patterns/"/>
   <updated>2016-10-11T20:44:00+09:00</updated>
   <id>http://efcl.info/2016/10/11/array-patterns</id>
   <content type="html"><![CDATA[ <p>JavaScriptの配列をどう解説するかを考えていて、配列って普段どういう風に使ってるけ?みたいなことを書き出してみました。</p>

<ul>
<li><a href="https://github.com/asciidwango/js-primer/issues/49" title="Arrayオブジェクト · Issue #49 · asciidwango/js-primer">Arrayオブジェクト · Issue #49 · asciidwango/js-primer</a></li>
</ul>

<p>皆さんは配列をどう使いますか?</p>

<h2 id="配列の作成">配列の作成</h2>

<p>配列の作成には配列リテラル（<code>[]</code>）を使います。
配列リテラルには初期値も指定できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">emptyArray</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 空の配列を作成</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// 値をもった配列を作成</span>
</code></pre></div>
<p>Arrayオブジェクトを<code>new</code>演算子でインスタンス化する方法は基本的には使いません。
こちらは配列リテラルとは異なり、初期値ではなく配列の長さを指定し、<strong>疎な配列</strong>を作ります。</p>

<p>疎な配列とは、配列の要素が空となっているもので、隙間を持った配列のことを言います。</p>

<p>JavaScriptでは、配列は固定長ではなく可変長のみとなっていることや、
初期値を指定できないため、<code>new Array</code>で疎な配列を作る意味は少ないです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 10個分のlengthを持った疎の配列</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="c1">// 中身が空なので、値を持っていない</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="c1">// =&gt; false</span>
</code></pre></div>
<p>バイナリデータを扱うようなパフォーマンスが求められるケースは、
<code>Array</code>（配列）ではなく<code>TypedArray</code>（型付き配列）を利用します。</p>

<p><code>Array</code>（配列）と<code>TypedArray</code>（型付き配列）は似ていますが、
基本的に異なる目的を持ったものなので、ここでは<code>Array</code>（配列）についてを扱います。</p>

<h2 id="配列の要素を削除する">配列の要素を削除する</h2>

<p>delete演算子で配列の要素を削除することができますが、
注意点としては値を消すだけで、消した値を詰めるような処理は行いません。
つまり、<code>delete</code>した結果として疎な配列ができあがります。</p>

<p>次のように、<code>length</code>が<code>3</code>の配列の1番目の要素を消しても、
<code>length</code>は<code>3</code>のままとなります。
<code>delete</code>演算子では、自動的に削除された配列の要素を詰めません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 3</span>
<span class="k">delete</span> <span class="nx">array</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// =&gt; [1, , 3]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 3</span>
</code></pre></div>
<p>一方、<code>Array#splice</code>メソッドを利用すると、削除した要素を自動で詰めることができます。
<code>Array#splice</code>メソッドは、<code>index</code>番目から<code>削除する数</code>だけ要素を取り除き、必要ならば要素を同時に追加できます。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">array.splice(index, 削除する数, [追加する要素][, ..., 追加する要素]);
</code></pre></div>
<p>つまり、配列の1番目の要素を削除するには、1番目から1つの要素を削除するという指定をする必要があります。
このとき、削除した要素は自動で詰められるため、疎な配列にはなりません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 3</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// =&gt; [1, 3]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// =&gt; 2</span>
</code></pre></div>
<p>この<code>Array#splice</code>メソッドをImmutableにする場合は結構小難しい書き方になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">immutableSplice</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">deleteCount</span><span class="p">,</span> <span class="p">...</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[...</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">start</span><span class="p">),</span> <span class="p">...</span><span class="nx">items</span><span class="p">,</span> <span class="p">...</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">start</span> <span class="o">+</span> <span class="nx">deleteCount</span><span class="p">)];</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="http://vincent.billey.me/pure-javascript-immutable-array" title="Pure javascript immutable arrays">Pure javascript immutable arrays</a></li>
</ul>

<h2 id="arrayの要素を全削除">Arrayの要素を全削除</h2>

<p>配列の要素をすべて削除するには <code>length</code> に <code>0</code>を設定する方法があります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>仕様的には代入された<code>length</code>からはみ出ている要素をすべて <code>[[Delete]]</code> とするという処理になります。</p>

<ul>
<li><a href="http://www.ecma-international.org/ecma-262/7.0/#sec-arraysetlength" title="ArraySetLength (A, Desc)">ArraySetLength (A, Desc)</a></li>
</ul>

<p><code>Array#splice</code>やそもそもその要素を削除するひつようがないなら、空の配列で変数を上書きするでもよいはずです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
<span class="c1">// or</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div>
<p>次の２つは<code>array</code>という変数を参照の値を渡しているものがあるかで意味が異なります。
次のように<code>length</code>を変更した場合は、コールバック関数に渡した配列も影響を受けます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">callbck</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">callback</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>
    <span class="c1">// array = [];</span>
    <span class="c1">// or</span>
    <span class="c1">// array.length = 0;</span>
<span class="p">}</span>

<span class="nx">doSomething</span><span class="p">((</span><span class="nx">array</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<h2 id="配列は参照型">配列は参照型</h2>

<p>配列はプリミティブな値ではなくオブジェクトなので、変数に入れると参照型の値になります。
次にように、配列を参照する<code>a</code>という変数の値を<code>b</code>に代入しても、<code>b</code>には配列の参照が入るだけです。
そのため、<code>a</code>に変更を加えると、<code>b</code>も同じ配列を参照しているため影響を受けます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3, 4]</span>
</code></pre></div>
<p>一方、プリミティブな値である文字列では、<code>b</code>に<code>a</code>を代入する際に<code>a</code>の値がコピーされます。
つまり、変数<code>a</code>に変更を加えても、コピーされた値をもつ変数<code>b</code>は影響を受けません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s2">&quot;string&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// =&gt; &quot;string&quot;</span>
</code></pre></div>
<p>StringやNumberなどのプリミティブな値は、作成後に値そのものの状態は変更できません。
このような特性をもつものをImmutableと呼び、StringなどはImmutableです。</p>

<p>一方、ArrayやObjectなどのプリミティブな値でないものは、作った後も状態を変更できるためMutableと呼ばれます。</p>

<p>詳しくは<a href="https://asciidwango.github.io/js-primer/basic/data-type/" title="データ型とリテラル · JavaScriptの入門書 #jsprimer">データ型とリテラル · JavaScriptの入門書 #jsprimer</a>を参照してください。</p>

<h2 id="arrayのコピー">Arrayのコピー</h2>

<p>配列をshallow copyする流派としてconcatとsliceがあります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">copyC</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">copyS</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="o">!==</span> <span class="nx">copyC</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span> <span class="o">!==</span> <span class="nx">copyS</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copyC</span> <span class="o">!==</span> <span class="nx">copyS</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<ul>
<li><a href="http://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.concat">http://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.concat</a></li>
<li><a href="http://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.slice">http://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.slice</a></li>
</ul>

<p><code>Array#concat</code>メソッドと<code>Array#slice</code>メソッドは意図して配列以外を<code>this</code>として指定できるようになっています。
そのため、Array-likeなオブジェクトを<code>this</code>にして、配列にする方法としても利用されています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">));</span>
</code></pre></div>
<p>しかし、ES2015からは<code>Array.from</code>メソッドという、Array-likeを配列にする適切なメソッドがあります。
あとで詳しく解説しますが、<code>Array.from</code>メソッドのほうが直感的なのでこちらを利用して変換した方がよいです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">));</span>
</code></pre></div>
<ul>
<li><a href="http://www.ecma-international.org/ecma-262/7.0/#sec-array.from">http://www.ecma-international.org/ecma-262/7.0/#sec-array.from</a></li>
</ul>

<h2 id="配列の末尾に要素を追加">配列の末尾に要素を追加</h2>

<p>末尾に要素を追加する場合は <code>Array#push</code> が利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3, 4]</span>
</code></pre></div>
<p><code>Array#push</code>はmutableな操作なので、immutableにやりたい場合もあります。
Immutableにやりたい場合は、配列のコピーの最後に要素を追加すればよいはずです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">newArray</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">array</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArray</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3, 4]</span>
</code></pre></div>
<p>もちろん<code>Array#slice</code>などでコピーした配列にpushするでも問題ありません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">newArray</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
<span class="nx">newArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArray</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3, 4]</span>
</code></pre></div>
<p>先頭に要素を追加する場合も、<code>Array#push</code>が<code>Array#unshift</code>に変わるだけで同じです。</p>

<h2 id="new-array-fill">new Array + fill</h2>

<p><code>new Array(len)</code> で指定した<code>length</code>の<strong>疎な配列</strong>を作ることができます。
しかし、この配列の要素は<code>undefined</code>が値として入っているわけではありません。
単純に <code>array[0]</code> にはキーそのものがないため、 <code>undefined</code>が返ってきています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">10</span><span class="p">);</span><span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
<span class="c1">// hasOwnPropertyでプロパティを持っているかで確認できる</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// =&gt; true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// =&gt; false</span>
</code></pre></div>
<p>配列もオブジェクトであるため、疎な配列は次のようなオブジェクトであるといえます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// new Array(10)</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">length</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span>
<span class="p">};</span>
<span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// =&gt; undefined</span>
</code></pre></div>
<p>これにより<code>new Array</code>では配列中の値がないので<code>Array#map</code>などが意図した挙動にはなりません
<code>Array#map</code>などは配列中の値がない添字をスキップします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">index</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span><span class="c1">// =&gt; true</span>
</code></pre></div>
<p>そのため、これを回避する場合は明示的に値を入れた配列を使うか、
<code>Array.from</code>を使うことで<strong>疎な配列</strong>も扱えます。</p>

<p>明示的に値を埋める、いわゆる0埋めのような操作は<code>Array#fill</code>を使うのが簡単です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">index</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">===</span> <span class="mi">9</span><span class="p">);</span><span class="c1">// =&gt; true</span>
</code></pre></div>
<p><code>Array.from</code>メソッドはArray-likeやiterableなオブジェクトから新しく配列を作る静的メソッドです。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from" title="Array.from() - JavaScript | MDN">Array.from() - JavaScript | MDN</a></li>
</ul>

<p>先ほどの<code>new Array</code>で作った疎な配列もlengthは持っているので、for文などで走査することはできます。
<code>Array.from</code>は、<code>arguments</code>のようなArray-likeや疎な配列も列挙でき かつ <code>Array#map</code>のような仕組みを持っています。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">index</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">===</span> <span class="mi">9</span><span class="p">);</span><span class="c1">// =&gt; true</span>
</code></pre></div>
<p>他にも、Iterableを配列にできるので、Mapオブジェクトを配列へ変換するときにも利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">map</span><span class="p">));</span><span class="c1">// =&gt; [[1, 2], [2, 4], [4, 8]]</span>
</code></pre></div>
<p>これは、Spread Operator（<code>...</code>）を使うことでも同様のことが行なえます。
<code>Array.from</code>は第二引数でマッピング方法を指定できるのでより柔軟な処理が書けるという違いがあります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([...</span><span class="nx">map</span><span class="p">]);</span><span class="c1">// =&gt; [[1, 2], [2, 4], [4, 8]]</span>
</code></pre></div>
<h2 id="flatten">flatten</h2>

<p>配列の入れ子をflattenにしたいというケース。</p>

<p><code>[[1], [2], [3]]</code> =&gt; <code>[1, 2, 3]</code></p>

<p>concatを使った方法が有名です。</p>

<p><code>Array#concat</code>を使った方法ではshallowなflattenを行えます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">concat</span><span class="p">.</span><span class="nx">apply</span><span class="p">([],</span> <span class="nx">array</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">]];</span>
<span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</code></pre></div>
<p>再帰的にやることでdeepなflattenができます。
もう一つのflattenを行う方法として、<code>...</code> spread operatorで配列を展開してしまう方法です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">curr</span><span class="p">)</span> <span class="o">?</span> <span class="p">[...</span><span class="nx">prev</span><span class="p">,</span> <span class="p">...</span><span class="nx">flatten</span><span class="p">(</span><span class="nx">curr</span><span class="p">)]</span> <span class="o">:</span> <span class="p">[...</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">];</span>
    <span class="p">},</span> <span class="p">[]);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">]];</span>
<span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</code></pre></div>
<p><a href="https://bterlson.github.io/proposal-flatMap/" title="Array.prototype.flatMap &amp;amp; Array.prototype.flatten">Array.prototype.flatMap &amp; Array.prototype.flatten</a> ProposalはStage 1なので、将来<code>Array#flatten</code>メソッドが利用できる可能性もあります。</p>

<h2 id="entriesで何か">entriesで何か</h2>

<p>オブジェクをループ時に key と value のどちらも必要な場合は、<code>Object.entries</code>メソッドを利用すると簡単です。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">key1</span><span class="o">:</span> <span class="s2">&quot;value1&quot;</span><span class="p">,</span>
    <span class="nx">key2</span><span class="o">:</span> <span class="s2">&quot;value2&quot;</span><span class="p">,</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">keyValues</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">object</span><span class="p">).</span><span class="nx">map</span><span class="p">(([</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">key</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">keyValues</span><span class="p">);</span> <span class="c1">// =&gt; [&quot;key1:value1&quot;, &quot;key2:value2&quot;];</span>
</code></pre></div>
<p>keyだけなら<code>Object.keys</code>メソッド、valueだけなら<code>Object.values</code>メソッドが利用できます。</p>

<h2 id="indexof-gt-findindex">indexOf =&gt; findIndex</h2>

<p>配列から指定した要素を見つける場合に <code>indexOf</code> だと<code>===</code>での一致でしか見つけることができません。
そのため、オブジェクトのプロパティを見て探索する場合には利用できません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">}];</span>
<span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span> <span class="c1">// =&gt; -1</span>
</code></pre></div>
<p>代わりにES2015からは<code>Array#findIndex</code> が利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">}];</span>
<span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span> <span class="c1">// =&gt; 0</span>
</code></pre></div>
<h2 id="find-gt-some">find =&gt; some</h2>

<p>配列の中に、判定に一致するものを含んでいるかという真偽値が欲しいのなら、<code>Array#some</code>が利用できます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">}];</span>
<span class="kd">var</span> <span class="nx">isContained</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">isContained</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<h2 id="indexof-gt-includes">indexOf =&gt; includes</h2>

<p>配列が指定した要素を含んでいるかに <code>array.indexOf(value) !=== -1</code> を使ったイディオムがあります。
先ほども書いたように<code>indexOf</code>は<code>===</code>による比較なので、<code>Array#some</code>で書くと次のような処理になります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">containB</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">target</span> <span class="o">===</span> <span class="nx">item</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">containB</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>これを<code>Array#indexOf</code>を使えば1行で書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">containB</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">containB</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<p>しかし、ES2016からは<code>Array#includes</code>が利用できるので、このイディオムを使う必要はありません。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">containB</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">containB</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<h2 id="splice-gt">splice =&gt; ...</h2>

<p><code>Array#splice</code>はmutableな操作になっています。
そのため、配列から n 番目の要素を削除した配列をImmutableに作るのは結構面倒です。</p>

<p>mubtaleでよいなら、次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">deleteItemAtIndex</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">// spliceの返り値は削除した値</span>
    <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">deleteItemAtIndex</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// =&gt; [1, 3]</span>
</code></pre></div>
<p>これをImmutableする場合、Spread Operatorと<code>Array#slice</code>を使うことで次のように書くことができます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">deleteItemAtIndex</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 常に新しい配列を返す</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="p">...</span><span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">index</span><span class="p">),</span>
        <span class="p">...</span><span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">];</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">deleteItemAtIndex</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span><span class="c1">// =&gt; [1, 3]</span>
</code></pre></div>
<h2 id="配列から値を取り出す">配列から値を取り出す</h2>

<p>テストなどで、指定して位置の値を取り出したいときがあります。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sortByKey</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>これをテストした時には、返り値の0番目の値を取り出してみたいということが多いです。
この場合に、Destructuringを使い値を取り出すと変数にまとめて取り出せます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sortByKey</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">().</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span> <span class="s2">&quot;key&quot;</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;key&quot;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}];</span>
<span class="kd">var</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nx">sortByKey</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="s2">&quot;key&quot;</span><span class="p">);</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sorted</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span> <span class="o">===</span> <span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// =&gt; true</span>
</code></pre></div>
<h2 id="join">join</h2>

<p>配列を文字列にする方法はさまざまな方法があります。
単純な方法としては、<code>Array#join</code>メソッドを利用することです。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="err">区切り文字</span><span class="p">);</span>
</code></pre></div>
<p><code>Array#join</code>メソッドでは配列を指定した<code>区切り文字</code>で結合した文字列を作成してくれます。
<code>区切り文字</code>を指定しなかった場合は、デフォルト値として<code>,</code>が<code>区切り文字</code>として指定されます。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">lg</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span><span class="c1">// =&gt; &quot;1,2,3&quot;</span>
</code></pre></div>
<h2 id="ループと反復処理">ループと反復処理</h2>

<p><code>Array#map</code>メソッドなどのループと反復処理については<a href="https://asciidwango.github.io/js-primer/basic/loop/" title="ループと反復処理 · JavaScriptの入門書 #jsprimer">ループと反復処理 · JavaScriptの入門書 #jsprimer</a>を参照してください。</p>

<h2 id="空の配列を返す">空の配列を返す</h2>

<p>配列を返すAPIは、返す値がないときも空の配列を返すようにします。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">getSomeList</span><span class="p">(){</span>
    <span class="k">if</span><span class="p">(</span><span class="err">返すものがないとき</span><span class="p">){</span>
        <span class="k">return</span> <span class="p">[];</span>
    <span class="p">}</span>
    <span class="c1">// かえすものがあるとき</span>
<span class="p">}</span>
</code></pre></div>
<p>こうすることで、このAPIを利用する側はnullチェックをしなくても良くなります。
<code>null</code>や<code>undefined</code>を返してしまうと、このAPIを使うたびに<code>null</code>チェックが必要となります。
<code>null</code>チェックが不要ならば不要な形にした方が良いはずです。</p>

<h2 id="おまけ">おまけ</h2>

<p>Arrayのメソッドで破壊的なものとそうでないものをまとめたもの</p>

<script src="https://gist.github.com/azu/30b1ff6831c3bbf7fbd5501d6a2bdfb0.js"></script>
 ]]></content>
 </entry>
 

</feed>
